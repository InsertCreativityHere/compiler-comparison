//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `DBTypes.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __DBTypes_h__
#define __DBTypes_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <SubscriberRecord.h>
#include <LLURecord.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 9
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace IceStormElection
{

using StringLogUpdateDict = ::std::map<::std::string, LogUpdate>;

}

namespace IceStorm
{

using SubscriberRecordDict = ::std::map<SubscriberRecordKey, SubscriberRecord>;

struct AllData
{
    ::IceStormElection::StringLogUpdateDict llus;
    ::IceStorm::SubscriberRecordDict subscribers;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::IceStormElection::StringLogUpdateDict&, const ::IceStorm::SubscriberRecordDict&> ice_tuple() const
    {
        return std::tie(llus, subscribers);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::IceStorm::AllData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::IceStorm::AllData, S>
{
    static void read(S* istr, ::IceStorm::AllData& v)
    {
        istr->readAll(v.llus, v.subscribers);
    }
};

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

}

namespace IceStormElection
{

typedef ::std::map< ::std::string, LogUpdate> StringLogUpdateDict;

}

namespace IceStorm
{

typedef ::std::map<SubscriberRecordKey, SubscriberRecord> SubscriberRecordDict;

struct AllData
{
    ::IceStormElection::StringLogUpdateDict llus;
    ::IceStorm::SubscriberRecordDict subscribers;
};

}

namespace IceProxy
{

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::IceStorm::AllData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::IceStorm::AllData, S>
{
    static void write(S* ostr, const ::IceStorm::AllData& v)
    {
        ostr->write(v.llus);
        ostr->write(v.subscribers);
    }
};

template<typename S>
struct StreamReader< ::IceStorm::AllData, S>
{
    static void read(S* istr, ::IceStorm::AllData& v)
    {
        istr->read(v.llus);
        istr->read(v.subscribers);
    }
};

}
/// \endcond

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
