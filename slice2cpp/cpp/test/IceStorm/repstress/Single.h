//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Single.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Single_h__
#define __Single_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Test
{

class Single;
class SinglePrx;

using SinglePrxPtr = ::std::optional<SinglePrx>;

}

namespace Test
{

}

namespace Test
{

class SinglePrx : public ::Ice::Proxy<SinglePrx, ::Ice::ObjectPrx>
{
public:

    void event(int i, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> eventAsync(int i, const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    eventAsync(int i,
               ::std::function<void()> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_event(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, int, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit SinglePrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    SinglePrx(const SinglePrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    SinglePrx(SinglePrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    SinglePrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    SinglePrx& operator=(const SinglePrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    SinglePrx& operator=(SinglePrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static SinglePrx _fromReference(::IceInternal::ReferencePtr ref) { return SinglePrx(::std::move(ref)); }

protected:

    SinglePrx() = default;

    explicit SinglePrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

}

namespace Test
{

class Single : public virtual ::Ice::Object
{
public:

    using ProxyType = SinglePrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void event(int i, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_event(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

/// \cond INTERNAL
namespace Test
{

using SinglePtr = ::std::shared_ptr<Single>;

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
