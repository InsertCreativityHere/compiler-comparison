//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Event.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Event_h__
#define __Event_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Test
{

class EventPrx;

using EventPrxPtr = ::std::optional<EventPrx>;

}

namespace Test
{

class EventPrx : public ::Ice::Proxy<EventPrx, ::Ice::ObjectPrx>
{
public:

    void pub(const ::std::string& data, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> pubAsync(const ::std::string& data, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    pubAsync(const ::std::string& data,
             ::std::function<void()> response,
             ::std::function<void(::std::exception_ptr)> ex = nullptr,
             ::std::function<void(bool)> sent = nullptr,
             const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_pub(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit EventPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    EventPrx(const EventPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    EventPrx(EventPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    EventPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    EventPrx& operator=(const EventPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    EventPrx& operator=(EventPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static EventPrx _fromReference(::IceInternal::ReferencePtr ref) { return EventPrx(::std::move(ref)); }

protected:

    EventPrx() = default;

    explicit EventPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

}

namespace Test
{

class Event : public virtual ::Ice::Object
{
public:

    using ProxyType = EventPrx;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void pub(::std::string data, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_pub(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

using EventPtr = ::std::shared_ptr<Event>;

}

#include <IceUtil/PopDisableWarnings.h>
#endif
