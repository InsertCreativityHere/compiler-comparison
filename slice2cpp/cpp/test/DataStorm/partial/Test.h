// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

// clang-format off

#ifndef Test_h_
#define Test_h_

#include <Ice/PushDisableWarnings.h>
#include <Ice/Ice.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Test
{
    class Stock;
    using StockPtr = ::std::shared_ptr<Stock>;

}

namespace Test
{

class Stock : public Ice::Value
{
public:
    /// Default constructor.
    Stock() noexcept = default;

    /// One-shot constructor to initialize all data members.
    Stock(float price, float lastBid, float lastAsk) noexcept :
        price(price),
        lastBid(lastBid),
        lastAsk(lastAsk)
    {
    }

    /// Obtains the Slice type ID of this value.
    /// @return The fully-scoped type ID.
    static const char* ice_staticId() noexcept;

    [[nodiscard]] const char* ice_id() const noexcept override;

    /// Obtains a tuple containing all of the value's data members.
    /// @return The data members in a tuple.
    [[nodiscard]] std::tuple<const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(price, lastBid, lastAsk);
    }

    /// Creates a shallow polymorphic copy of this instance.
    /// @return The cloned value.
    [[nodiscard]] StockPtr ice_clone() const { return ::std::static_pointer_cast<Stock>(_iceCloneImpl()); }

    float price;
    float lastBid;
    float lastAsk;

    void ice_printFields(std::ostream& os) const override;
    Stock(const Stock&) = default;

    [[nodiscard]] Ice::ValuePtr _iceCloneImpl() const override;

    void _iceWriteImpl(Ice::OutputStream*) const override;

    void _iceReadImpl(Ice::InputStream*) override;
};

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

#include <Ice/PopDisableWarnings.h>
#endif
