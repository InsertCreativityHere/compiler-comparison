//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <Glacier2/PermissionsVerifier.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Test
{


}

namespace Test
{

}

namespace Test
{

class ExtendedPermissionDeniedException : public ::Ice::UserExceptionHelper<ExtendedPermissionDeniedException, ::Glacier2::PermissionDeniedException>
{
public:

    virtual ~ExtendedPermissionDeniedException();

    ExtendedPermissionDeniedException(const ExtendedPermissionDeniedException&) = default;

    ExtendedPermissionDeniedException() = default;

    /**
     * One-shot constructor to initialize all data members.
     * @param reason The reason why permission was denied.
     */
    ExtendedPermissionDeniedException(const ::std::string& reason) :
        ::Ice::UserExceptionHelper<ExtendedPermissionDeniedException, ::Glacier2::PermissionDeniedException>(reason)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(reason);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

/// \cond INTERNAL
static ExtendedPermissionDeniedException _iceS_ExtendedPermissionDeniedException_init;
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamWriter<::Test::ExtendedPermissionDeniedException, S>
{
    static void write(S*, const ::Test::ExtendedPermissionDeniedException&)
    {
    }
};

template<typename S>
struct StreamReader<::Test::ExtendedPermissionDeniedException, S>
{
    static void read(S*, ::Test::ExtendedPermissionDeniedException&)
    {
    }
};

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
