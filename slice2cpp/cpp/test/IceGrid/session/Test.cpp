//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::ExtendedPermissionDeniedException> iceC_Test_ExtendedPermissionDeniedException_init("::Test::ExtendedPermissionDeniedException");

}

Test::ExtendedPermissionDeniedException::~ExtendedPermissionDeniedException()
{
}

const ::std::string&
Test::ExtendedPermissionDeniedException::ice_staticId()
{
    static const ::std::string typeId = "::Test::ExtendedPermissionDeniedException";
    return typeId;
}

#else // C++98 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::ExtendedPermissionDeniedException> iceC_Test_ExtendedPermissionDeniedException_init("::Test::ExtendedPermissionDeniedException");

}

Test::ExtendedPermissionDeniedException::ExtendedPermissionDeniedException(const ::std::string& reason) :
    ::Glacier2::PermissionDeniedException(reason)
{
}

#ifdef ICE_CPP11_COMPILER
Test::ExtendedPermissionDeniedException::~ExtendedPermissionDeniedException()
{
}
#else
Test::ExtendedPermissionDeniedException::~ExtendedPermissionDeniedException() throw()
{
}
#endif

::std::string
Test::ExtendedPermissionDeniedException::ice_id() const
{
    return "::Test::ExtendedPermissionDeniedException";
}

Test::ExtendedPermissionDeniedException*
Test::ExtendedPermissionDeniedException::ice_clone() const
{
    return new ExtendedPermissionDeniedException(*this);
}

void
Test::ExtendedPermissionDeniedException::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::ExtendedPermissionDeniedException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::ExtendedPermissionDeniedException", -1, false);
    ::Ice::StreamWriter< ExtendedPermissionDeniedException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    ::Glacier2::PermissionDeniedException::_writeImpl(ostr);
}

void
Test::ExtendedPermissionDeniedException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< ExtendedPermissionDeniedException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    ::Glacier2::PermissionDeniedException::_readImpl(istr);
}
/// \endcond

namespace Ice
{
}

#endif
