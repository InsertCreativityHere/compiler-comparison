//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <Ice/PushDisableWarnings.h>
#include <Ice/Ice.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

#ifndef LIBRARY_TEST_API
#   if defined(LIBRARY_TEST_API_EXPORTS)
#       define LIBRARY_TEST_API ICE_DECLSPEC_EXPORT
#   else
#       define LIBRARY_TEST_API ICE_DECLSPEC_IMPORT
#   endif
#endif

namespace Test
{
    class MyInterfacePrx;

}

namespace Test
{

class LIBRARY_TEST_API MyInterfacePrx : public ::Ice::Proxy<MyInterfacePrx, ::Ice::ObjectPrx>
{
public:

    void op(bool throwIt, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    [[nodiscard]] ::std::future<void> opAsync(bool throwIt, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    opAsync(bool throwIt, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, bool, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const char* ice_staticId() noexcept;
    MyInterfacePrx(const MyInterfacePrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    MyInterfacePrx(MyInterfacePrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    MyInterfacePrx(const ::Ice::CommunicatorPtr& communicator, std::string_view proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    MyInterfacePrx& operator=(const MyInterfacePrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    MyInterfacePrx& operator=(MyInterfacePrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static MyInterfacePrx _fromReference(::IceInternal::ReferencePtr ref) { return MyInterfacePrx(::std::move(ref)); }

protected:

    MyInterfacePrx() = default;

    explicit MyInterfacePrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

}

namespace Test
{

class ICE_CLASS(LIBRARY_TEST_API) UserError : public ::Ice::UserException
{
public:
    /**
     * Default constructor.
     */
    UserError() noexcept = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    UserError(::std::string message) noexcept :
        message(::std::move(message))
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(message);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(LIBRARY_TEST_API) static const char* ice_staticId() noexcept;

    ICE_MEMBER(LIBRARY_TEST_API) const char* ice_id() const noexcept override;

    ICE_MEMBER(LIBRARY_TEST_API) void ice_throw() const override;

    ::std::string message;

protected:
    ICE_MEMBER(LIBRARY_TEST_API) void _writeImpl(::Ice::OutputStream*) const override;

    ICE_MEMBER(LIBRARY_TEST_API) void _readImpl(::Ice::InputStream*) override;
};

}

namespace Test
{

class LIBRARY_TEST_API MyInterface : public virtual ::Ice::Object
{
public:

    using ProxyType = MyInterfacePrx;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const char* ice_staticId() noexcept;

    virtual void op(bool throwIt, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_op(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    /// \cond INTERNAL
    void dispatch(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>) override;
    /// \endcond
};

using MyInterfacePtr = ::std::shared_ptr<MyInterface>;

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamReader<::Test::UserError>
{
    static void read(InputStream* istr, ::Test::UserError& v)
    {
        istr->readAll(v.message);
    }
};

}
/// \endcond

#include <Ice/PopDisableWarnings.h>
#endif
