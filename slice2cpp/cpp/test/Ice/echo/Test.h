//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Test
{

class Echo;
class EchoPrx;

}

namespace Test
{

}

namespace Test
{

class EchoPrx : public ::Ice::Proxy<EchoPrx, ::Ice::ObjectPrx>
{
public:

    void setConnection(const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::future<void> setConnectionAsync(const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::function<void()>
    setConnectionAsync(::std::function<void()> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = ::Ice::noExplicitContext);

    /// \cond INTERNAL
    void _iceI_setConnection(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void startBatch(const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::future<void> startBatchAsync(const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::function<void()>
    startBatchAsync(::std::function<void()> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext);

    /// \cond INTERNAL
    void _iceI_startBatch(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void flushBatch(const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::future<void> flushBatchAsync(const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::function<void()>
    flushBatchAsync(::std::function<void()> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext);

    /// \cond INTERNAL
    void _iceI_flushBatch(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::future<void> shutdownAsync(const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::function<void()>
    shutdownAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext);

    /// \cond INTERNAL
    void _iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit EchoPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    /// \cond INTERNAL
    EchoPrx(const ::IceInternal::ReferencePtr& ref) : ::Ice::ObjectPrx(ref)
    {
    }
    /// \endcond

protected:

    /// \cond INTERNAL
    EchoPrx() = default;
    /// \endcond
};

}

namespace Test
{

class Echo : public virtual ::Ice::Object
{
public:

    using ProxyType = EchoPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void setConnection(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_setConnection(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void startBatch(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_startBatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void flushBatch(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_flushBatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void shutdown(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

/// \cond INTERNAL
namespace Test
{

using EchoPtr = ::std::shared_ptr<Echo>;

using EchoPrxPtr = ::std::shared_ptr<EchoPrx>;

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
