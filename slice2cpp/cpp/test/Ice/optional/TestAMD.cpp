//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `TestAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <TestAMD.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::OneOptional> iceC_Test_OneOptional_init("::Test::OneOptional");

const ::std::string iceC_Test_MyInterface_ids[2] =
{
    "::Ice::Object",
    "::Test::MyInterface"
};
const ::std::string iceC_Test_MyInterface_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "op"
};
const ::std::string iceC_Test_MyInterface_op_name = "op";

const ::IceInternal::DefaultValueFactoryInit<::Test::MultiOptional> iceC_Test_MultiOptional_init("::Test::MultiOptional");

const ::IceInternal::DefaultValueFactoryInit<::Test::A> iceC_Test_A_init("::Test::A");

const ::IceInternal::DefaultValueFactoryInit<::Test::B> iceC_Test_B_init("::Test::B");

const ::IceInternal::DefaultValueFactoryInit<::Test::C> iceC_Test_C_init("::Test::C");

const ::IceInternal::DefaultValueFactoryInit<::Test::WD> iceC_Test_WD_init("::Test::WD");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::OptionalException> iceC_Test_OptionalException_init("::Test::OptionalException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::DerivedException> iceC_Test_DerivedException_init("::Test::DerivedException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::RequiredException> iceC_Test_RequiredException_init("::Test::RequiredException");

const ::IceInternal::DefaultValueFactoryInit<::Test::OptionalWithCustom> iceC_Test_OptionalWithCustom_init("::Test::OptionalWithCustom");

const ::IceInternal::DefaultValueFactoryInit<::Test::E> iceC_Test_E_init("::Test::E");

const ::IceInternal::DefaultValueFactoryInit<::Test::F> iceC_Test_F_init("::Test::F");

const ::IceInternal::DefaultValueFactoryInit<::Test::G1> iceC_Test_G1_init("::Test::G1");

const ::IceInternal::DefaultValueFactoryInit<::Test::G2> iceC_Test_G2_init("::Test::G2");

const ::IceInternal::DefaultValueFactoryInit<::Test::G> iceC_Test_G_init("::Test::G");

const ::IceInternal::DefaultValueFactoryInit<::Test::Recursive> iceC_Test_Recursive_init("::Test::Recursive");

const ::std::string iceC_Test_Initial_ids[2] =
{
    "::Ice::Object",
    "::Test::Initial"
};
const ::std::string iceC_Test_Initial_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opBool",
    "opBoolSeq",
    "opByte",
    "opByteSeq",
    "opClassAndUnknownOptional",
    "opCustomIntStringDict",
    "opCustomString",
    "opDerivedException",
    "opDouble",
    "opDoubleSeq",
    "opFixedStruct",
    "opFixedStructList",
    "opFixedStructSeq",
    "opFloat",
    "opFloatSeq",
    "opG",
    "opInt",
    "opIntIntDict",
    "opIntOneOptionalDict",
    "opIntSeq",
    "opLong",
    "opLongSeq",
    "opMDict1",
    "opMDict2",
    "opMG1",
    "opMG2",
    "opMSeq1",
    "opMSeq2",
    "opMStruct1",
    "opMStruct2",
    "opMyEnum",
    "opMyInterfaceProxy",
    "opOneOptional",
    "opOptionalException",
    "opRequiredException",
    "opSerializable",
    "opShort",
    "opShortSeq",
    "opSmallStruct",
    "opSmallStructList",
    "opSmallStructSeq",
    "opString",
    "opStringIntDict",
    "opStringSeq",
    "opVarStruct",
    "opVarStructSeq",
    "opVoid",
    "pingPong",
    "returnOptionalClass",
    "sendOptionalClass",
    "shutdown",
    "supportsCppStringView",
    "supportsCsharpSerializable",
    "supportsJavaSerializable",
    "supportsNullOptional",
    "supportsRequiredParams"
};
const ::std::string iceC_Test_Initial_shutdown_name = "shutdown";
const ::std::string iceC_Test_Initial_pingPong_name = "pingPong";
const ::std::string iceC_Test_Initial_opOptionalException_name = "opOptionalException";
const ::std::string iceC_Test_Initial_opDerivedException_name = "opDerivedException";
const ::std::string iceC_Test_Initial_opRequiredException_name = "opRequiredException";
const ::std::string iceC_Test_Initial_opByte_name = "opByte";
const ::std::string iceC_Test_Initial_opBool_name = "opBool";
const ::std::string iceC_Test_Initial_opShort_name = "opShort";
const ::std::string iceC_Test_Initial_opInt_name = "opInt";
const ::std::string iceC_Test_Initial_opLong_name = "opLong";
const ::std::string iceC_Test_Initial_opFloat_name = "opFloat";
const ::std::string iceC_Test_Initial_opDouble_name = "opDouble";
const ::std::string iceC_Test_Initial_opString_name = "opString";
const ::std::string iceC_Test_Initial_opCustomString_name = "opCustomString";
const ::std::string iceC_Test_Initial_opMyEnum_name = "opMyEnum";
const ::std::string iceC_Test_Initial_opSmallStruct_name = "opSmallStruct";
const ::std::string iceC_Test_Initial_opFixedStruct_name = "opFixedStruct";
const ::std::string iceC_Test_Initial_opVarStruct_name = "opVarStruct";
const ::std::string iceC_Test_Initial_opOneOptional_name = "opOneOptional";
const ::std::string iceC_Test_Initial_opMyInterfaceProxy_name = "opMyInterfaceProxy";
const ::std::string iceC_Test_Initial_opByteSeq_name = "opByteSeq";
const ::std::string iceC_Test_Initial_opBoolSeq_name = "opBoolSeq";
const ::std::string iceC_Test_Initial_opShortSeq_name = "opShortSeq";
const ::std::string iceC_Test_Initial_opIntSeq_name = "opIntSeq";
const ::std::string iceC_Test_Initial_opLongSeq_name = "opLongSeq";
const ::std::string iceC_Test_Initial_opFloatSeq_name = "opFloatSeq";
const ::std::string iceC_Test_Initial_opDoubleSeq_name = "opDoubleSeq";
const ::std::string iceC_Test_Initial_opStringSeq_name = "opStringSeq";
const ::std::string iceC_Test_Initial_opSmallStructSeq_name = "opSmallStructSeq";
const ::std::string iceC_Test_Initial_opSmallStructList_name = "opSmallStructList";
const ::std::string iceC_Test_Initial_opFixedStructSeq_name = "opFixedStructSeq";
const ::std::string iceC_Test_Initial_opFixedStructList_name = "opFixedStructList";
const ::std::string iceC_Test_Initial_opVarStructSeq_name = "opVarStructSeq";
const ::std::string iceC_Test_Initial_opSerializable_name = "opSerializable";
const ::std::string iceC_Test_Initial_opIntIntDict_name = "opIntIntDict";
const ::std::string iceC_Test_Initial_opStringIntDict_name = "opStringIntDict";
const ::std::string iceC_Test_Initial_opIntOneOptionalDict_name = "opIntOneOptionalDict";
const ::std::string iceC_Test_Initial_opCustomIntStringDict_name = "opCustomIntStringDict";
const ::std::string iceC_Test_Initial_opClassAndUnknownOptional_name = "opClassAndUnknownOptional";
const ::std::string iceC_Test_Initial_sendOptionalClass_name = "sendOptionalClass";
const ::std::string iceC_Test_Initial_returnOptionalClass_name = "returnOptionalClass";
const ::std::string iceC_Test_Initial_opG_name = "opG";
const ::std::string iceC_Test_Initial_opVoid_name = "opVoid";
const ::std::string iceC_Test_Initial_opMStruct1_name = "opMStruct1";
const ::std::string iceC_Test_Initial_opMStruct2_name = "opMStruct2";
const ::std::string iceC_Test_Initial_opMSeq1_name = "opMSeq1";
const ::std::string iceC_Test_Initial_opMSeq2_name = "opMSeq2";
const ::std::string iceC_Test_Initial_opMDict1_name = "opMDict1";
const ::std::string iceC_Test_Initial_opMDict2_name = "opMDict2";
const ::std::string iceC_Test_Initial_opMG1_name = "opMG1";
const ::std::string iceC_Test_Initial_opMG2_name = "opMG2";
const ::std::string iceC_Test_Initial_supportsRequiredParams_name = "supportsRequiredParams";
const ::std::string iceC_Test_Initial_supportsJavaSerializable_name = "supportsJavaSerializable";
const ::std::string iceC_Test_Initial_supportsCsharpSerializable_name = "supportsCsharpSerializable";
const ::std::string iceC_Test_Initial_supportsCppStringView_name = "supportsCppStringView";
const ::std::string iceC_Test_Initial_supportsNullOptional_name = "supportsNullOptional";

}

Test::OptionalException::~OptionalException()
{
}

const ::std::string&
Test::OptionalException::ice_staticId()
{
    static const ::std::string typeId = "::Test::OptionalException";
    return typeId;
}

Test::DerivedException::~DerivedException()
{
}

const ::std::string&
Test::DerivedException::ice_staticId()
{
    static const ::std::string typeId = "::Test::DerivedException";
    return typeId;
}

Test::RequiredException::~RequiredException()
{
}

const ::std::string&
Test::RequiredException::ice_staticId()
{
    static const ::std::string typeId = "::Test::RequiredException";
    return typeId;
}

/// \cond STREAM
bool
Test::RequiredException::_usesClasses() const
{
    return true;
}
/// \endcond

bool
Test::MyInterface::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MyInterface_ids, iceC_Test_MyInterface_ids + 2, s);
}

::std::vector<::std::string>
Test::MyInterface::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_MyInterface_ids[0], &iceC_Test_MyInterface_ids[2]);
}

::std::string
Test::MyInterface::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MyInterface::ice_staticId()
{
    static const ::std::string typeId = "::Test::MyInterface";
    return typeId;
}

/// \cond INTERNAL
bool
Test::MyInterface::_iceD_op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->op(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyInterface::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_MyInterface_ops, iceC_Test_MyInterface_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_MyInterface_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_op(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::Initial::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Initial_ids, iceC_Test_Initial_ids + 2, s);
}

::std::vector<::std::string>
Test::Initial::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Initial_ids[0], &iceC_Test_Initial_ids[2]);
}

::std::string
Test::Initial::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Initial::ice_staticId()
{
    static const ::std::string typeId = "::Test::Initial";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->shutdownAsync(inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_pingPong(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<::Ice::Value> iceP_o;
    istr->readAll(iceP_o);
    istr->readPendingValues();
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ::std::shared_ptr<::Ice::Value>& ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        ostr->writePendingValues();
        inA->endWriteParams();
        inA->completed();
    };
    this->pingPongAsync(::std::move(iceP_o), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opOptionalException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<int> iceP_a;
    std::optional<::std::string> iceP_b;
    std::optional<::std::shared_ptr<OneOptional>> iceP_o;
    istr->readAll({1, 2, 3}, iceP_a, iceP_b, iceP_o);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opOptionalExceptionAsync(iceP_a, ::std::move(iceP_b), ::std::move(iceP_o), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opDerivedException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<int> iceP_a;
    std::optional<::std::string> iceP_b;
    std::optional<::std::shared_ptr<OneOptional>> iceP_o;
    istr->readAll({1, 2, 3}, iceP_a, iceP_b, iceP_o);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opDerivedExceptionAsync(iceP_a, ::std::move(iceP_b), ::std::move(iceP_o), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opRequiredException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<int> iceP_a;
    std::optional<::std::string> iceP_b;
    std::optional<::std::shared_ptr<OneOptional>> iceP_o;
    istr->readAll({1, 2, 3}, iceP_a, iceP_b, iceP_o);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opRequiredExceptionAsync(iceP_a, ::std::move(iceP_b), ::std::move(iceP_o), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opByte(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<::Ice::Byte> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<::Ice::Byte>& ret, const std::optional<::Ice::Byte>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opByteAsync(iceP_p1, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opBool(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<bool> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<bool>& ret, const std::optional<bool>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opBoolAsync(iceP_p1, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opShort(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<short> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<short>& ret, const std::optional<short>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opShortAsync(iceP_p1, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opInt(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<int> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<int>& ret, const std::optional<int>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opIntAsync(iceP_p1, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opLong(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<long long int> iceP_p1;
    istr->readAll({1}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<long long int>& ret, const std::optional<long long int>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({2, 3}, iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opLongAsync(iceP_p1, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opFloat(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<float> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<float>& ret, const std::optional<float>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opFloatAsync(iceP_p1, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opDouble(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<double> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<double>& ret, const std::optional<double>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opDoubleAsync(iceP_p1, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opString(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<::std::string> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<::std::string>& ret, const std::optional<::std::string>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opStringAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opCustomString(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<Util::string_view> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<Util::string_view>& ret, const std::optional<Util::string_view>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opCustomStringAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMyEnum(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<MyEnum> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<MyEnum>& ret, const std::optional<MyEnum>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opMyEnumAsync(iceP_p1, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opSmallStruct(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<SmallStruct> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<SmallStruct>& ret, const std::optional<SmallStruct>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opSmallStructAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opFixedStruct(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<FixedStruct> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<FixedStruct>& ret, const std::optional<FixedStruct>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opFixedStructAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opVarStruct(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<VarStruct> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<VarStruct>& ret, const std::optional<VarStruct>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opVarStructAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opOneOptional(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<::std::shared_ptr<OneOptional>> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<::std::shared_ptr<OneOptional>>& ret, const std::optional<::std::shared_ptr<OneOptional>>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opOneOptionalAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMyInterfaceProxy(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<::std::shared_ptr<MyInterfacePrx>> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<::std::shared_ptr<MyInterfacePrx>>& ret, const std::optional<::std::shared_ptr<MyInterfacePrx>>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opMyInterfaceProxyAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opByteSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>>& ret, const std::optional<::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opByteSeqAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opBoolSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<::std::pair<const bool*, const bool*>> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<::std::pair<const bool*, const bool*>>& ret, const std::optional<::std::pair<const bool*, const bool*>>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opBoolSeqAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opShortSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<::std::pair<const short*, const short*>> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<::std::pair<const short*, const short*>>& ret, const std::optional<::std::pair<const short*, const short*>>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opShortSeqAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opIntSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<::std::pair<const int*, const int*>> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<::std::pair<const int*, const int*>>& ret, const std::optional<::std::pair<const int*, const int*>>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opIntSeqAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opLongSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<::std::pair<const long long int*, const long long int*>> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<::std::pair<const long long int*, const long long int*>>& ret, const std::optional<::std::pair<const long long int*, const long long int*>>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opLongSeqAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opFloatSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<::std::pair<const float*, const float*>> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<::std::pair<const float*, const float*>>& ret, const std::optional<::std::pair<const float*, const float*>>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opFloatSeqAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opDoubleSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<::std::pair<const double*, const double*>> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<::std::pair<const double*, const double*>>& ret, const std::optional<::std::pair<const double*, const double*>>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opDoubleSeqAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opStringSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<StringSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<StringSeq>& ret, const std::optional<StringSeq>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opStringSeqAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opSmallStructSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<::std::pair<const SmallStruct*, const SmallStruct*>> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<::std::pair<const SmallStruct*, const SmallStruct*>>& ret, const std::optional<::std::pair<const SmallStruct*, const SmallStruct*>>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opSmallStructSeqAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opSmallStructList(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<::std::pair<const SmallStruct*, const SmallStruct*>> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<::std::pair<const SmallStruct*, const SmallStruct*>>& ret, const std::optional<::std::pair<const SmallStruct*, const SmallStruct*>>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opSmallStructListAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opFixedStructSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<::std::pair<const FixedStruct*, const FixedStruct*>> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<::std::pair<const FixedStruct*, const FixedStruct*>>& ret, const std::optional<::std::pair<const FixedStruct*, const FixedStruct*>>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opFixedStructSeqAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opFixedStructList(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<::std::pair<const FixedStruct*, const FixedStruct*>> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<::std::pair<const FixedStruct*, const FixedStruct*>>& ret, const std::optional<::std::pair<const FixedStruct*, const FixedStruct*>>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opFixedStructListAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opVarStructSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<VarStructSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<VarStructSeq>& ret, const std::optional<VarStructSeq>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opVarStructSeqAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opSerializable(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<Serializable> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<Serializable>& ret, const std::optional<Serializable>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opSerializableAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opIntIntDict(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<IntIntDict> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<IntIntDict>& ret, const std::optional<IntIntDict>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opIntIntDictAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opStringIntDict(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<StringIntDict> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<StringIntDict>& ret, const std::optional<StringIntDict>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opStringIntDictAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opIntOneOptionalDict(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<IntOneOptionalDict> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<IntOneOptionalDict>& ret, const std::optional<IntOneOptionalDict>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opIntOneOptionalDictAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opCustomIntStringDict(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<::std::map< ::Ice::Int, ::Util::string_view>> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<::std::map< ::Ice::Int, ::Util::string_view>>& ret, const std::optional<::std::map< ::Ice::Int, ::Util::string_view>>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opCustomIntStringDictAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opClassAndUnknownOptional(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<A> iceP_p;
    istr->readAll(iceP_p);
    istr->readPendingValues();
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opClassAndUnknownOptionalAsync(::std::move(iceP_p), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_sendOptionalClass(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    bool iceP_req;
    std::optional<::std::shared_ptr<OneOptional>> iceP_o;
    istr->readAll(iceP_req);
    istr->readAll({1}, iceP_o);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->sendOptionalClassAsync(iceP_req, ::std::move(iceP_o), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_returnOptionalClass(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    bool iceP_req;
    istr->readAll(iceP_req);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<::std::shared_ptr<OneOptional>>& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1}, iceP_o);
        inA->endWriteParams();
        inA->completed();
    };
    this->returnOptionalClassAsync(iceP_req, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opG(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<G> iceP_g;
    istr->readAll(iceP_g);
    istr->readPendingValues();
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ::std::shared_ptr<G>& ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        ostr->writePendingValues();
        inA->endWriteParams();
        inA->completed();
    };
    this->opGAsync(::std::move(iceP_g), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opVoid(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opVoidAsync(inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

Test::Initial::OpMStruct1MarshaledResult::OpMStruct1MarshaledResult(const std::optional<SmallStruct>& ret, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll({1}, ret);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMStruct1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opMStruct1Async(inA->response<OpMStruct1MarshaledResult>(), inA->exception(), current);
    return false;
}
/// \endcond

Test::Initial::OpMStruct2MarshaledResult::OpMStruct2MarshaledResult(const std::optional<SmallStruct>& ret, const std::optional<SmallStruct>& iceP_p2, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll({1, 3}, ret, iceP_p2);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMStruct2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<SmallStruct> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opMStruct2Async(::std::move(iceP_p1), inA->response<OpMStruct2MarshaledResult>(), inA->exception(), current);
    return false;
}
/// \endcond

Test::Initial::OpMSeq1MarshaledResult::OpMSeq1MarshaledResult(const std::optional<StringSeq>& ret, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll({1}, ret);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMSeq1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opMSeq1Async(inA->response<OpMSeq1MarshaledResult>(), inA->exception(), current);
    return false;
}
/// \endcond

Test::Initial::OpMSeq2MarshaledResult::OpMSeq2MarshaledResult(const std::optional<StringSeq>& ret, const std::optional<StringSeq>& iceP_p2, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll({1, 3}, ret, iceP_p2);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMSeq2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<StringSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opMSeq2Async(::std::move(iceP_p1), inA->response<OpMSeq2MarshaledResult>(), inA->exception(), current);
    return false;
}
/// \endcond

Test::Initial::OpMDict1MarshaledResult::OpMDict1MarshaledResult(const std::optional<StringIntDict>& ret, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll({1}, ret);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMDict1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opMDict1Async(inA->response<OpMDict1MarshaledResult>(), inA->exception(), current);
    return false;
}
/// \endcond

Test::Initial::OpMDict2MarshaledResult::OpMDict2MarshaledResult(const std::optional<StringIntDict>& ret, const std::optional<StringIntDict>& iceP_p2, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll({1, 3}, ret, iceP_p2);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMDict2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<StringIntDict> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opMDict2Async(::std::move(iceP_p1), inA->response<OpMDict2MarshaledResult>(), inA->exception(), current);
    return false;
}
/// \endcond

Test::Initial::OpMG1MarshaledResult::OpMG1MarshaledResult(const std::optional<::std::shared_ptr<G>>& ret, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll({1}, ret);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMG1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opMG1Async(inA->response<OpMG1MarshaledResult>(), inA->exception(), current);
    return false;
}
/// \endcond

Test::Initial::OpMG2MarshaledResult::OpMG2MarshaledResult(const std::optional<::std::shared_ptr<G>>& ret, const std::optional<::std::shared_ptr<G>>& iceP_p2, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll({1, 3}, ret, iceP_p2);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMG2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<::std::shared_ptr<G>> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opMG2Async(::std::move(iceP_p1), inA->response<OpMG2MarshaledResult>(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_supportsRequiredParams(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](bool ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->supportsRequiredParamsAsync(responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_supportsJavaSerializable(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](bool ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->supportsJavaSerializableAsync(responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_supportsCsharpSerializable(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](bool ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->supportsCsharpSerializableAsync(responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_supportsCppStringView(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](bool ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->supportsCppStringViewAsync(responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_supportsNullOptional(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](bool ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->supportsNullOptionalAsync(responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Initial_ops, iceC_Test_Initial_ops + 60, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Initial_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opBool(in, current);
        }
        case 5:
        {
            return _iceD_opBoolSeq(in, current);
        }
        case 6:
        {
            return _iceD_opByte(in, current);
        }
        case 7:
        {
            return _iceD_opByteSeq(in, current);
        }
        case 8:
        {
            return _iceD_opClassAndUnknownOptional(in, current);
        }
        case 9:
        {
            return _iceD_opCustomIntStringDict(in, current);
        }
        case 10:
        {
            return _iceD_opCustomString(in, current);
        }
        case 11:
        {
            return _iceD_opDerivedException(in, current);
        }
        case 12:
        {
            return _iceD_opDouble(in, current);
        }
        case 13:
        {
            return _iceD_opDoubleSeq(in, current);
        }
        case 14:
        {
            return _iceD_opFixedStruct(in, current);
        }
        case 15:
        {
            return _iceD_opFixedStructList(in, current);
        }
        case 16:
        {
            return _iceD_opFixedStructSeq(in, current);
        }
        case 17:
        {
            return _iceD_opFloat(in, current);
        }
        case 18:
        {
            return _iceD_opFloatSeq(in, current);
        }
        case 19:
        {
            return _iceD_opG(in, current);
        }
        case 20:
        {
            return _iceD_opInt(in, current);
        }
        case 21:
        {
            return _iceD_opIntIntDict(in, current);
        }
        case 22:
        {
            return _iceD_opIntOneOptionalDict(in, current);
        }
        case 23:
        {
            return _iceD_opIntSeq(in, current);
        }
        case 24:
        {
            return _iceD_opLong(in, current);
        }
        case 25:
        {
            return _iceD_opLongSeq(in, current);
        }
        case 26:
        {
            return _iceD_opMDict1(in, current);
        }
        case 27:
        {
            return _iceD_opMDict2(in, current);
        }
        case 28:
        {
            return _iceD_opMG1(in, current);
        }
        case 29:
        {
            return _iceD_opMG2(in, current);
        }
        case 30:
        {
            return _iceD_opMSeq1(in, current);
        }
        case 31:
        {
            return _iceD_opMSeq2(in, current);
        }
        case 32:
        {
            return _iceD_opMStruct1(in, current);
        }
        case 33:
        {
            return _iceD_opMStruct2(in, current);
        }
        case 34:
        {
            return _iceD_opMyEnum(in, current);
        }
        case 35:
        {
            return _iceD_opMyInterfaceProxy(in, current);
        }
        case 36:
        {
            return _iceD_opOneOptional(in, current);
        }
        case 37:
        {
            return _iceD_opOptionalException(in, current);
        }
        case 38:
        {
            return _iceD_opRequiredException(in, current);
        }
        case 39:
        {
            return _iceD_opSerializable(in, current);
        }
        case 40:
        {
            return _iceD_opShort(in, current);
        }
        case 41:
        {
            return _iceD_opShortSeq(in, current);
        }
        case 42:
        {
            return _iceD_opSmallStruct(in, current);
        }
        case 43:
        {
            return _iceD_opSmallStructList(in, current);
        }
        case 44:
        {
            return _iceD_opSmallStructSeq(in, current);
        }
        case 45:
        {
            return _iceD_opString(in, current);
        }
        case 46:
        {
            return _iceD_opStringIntDict(in, current);
        }
        case 47:
        {
            return _iceD_opStringSeq(in, current);
        }
        case 48:
        {
            return _iceD_opVarStruct(in, current);
        }
        case 49:
        {
            return _iceD_opVarStructSeq(in, current);
        }
        case 50:
        {
            return _iceD_opVoid(in, current);
        }
        case 51:
        {
            return _iceD_pingPong(in, current);
        }
        case 52:
        {
            return _iceD_returnOptionalClass(in, current);
        }
        case 53:
        {
            return _iceD_sendOptionalClass(in, current);
        }
        case 54:
        {
            return _iceD_shutdown(in, current);
        }
        case 55:
        {
            return _iceD_supportsCppStringView(in, current);
        }
        case 56:
        {
            return _iceD_supportsCsharpSerializable(in, current);
        }
        case 57:
        {
            return _iceD_supportsJavaSerializable(in, current);
        }
        case 58:
        {
            return _iceD_supportsNullOptional(in, current);
        }
        case 59:
        {
            return _iceD_supportsRequiredParams(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::OneOptional::~OneOptional()
{
}

const ::std::string&
Test::OneOptional::ice_staticId()
{
    static const ::std::string typeId = "::Test::OneOptional";
    return typeId;
}

Test::MultiOptional::~MultiOptional()
{
}

const ::std::string&
Test::MultiOptional::ice_staticId()
{
    static const ::std::string typeId = "::Test::MultiOptional";
    return typeId;
}

Test::A::~A()
{
}

const ::std::string&
Test::A::ice_staticId()
{
    static const ::std::string typeId = "::Test::A";
    return typeId;
}

Test::B::~B()
{
}

::std::shared_ptr<::Ice::SlicedData>
Test::B::ice_getSlicedData() const
{
    return _iceSlicedData;
}

/// \cond STREAM
void
Test::B::_iceWrite(::Ice::OutputStream* ostr) const
{
    ostr->startValue(_iceSlicedData);
    _iceWriteImpl(ostr);
    ostr->endValue();
}

void
Test::B::_iceRead(::Ice::InputStream* istr)
{
    istr->startValue();
    _iceReadImpl(istr);
    _iceSlicedData = istr->endValue(true);
}
/// \endcond

const ::std::string&
Test::B::ice_staticId()
{
    static const ::std::string typeId = "::Test::B";
    return typeId;
}

Test::C::~C()
{
}

const ::std::string&
Test::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::C";
    return typeId;
}

Test::WD::~WD()
{
}

const ::std::string&
Test::WD::ice_staticId()
{
    static const ::std::string typeId = "::Test::WD";
    return typeId;
}

Test::OptionalWithCustom::~OptionalWithCustom()
{
}

const ::std::string&
Test::OptionalWithCustom::ice_staticId()
{
    static const ::std::string typeId = "::Test::OptionalWithCustom";
    return typeId;
}

Test::E::~E()
{
}

const ::std::string&
Test::E::ice_staticId()
{
    static const ::std::string typeId = "::Test::E";
    return typeId;
}

Test::F::~F()
{
}

const ::std::string&
Test::F::ice_staticId()
{
    static const ::std::string typeId = "::Test::F";
    return typeId;
}

Test::G1::~G1()
{
}

const ::std::string&
Test::G1::ice_staticId()
{
    static const ::std::string typeId = "::Test::G1";
    return typeId;
}

Test::G2::~G2()
{
}

const ::std::string&
Test::G2::ice_staticId()
{
    static const ::std::string typeId = "::Test::G2";
    return typeId;
}

Test::G::~G()
{
}

const ::std::string&
Test::G::ice_staticId()
{
    static const ::std::string typeId = "::Test::G";
    return typeId;
}

Test::Recursive::~Recursive()
{
}

const ::std::string&
Test::Recursive::ice_staticId()
{
    static const ::std::string typeId = "::Test::Recursive";
    return typeId;
}

/// \cond INTERNAL
void
Test::MyInterfacePrx::_iceI_op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_MyInterface_op_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::MyInterfacePrx::ice_staticId()
{
    return MyInterface::ice_staticId();
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Initial_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_pingPong(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Ice::Value>>>& outAsync, const ::std::shared_ptr<::Ice::Value>& iceP_o, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_pingPong_name);
    outAsync->invoke(iceC_Test_Initial_pingPong_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_o);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<::Ice::Value> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opOptionalException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const std::optional<int>& iceP_a, const std::optional<::std::string>& iceP_b, const std::optional<::std::shared_ptr<OneOptional>>& iceP_o, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opOptionalException_name);
    outAsync->invoke(iceC_Test_Initial_opOptionalException_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 2, 3}, iceP_a, iceP_b, iceP_o);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const OptionalException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opDerivedException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const std::optional<int>& iceP_a, const std::optional<::std::string>& iceP_b, const std::optional<::std::shared_ptr<OneOptional>>& iceP_o, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opDerivedException_name);
    outAsync->invoke(iceC_Test_Initial_opDerivedException_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 2, 3}, iceP_a, iceP_b, iceP_o);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const OptionalException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opRequiredException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const std::optional<int>& iceP_a, const std::optional<::std::string>& iceP_b, const std::optional<::std::shared_ptr<OneOptional>>& iceP_o, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opRequiredException_name);
    outAsync->invoke(iceC_Test_Initial_opRequiredException_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 2, 3}, iceP_a, iceP_b, iceP_o);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const OptionalException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opByte(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpByteResult>>& outAsync, const std::optional<::Ice::Byte>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opByte_name);
    outAsync->invoke(iceC_Test_Initial_opByte_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpByteResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opBool(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpBoolResult>>& outAsync, const std::optional<bool>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opBool_name);
    outAsync->invoke(iceC_Test_Initial_opBool_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpBoolResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opShort(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpShortResult>>& outAsync, const std::optional<short>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opShort_name);
    outAsync->invoke(iceC_Test_Initial_opShort_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpShortResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opInt(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpIntResult>>& outAsync, const std::optional<int>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opInt_name);
    outAsync->invoke(iceC_Test_Initial_opInt_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpIntResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opLong(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpLongResult>>& outAsync, const std::optional<long long int>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opLong_name);
    outAsync->invoke(iceC_Test_Initial_opLong_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({1}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpLongResult v;
            istr->readAll({2, 3}, v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opFloat(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpFloatResult>>& outAsync, const std::optional<float>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opFloat_name);
    outAsync->invoke(iceC_Test_Initial_opFloat_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpFloatResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opDouble(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpDoubleResult>>& outAsync, const std::optional<double>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opDouble_name);
    outAsync->invoke(iceC_Test_Initial_opDouble_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpDoubleResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opString(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpStringResult>>& outAsync, const std::optional<::std::string>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opString_name);
    outAsync->invoke(iceC_Test_Initial_opString_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpStringResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

::std::function<void()>
Test::InitialPrx::opCustomStringAsync(const std::optional<Util::string_view>& iceP_p1,
                                      ::std::function<void (std::optional<Util::string_view>, std::optional<Util::string_view>)> response,
                                      ::std::function<void(::std::exception_ptr)> ex,
                                      ::std::function<void(bool)> sent,
                                      const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opCustomString_name);
    ::std::function<void(::Ice::InputStream*)> read;
    if(response)
    {
        read = [response](::Ice::InputStream* istr)
        {
            istr->startEncapsulation();
            std::optional<Util::string_view> iceP_p3;
            std::optional<Util::string_view> ret;
            istr->readAll({1, 3}, ret, iceP_p3);
            istr->endEncapsulation();
            try
            {
                response(ret, iceP_p3);
            }
            catch(...)
            {
                throw ::std::current_exception();
            }
        };
    }
    auto outAsync = ::std::make_shared<::IceInternal::CustomLambdaOutgoing>(shared_from_this(), read, ex, sent);

    outAsync->invoke(iceC_Test_Initial_opCustomString_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr);
    return [outAsync]() { outAsync->cancel(); };
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opCustomString(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpCustomStringResult>>& outAsync, const std::optional<Util::string_view>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opCustomString_name);
    outAsync->invoke(iceC_Test_Initial_opCustomString_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpCustomStringResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opMyEnum(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpMyEnumResult>>& outAsync, const std::optional<MyEnum>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opMyEnum_name);
    outAsync->invoke(iceC_Test_Initial_opMyEnum_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpMyEnumResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opSmallStruct(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpSmallStructResult>>& outAsync, const std::optional<SmallStruct>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opSmallStruct_name);
    outAsync->invoke(iceC_Test_Initial_opSmallStruct_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpSmallStructResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opFixedStruct(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpFixedStructResult>>& outAsync, const std::optional<FixedStruct>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opFixedStruct_name);
    outAsync->invoke(iceC_Test_Initial_opFixedStruct_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpFixedStructResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opVarStruct(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpVarStructResult>>& outAsync, const std::optional<VarStruct>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opVarStruct_name);
    outAsync->invoke(iceC_Test_Initial_opVarStruct_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpVarStructResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opOneOptional(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpOneOptionalResult>>& outAsync, const std::optional<::std::shared_ptr<OneOptional>>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opOneOptional_name);
    outAsync->invoke(iceC_Test_Initial_opOneOptional_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpOneOptionalResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opMyInterfaceProxy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpMyInterfaceProxyResult>>& outAsync, const std::optional<::std::shared_ptr<MyInterfacePrx>>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opMyInterfaceProxy_name);
    outAsync->invoke(iceC_Test_Initial_opMyInterfaceProxy_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpMyInterfaceProxyResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

::std::function<void()>
Test::InitialPrx::opByteSeqAsync(const std::optional<::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>>& iceP_p1,
                                 ::std::function<void (std::optional<::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>>, std::optional<::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>>)> response,
                                 ::std::function<void(::std::exception_ptr)> ex,
                                 ::std::function<void(bool)> sent,
                                 const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opByteSeq_name);
    ::std::function<void(::Ice::InputStream*)> read;
    if(response)
    {
        read = [response](::Ice::InputStream* istr)
        {
            istr->startEncapsulation();
            std::optional<::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>> iceP_p3;
            std::optional<::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>> ret;
            istr->readAll({1, 3}, ret, iceP_p3);
            istr->endEncapsulation();
            try
            {
                response(ret, iceP_p3);
            }
            catch(...)
            {
                throw ::std::current_exception();
            }
        };
    }
    auto outAsync = ::std::make_shared<::IceInternal::CustomLambdaOutgoing>(shared_from_this(), read, ex, sent);

    outAsync->invoke(iceC_Test_Initial_opByteSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr);
    return [outAsync]() { outAsync->cancel(); };
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opByteSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpByteSeqResult>>& outAsync, const std::optional<::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opByteSeq_name);
    outAsync->invoke(iceC_Test_Initial_opByteSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpByteSeqResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

::std::function<void()>
Test::InitialPrx::opBoolSeqAsync(const std::optional<::std::pair<const bool*, const bool*>>& iceP_p1,
                                 ::std::function<void (std::optional<::std::pair<const bool*, const bool*>>, std::optional<::std::pair<const bool*, const bool*>>)> response,
                                 ::std::function<void(::std::exception_ptr)> ex,
                                 ::std::function<void(bool)> sent,
                                 const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opBoolSeq_name);
    ::std::function<void(::Ice::InputStream*)> read;
    if(response)
    {
        read = [response](::Ice::InputStream* istr)
        {
            istr->startEncapsulation();
            std::optional<::std::pair<const bool*, const bool*>> iceP_p3;
            std::optional<::std::pair<const bool*, const bool*>> ret;
            istr->readAll({1, 3}, ret, iceP_p3);
            istr->endEncapsulation();
            try
            {
                response(ret, iceP_p3);
            }
            catch(...)
            {
                throw ::std::current_exception();
            }
        };
    }
    auto outAsync = ::std::make_shared<::IceInternal::CustomLambdaOutgoing>(shared_from_this(), read, ex, sent);

    outAsync->invoke(iceC_Test_Initial_opBoolSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr);
    return [outAsync]() { outAsync->cancel(); };
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opBoolSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpBoolSeqResult>>& outAsync, const std::optional<::std::pair<const bool*, const bool*>>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opBoolSeq_name);
    outAsync->invoke(iceC_Test_Initial_opBoolSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpBoolSeqResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

::std::function<void()>
Test::InitialPrx::opShortSeqAsync(const std::optional<::std::pair<const short*, const short*>>& iceP_p1,
                                  ::std::function<void (std::optional<::std::pair<const short*, const short*>>, std::optional<::std::pair<const short*, const short*>>)> response,
                                  ::std::function<void(::std::exception_ptr)> ex,
                                  ::std::function<void(bool)> sent,
                                  const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opShortSeq_name);
    ::std::function<void(::Ice::InputStream*)> read;
    if(response)
    {
        read = [response](::Ice::InputStream* istr)
        {
            istr->startEncapsulation();
            std::optional<::std::pair<const short*, const short*>> iceP_p3;
            std::optional<::std::pair<const short*, const short*>> ret;
            istr->readAll({1, 3}, ret, iceP_p3);
            istr->endEncapsulation();
            try
            {
                response(ret, iceP_p3);
            }
            catch(...)
            {
                throw ::std::current_exception();
            }
        };
    }
    auto outAsync = ::std::make_shared<::IceInternal::CustomLambdaOutgoing>(shared_from_this(), read, ex, sent);

    outAsync->invoke(iceC_Test_Initial_opShortSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr);
    return [outAsync]() { outAsync->cancel(); };
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opShortSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpShortSeqResult>>& outAsync, const std::optional<::std::pair<const short*, const short*>>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opShortSeq_name);
    outAsync->invoke(iceC_Test_Initial_opShortSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpShortSeqResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

::std::function<void()>
Test::InitialPrx::opIntSeqAsync(const std::optional<::std::pair<const int*, const int*>>& iceP_p1,
                                ::std::function<void (std::optional<::std::pair<const int*, const int*>>, std::optional<::std::pair<const int*, const int*>>)> response,
                                ::std::function<void(::std::exception_ptr)> ex,
                                ::std::function<void(bool)> sent,
                                const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opIntSeq_name);
    ::std::function<void(::Ice::InputStream*)> read;
    if(response)
    {
        read = [response](::Ice::InputStream* istr)
        {
            istr->startEncapsulation();
            std::optional<::std::pair<const int*, const int*>> iceP_p3;
            std::optional<::std::pair<const int*, const int*>> ret;
            istr->readAll({1, 3}, ret, iceP_p3);
            istr->endEncapsulation();
            try
            {
                response(ret, iceP_p3);
            }
            catch(...)
            {
                throw ::std::current_exception();
            }
        };
    }
    auto outAsync = ::std::make_shared<::IceInternal::CustomLambdaOutgoing>(shared_from_this(), read, ex, sent);

    outAsync->invoke(iceC_Test_Initial_opIntSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr);
    return [outAsync]() { outAsync->cancel(); };
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opIntSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpIntSeqResult>>& outAsync, const std::optional<::std::pair<const int*, const int*>>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opIntSeq_name);
    outAsync->invoke(iceC_Test_Initial_opIntSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpIntSeqResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

::std::function<void()>
Test::InitialPrx::opLongSeqAsync(const std::optional<::std::pair<const long long int*, const long long int*>>& iceP_p1,
                                 ::std::function<void (std::optional<::std::pair<const long long int*, const long long int*>>, std::optional<::std::pair<const long long int*, const long long int*>>)> response,
                                 ::std::function<void(::std::exception_ptr)> ex,
                                 ::std::function<void(bool)> sent,
                                 const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opLongSeq_name);
    ::std::function<void(::Ice::InputStream*)> read;
    if(response)
    {
        read = [response](::Ice::InputStream* istr)
        {
            istr->startEncapsulation();
            std::optional<::std::pair<const long long int*, const long long int*>> iceP_p3;
            std::optional<::std::pair<const long long int*, const long long int*>> ret;
            istr->readAll({1, 3}, ret, iceP_p3);
            istr->endEncapsulation();
            try
            {
                response(ret, iceP_p3);
            }
            catch(...)
            {
                throw ::std::current_exception();
            }
        };
    }
    auto outAsync = ::std::make_shared<::IceInternal::CustomLambdaOutgoing>(shared_from_this(), read, ex, sent);

    outAsync->invoke(iceC_Test_Initial_opLongSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr);
    return [outAsync]() { outAsync->cancel(); };
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opLongSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpLongSeqResult>>& outAsync, const std::optional<::std::pair<const long long int*, const long long int*>>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opLongSeq_name);
    outAsync->invoke(iceC_Test_Initial_opLongSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpLongSeqResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

::std::function<void()>
Test::InitialPrx::opFloatSeqAsync(const std::optional<::std::pair<const float*, const float*>>& iceP_p1,
                                  ::std::function<void (std::optional<::std::pair<const float*, const float*>>, std::optional<::std::pair<const float*, const float*>>)> response,
                                  ::std::function<void(::std::exception_ptr)> ex,
                                  ::std::function<void(bool)> sent,
                                  const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opFloatSeq_name);
    ::std::function<void(::Ice::InputStream*)> read;
    if(response)
    {
        read = [response](::Ice::InputStream* istr)
        {
            istr->startEncapsulation();
            std::optional<::std::pair<const float*, const float*>> iceP_p3;
            std::optional<::std::pair<const float*, const float*>> ret;
            istr->readAll({1, 3}, ret, iceP_p3);
            istr->endEncapsulation();
            try
            {
                response(ret, iceP_p3);
            }
            catch(...)
            {
                throw ::std::current_exception();
            }
        };
    }
    auto outAsync = ::std::make_shared<::IceInternal::CustomLambdaOutgoing>(shared_from_this(), read, ex, sent);

    outAsync->invoke(iceC_Test_Initial_opFloatSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr);
    return [outAsync]() { outAsync->cancel(); };
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opFloatSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpFloatSeqResult>>& outAsync, const std::optional<::std::pair<const float*, const float*>>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opFloatSeq_name);
    outAsync->invoke(iceC_Test_Initial_opFloatSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpFloatSeqResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

::std::function<void()>
Test::InitialPrx::opDoubleSeqAsync(const std::optional<::std::pair<const double*, const double*>>& iceP_p1,
                                   ::std::function<void (std::optional<::std::pair<const double*, const double*>>, std::optional<::std::pair<const double*, const double*>>)> response,
                                   ::std::function<void(::std::exception_ptr)> ex,
                                   ::std::function<void(bool)> sent,
                                   const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opDoubleSeq_name);
    ::std::function<void(::Ice::InputStream*)> read;
    if(response)
    {
        read = [response](::Ice::InputStream* istr)
        {
            istr->startEncapsulation();
            std::optional<::std::pair<const double*, const double*>> iceP_p3;
            std::optional<::std::pair<const double*, const double*>> ret;
            istr->readAll({1, 3}, ret, iceP_p3);
            istr->endEncapsulation();
            try
            {
                response(ret, iceP_p3);
            }
            catch(...)
            {
                throw ::std::current_exception();
            }
        };
    }
    auto outAsync = ::std::make_shared<::IceInternal::CustomLambdaOutgoing>(shared_from_this(), read, ex, sent);

    outAsync->invoke(iceC_Test_Initial_opDoubleSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr);
    return [outAsync]() { outAsync->cancel(); };
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opDoubleSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpDoubleSeqResult>>& outAsync, const std::optional<::std::pair<const double*, const double*>>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opDoubleSeq_name);
    outAsync->invoke(iceC_Test_Initial_opDoubleSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpDoubleSeqResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opStringSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpStringSeqResult>>& outAsync, const std::optional<StringSeq>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opStringSeq_name);
    outAsync->invoke(iceC_Test_Initial_opStringSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpStringSeqResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

::std::function<void()>
Test::InitialPrx::opSmallStructSeqAsync(const std::optional<::std::pair<const SmallStruct*, const SmallStruct*>>& iceP_p1,
                                        ::std::function<void (std::optional<::std::pair<const ::Test::SmallStruct*, const ::Test::SmallStruct*>>, std::optional<::std::pair<const ::Test::SmallStruct*, const ::Test::SmallStruct*>>)> response,
                                        ::std::function<void(::std::exception_ptr)> ex,
                                        ::std::function<void(bool)> sent,
                                        const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opSmallStructSeq_name);
    ::std::function<void(::Ice::InputStream*)> read;
    if(response)
    {
        read = [response](::Ice::InputStream* istr)
        {
            istr->startEncapsulation();
            std::optional<::std::pair<const SmallStruct*, const SmallStruct*>> iceP_p3;
            std::optional<::std::pair<const SmallStruct*, const SmallStruct*>> ret;
            istr->readAll({1, 3}, ret, iceP_p3);
            istr->endEncapsulation();
            try
            {
                response(ret, iceP_p3);
            }
            catch(...)
            {
                throw ::std::current_exception();
            }
        };
    }
    auto outAsync = ::std::make_shared<::IceInternal::CustomLambdaOutgoing>(shared_from_this(), read, ex, sent);

    outAsync->invoke(iceC_Test_Initial_opSmallStructSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr);
    return [outAsync]() { outAsync->cancel(); };
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opSmallStructSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpSmallStructSeqResult>>& outAsync, const std::optional<::std::pair<const SmallStruct*, const SmallStruct*>>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opSmallStructSeq_name);
    outAsync->invoke(iceC_Test_Initial_opSmallStructSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpSmallStructSeqResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

::std::function<void()>
Test::InitialPrx::opSmallStructListAsync(const std::optional<::std::pair<const SmallStruct*, const SmallStruct*>>& iceP_p1,
                                         ::std::function<void (std::optional<::std::pair<const ::Test::SmallStruct*, const ::Test::SmallStruct*>>, std::optional<::std::pair<const ::Test::SmallStruct*, const ::Test::SmallStruct*>>)> response,
                                         ::std::function<void(::std::exception_ptr)> ex,
                                         ::std::function<void(bool)> sent,
                                         const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opSmallStructList_name);
    ::std::function<void(::Ice::InputStream*)> read;
    if(response)
    {
        read = [response](::Ice::InputStream* istr)
        {
            istr->startEncapsulation();
            std::optional<::std::pair<const SmallStruct*, const SmallStruct*>> iceP_p3;
            std::optional<::std::pair<const SmallStruct*, const SmallStruct*>> ret;
            istr->readAll({1, 3}, ret, iceP_p3);
            istr->endEncapsulation();
            try
            {
                response(ret, iceP_p3);
            }
            catch(...)
            {
                throw ::std::current_exception();
            }
        };
    }
    auto outAsync = ::std::make_shared<::IceInternal::CustomLambdaOutgoing>(shared_from_this(), read, ex, sent);

    outAsync->invoke(iceC_Test_Initial_opSmallStructList_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr);
    return [outAsync]() { outAsync->cancel(); };
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opSmallStructList(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpSmallStructListResult>>& outAsync, const std::optional<::std::pair<const SmallStruct*, const SmallStruct*>>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opSmallStructList_name);
    outAsync->invoke(iceC_Test_Initial_opSmallStructList_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpSmallStructListResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

::std::function<void()>
Test::InitialPrx::opFixedStructSeqAsync(const std::optional<::std::pair<const FixedStruct*, const FixedStruct*>>& iceP_p1,
                                        ::std::function<void (std::optional<::std::pair<const ::Test::FixedStruct*, const ::Test::FixedStruct*>>, std::optional<::std::pair<const ::Test::FixedStruct*, const ::Test::FixedStruct*>>)> response,
                                        ::std::function<void(::std::exception_ptr)> ex,
                                        ::std::function<void(bool)> sent,
                                        const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opFixedStructSeq_name);
    ::std::function<void(::Ice::InputStream*)> read;
    if(response)
    {
        read = [response](::Ice::InputStream* istr)
        {
            istr->startEncapsulation();
            std::optional<::std::pair<const FixedStruct*, const FixedStruct*>> iceP_p3;
            std::optional<::std::pair<const FixedStruct*, const FixedStruct*>> ret;
            istr->readAll({1, 3}, ret, iceP_p3);
            istr->endEncapsulation();
            try
            {
                response(ret, iceP_p3);
            }
            catch(...)
            {
                throw ::std::current_exception();
            }
        };
    }
    auto outAsync = ::std::make_shared<::IceInternal::CustomLambdaOutgoing>(shared_from_this(), read, ex, sent);

    outAsync->invoke(iceC_Test_Initial_opFixedStructSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr);
    return [outAsync]() { outAsync->cancel(); };
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opFixedStructSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpFixedStructSeqResult>>& outAsync, const std::optional<::std::pair<const FixedStruct*, const FixedStruct*>>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opFixedStructSeq_name);
    outAsync->invoke(iceC_Test_Initial_opFixedStructSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpFixedStructSeqResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

::std::function<void()>
Test::InitialPrx::opFixedStructListAsync(const std::optional<::std::pair<const FixedStruct*, const FixedStruct*>>& iceP_p1,
                                         ::std::function<void (std::optional<::std::pair<const ::Test::FixedStruct*, const ::Test::FixedStruct*>>, std::optional<::std::pair<const ::Test::FixedStruct*, const ::Test::FixedStruct*>>)> response,
                                         ::std::function<void(::std::exception_ptr)> ex,
                                         ::std::function<void(bool)> sent,
                                         const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opFixedStructList_name);
    ::std::function<void(::Ice::InputStream*)> read;
    if(response)
    {
        read = [response](::Ice::InputStream* istr)
        {
            istr->startEncapsulation();
            std::optional<::std::pair<const FixedStruct*, const FixedStruct*>> iceP_p3;
            std::optional<::std::pair<const FixedStruct*, const FixedStruct*>> ret;
            istr->readAll({1, 3}, ret, iceP_p3);
            istr->endEncapsulation();
            try
            {
                response(ret, iceP_p3);
            }
            catch(...)
            {
                throw ::std::current_exception();
            }
        };
    }
    auto outAsync = ::std::make_shared<::IceInternal::CustomLambdaOutgoing>(shared_from_this(), read, ex, sent);

    outAsync->invoke(iceC_Test_Initial_opFixedStructList_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr);
    return [outAsync]() { outAsync->cancel(); };
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opFixedStructList(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpFixedStructListResult>>& outAsync, const std::optional<::std::pair<const FixedStruct*, const FixedStruct*>>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opFixedStructList_name);
    outAsync->invoke(iceC_Test_Initial_opFixedStructList_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpFixedStructListResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opVarStructSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpVarStructSeqResult>>& outAsync, const std::optional<VarStructSeq>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opVarStructSeq_name);
    outAsync->invoke(iceC_Test_Initial_opVarStructSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpVarStructSeqResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opSerializable(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpSerializableResult>>& outAsync, const std::optional<Serializable>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opSerializable_name);
    outAsync->invoke(iceC_Test_Initial_opSerializable_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpSerializableResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opIntIntDict(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpIntIntDictResult>>& outAsync, const std::optional<IntIntDict>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opIntIntDict_name);
    outAsync->invoke(iceC_Test_Initial_opIntIntDict_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpIntIntDictResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opStringIntDict(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpStringIntDictResult>>& outAsync, const std::optional<StringIntDict>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opStringIntDict_name);
    outAsync->invoke(iceC_Test_Initial_opStringIntDict_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpStringIntDictResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opIntOneOptionalDict(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpIntOneOptionalDictResult>>& outAsync, const std::optional<IntOneOptionalDict>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opIntOneOptionalDict_name);
    outAsync->invoke(iceC_Test_Initial_opIntOneOptionalDict_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpIntOneOptionalDictResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

::std::function<void()>
Test::InitialPrx::opCustomIntStringDictAsync(const std::optional<::std::map< ::Ice::Int, ::Util::string_view>>& iceP_p1,
                                             ::std::function<void (std::optional<::std::map< ::Ice::Int, ::Util::string_view>>, std::optional<::std::map< ::Ice::Int, ::Util::string_view>>)> response,
                                             ::std::function<void(::std::exception_ptr)> ex,
                                             ::std::function<void(bool)> sent,
                                             const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opCustomIntStringDict_name);
    ::std::function<void(::Ice::InputStream*)> read;
    if(response)
    {
        read = [response](::Ice::InputStream* istr)
        {
            istr->startEncapsulation();
            std::optional<::std::map< ::Ice::Int, ::Util::string_view>> iceP_p3;
            std::optional<::std::map< ::Ice::Int, ::Util::string_view>> ret;
            istr->readAll({1, 3}, ret, iceP_p3);
            istr->endEncapsulation();
            try
            {
                response(ret, iceP_p3);
            }
            catch(...)
            {
                throw ::std::current_exception();
            }
        };
    }
    auto outAsync = ::std::make_shared<::IceInternal::CustomLambdaOutgoing>(shared_from_this(), read, ex, sent);

    outAsync->invoke(iceC_Test_Initial_opCustomIntStringDict_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr);
    return [outAsync]() { outAsync->cancel(); };
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opCustomIntStringDict(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpCustomIntStringDictResult>>& outAsync, const std::optional<::std::map< ::Ice::Int, ::Util::string_view>>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opCustomIntStringDict_name);
    outAsync->invoke(iceC_Test_Initial_opCustomIntStringDict_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpCustomIntStringDictResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opClassAndUnknownOptional(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<A>& iceP_p, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Initial_opClassAndUnknownOptional_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p);
            ostr->writePendingValues();
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_sendOptionalClass(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, bool iceP_req, const std::optional<::std::shared_ptr<OneOptional>>& iceP_o, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Initial_sendOptionalClass_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_req);
            ostr->writeAll({1}, iceP_o);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_returnOptionalClass(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<std::optional<::std::shared_ptr<::Test::OneOptional>>>>& outAsync, bool iceP_req, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_returnOptionalClass_name);
    outAsync->invoke(iceC_Test_Initial_returnOptionalClass_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_req);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            std::optional<::std::shared_ptr<OneOptional>> iceP_o;
            istr->readAll({1}, iceP_o);
            return iceP_o;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opG(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::G>>>& outAsync, const ::std::shared_ptr<G>& iceP_g, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opG_name);
    outAsync->invoke(iceC_Test_Initial_opG_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_g);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<G> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opVoid(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Initial_opVoid_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opMStruct1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<std::optional<::Test::SmallStruct>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opMStruct1_name);
    outAsync->invoke(iceC_Test_Initial_opMStruct1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            std::optional<SmallStruct> ret;
            istr->readAll({1}, ret);
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opMStruct2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpMStruct2Result>>& outAsync, const std::optional<SmallStruct>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opMStruct2_name);
    outAsync->invoke(iceC_Test_Initial_opMStruct2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpMStruct2Result v;
            istr->readAll({1, 3}, v.returnValue, v.p2);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opMSeq1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<std::optional<::Test::StringSeq>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opMSeq1_name);
    outAsync->invoke(iceC_Test_Initial_opMSeq1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            std::optional<StringSeq> ret;
            istr->readAll({1}, ret);
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opMSeq2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpMSeq2Result>>& outAsync, const std::optional<StringSeq>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opMSeq2_name);
    outAsync->invoke(iceC_Test_Initial_opMSeq2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpMSeq2Result v;
            istr->readAll({1, 3}, v.returnValue, v.p2);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opMDict1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<std::optional<::Test::StringIntDict>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opMDict1_name);
    outAsync->invoke(iceC_Test_Initial_opMDict1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            std::optional<StringIntDict> ret;
            istr->readAll({1}, ret);
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opMDict2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpMDict2Result>>& outAsync, const std::optional<StringIntDict>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opMDict2_name);
    outAsync->invoke(iceC_Test_Initial_opMDict2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpMDict2Result v;
            istr->readAll({1, 3}, v.returnValue, v.p2);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opMG1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<std::optional<::std::shared_ptr<::Test::G>>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opMG1_name);
    outAsync->invoke(iceC_Test_Initial_opMG1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            std::optional<::std::shared_ptr<G>> ret;
            istr->readAll({1}, ret);
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opMG2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpMG2Result>>& outAsync, const std::optional<::std::shared_ptr<G>>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opMG2_name);
    outAsync->invoke(iceC_Test_Initial_opMG2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpMG2Result v;
            istr->readAll({1, 3}, v.returnValue, v.p2);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_supportsRequiredParams(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_supportsRequiredParams_name);
    outAsync->invoke(iceC_Test_Initial_supportsRequiredParams_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_supportsJavaSerializable(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_supportsJavaSerializable_name);
    outAsync->invoke(iceC_Test_Initial_supportsJavaSerializable_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_supportsCsharpSerializable(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_supportsCsharpSerializable_name);
    outAsync->invoke(iceC_Test_Initial_supportsCsharpSerializable_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_supportsCppStringView(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_supportsCppStringView_name);
    outAsync->invoke(iceC_Test_Initial_supportsCppStringView_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_supportsNullOptional(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_supportsNullOptional_name);
    outAsync->invoke(iceC_Test_Initial_supportsNullOptional_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::InitialPrx::ice_staticId()
{
    return Initial::ice_staticId();
}

namespace Ice
{
}
