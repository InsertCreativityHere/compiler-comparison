// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#define ICE_BUILDING_GENERATED_CODE
#include "Test.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/FactoryTable.h>
#include <Ice/OutgoingAsync.h>
#include <algorithm>
#include <array>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{
}

void
Test::TestLocatorRegistryPrx::addObject(const std::optional<Ice::ObjectPrx>& iceP_obj, const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &TestLocatorRegistryPrx::_iceI_addObject, iceP_obj, context).get();
}

std::future<void>
Test::TestLocatorRegistryPrx::addObjectAsync(const std::optional<Ice::ObjectPrx>& iceP_obj, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &TestLocatorRegistryPrx::_iceI_addObject, iceP_obj, context);
}

std::function<void()>
Test::TestLocatorRegistryPrx::addObjectAsync(const std::optional<Ice::ObjectPrx>& iceP_obj, std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &Test::TestLocatorRegistryPrx::_iceI_addObject, iceP_obj, context);
}

void
Test::TestLocatorRegistryPrx::_iceI_addObject(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, const std::optional<Ice::ObjectPrx>& iceP_obj, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "addObject";

    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_obj);
        },
        nullptr);
}

Test::TestLocatorRegistryPrx::~TestLocatorRegistryPrx() = default;

const char*
Test::TestLocatorRegistryPrx::ice_staticId() noexcept
{
    return "::Test::TestLocatorRegistry";
}

std::int32_t
Test::TestLocatorPrx::getRequestCount(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::int32_t>(true, this, &TestLocatorPrx::_iceI_getRequestCount, context).get();
}

std::future<std::int32_t>
Test::TestLocatorPrx::getRequestCountAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::int32_t>(false, this, &TestLocatorPrx::_iceI_getRequestCount, context);
}

std::function<void()>
Test::TestLocatorPrx::getRequestCountAsync(std::function<void(std::int32_t)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<std::int32_t>(std::move(response), std::move(exception), std::move(sent), this, &Test::TestLocatorPrx::_iceI_getRequestCount, context);
}

void
Test::TestLocatorPrx::_iceI_getRequestCount(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::int32_t>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "getRequestCount";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Idempotent, std::nullopt, context,
        nullptr,
        nullptr);
}

Test::TestLocatorPrx::~TestLocatorPrx() = default;

const char*
Test::TestLocatorPrx::ice_staticId() noexcept
{
    return "::Test::TestLocator";
}

void
Test::ServerManagerPrx::startServer(const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &ServerManagerPrx::_iceI_startServer, context).get();
}

std::future<void>
Test::ServerManagerPrx::startServerAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &ServerManagerPrx::_iceI_startServer, context);
}

std::function<void()>
Test::ServerManagerPrx::startServerAsync(std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &Test::ServerManagerPrx::_iceI_startServer, context);
}

void
Test::ServerManagerPrx::_iceI_startServer(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "startServer";

    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        nullptr,
        nullptr);
}

void
Test::ServerManagerPrx::shutdown(const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &ServerManagerPrx::_iceI_shutdown, context).get();
}

std::future<void>
Test::ServerManagerPrx::shutdownAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &ServerManagerPrx::_iceI_shutdown, context);
}

std::function<void()>
Test::ServerManagerPrx::shutdownAsync(std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &Test::ServerManagerPrx::_iceI_shutdown, context);
}

void
Test::ServerManagerPrx::_iceI_shutdown(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "shutdown";

    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        nullptr,
        nullptr);
}

Test::ServerManagerPrx::~ServerManagerPrx() = default;

const char*
Test::ServerManagerPrx::ice_staticId() noexcept
{
    return "::Test::ServerManager";
}

void
Test::HelloPrx::sayHello(const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &HelloPrx::_iceI_sayHello, context).get();
}

std::future<void>
Test::HelloPrx::sayHelloAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &HelloPrx::_iceI_sayHello, context);
}

std::function<void()>
Test::HelloPrx::sayHelloAsync(std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &Test::HelloPrx::_iceI_sayHello, context);
}

void
Test::HelloPrx::_iceI_sayHello(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "sayHello";

    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        nullptr,
        nullptr);
}

Test::HelloPrx::~HelloPrx() = default;

const char*
Test::HelloPrx::ice_staticId() noexcept
{
    return "::Test::Hello";
}

void
Test::TestIntfPrx::shutdown(const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_shutdown, context).get();
}

std::future<void>
Test::TestIntfPrx::shutdownAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &TestIntfPrx::_iceI_shutdown, context);
}

std::function<void()>
Test::TestIntfPrx::shutdownAsync(std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &Test::TestIntfPrx::_iceI_shutdown, context);
}

void
Test::TestIntfPrx::_iceI_shutdown(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "shutdown";

    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        nullptr,
        nullptr);
}

std::optional<::Test::HelloPrx>
Test::TestIntfPrx::getHello(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::optional<HelloPrx>>(true, this, &TestIntfPrx::_iceI_getHello, context).get();
}

std::future<std::optional<::Test::HelloPrx>>
Test::TestIntfPrx::getHelloAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::optional<HelloPrx>>(false, this, &TestIntfPrx::_iceI_getHello, context);
}

std::function<void()>
Test::TestIntfPrx::getHelloAsync(std::function<void(std::optional<::Test::HelloPrx>)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<std::optional<HelloPrx>>(std::move(response), std::move(exception), std::move(sent), this, &Test::TestIntfPrx::_iceI_getHello, context);
}

void
Test::TestIntfPrx::_iceI_getHello(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::optional<HelloPrx>>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "getHello";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        nullptr,
        nullptr);
}

std::optional<::Test::HelloPrx>
Test::TestIntfPrx::getReplicatedHello(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::optional<HelloPrx>>(true, this, &TestIntfPrx::_iceI_getReplicatedHello, context).get();
}

std::future<std::optional<::Test::HelloPrx>>
Test::TestIntfPrx::getReplicatedHelloAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::optional<HelloPrx>>(false, this, &TestIntfPrx::_iceI_getReplicatedHello, context);
}

std::function<void()>
Test::TestIntfPrx::getReplicatedHelloAsync(std::function<void(std::optional<::Test::HelloPrx>)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<std::optional<HelloPrx>>(std::move(response), std::move(exception), std::move(sent), this, &Test::TestIntfPrx::_iceI_getReplicatedHello, context);
}

void
Test::TestIntfPrx::_iceI_getReplicatedHello(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::optional<HelloPrx>>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "getReplicatedHello";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        nullptr,
        nullptr);
}

void
Test::TestIntfPrx::migrateHello(const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_migrateHello, context).get();
}

std::future<void>
Test::TestIntfPrx::migrateHelloAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &TestIntfPrx::_iceI_migrateHello, context);
}

std::function<void()>
Test::TestIntfPrx::migrateHelloAsync(std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &Test::TestIntfPrx::_iceI_migrateHello, context);
}

void
Test::TestIntfPrx::_iceI_migrateHello(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "migrateHello";

    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        nullptr,
        nullptr);
}

Test::TestIntfPrx::~TestIntfPrx() = default;

const char*
Test::TestIntfPrx::ice_staticId() noexcept
{
    return "::Test::TestIntf";
}

std::vector<std::string>
Test::TestLocatorRegistry::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::LocatorRegistry", "::Ice::Object", "::Test::TestLocatorRegistry"};
    return allTypeIds;
}

std::string
Test::TestLocatorRegistry::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

const char*
Test::TestLocatorRegistry::ice_staticId() noexcept
{
    return "::Test::TestLocatorRegistry";
}

/// \cond INTERNAL
void
Test::TestLocatorRegistry::_iceD_addObject(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<Ice::ObjectPrx> iceP_obj;
    istr->readAll(iceP_obj);
    istr->endEncapsulation();
    this->addObject(std::move(iceP_obj), request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

void
Test::TestLocatorRegistry::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 8> allOperations{"addObject", "ice_id", "ice_ids", "ice_isA", "ice_ping", "setAdapterDirectProxy", "setReplicatedAdapterDirectProxy", "setServerProcessProxy"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation); // NOLINT(modernize-use-ranges)
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_addObject(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_setAdapterDirectProxy(request, std::move(sendResponse));
            break;
        }
        case 6:
        {
            _iceD_setReplicatedAdapterDirectProxy(request, std::move(sendResponse));
            break;
        }
        case 7:
        {
            _iceD_setServerProcessProxy(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}

std::vector<std::string>
Test::TestLocator::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Locator", "::Ice::Object", "::Test::TestLocator"};
    return allTypeIds;
}

std::string
Test::TestLocator::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

const char*
Test::TestLocator::ice_staticId() noexcept
{
    return "::Test::TestLocator";
}

/// \cond INTERNAL
void
Test::TestLocator::_iceD_getRequestCount(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) const // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Idempotent, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    const std::int32_t ret = this->getRequestCount(request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

void
Test::TestLocator::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 8> allOperations{"findAdapterById", "findObjectById", "getRegistry", "getRequestCount", "ice_id", "ice_ids", "ice_isA", "ice_ping"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation); // NOLINT(modernize-use-ranges)
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_findAdapterById(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_findObjectById(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_getRegistry(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_getRequestCount(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 6:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 7:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}

std::vector<std::string>
Test::ServerManager::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Object", "::Test::ServerManager"};
    return allTypeIds;
}

std::string
Test::ServerManager::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

const char*
Test::ServerManager::ice_staticId() noexcept
{
    return "::Test::ServerManager";
}

/// \cond INTERNAL
void
Test::ServerManager::_iceD_startServer(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->startServer(request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::ServerManager::_iceD_shutdown(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->shutdown(request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

void
Test::ServerManager::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 6> allOperations{"ice_id", "ice_ids", "ice_isA", "ice_ping", "shutdown", "startServer"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation); // NOLINT(modernize-use-ranges)
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_shutdown(request, std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_startServer(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}

std::vector<std::string>
Test::Hello::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Object", "::Test::Hello"};
    return allTypeIds;
}

std::string
Test::Hello::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

const char*
Test::Hello::ice_staticId() noexcept
{
    return "::Test::Hello";
}

/// \cond INTERNAL
void
Test::Hello::_iceD_sayHello(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->sayHello(request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

void
Test::Hello::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 5> allOperations{"ice_id", "ice_ids", "ice_isA", "ice_ping", "sayHello"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation); // NOLINT(modernize-use-ranges)
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_sayHello(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}

std::vector<std::string>
Test::TestIntf::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Object", "::Test::TestIntf"};
    return allTypeIds;
}

std::string
Test::TestIntf::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

const char*
Test::TestIntf::ice_staticId() noexcept
{
    return "::Test::TestIntf";
}

/// \cond INTERNAL
void
Test::TestIntf::_iceD_shutdown(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->shutdown(request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntf::_iceD_getHello(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    const std::optional<HelloPrx> ret = this->getHello(request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntf::_iceD_getReplicatedHello(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    const std::optional<HelloPrx> ret = this->getReplicatedHello(request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntf::_iceD_migrateHello(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->migrateHello(request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

void
Test::TestIntf::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 8> allOperations{"getHello", "getReplicatedHello", "ice_id", "ice_ids", "ice_isA", "ice_ping", "migrateHello", "shutdown"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation); // NOLINT(modernize-use-ranges)
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_getHello(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_getReplicatedHello(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        case 6:
        {
            _iceD_migrateHello(request, std::move(sendResponse));
            break;
        }
        case 7:
        {
            _iceD_shutdown(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}
