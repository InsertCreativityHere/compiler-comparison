//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `ClientPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <ClientPrivate.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::D3> iceC_Test_D3_init("::Test::D3");

const ::IceInternal::DefaultValueFactoryInit<::Test::PCUnknown> iceC_Test_PCUnknown_init("::Test::PCUnknown");

const ::IceInternal::DefaultValueFactoryInit<::Test::PCDerived> iceC_Test_PCDerived_init("::Test::PCDerived");

const ::IceInternal::DefaultValueFactoryInit<::Test::PCDerived2> iceC_Test_PCDerived2_init("::Test::PCDerived2");

const ::IceInternal::DefaultValueFactoryInit<::Test::PCDerived3> iceC_Test_PCDerived3_init("::Test::PCDerived3");

const ::IceInternal::DefaultValueFactoryInit<::Test::CompactPCDerived> iceC_Test_CompactPCDerived_init("::Test::CompactPCDerived");
const ::IceInternal::CompactIdInit iceC_Test_CompactPCDerived_compactIdInit ("::Test::CompactPCDerived", 57);

}

Test::D3::~D3()
{
}

const ::std::string&
Test::D3::ice_staticId()
{
    static const ::std::string typeId = "::Test::D3";
    return typeId;
}

Test::PCUnknown::~PCUnknown()
{
}

::std::shared_ptr<::Ice::SlicedData>
Test::PCUnknown::ice_getSlicedData() const
{
    return _iceSlicedData;
}

/// \cond STREAM
void
Test::PCUnknown::_iceWrite(::Ice::OutputStream* ostr) const
{
    ostr->startValue(_iceSlicedData);
    _iceWriteImpl(ostr);
    ostr->endValue();
}

void
Test::PCUnknown::_iceRead(::Ice::InputStream* istr)
{
    istr->startValue();
    _iceReadImpl(istr);
    _iceSlicedData = istr->endValue(true);
}
/// \endcond

const ::std::string&
Test::PCUnknown::ice_staticId()
{
    static const ::std::string typeId = "::Test::PCUnknown";
    return typeId;
}

Test::PCDerived::~PCDerived()
{
}

const ::std::string&
Test::PCDerived::ice_staticId()
{
    static const ::std::string typeId = "::Test::PCDerived";
    return typeId;
}

Test::PCDerived2::~PCDerived2()
{
}

const ::std::string&
Test::PCDerived2::ice_staticId()
{
    static const ::std::string typeId = "::Test::PCDerived2";
    return typeId;
}

Test::PCDerived3::~PCDerived3()
{
}

const ::std::string&
Test::PCDerived3::ice_staticId()
{
    static const ::std::string typeId = "::Test::PCDerived3";
    return typeId;
}

Test::CompactPCDerived::~CompactPCDerived()
{
}

const ::std::string&
Test::CompactPCDerived::ice_staticId()
{
    static const ::std::string typeId = "::Test::CompactPCDerived";
    return typeId;
}

#else // C++98 mapping

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::D3> iceC_Test_D3_init("::Test::D3");

const ::IceInternal::DefaultValueFactoryInit<::Test::PCUnknown> iceC_Test_PCUnknown_init("::Test::PCUnknown");

const ::IceInternal::DefaultValueFactoryInit<::Test::PCDerived> iceC_Test_PCDerived_init("::Test::PCDerived");

const ::IceInternal::DefaultValueFactoryInit<::Test::PCDerived2> iceC_Test_PCDerived2_init("::Test::PCDerived2");

const ::IceInternal::DefaultValueFactoryInit<::Test::PCDerived3> iceC_Test_PCDerived3_init("::Test::PCDerived3");

const ::IceInternal::DefaultValueFactoryInit<::Test::CompactPCDerived> iceC_Test_CompactPCDerived_init("::Test::CompactPCDerived");
const ::IceInternal::CompactIdInit iceC_Test_CompactPCDerived_compactIdInit ("::Test::CompactPCDerived", 57);

}

Test::D3::~D3()
{
}

const ::std::string&
Test::D3::ice_staticId()
{
    static const ::std::string typeId = "::Test::D3";
    return typeId;
}

Test::PCUnknown::~PCUnknown()
{
}

::Ice::SlicedDataPtr
Test::PCUnknown::ice_getSlicedData() const
{
    return _iceSlicedData;
}

/// \cond STREAM
void
Test::PCUnknown::_iceWrite(::Ice::OutputStream* ostr) const
{
    ostr->startValue(_iceSlicedData);
    _iceWriteImpl(ostr);
    ostr->endValue();
}

void
Test::PCUnknown::_iceRead(::Ice::InputStream* istr)
{
    istr->startValue();
    _iceReadImpl(istr);
    _iceSlicedData = istr->endValue(true);
}
/// \endcond

const ::std::string&
Test::PCUnknown::ice_staticId()
{
    static const ::std::string typeId = "::Test::PCUnknown";
    return typeId;
}

Test::PCDerived::~PCDerived()
{
}

const ::std::string&
Test::PCDerived::ice_staticId()
{
    static const ::std::string typeId = "::Test::PCDerived";
    return typeId;
}

Test::PCDerived2::~PCDerived2()
{
}

const ::std::string&
Test::PCDerived2::ice_staticId()
{
    static const ::std::string typeId = "::Test::PCDerived2";
    return typeId;
}

Test::PCDerived3::~PCDerived3()
{
}

const ::std::string&
Test::PCDerived3::ice_staticId()
{
    static const ::std::string typeId = "::Test::PCDerived3";
    return typeId;
}

Test::CompactPCDerived::~CompactPCDerived()
{
}

const ::std::string&
Test::CompactPCDerived::ice_staticId()
{
    static const ::std::string typeId = "::Test::CompactPCDerived";
    return typeId;
}

namespace Ice
{
}

#endif
