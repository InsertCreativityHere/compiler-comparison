//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `ClientPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include "ClientPrivate.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/FactoryTable.h>
#include <Ice/OutgoingAsync.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{
    const ::IceInternal::FactoryTableInit iceC_factoryTableInit;
    const ::IceInternal::DefaultValueFactoryInit<::Test::D3> iceC_Test_D3_init("::Test::D3");
    const ::IceInternal::DefaultValueFactoryInit<::Test::PCUnknown> iceC_Test_PCUnknown_init("::Test::PCUnknown");
    const ::IceInternal::DefaultValueFactoryInit<::Test::PCDerived> iceC_Test_PCDerived_init("::Test::PCDerived");
    const ::IceInternal::DefaultValueFactoryInit<::Test::PCDerived2> iceC_Test_PCDerived2_init("::Test::PCDerived2");
    const ::IceInternal::DefaultValueFactoryInit<::Test::PCDerived3> iceC_Test_PCDerived3_init("::Test::PCDerived3");
    const ::IceInternal::DefaultValueFactoryInit<::Test::CompactPCDerived> iceC_Test_CompactPCDerived_init("::Test::CompactPCDerived");
    const ::IceInternal::CompactIdInit iceC_Test_CompactPCDerived_compactIdInit ("::Test::CompactPCDerived", 57);
}

::std::string
Test::D3::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::D3::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::D3";
    return typeId;
}

::Ice::ValuePtr
Test::D3::_iceCloneImpl() const
{
    return CloneEnabler<D3>::clone(*this);
}

void
Test::D3::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<D3>::write(ostr, *this);
    ostr->endSlice();
    B::_iceWriteImpl(ostr);
}

void
Test::D3::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<D3>::read(istr, *this);
    istr->endSlice();
    B::_iceReadImpl(istr);
}

::std::string
Test::PCUnknown::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::PCUnknown::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::PCUnknown";
    return typeId;
}

::Ice::ValuePtr
Test::PCUnknown::_iceCloneImpl() const
{
    return CloneEnabler<PCUnknown>::clone(*this);
}

void
Test::PCUnknown::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<PCUnknown>::write(ostr, *this);
    ostr->endSlice();
    PBase::_iceWriteImpl(ostr);
}

void
Test::PCUnknown::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<PCUnknown>::read(istr, *this);
    istr->endSlice();
    PBase::_iceReadImpl(istr);
}

::std::string
Test::PCDerived::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::PCDerived::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::PCDerived";
    return typeId;
}

::Ice::ValuePtr
Test::PCDerived::_iceCloneImpl() const
{
    return CloneEnabler<PCDerived>::clone(*this);
}

void
Test::PCDerived::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<PCDerived>::write(ostr, *this);
    ostr->endSlice();
    PDerived::_iceWriteImpl(ostr);
}

void
Test::PCDerived::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<PCDerived>::read(istr, *this);
    istr->endSlice();
    PDerived::_iceReadImpl(istr);
}

::std::string
Test::PCDerived2::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::PCDerived2::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::PCDerived2";
    return typeId;
}

::Ice::ValuePtr
Test::PCDerived2::_iceCloneImpl() const
{
    return CloneEnabler<PCDerived2>::clone(*this);
}

void
Test::PCDerived2::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<PCDerived2>::write(ostr, *this);
    ostr->endSlice();
    PCDerived::_iceWriteImpl(ostr);
}

void
Test::PCDerived2::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<PCDerived2>::read(istr, *this);
    istr->endSlice();
    PCDerived::_iceReadImpl(istr);
}

::std::string
Test::PCDerived3::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::PCDerived3::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::PCDerived3";
    return typeId;
}

::Ice::ValuePtr
Test::PCDerived3::_iceCloneImpl() const
{
    return CloneEnabler<PCDerived3>::clone(*this);
}

void
Test::PCDerived3::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<PCDerived3>::write(ostr, *this);
    ostr->endSlice();
    PCDerived2::_iceWriteImpl(ostr);
}

void
Test::PCDerived3::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<PCDerived3>::read(istr, *this);
    istr->endSlice();
    PCDerived2::_iceReadImpl(istr);
}

::std::string
Test::CompactPCDerived::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::CompactPCDerived::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::CompactPCDerived";
    return typeId;
}

::Ice::ValuePtr
Test::CompactPCDerived::_iceCloneImpl() const
{
    return CloneEnabler<CompactPCDerived>::clone(*this);
}

void
Test::CompactPCDerived::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<CompactPCDerived>::write(ostr, *this);
    ostr->endSlice();
    CompactPDerived::_iceWriteImpl(ostr);
}

void
Test::CompactPCDerived::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<CompactPCDerived>::read(istr, *this);
    istr->endSlice();
    CompactPDerived::_iceReadImpl(istr);
}
