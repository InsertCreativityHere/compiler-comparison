//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `ServerPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __ServerPrivate_h__
#define __ServerPrivate_h__

#include <Ice/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include "Test.h"

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Test
{
}

namespace Test
{

class UnknownDerived : public Base
{
public:
    /// Default constructor.
    UnknownDerived() noexcept = default;

    /// One-shot constructor to initialize all data members.
    UnknownDerived(::std::string b, ::std::string ud) noexcept :
        Base(::std::move(b)),
        ud(::std::move(ud))
    {
    }

    /// Copy constructor.
    UnknownDerived(const UnknownDerived&) noexcept = default;

    /// Obtains a tuple containing all of the exception's data members.
    /// @return The data members in a tuple.
    std::tuple<const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(b, ud);
    }

    /// Obtains the Slice type ID of this exception.
    /// @return The fully-scoped type ID.
    static const char* ice_staticId() noexcept;

    const char* ice_id() const noexcept override;

    void ice_throw() const override;

    ::std::string ud;

protected:
    void _writeImpl(::Ice::OutputStream*) const override;

    void _readImpl(::Ice::InputStream*) override;
};

class UnknownIntermediate : public Base
{
public:
    /// Default constructor.
    UnknownIntermediate() noexcept = default;

    /// One-shot constructor to initialize all data members.
    UnknownIntermediate(::std::string b, ::std::string ui) noexcept :
        Base(::std::move(b)),
        ui(::std::move(ui))
    {
    }

    /// Copy constructor.
    UnknownIntermediate(const UnknownIntermediate&) noexcept = default;

    /// Obtains a tuple containing all of the exception's data members.
    /// @return The data members in a tuple.
    std::tuple<const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(b, ui);
    }

    /// Obtains the Slice type ID of this exception.
    /// @return The fully-scoped type ID.
    static const char* ice_staticId() noexcept;

    const char* ice_id() const noexcept override;

    void ice_throw() const override;

    ::std::string ui;

protected:
    void _writeImpl(::Ice::OutputStream*) const override;

    void _readImpl(::Ice::InputStream*) override;
};

class UnknownMostDerived1 : public KnownIntermediate
{
public:
    /// Default constructor.
    UnknownMostDerived1() noexcept = default;

    /// One-shot constructor to initialize all data members.
    UnknownMostDerived1(::std::string b, ::std::string ki, ::std::string umd1) noexcept :
        KnownIntermediate(::std::move(b), ::std::move(ki)),
        umd1(::std::move(umd1))
    {
    }

    /// Copy constructor.
    UnknownMostDerived1(const UnknownMostDerived1&) noexcept = default;

    /// Obtains a tuple containing all of the exception's data members.
    /// @return The data members in a tuple.
    std::tuple<const ::std::string&, const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(b, ki, umd1);
    }

    /// Obtains the Slice type ID of this exception.
    /// @return The fully-scoped type ID.
    static const char* ice_staticId() noexcept;

    const char* ice_id() const noexcept override;

    void ice_throw() const override;

    ::std::string umd1;

protected:
    void _writeImpl(::Ice::OutputStream*) const override;

    void _readImpl(::Ice::InputStream*) override;
};

class UnknownMostDerived2 : public UnknownIntermediate
{
public:
    /// Default constructor.
    UnknownMostDerived2() noexcept = default;

    /// One-shot constructor to initialize all data members.
    UnknownMostDerived2(::std::string b, ::std::string ui, ::std::string umd2) noexcept :
        UnknownIntermediate(::std::move(b), ::std::move(ui)),
        umd2(::std::move(umd2))
    {
    }

    /// Copy constructor.
    UnknownMostDerived2(const UnknownMostDerived2&) noexcept = default;

    /// Obtains a tuple containing all of the exception's data members.
    /// @return The data members in a tuple.
    std::tuple<const ::std::string&, const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(b, ui, umd2);
    }

    /// Obtains the Slice type ID of this exception.
    /// @return The fully-scoped type ID.
    static const char* ice_staticId() noexcept;

    const char* ice_id() const noexcept override;

    void ice_throw() const override;

    ::std::string umd2;

protected:
    void _writeImpl(::Ice::OutputStream*) const override;

    void _readImpl(::Ice::InputStream*) override;
};

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

#include <Ice/PopDisableWarnings.h>
#endif
