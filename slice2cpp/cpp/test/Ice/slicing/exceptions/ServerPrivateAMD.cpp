//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `ServerPrivateAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <ServerPrivateAMD.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <Ice/SlicedData.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 9
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::UnknownDerived> iceC_Test_UnknownDerived_init("::Test::UnknownDerived");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::UnknownIntermediate> iceC_Test_UnknownIntermediate_init("::Test::UnknownIntermediate");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::UnknownMostDerived1> iceC_Test_UnknownMostDerived1_init("::Test::UnknownMostDerived1");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::UnknownMostDerived2> iceC_Test_UnknownMostDerived2_init("::Test::UnknownMostDerived2");

const ::IceInternal::DefaultValueFactoryInit<::Test::SPreservedClass> iceC_Test_SPreservedClass_init("::Test::SPreservedClass");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::SPreserved1> iceC_Test_SPreserved1_init("::Test::SPreserved1");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::SPreserved2> iceC_Test_SPreserved2_init("::Test::SPreserved2");

}

Test::UnknownDerived::~UnknownDerived()
{
}

const ::std::string&
Test::UnknownDerived::ice_staticId()
{
    static const ::std::string typeId = "::Test::UnknownDerived";
    return typeId;
}

Test::UnknownIntermediate::~UnknownIntermediate()
{
}

const ::std::string&
Test::UnknownIntermediate::ice_staticId()
{
    static const ::std::string typeId = "::Test::UnknownIntermediate";
    return typeId;
}

Test::UnknownMostDerived1::~UnknownMostDerived1()
{
}

const ::std::string&
Test::UnknownMostDerived1::ice_staticId()
{
    static const ::std::string typeId = "::Test::UnknownMostDerived1";
    return typeId;
}

Test::UnknownMostDerived2::~UnknownMostDerived2()
{
}

const ::std::string&
Test::UnknownMostDerived2::ice_staticId()
{
    static const ::std::string typeId = "::Test::UnknownMostDerived2";
    return typeId;
}

Test::SPreserved1::~SPreserved1()
{
}

const ::std::string&
Test::SPreserved1::ice_staticId()
{
    static const ::std::string typeId = "::Test::SPreserved1";
    return typeId;
}

/// \cond STREAM
bool
Test::SPreserved1::_usesClasses() const
{
    return true;
}
/// \endcond

Test::SPreserved2::~SPreserved2()
{
}

const ::std::string&
Test::SPreserved2::ice_staticId()
{
    static const ::std::string typeId = "::Test::SPreserved2";
    return typeId;
}

Test::SPreservedClass::~SPreservedClass()
{
}

const ::std::string&
Test::SPreservedClass::ice_staticId()
{
    static const ::std::string typeId = "::Test::SPreservedClass";
    return typeId;
}

#else // C++98 mapping

namespace
{

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::UnknownDerived> iceC_Test_UnknownDerived_init("::Test::UnknownDerived");

}

Test::UnknownDerived::UnknownDerived(const ::std::string& b, const ::std::string& ud) :
    Base(b),
    ud(ud)
{
}

#ifdef ICE_CPP11_COMPILER
Test::UnknownDerived::~UnknownDerived()
{
}
#else
Test::UnknownDerived::~UnknownDerived() throw()
{
}
#endif

::std::string
Test::UnknownDerived::ice_id() const
{
    return "::Test::UnknownDerived";
}

Test::UnknownDerived*
Test::UnknownDerived::ice_clone() const
{
    return new UnknownDerived(*this);
}

void
Test::UnknownDerived::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::UnknownDerived::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::UnknownDerived", -1, false);
    ::Ice::StreamWriter< UnknownDerived, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    Base::_writeImpl(ostr);
}

void
Test::UnknownDerived::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< UnknownDerived, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    Base::_readImpl(istr);
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::UnknownIntermediate> iceC_Test_UnknownIntermediate_init("::Test::UnknownIntermediate");

}

Test::UnknownIntermediate::UnknownIntermediate(const ::std::string& b, const ::std::string& ui) :
    Base(b),
    ui(ui)
{
}

#ifdef ICE_CPP11_COMPILER
Test::UnknownIntermediate::~UnknownIntermediate()
{
}
#else
Test::UnknownIntermediate::~UnknownIntermediate() throw()
{
}
#endif

::std::string
Test::UnknownIntermediate::ice_id() const
{
    return "::Test::UnknownIntermediate";
}

Test::UnknownIntermediate*
Test::UnknownIntermediate::ice_clone() const
{
    return new UnknownIntermediate(*this);
}

void
Test::UnknownIntermediate::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::UnknownIntermediate::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::UnknownIntermediate", -1, false);
    ::Ice::StreamWriter< UnknownIntermediate, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    Base::_writeImpl(ostr);
}

void
Test::UnknownIntermediate::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< UnknownIntermediate, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    Base::_readImpl(istr);
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::UnknownMostDerived1> iceC_Test_UnknownMostDerived1_init("::Test::UnknownMostDerived1");

}

Test::UnknownMostDerived1::UnknownMostDerived1(const ::std::string& b, const ::std::string& ki, const ::std::string& umd1) :
    KnownIntermediate(b, ki),
    umd1(umd1)
{
}

#ifdef ICE_CPP11_COMPILER
Test::UnknownMostDerived1::~UnknownMostDerived1()
{
}
#else
Test::UnknownMostDerived1::~UnknownMostDerived1() throw()
{
}
#endif

::std::string
Test::UnknownMostDerived1::ice_id() const
{
    return "::Test::UnknownMostDerived1";
}

Test::UnknownMostDerived1*
Test::UnknownMostDerived1::ice_clone() const
{
    return new UnknownMostDerived1(*this);
}

void
Test::UnknownMostDerived1::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::UnknownMostDerived1::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::UnknownMostDerived1", -1, false);
    ::Ice::StreamWriter< UnknownMostDerived1, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    KnownIntermediate::_writeImpl(ostr);
}

void
Test::UnknownMostDerived1::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< UnknownMostDerived1, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    KnownIntermediate::_readImpl(istr);
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::UnknownMostDerived2> iceC_Test_UnknownMostDerived2_init("::Test::UnknownMostDerived2");

}

Test::UnknownMostDerived2::UnknownMostDerived2(const ::std::string& b, const ::std::string& ui, const ::std::string& umd2) :
    UnknownIntermediate(b, ui),
    umd2(umd2)
{
}

#ifdef ICE_CPP11_COMPILER
Test::UnknownMostDerived2::~UnknownMostDerived2()
{
}
#else
Test::UnknownMostDerived2::~UnknownMostDerived2() throw()
{
}
#endif

::std::string
Test::UnknownMostDerived2::ice_id() const
{
    return "::Test::UnknownMostDerived2";
}

Test::UnknownMostDerived2*
Test::UnknownMostDerived2::ice_clone() const
{
    return new UnknownMostDerived2(*this);
}

void
Test::UnknownMostDerived2::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::UnknownMostDerived2::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::UnknownMostDerived2", -1, false);
    ::Ice::StreamWriter< UnknownMostDerived2, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    UnknownIntermediate::_writeImpl(ostr);
}

void
Test::UnknownMostDerived2::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< UnknownMostDerived2, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    UnknownIntermediate::_readImpl(istr);
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::SPreserved1> iceC_Test_SPreserved1_init("::Test::SPreserved1");

}

Test::SPreserved1::SPreserved1(const ::std::string& b, const ::std::string& kp, const ::std::string& kpd, const BaseClassPtr& p1) :
    KnownPreservedDerived(b, kp, kpd),
    p1(p1)
{
}

#ifdef ICE_CPP11_COMPILER
Test::SPreserved1::~SPreserved1()
{
}
#else
Test::SPreserved1::~SPreserved1() throw()
{
}
#endif

::std::string
Test::SPreserved1::ice_id() const
{
    return "::Test::SPreserved1";
}

Test::SPreserved1*
Test::SPreserved1::ice_clone() const
{
    return new SPreserved1(*this);
}

void
Test::SPreserved1::ice_throw() const
{
    throw *this;
}

bool
Test::SPreserved1::_usesClasses() const
{
    return true;
}

/// \cond STREAM
void
Test::SPreserved1::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::SPreserved1", -1, false);
    ::Ice::StreamWriter< SPreserved1, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    KnownPreservedDerived::_writeImpl(ostr);
}

void
Test::SPreserved1::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< SPreserved1, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    KnownPreservedDerived::_readImpl(istr);
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::SPreserved2> iceC_Test_SPreserved2_init("::Test::SPreserved2");

}

Test::SPreserved2::SPreserved2(const ::std::string& b, const ::std::string& kp, const ::std::string& kpd, const BaseClassPtr& p1, const BaseClassPtr& p2) :
    SPreserved1(b, kp, kpd, p1),
    p2(p2)
{
}

#ifdef ICE_CPP11_COMPILER
Test::SPreserved2::~SPreserved2()
{
}
#else
Test::SPreserved2::~SPreserved2() throw()
{
}
#endif

::std::string
Test::SPreserved2::ice_id() const
{
    return "::Test::SPreserved2";
}

Test::SPreserved2*
Test::SPreserved2::ice_clone() const
{
    return new SPreserved2(*this);
}

void
Test::SPreserved2::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::SPreserved2::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::SPreserved2", -1, false);
    ::Ice::StreamWriter< SPreserved2, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    SPreserved1::_writeImpl(ostr);
}

void
Test::SPreserved2::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< SPreserved2, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    SPreserved1::_readImpl(istr);
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(SPreservedClass* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< SPreservedClass>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new SPreservedClass;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::SPreservedClass::_newInstance() const
{
    return new SPreservedClass;
}
/// \endcond

const ::std::string&
IceProxy::Test::SPreservedClass::ice_staticId()
{
    return ::Test::SPreservedClass::ice_staticId();
}

Test::SPreservedClass::~SPreservedClass()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(SPreservedClass* p) { return p; }

/// \endcond

#if defined(_MSC_VER) && (_MSC_VER >= 1900)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
Test::SPreservedClass::ice_clone() const
{
    ::Ice::Object* p = new SPreservedClass(*this);
    return p;
}
#if defined(_MSC_VER) && (_MSC_VER >= 1900)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_Test_SPreservedClass_ids[3] =
{
    "::Ice::Object",
    "::Test::BaseClass",
    "::Test::SPreservedClass"
};

}

bool
Test::SPreservedClass::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_SPreservedClass_ids, iceC_Test_SPreservedClass_ids + 3, s);
}

::std::vector< ::std::string>
Test::SPreservedClass::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_SPreservedClass_ids[0], &iceC_Test_SPreservedClass_ids[3]);
}

const ::std::string&
Test::SPreservedClass::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::SPreservedClass::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Test::SPreservedClass";
    return typeId;
#else
    return iceC_Test_SPreservedClass_ids[2];
#endif
}

/// \cond STREAM
void
Test::SPreservedClass::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< SPreservedClass, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    BaseClass::_iceWriteImpl(ostr);
}

void
Test::SPreservedClass::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< SPreservedClass, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    BaseClass::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::SPreservedClass> iceC_Test_SPreservedClass_init("::Test::SPreservedClass");
}

::Ice::ValueFactoryPtr
Test::SPreservedClass::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::SPreservedClass::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(SPreservedClassPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = SPreservedClassPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(SPreservedClass::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
