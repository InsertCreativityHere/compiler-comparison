//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `ClientPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <ClientPrivate.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <Ice/SlicedData.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::PreservedClass> iceC_Test_PreservedClass_init("::Test::PreservedClass");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::Preserved1> iceC_Test_Preserved1_init("::Test::Preserved1");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::Preserved2> iceC_Test_Preserved2_init("::Test::Preserved2");

}

Test::Preserved1::~Preserved1()
{
}

const ::std::string&
Test::Preserved1::ice_staticId()
{
    static const ::std::string typeId = "::Test::Preserved1";
    return typeId;
}

/// \cond STREAM
bool
Test::Preserved1::_usesClasses() const
{
    return true;
}
/// \endcond

Test::Preserved2::~Preserved2()
{
}

const ::std::string&
Test::Preserved2::ice_staticId()
{
    static const ::std::string typeId = "::Test::Preserved2";
    return typeId;
}

Test::PreservedClass::~PreservedClass()
{
}

const ::std::string&
Test::PreservedClass::ice_staticId()
{
    static const ::std::string typeId = "::Test::PreservedClass";
    return typeId;
}

#else // C++98 mapping

namespace
{

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::Preserved1> iceC_Test_Preserved1_init("::Test::Preserved1");

}

Test::Preserved1::Preserved1(const ::std::string& b, const ::std::string& kp, const ::std::string& kpd, const BaseClassPtr& p1) :
    KnownPreservedDerived(b, kp, kpd),
    p1(p1)
{
}

#ifdef ICE_CPP11_COMPILER
Test::Preserved1::~Preserved1()
{
}
#else
Test::Preserved1::~Preserved1() throw()
{
}
#endif

::std::string
Test::Preserved1::ice_id() const
{
    return "::Test::Preserved1";
}

Test::Preserved1*
Test::Preserved1::ice_clone() const
{
    return new Preserved1(*this);
}

void
Test::Preserved1::ice_throw() const
{
    throw *this;
}

bool
Test::Preserved1::_usesClasses() const
{
    return true;
}

/// \cond STREAM
void
Test::Preserved1::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::Preserved1", -1, false);
    ::Ice::StreamWriter< Preserved1, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    KnownPreservedDerived::_writeImpl(ostr);
}

void
Test::Preserved1::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Preserved1, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    KnownPreservedDerived::_readImpl(istr);
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::Preserved2> iceC_Test_Preserved2_init("::Test::Preserved2");

}

Test::Preserved2::Preserved2(const ::std::string& b, const ::std::string& kp, const ::std::string& kpd, const BaseClassPtr& p1, const BaseClassPtr& p2) :
    Preserved1(b, kp, kpd, p1),
    p2(p2)
{
}

#ifdef ICE_CPP11_COMPILER
Test::Preserved2::~Preserved2()
{
}
#else
Test::Preserved2::~Preserved2() throw()
{
}
#endif

::std::string
Test::Preserved2::ice_id() const
{
    return "::Test::Preserved2";
}

Test::Preserved2*
Test::Preserved2::ice_clone() const
{
    return new Preserved2(*this);
}

void
Test::Preserved2::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::Preserved2::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::Preserved2", -1, false);
    ::Ice::StreamWriter< Preserved2, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    Preserved1::_writeImpl(ostr);
}

void
Test::Preserved2::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Preserved2, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    Preserved1::_readImpl(istr);
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(PreservedClass* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< PreservedClass>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new PreservedClass;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::PreservedClass::_newInstance() const
{
    return new PreservedClass;
}
/// \endcond

const ::std::string&
IceProxy::Test::PreservedClass::ice_staticId()
{
    return ::Test::PreservedClass::ice_staticId();
}

Test::PreservedClass::~PreservedClass()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(PreservedClass* p) { return p; }

/// \endcond

#if defined(_MSC_VER) && (_MSC_VER >= 1900)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
Test::PreservedClass::ice_clone() const
{
    ::Ice::Object* p = new PreservedClass(*this);
    return p;
}
#if defined(_MSC_VER) && (_MSC_VER >= 1900)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_Test_PreservedClass_ids[3] =
{
    "::Ice::Object",
    "::Test::BaseClass",
    "::Test::PreservedClass"
};

}

bool
Test::PreservedClass::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_PreservedClass_ids, iceC_Test_PreservedClass_ids + 3, s);
}

::std::vector< ::std::string>
Test::PreservedClass::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_PreservedClass_ids[0], &iceC_Test_PreservedClass_ids[3]);
}

const ::std::string&
Test::PreservedClass::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::PreservedClass::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Test::PreservedClass";
    return typeId;
#else
    return iceC_Test_PreservedClass_ids[2];
#endif
}

/// \cond STREAM
void
Test::PreservedClass::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< PreservedClass, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    BaseClass::_iceWriteImpl(ostr);
}

void
Test::PreservedClass::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< PreservedClass, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    BaseClass::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::PreservedClass> iceC_Test_PreservedClass_init("::Test::PreservedClass");
}

::Ice::ValueFactoryPtr
Test::PreservedClass::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::PreservedClass::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(PreservedClassPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = PreservedClassPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(PreservedClass::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
