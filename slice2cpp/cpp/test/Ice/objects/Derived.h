//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Derived.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef Derived_h_
#define Derived_h_

#include <Ice/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include "Test.h"
#include "Forward.h"

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Test
{
    class Derived;
    using DerivedPtr = ::std::shared_ptr<Derived>;

}

namespace Test
{

class Derived : public Base
{
public:
    /// Default constructor.
    Derived() noexcept = default;

    /// One-shot constructor to initialize all data members.
    Derived(::Test::S theS, ::std::string str, ::std::string b) noexcept :
        Base(::std::move(theS), ::std::move(str)),
        b(::std::move(b))
    {
    }

    /// Obtains the Slice type ID of this value.
    /// @return The fully-scoped type ID.
    static const char* ice_staticId() noexcept;

    [[nodiscard]] const char* ice_id() const noexcept override;

    /// Obtains a tuple containing all of the value's data members.
    /// @return The data members in a tuple.
    [[nodiscard]] std::tuple<const ::Test::S&, const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(theS, str, b);
    }

    /// Creates a shallow polymorphic copy of this instance.
    /// @return The cloned value.
    [[nodiscard]] DerivedPtr ice_clone() const { return ::std::static_pointer_cast<Derived>(_iceCloneImpl()); }

    ::std::string b;

protected:
    Derived(const Derived&) = default;

    [[nodiscard]] ::Ice::ValuePtr _iceCloneImpl() const override;
    void _iceWriteImpl(::Ice::OutputStream*) const override;

    void _iceReadImpl(::Ice::InputStream*) override;
};

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

#include <Ice/PopDisableWarnings.h>
#endif
