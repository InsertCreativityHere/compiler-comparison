//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `DerivedEx.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <DerivedEx.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::DerivedEx> iceC_Test_DerivedEx_init("::Test::DerivedEx");

}

Test::DerivedEx::~DerivedEx()
{
}

const ::std::string&
Test::DerivedEx::ice_staticId()
{
    static const ::std::string typeId = "::Test::DerivedEx";
    return typeId;
}

#else // C++98 mapping

namespace
{

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::DerivedEx> iceC_Test_DerivedEx_init("::Test::DerivedEx");

}

Test::DerivedEx::DerivedEx(const ::std::string& reason) :
    BaseEx(reason)
{
}
Test::DerivedEx::~DerivedEx()
{
}

::std::string
Test::DerivedEx::ice_id() const
{
    return "::Test::DerivedEx";
}

Test::DerivedEx*
Test::DerivedEx::ice_clone() const
{
    return new DerivedEx(*this);
}

void
Test::DerivedEx::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::DerivedEx::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::DerivedEx", -1, false);
    ::Ice::StreamWriter< DerivedEx, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    BaseEx::_writeImpl(ostr);
}

void
Test::DerivedEx::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< DerivedEx, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    BaseEx::_readImpl(istr);
}
/// \endcond

namespace Ice
{
}

#endif
