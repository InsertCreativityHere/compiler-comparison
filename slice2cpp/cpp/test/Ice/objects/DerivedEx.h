//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `DerivedEx.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __DerivedEx_h__
#define __DerivedEx_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include "Test.h"
#include "Forward.h"

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Test
{
}

namespace Test
{

class DerivedEx : public BaseEx
{
public:
    using BaseEx::BaseEx;

    /**
     * One-shot constructor to initialize all data members.
     */
    DerivedEx(::std::string reason) noexcept :
        BaseEx(::std::move(reason))
    {
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

    ::std::string ice_id() const override;

    void ice_throw() const override;

protected:
    void _writeImpl(::Ice::OutputStream*) const override;

    void _readImpl(::Ice::InputStream*) override;
};

/// \cond INTERNAL
static DerivedEx _iceS_DerivedEx_init;
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamWriter<::Test::DerivedEx>
{
    static void write(OutputStream*, const ::Test::DerivedEx&)
    {
    }
};

template<>
struct StreamReader<::Test::DerivedEx>
{
    static void read(InputStream*, ::Test::DerivedEx&)
    {
    }
};

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
