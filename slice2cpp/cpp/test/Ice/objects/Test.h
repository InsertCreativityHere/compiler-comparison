//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Test
{

class Base;
class B;
class C;
class A;
class D;
class E;
class F;
class G;
class I;
class IPrx;
class J;
class JPrx;
class CompactExt;
class Compact;

namespace Inner
{

class A;

namespace Sub
{

class A;

}

}
class A1;
class B1;
class D1;
class Recursive;
class K;
class L;
class M;
class F1;
class F2;
class F2Prx;
class F3;
class Initial;
class InitialPrx;
class TestIntf;
class TestIntfPrx;
class Empty;
class AlsoEmpty;
class UnexpectedObjectExceptionTest;
class UnexpectedObjectExceptionTestPrx;
class COneMember;
class CTwoMembers;

}

namespace Test
{

struct S
{
    ::std::string str;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(str);
    }
};

class BaseEx : public ::Ice::UserExceptionHelper<BaseEx, ::Ice::UserException>
{
public:

    virtual ~BaseEx();

    BaseEx(const BaseEx&) = default;

    BaseEx() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    BaseEx(const ::std::string& reason) :
        reason(reason)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(reason);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string reason;
};

/// \cond INTERNAL
static BaseEx _iceS_BaseEx_init;
/// \endcond

using BaseSeq = ::std::vector<::std::shared_ptr<Base>>;

constexpr int CompactExtId = 789;

namespace Inner
{

class Ex : public ::Ice::UserExceptionHelper<Ex, ::Ice::UserException>
{
public:

    virtual ~Ex();

    Ex(const Ex&) = default;

    Ex() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Ex(const ::std::string& reason) :
        reason(reason)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(reason);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string reason;
};

namespace Sub
{

class Ex : public ::Ice::UserExceptionHelper<Ex, ::Ice::UserException>
{
public:

    virtual ~Ex();

    Ex(const Ex&) = default;

    Ex() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Ex(const ::std::string& reason) :
        reason(reason)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(reason);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string reason;
};

}

}

class EBase : public ::Ice::UserExceptionHelper<EBase, ::Ice::UserException>
{
public:

    virtual ~EBase();

    EBase(const EBase&) = default;

    EBase() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    EBase(const ::std::shared_ptr<A1>& a1, const ::std::shared_ptr<A1>& a2) :
        a1(a1),
        a2(a2)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::shared_ptr<::Test::A1>&, const ::std::shared_ptr<::Test::A1>&> ice_tuple() const
    {
        return std::tie(a1, a2);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /// \cond STREAM
    virtual bool _usesClasses() const override;
    /// \endcond

    ::std::shared_ptr<::Test::A1> a1;
    ::std::shared_ptr<::Test::A1> a2;
};

class EDerived : public ::Ice::UserExceptionHelper<EDerived, EBase>
{
public:

    virtual ~EDerived();

    EDerived(const EDerived&) = default;

    EDerived() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    EDerived(const ::std::shared_ptr<A1>& a1, const ::std::shared_ptr<A1>& a2, const ::std::shared_ptr<A1>& a3, const ::std::shared_ptr<A1>& a4) :
        ::Ice::UserExceptionHelper<EDerived, EBase>(a1, a2),
        a3(a3),
        a4(a4)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::shared_ptr<::Test::A1>&, const ::std::shared_ptr<::Test::A1>&, const ::std::shared_ptr<::Test::A1>&, const ::std::shared_ptr<::Test::A1>&> ice_tuple() const
    {
        return std::tie(a1, a2, a3, a4);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::shared_ptr<::Test::A1> a3;
    ::std::shared_ptr<::Test::A1> a4;
};

using ValueSeq = ::std::vector<::std::shared_ptr<::Ice::Value>>;

using ValueMap = ::std::map<::std::string, ::std::shared_ptr<::Ice::Value>>;

struct StructKey
{
    int i;
    ::std::string s;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const ::std::string&> ice_tuple() const
    {
        return std::tie(i, s);
    }
};

using LMap = ::std::map<StructKey, ::std::shared_ptr<L>>;

class EOneMember : public ::Ice::UserExceptionHelper<EOneMember, ::Ice::UserException>
{
public:

    virtual ~EOneMember();

    EOneMember(const EOneMember&) = default;

    EOneMember() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    EOneMember(const ::std::shared_ptr<Empty>& e) :
        e(e)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::shared_ptr<::Test::Empty>&> ice_tuple() const
    {
        return std::tie(e);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /// \cond STREAM
    virtual bool _usesClasses() const override;
    /// \endcond

    ::std::shared_ptr<::Test::Empty> e;
};

class ETwoMembers : public ::Ice::UserExceptionHelper<ETwoMembers, ::Ice::UserException>
{
public:

    virtual ~ETwoMembers();

    ETwoMembers(const ETwoMembers&) = default;

    ETwoMembers() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    ETwoMembers(const ::std::shared_ptr<Empty>& e1, const ::std::shared_ptr<Empty>& e2) :
        e1(e1),
        e2(e2)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::shared_ptr<::Test::Empty>&, const ::std::shared_ptr<::Test::Empty>&> ice_tuple() const
    {
        return std::tie(e1, e2);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /// \cond STREAM
    virtual bool _usesClasses() const override;
    /// \endcond

    ::std::shared_ptr<::Test::Empty> e1;
    ::std::shared_ptr<::Test::Empty> e2;
};

struct SOneMember
{
    ::std::shared_ptr<::Test::Empty> e;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::shared_ptr<::Test::Empty>&> ice_tuple() const
    {
        return std::tie(e);
    }
};

struct STwoMembers
{
    ::std::shared_ptr<::Test::Empty> e1;
    ::std::shared_ptr<::Test::Empty> e2;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::shared_ptr<::Test::Empty>&, const ::std::shared_ptr<::Test::Empty>&> ice_tuple() const
    {
        return std::tie(e1, e2);
    }
};

using DOneMember = ::std::map<int, ::std::shared_ptr<COneMember>>;

using DTwoMembers = ::std::map<int, ::std::shared_ptr<CTwoMembers>>;

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace Test
{

class I : public virtual ::Ice::Object
{
public:

    using ProxyType = IPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

class J : public virtual I
{
public:

    using ProxyType = JPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

class Initial : public virtual ::Ice::Object
{
public:

    using ProxyType = InitialPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void shutdown(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<B> getB1(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getB1(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<B> getB2(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getB2(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<C> getC(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getC(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<D> getD(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getD(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<E> getE(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getE(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<F> getF(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getF(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setRecursive(::std::shared_ptr<Recursive> p, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_setRecursive(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool supportsClassGraphDepthMax(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_supportsClassGraphDepthMax(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setCycle(::std::shared_ptr<Recursive> r, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_setCycle(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool acceptsClassCycles(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_acceptsClassCycles(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Marshaled result structure for operation getMB.
     */
    class GetMBMarshaledResult : public ::Ice::MarshaledResult
    {
    public:
        /**
         * Marshals the results immediately.
         * @param current The Current object for the invocation.
         */
        GetMBMarshaledResult(const ::std::shared_ptr<B>& returnValue, const ::Ice::Current& current);
    };

    virtual GetMBMarshaledResult getMB(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getMB(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Marshaled result structure for operation getAMDMBAsync.
     */
    class GetAMDMBMarshaledResult : public ::Ice::MarshaledResult
    {
    public:
        /**
         * Marshals the results immediately.
         * @param current The Current object for the invocation.
         */
        GetAMDMBMarshaledResult(const ::std::shared_ptr<B>& returnValue, const ::Ice::Current& current);
    };

    virtual void getAMDMBAsync(::std::function<void(const GetAMDMBMarshaledResult&)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getAMDMB(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to getAll.
     */
    struct GetAllResult
    {
        ::std::shared_ptr<B> b1;
        ::std::shared_ptr<B> b2;
        ::std::shared_ptr<C> theC;
        ::std::shared_ptr<D> theD;
    };

    virtual void getAll(::std::shared_ptr<B>& b1, ::std::shared_ptr<B>& b2, ::std::shared_ptr<C>& theC, ::std::shared_ptr<D>& theD, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getAll(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<K> getK(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getK(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opValue.
     */
    struct OpValueResult
    {
        ::std::shared_ptr<::Ice::Value> returnValue;
        ::std::shared_ptr<::Ice::Value> v2;
    };

    virtual ::std::shared_ptr<::Ice::Value> opValue(::std::shared_ptr<::Ice::Value> v1, ::std::shared_ptr<::Ice::Value>& v2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opValue(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opValueSeq.
     */
    struct OpValueSeqResult
    {
        ValueSeq returnValue;
        ValueSeq v2;
    };

    virtual ValueSeq opValueSeq(ValueSeq v1, ValueSeq& v2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opValueSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opValueMap.
     */
    struct OpValueMapResult
    {
        ValueMap returnValue;
        ValueMap v2;
    };

    virtual ValueMap opValueMap(ValueMap v1, ValueMap& v2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opValueMap(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<D1> getD1(::std::shared_ptr<D1> d1, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getD1(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void throwEDerived(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_throwEDerived(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setG(::std::shared_ptr<G> theG, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_setG(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opBaseSeq.
     */
    struct OpBaseSeqResult
    {
        BaseSeq returnValue;
        BaseSeq outSeq;
    };

    virtual BaseSeq opBaseSeq(BaseSeq inSeq, BaseSeq& outSeq, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opBaseSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<Compact> getCompact(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getCompact(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<::Test::Inner::A> getInnerA(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getInnerA(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<::Test::Inner::Sub::A> getInnerSubA(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getInnerSubA(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void throwInnerEx(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_throwInnerEx(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void throwInnerSubEx(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_throwInnerSubEx(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opM.
     */
    struct OpMResult
    {
        ::std::shared_ptr<M> returnValue;
        ::std::shared_ptr<M> v2;
    };

    virtual ::std::shared_ptr<M> opM(::std::shared_ptr<M> v1, ::std::shared_ptr<M>& v2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opM(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opF1.
     */
    struct OpF1Result
    {
        ::std::shared_ptr<F1> returnValue;
        ::std::shared_ptr<F1> f12;
    };

    virtual ::std::shared_ptr<F1> opF1(::std::shared_ptr<F1> f11, ::std::shared_ptr<F1>& f12, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opF1(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opF2.
     */
    struct OpF2Result
    {
        ::std::shared_ptr<F2Prx> returnValue;
        ::std::shared_ptr<F2Prx> f22;
    };

    virtual ::std::shared_ptr<F2Prx> opF2(::std::shared_ptr<F2Prx> f21, ::std::shared_ptr<F2Prx>& f22, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opF2(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool hasF3(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_hasF3(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opF3.
     */
    struct OpF3Result
    {
        ::std::shared_ptr<F3> returnValue;
        ::std::shared_ptr<F3> f32;
    };

    virtual ::std::shared_ptr<F3> opF3(::std::shared_ptr<F3> f31, ::std::shared_ptr<F3>& f32, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opF3(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class TestIntf : public virtual ::Ice::Object
{
public:

    using ProxyType = TestIntfPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::shared_ptr<Base> opDerived(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opDerived(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void throwDerived(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_throwDerived(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class UnexpectedObjectExceptionTest : public virtual ::Ice::Object
{
public:

    using ProxyType = UnexpectedObjectExceptionTestPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::shared_ptr<Empty> op(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_op(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace Test
{

class Base : public ::Ice::ValueHelper<Base, ::Ice::Value>
{
public:

    virtual ~Base();

    Base() = default;

    Base(const Base&) = default;
    Base(Base&&) = default;
    Base& operator=(const Base&) = default;
    Base& operator=(Base&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Base(const ::Test::S& theS, const ::std::string& str) :
        theS(theS),
        str(str)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::S&, const ::std::string&> ice_tuple() const
    {
        return std::tie(theS, str);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::Test::S theS;
    ::std::string str;
};

/// \cond INTERNAL
static Base _iceS_Base_init;
/// \endcond

class A : public ::Ice::ValueHelper<A, ::Ice::Value>
{
public:

    virtual ~A();

    A() = default;

    A(const A&) = default;
    A(A&&) = default;
    A& operator=(const A&) = default;
    A& operator=(A&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    A(const ::std::shared_ptr<::Test::B>& theB, const ::std::shared_ptr<::Test::C>& theC, bool preMarshalInvoked, bool postUnmarshalInvoked) :
        theB(theB),
        theC(theC),
        preMarshalInvoked(preMarshalInvoked),
        postUnmarshalInvoked(postUnmarshalInvoked)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::shared_ptr<::Test::B>&, const ::std::shared_ptr<::Test::C>&, const bool&, const bool&> ice_tuple() const
    {
        return std::tie(theB, theC, preMarshalInvoked, postUnmarshalInvoked);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::shared_ptr<::Test::B> theB;
    ::std::shared_ptr<::Test::C> theC;
    bool preMarshalInvoked;
    bool postUnmarshalInvoked;
};

class B : public ::Ice::ValueHelper<B, A>
{
public:

    virtual ~B();

    B() = default;

    B(const B&) = default;
    B(B&&) = default;
    B& operator=(const B&) = default;
    B& operator=(B&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    B(const ::std::shared_ptr<::Test::B>& theB, const ::std::shared_ptr<::Test::C>& theC, bool preMarshalInvoked, bool postUnmarshalInvoked, const ::std::shared_ptr<::Test::A>& theA) :
        Ice::ValueHelper<B, A>(theB, theC, preMarshalInvoked, postUnmarshalInvoked),
        theA(theA)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::shared_ptr<::Test::B>&, const ::std::shared_ptr<::Test::C>&, const bool&, const bool&, const ::std::shared_ptr<::Test::A>&> ice_tuple() const
    {
        return std::tie(theB, theC, preMarshalInvoked, postUnmarshalInvoked, theA);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::shared_ptr<::Test::A> theA;
};

class C : public ::Ice::ValueHelper<C, ::Ice::Value>
{
public:

    virtual ~C();

    C() = default;

    C(const C&) = default;
    C(C&&) = default;
    C& operator=(const C&) = default;
    C& operator=(C&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    C(const ::std::shared_ptr<::Test::B>& theB, bool preMarshalInvoked, bool postUnmarshalInvoked) :
        theB(theB),
        preMarshalInvoked(preMarshalInvoked),
        postUnmarshalInvoked(postUnmarshalInvoked)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::shared_ptr<::Test::B>&, const bool&, const bool&> ice_tuple() const
    {
        return std::tie(theB, preMarshalInvoked, postUnmarshalInvoked);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::shared_ptr<::Test::B> theB;
    bool preMarshalInvoked;
    bool postUnmarshalInvoked;
};

class D : public ::Ice::ValueHelper<D, ::Ice::Value>
{
public:

    virtual ~D();

    D() = default;

    D(const D&) = default;
    D(D&&) = default;
    D& operator=(const D&) = default;
    D& operator=(D&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    D(const ::std::shared_ptr<::Test::A>& theA, const ::std::shared_ptr<::Test::B>& theB, const ::std::shared_ptr<::Test::C>& theC, bool preMarshalInvoked, bool postUnmarshalInvoked) :
        theA(theA),
        theB(theB),
        theC(theC),
        preMarshalInvoked(preMarshalInvoked),
        postUnmarshalInvoked(postUnmarshalInvoked)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::shared_ptr<::Test::A>&, const ::std::shared_ptr<::Test::B>&, const ::std::shared_ptr<::Test::C>&, const bool&, const bool&> ice_tuple() const
    {
        return std::tie(theA, theB, theC, preMarshalInvoked, postUnmarshalInvoked);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::shared_ptr<::Test::A> theA;
    ::std::shared_ptr<::Test::B> theB;
    ::std::shared_ptr<::Test::C> theC;
    bool preMarshalInvoked;
    bool postUnmarshalInvoked;
};

class E : public ::Ice::ValueHelper<E, ::Ice::Value>
{
public:

    virtual ~E();

    E() = default;

    E(const E&) = default;
    E(E&&) = default;
    E& operator=(const E&) = default;
    E& operator=(E&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    E(int i, const ::std::string& s) :
        i(i),
        s(s)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const ::std::string&> ice_tuple() const
    {
        return std::tie(i, s);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    int i;
    ::std::string s;

    template<typename T, typename S>
    friend struct Ice::StreamWriter;
    template<typename T, typename S>
    friend struct Ice::StreamReader;
};

class F : public ::Ice::ValueHelper<F, ::Ice::Value>
{
public:

    virtual ~F();

    F() = default;

    F(const F&) = default;
    F(F&&) = default;
    F& operator=(const F&) = default;
    F& operator=(F&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    F(const ::std::shared_ptr<::Test::E>& e1, const ::std::shared_ptr<::Test::E>& e2) :
        e1(e1),
        e2(e2)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::shared_ptr<::Test::E>&, const ::std::shared_ptr<::Test::E>&> ice_tuple() const
    {
        return std::tie(e1, e2);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    ::std::shared_ptr<::Test::E> e1;

public:

    ::std::shared_ptr<::Test::E> e2;

protected:

    template<typename T, typename S>
    friend struct Ice::StreamWriter;
    template<typename T, typename S>
    friend struct Ice::StreamReader;
};

class G : public ::Ice::ValueHelper<G, Base>
{
public:

    virtual ~G();

    G() = default;

    G(const G&) = default;
    G(G&&) = default;
    G& operator=(const G&) = default;
    G& operator=(G&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    G(const ::Test::S& theS, const ::std::string& str) :
        Ice::ValueHelper<G, Base>(theS, str)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::S&, const ::std::string&> ice_tuple() const
    {
        return std::tie(theS, str);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

class Compact : public ::Ice::ValueHelper<Compact, ::Ice::Value>
{
public:

    virtual ~Compact();

    Compact() = default;

    Compact(const Compact&) = default;
    Compact(Compact&&) = default;
    Compact& operator=(const Compact&) = default;
    Compact& operator=(Compact&&) = default;

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

class CompactExt : public ::Ice::ValueHelper<CompactExt, Compact>
{
public:

    virtual ~CompactExt();

    CompactExt() = default;

    CompactExt(const CompactExt&) = default;
    CompactExt(CompactExt&&) = default;
    CompactExt& operator=(const CompactExt&) = default;
    CompactExt& operator=(CompactExt&&) = default;

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

namespace Inner
{

class A : public ::Ice::ValueHelper<A, ::Ice::Value>
{
public:

    virtual ~A();

    A() = default;

    A(const A&) = default;
    A(A&&) = default;
    A& operator=(const A&) = default;
    A& operator=(A&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit A(const ::std::shared_ptr<::Test::A>& theA) :
        theA(theA)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::shared_ptr<::Test::A>&> ice_tuple() const
    {
        return std::tie(theA);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::shared_ptr<::Test::A> theA;
};

namespace Sub
{

class A : public ::Ice::ValueHelper<A, ::Ice::Value>
{
public:

    virtual ~A();

    A() = default;

    A(const A&) = default;
    A(A&&) = default;
    A& operator=(const A&) = default;
    A& operator=(A&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit A(const ::std::shared_ptr<::Test::Inner::A>& theA) :
        theA(theA)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::shared_ptr<::Test::Inner::A>&> ice_tuple() const
    {
        return std::tie(theA);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::shared_ptr<::Test::Inner::A> theA;
};

}

}

class A1 : public ::Ice::ValueHelper<A1, ::Ice::Value>
{
public:

    virtual ~A1();

    A1() = default;

    A1(const A1&) = default;
    A1(A1&&) = default;
    A1& operator=(const A1&) = default;
    A1& operator=(A1&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit A1(const ::std::string& name) :
        name(name)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(name);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string name;
};

class B1 : public ::Ice::ValueHelper<B1, ::Ice::Value>
{
public:

    virtual ~B1();

    B1() = default;

    B1(const B1&) = default;
    B1(B1&&) = default;
    B1& operator=(const B1&) = default;
    B1& operator=(B1&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    B1(const ::std::shared_ptr<::Test::A1>& a1, const ::std::shared_ptr<::Test::A1>& a2) :
        a1(a1),
        a2(a2)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::shared_ptr<::Test::A1>&, const ::std::shared_ptr<::Test::A1>&> ice_tuple() const
    {
        return std::tie(a1, a2);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::shared_ptr<::Test::A1> a1;
    ::std::shared_ptr<::Test::A1> a2;
};

class D1 : public ::Ice::ValueHelper<D1, B1>
{
public:

    virtual ~D1();

    D1() = default;

    D1(const D1&) = default;
    D1(D1&&) = default;
    D1& operator=(const D1&) = default;
    D1& operator=(D1&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    D1(const ::std::shared_ptr<::Test::A1>& a1, const ::std::shared_ptr<::Test::A1>& a2, const ::std::shared_ptr<::Test::A1>& a3, const ::std::shared_ptr<::Test::A1>& a4) :
        Ice::ValueHelper<D1, B1>(a1, a2),
        a3(a3),
        a4(a4)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::shared_ptr<::Test::A1>&, const ::std::shared_ptr<::Test::A1>&, const ::std::shared_ptr<::Test::A1>&, const ::std::shared_ptr<::Test::A1>&> ice_tuple() const
    {
        return std::tie(a1, a2, a3, a4);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::shared_ptr<::Test::A1> a3;
    ::std::shared_ptr<::Test::A1> a4;
};

class Recursive : public ::Ice::ValueHelper<Recursive, ::Ice::Value>
{
public:

    virtual ~Recursive();

    Recursive() = default;

    Recursive(const Recursive&) = default;
    Recursive(Recursive&&) = default;
    Recursive& operator=(const Recursive&) = default;
    Recursive& operator=(Recursive&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit Recursive(const ::std::shared_ptr<::Test::Recursive>& v) :
        v(v)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::shared_ptr<::Test::Recursive>&> ice_tuple() const
    {
        return std::tie(v);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::shared_ptr<::Test::Recursive> v;
};

class K : public ::Ice::ValueHelper<K, ::Ice::Value>
{
public:

    virtual ~K();

    K() = default;

    K(const K&) = default;
    K(K&&) = default;
    K& operator=(const K&) = default;
    K& operator=(K&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit K(const ::std::shared_ptr<::Ice::Value>& value) :
        value(value)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::shared_ptr<::Ice::Value>&> ice_tuple() const
    {
        return std::tie(value);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::shared_ptr<::Ice::Value> value;
};

class L : public ::Ice::ValueHelper<L, ::Ice::Value>
{
public:

    virtual ~L();

    L() = default;

    L(const L&) = default;
    L(L&&) = default;
    L& operator=(const L&) = default;
    L& operator=(L&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit L(const ::std::string& data) :
        data(data)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(data);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string data;
};

class M : public ::Ice::ValueHelper<M, ::Ice::Value>
{
public:

    virtual ~M();

    M() = default;

    M(const M&) = default;
    M(M&&) = default;
    M& operator=(const M&) = default;
    M& operator=(M&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit M(const ::Test::LMap& v) :
        v(v)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::LMap&> ice_tuple() const
    {
        return std::tie(v);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::Test::LMap v;
};

class F3 : public ::Ice::ValueHelper<F3, ::Ice::Value>
{
public:

    virtual ~F3();

    F3() = default;

    F3(const F3&) = default;
    F3(F3&&) = default;
    F3& operator=(const F3&) = default;
    F3& operator=(F3&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    F3(const ::std::shared_ptr<::Test::F1>& f1, const ::std::shared_ptr<::Test::F2Prx>& f2) :
        f1(f1),
        f2(f2)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::shared_ptr<::Test::F1>&, const ::std::shared_ptr<::Test::F2Prx>&> ice_tuple() const
    {
        return std::tie(f1, f2);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::shared_ptr<::Test::F1> f1;
    ::std::shared_ptr<::Test::F2Prx> f2;
};

class Empty : public ::Ice::ValueHelper<Empty, ::Ice::Value>
{
public:

    virtual ~Empty();

    Empty() = default;

    Empty(const Empty&) = default;
    Empty(Empty&&) = default;
    Empty& operator=(const Empty&) = default;
    Empty& operator=(Empty&&) = default;

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

class AlsoEmpty : public ::Ice::ValueHelper<AlsoEmpty, ::Ice::Value>
{
public:

    virtual ~AlsoEmpty();

    AlsoEmpty() = default;

    AlsoEmpty(const AlsoEmpty&) = default;
    AlsoEmpty(AlsoEmpty&&) = default;
    AlsoEmpty& operator=(const AlsoEmpty&) = default;
    AlsoEmpty& operator=(AlsoEmpty&&) = default;

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

class COneMember : public ::Ice::ValueHelper<COneMember, ::Ice::Value>
{
public:

    virtual ~COneMember();

    COneMember() = default;

    COneMember(const COneMember&) = default;
    COneMember(COneMember&&) = default;
    COneMember& operator=(const COneMember&) = default;
    COneMember& operator=(COneMember&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit COneMember(const ::std::shared_ptr<::Test::Empty>& e) :
        e(e)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::shared_ptr<::Test::Empty>&> ice_tuple() const
    {
        return std::tie(e);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::shared_ptr<::Test::Empty> e;
};

class CTwoMembers : public ::Ice::ValueHelper<CTwoMembers, ::Ice::Value>
{
public:

    virtual ~CTwoMembers();

    CTwoMembers() = default;

    CTwoMembers(const CTwoMembers&) = default;
    CTwoMembers(CTwoMembers&&) = default;
    CTwoMembers& operator=(const CTwoMembers&) = default;
    CTwoMembers& operator=(CTwoMembers&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    CTwoMembers(const ::std::shared_ptr<::Test::Empty>& e1, const ::std::shared_ptr<::Test::Empty>& e2) :
        e1(e1),
        e2(e2)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::shared_ptr<::Test::Empty>&, const ::std::shared_ptr<::Test::Empty>&> ice_tuple() const
    {
        return std::tie(e1, e2);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::shared_ptr<::Test::Empty> e1;
    ::std::shared_ptr<::Test::Empty> e2;
};

}

namespace Test
{

class IPrx : public ::Ice::Proxy<IPrx, ::Ice::ObjectPrx>
{
public:

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit IPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    /// \cond INTERNAL
    IPrx(const ::IceInternal::ReferencePtr& ref) : ::Ice::ObjectPrx(ref)
    {
    }
    /// \endcond

protected:

    /// \cond INTERNAL
    IPrx() = default;
    /// \endcond
};

class JPrx : public ::Ice::Proxy<JPrx, IPrx>
{
public:

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit JPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    /// \cond INTERNAL
    JPrx(const ::IceInternal::ReferencePtr& ref) : ::Ice::ObjectPrx(ref)
    {
    }
    /// \endcond

protected:

    /// \cond INTERNAL
    JPrx() = default;
    /// \endcond
};

class InitialPrx : public ::Ice::Proxy<InitialPrx, ::Ice::ObjectPrx>
{
public:

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_shutdown, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto shutdownAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &InitialPrx::_iceI_shutdown, context);
    }

    ::std::function<void()>
    shutdownAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_shutdown, context);
    }

    /// \cond INTERNAL
    void _iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<B> getB1(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::B>>(true, this, &InitialPrx::_iceI_getB1, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getB1Async(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::Test::B>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::B>, P>(false, this, &InitialPrx::_iceI_getB1, context);
    }

    ::std::function<void()>
    getB1Async(::std::function<void(::std::shared_ptr<::Test::B>)> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::shared_ptr<::Test::B>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_getB1, context);
    }

    /// \cond INTERNAL
    void _iceI_getB1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::B>>>&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<B> getB2(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::B>>(true, this, &InitialPrx::_iceI_getB2, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getB2Async(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::Test::B>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::B>, P>(false, this, &InitialPrx::_iceI_getB2, context);
    }

    ::std::function<void()>
    getB2Async(::std::function<void(::std::shared_ptr<::Test::B>)> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::shared_ptr<::Test::B>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_getB2, context);
    }

    /// \cond INTERNAL
    void _iceI_getB2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::B>>>&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<C> getC(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::C>>(true, this, &InitialPrx::_iceI_getC, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getCAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::Test::C>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::C>, P>(false, this, &InitialPrx::_iceI_getC, context);
    }

    ::std::function<void()>
    getCAsync(::std::function<void(::std::shared_ptr<::Test::C>)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::shared_ptr<::Test::C>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_getC, context);
    }

    /// \cond INTERNAL
    void _iceI_getC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::C>>>&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<D> getD(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::D>>(true, this, &InitialPrx::_iceI_getD, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getDAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::Test::D>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::D>, P>(false, this, &InitialPrx::_iceI_getD, context);
    }

    ::std::function<void()>
    getDAsync(::std::function<void(::std::shared_ptr<::Test::D>)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::shared_ptr<::Test::D>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_getD, context);
    }

    /// \cond INTERNAL
    void _iceI_getD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::D>>>&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<E> getE(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::E>>(true, this, &InitialPrx::_iceI_getE, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getEAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::Test::E>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::E>, P>(false, this, &InitialPrx::_iceI_getE, context);
    }

    ::std::function<void()>
    getEAsync(::std::function<void(::std::shared_ptr<::Test::E>)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::shared_ptr<::Test::E>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_getE, context);
    }

    /// \cond INTERNAL
    void _iceI_getE(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::E>>>&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<F> getF(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::F>>(true, this, &InitialPrx::_iceI_getF, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getFAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::Test::F>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::F>, P>(false, this, &InitialPrx::_iceI_getF, context);
    }

    ::std::function<void()>
    getFAsync(::std::function<void(::std::shared_ptr<::Test::F>)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::shared_ptr<::Test::F>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_getF, context);
    }

    /// \cond INTERNAL
    void _iceI_getF(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::F>>>&, const ::Ice::Context&);
    /// \endcond

    void setRecursive(const ::std::shared_ptr<Recursive>& p, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_setRecursive, p, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setRecursiveAsync(const ::std::shared_ptr<Recursive>& p, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &InitialPrx::_iceI_setRecursive, p, context);
    }

    ::std::function<void()>
    setRecursiveAsync(const ::std::shared_ptr<Recursive>& p,
                      ::std::function<void()> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_setRecursive, p, context);
    }

    /// \cond INTERNAL
    void _iceI_setRecursive(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<Recursive>&, const ::Ice::Context&);
    /// \endcond

    bool supportsClassGraphDepthMax(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<bool>(true, this, &InitialPrx::_iceI_supportsClassGraphDepthMax, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto supportsClassGraphDepthMaxAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<bool>>().get_future())
    {
        return _makePromiseOutgoing<bool, P>(false, this, &InitialPrx::_iceI_supportsClassGraphDepthMax, context);
    }

    ::std::function<void()>
    supportsClassGraphDepthMaxAsync(::std::function<void(bool)> response,
                                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                                    ::std::function<void(bool)> sent = nullptr,
                                    const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<bool>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_supportsClassGraphDepthMax, context);
    }

    /// \cond INTERNAL
    void _iceI_supportsClassGraphDepthMax(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, const ::Ice::Context&);
    /// \endcond

    void setCycle(const ::std::shared_ptr<Recursive>& r, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_setCycle, r, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setCycleAsync(const ::std::shared_ptr<Recursive>& r, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &InitialPrx::_iceI_setCycle, r, context);
    }

    ::std::function<void()>
    setCycleAsync(const ::std::shared_ptr<Recursive>& r,
                  ::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_setCycle, r, context);
    }

    /// \cond INTERNAL
    void _iceI_setCycle(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<Recursive>&, const ::Ice::Context&);
    /// \endcond

    bool acceptsClassCycles(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<bool>(true, this, &InitialPrx::_iceI_acceptsClassCycles, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto acceptsClassCyclesAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<bool>>().get_future())
    {
        return _makePromiseOutgoing<bool, P>(false, this, &InitialPrx::_iceI_acceptsClassCycles, context);
    }

    ::std::function<void()>
    acceptsClassCyclesAsync(::std::function<void(bool)> response,
                            ::std::function<void(::std::exception_ptr)> ex = nullptr,
                            ::std::function<void(bool)> sent = nullptr,
                            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<bool>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_acceptsClassCycles, context);
    }

    /// \cond INTERNAL
    void _iceI_acceptsClassCycles(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<B> getMB(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::B>>(true, this, &InitialPrx::_iceI_getMB, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getMBAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::Test::B>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::B>, P>(false, this, &InitialPrx::_iceI_getMB, context);
    }

    ::std::function<void()>
    getMBAsync(::std::function<void(::std::shared_ptr<::Test::B>)> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::shared_ptr<::Test::B>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_getMB, context);
    }

    /// \cond INTERNAL
    void _iceI_getMB(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::B>>>&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<B> getAMDMB(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::B>>(true, this, &InitialPrx::_iceI_getAMDMB, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getAMDMBAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::Test::B>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::B>, P>(false, this, &InitialPrx::_iceI_getAMDMB, context);
    }

    ::std::function<void()>
    getAMDMBAsync(::std::function<void(::std::shared_ptr<::Test::B>)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::shared_ptr<::Test::B>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_getAMDMB, context);
    }

    /// \cond INTERNAL
    void _iceI_getAMDMB(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::B>>>&, const ::Ice::Context&);
    /// \endcond

    void getAll(::std::shared_ptr<B>& b1, ::std::shared_ptr<B>& b2, ::std::shared_ptr<C>& theC, ::std::shared_ptr<D>& theD, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::GetAllResult>(true, this, &InitialPrx::_iceI_getAll, context).get();
        b1 = ::std::move(_result.b1);
        b2 = ::std::move(_result.b2);
        theC = ::std::move(_result.theC);
        theD = ::std::move(_result.theD);
    }

    template<template<typename> class P = ::std::promise>
    auto getAllAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::GetAllResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::GetAllResult, P>(false, this, &InitialPrx::_iceI_getAll, context);
    }

    ::std::function<void()>
    getAllAsync(::std::function<void(::std::shared_ptr<::Test::B>, ::std::shared_ptr<::Test::B>, ::std::shared_ptr<::Test::C>, ::std::shared_ptr<::Test::D>)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::GetAllResult&& _result)
        {
            response(::std::move(_result.b1), ::std::move(_result.b2), ::std::move(_result.theC), ::std::move(_result.theD));
        };
        return _makeLambdaOutgoing<Initial::GetAllResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_getAll, context);
    }

    /// \cond INTERNAL
    void _iceI_getAll(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::GetAllResult>>&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<K> getK(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::K>>(true, this, &InitialPrx::_iceI_getK, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getKAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::Test::K>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::K>, P>(false, this, &InitialPrx::_iceI_getK, context);
    }

    ::std::function<void()>
    getKAsync(::std::function<void(::std::shared_ptr<::Test::K>)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::shared_ptr<::Test::K>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_getK, context);
    }

    /// \cond INTERNAL
    void _iceI_getK(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::K>>>&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<::Ice::Value> opValue(const ::std::shared_ptr<::Ice::Value>& v1, ::std::shared_ptr<::Ice::Value>& v2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpValueResult>(true, this, &InitialPrx::_iceI_opValue, v1, context).get();
        v2 = ::std::move(_result.v2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opValueAsync(const ::std::shared_ptr<::Ice::Value>& v1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpValueResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpValueResult, P>(false, this, &InitialPrx::_iceI_opValue, v1, context);
    }

    ::std::function<void()>
    opValueAsync(const ::std::shared_ptr<::Ice::Value>& v1,
                 ::std::function<void(::std::shared_ptr<::Ice::Value>, ::std::shared_ptr<::Ice::Value>)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpValueResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.v2));
        };
        return _makeLambdaOutgoing<Initial::OpValueResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opValue, v1, context);
    }

    /// \cond INTERNAL
    void _iceI_opValue(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpValueResult>>&, const ::std::shared_ptr<::Ice::Value>&, const ::Ice::Context&);
    /// \endcond

    ValueSeq opValueSeq(const ValueSeq& v1, ValueSeq& v2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpValueSeqResult>(true, this, &InitialPrx::_iceI_opValueSeq, v1, context).get();
        v2 = ::std::move(_result.v2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opValueSeqAsync(const ValueSeq& v1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpValueSeqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpValueSeqResult, P>(false, this, &InitialPrx::_iceI_opValueSeq, v1, context);
    }

    ::std::function<void()>
    opValueSeqAsync(const ValueSeq& v1,
                    ::std::function<void(::Test::ValueSeq, ::Test::ValueSeq)> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpValueSeqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.v2));
        };
        return _makeLambdaOutgoing<Initial::OpValueSeqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opValueSeq, v1, context);
    }

    /// \cond INTERNAL
    void _iceI_opValueSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpValueSeqResult>>&, const ValueSeq&, const ::Ice::Context&);
    /// \endcond

    ValueMap opValueMap(const ValueMap& v1, ValueMap& v2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpValueMapResult>(true, this, &InitialPrx::_iceI_opValueMap, v1, context).get();
        v2 = ::std::move(_result.v2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opValueMapAsync(const ValueMap& v1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpValueMapResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpValueMapResult, P>(false, this, &InitialPrx::_iceI_opValueMap, v1, context);
    }

    ::std::function<void()>
    opValueMapAsync(const ValueMap& v1,
                    ::std::function<void(::Test::ValueMap, ::Test::ValueMap)> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpValueMapResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.v2));
        };
        return _makeLambdaOutgoing<Initial::OpValueMapResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opValueMap, v1, context);
    }

    /// \cond INTERNAL
    void _iceI_opValueMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpValueMapResult>>&, const ValueMap&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<D1> getD1(const ::std::shared_ptr<D1>& d1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::D1>>(true, this, &InitialPrx::_iceI_getD1, d1, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getD1Async(const ::std::shared_ptr<D1>& d1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::Test::D1>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::D1>, P>(false, this, &InitialPrx::_iceI_getD1, d1, context);
    }

    ::std::function<void()>
    getD1Async(const ::std::shared_ptr<D1>& d1,
               ::std::function<void(::std::shared_ptr<::Test::D1>)> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::shared_ptr<::Test::D1>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_getD1, d1, context);
    }

    /// \cond INTERNAL
    void _iceI_getD1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::D1>>>&, const ::std::shared_ptr<D1>&, const ::Ice::Context&);
    /// \endcond

    void throwEDerived(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_throwEDerived, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto throwEDerivedAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &InitialPrx::_iceI_throwEDerived, context);
    }

    ::std::function<void()>
    throwEDerivedAsync(::std::function<void()> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_throwEDerived, context);
    }

    /// \cond INTERNAL
    void _iceI_throwEDerived(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void setG(const ::std::shared_ptr<G>& theG, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_setG, theG, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setGAsync(const ::std::shared_ptr<G>& theG, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &InitialPrx::_iceI_setG, theG, context);
    }

    ::std::function<void()>
    setGAsync(const ::std::shared_ptr<G>& theG,
              ::std::function<void()> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_setG, theG, context);
    }

    /// \cond INTERNAL
    void _iceI_setG(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<G>&, const ::Ice::Context&);
    /// \endcond

    BaseSeq opBaseSeq(const BaseSeq& inSeq, BaseSeq& outSeq, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpBaseSeqResult>(true, this, &InitialPrx::_iceI_opBaseSeq, inSeq, context).get();
        outSeq = ::std::move(_result.outSeq);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opBaseSeqAsync(const BaseSeq& inSeq, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpBaseSeqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpBaseSeqResult, P>(false, this, &InitialPrx::_iceI_opBaseSeq, inSeq, context);
    }

    ::std::function<void()>
    opBaseSeqAsync(const BaseSeq& inSeq,
                   ::std::function<void(::Test::BaseSeq, ::Test::BaseSeq)> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpBaseSeqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.outSeq));
        };
        return _makeLambdaOutgoing<Initial::OpBaseSeqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opBaseSeq, inSeq, context);
    }

    /// \cond INTERNAL
    void _iceI_opBaseSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpBaseSeqResult>>&, const BaseSeq&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<Compact> getCompact(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::Compact>>(true, this, &InitialPrx::_iceI_getCompact, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getCompactAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::Test::Compact>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::Compact>, P>(false, this, &InitialPrx::_iceI_getCompact, context);
    }

    ::std::function<void()>
    getCompactAsync(::std::function<void(::std::shared_ptr<::Test::Compact>)> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::shared_ptr<::Test::Compact>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_getCompact, context);
    }

    /// \cond INTERNAL
    void _iceI_getCompact(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::Compact>>>&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<::Test::Inner::A> getInnerA(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::Inner::A>>(true, this, &InitialPrx::_iceI_getInnerA, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getInnerAAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::Test::Inner::A>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::Inner::A>, P>(false, this, &InitialPrx::_iceI_getInnerA, context);
    }

    ::std::function<void()>
    getInnerAAsync(::std::function<void(::std::shared_ptr<::Test::Inner::A>)> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::shared_ptr<::Test::Inner::A>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_getInnerA, context);
    }

    /// \cond INTERNAL
    void _iceI_getInnerA(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::Inner::A>>>&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<::Test::Inner::Sub::A> getInnerSubA(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::Inner::Sub::A>>(true, this, &InitialPrx::_iceI_getInnerSubA, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getInnerSubAAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::Test::Inner::Sub::A>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::Inner::Sub::A>, P>(false, this, &InitialPrx::_iceI_getInnerSubA, context);
    }

    ::std::function<void()>
    getInnerSubAAsync(::std::function<void(::std::shared_ptr<::Test::Inner::Sub::A>)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::shared_ptr<::Test::Inner::Sub::A>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_getInnerSubA, context);
    }

    /// \cond INTERNAL
    void _iceI_getInnerSubA(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::Inner::Sub::A>>>&, const ::Ice::Context&);
    /// \endcond

    void throwInnerEx(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_throwInnerEx, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto throwInnerExAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &InitialPrx::_iceI_throwInnerEx, context);
    }

    ::std::function<void()>
    throwInnerExAsync(::std::function<void()> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_throwInnerEx, context);
    }

    /// \cond INTERNAL
    void _iceI_throwInnerEx(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void throwInnerSubEx(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_throwInnerSubEx, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto throwInnerSubExAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &InitialPrx::_iceI_throwInnerSubEx, context);
    }

    ::std::function<void()>
    throwInnerSubExAsync(::std::function<void()> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_throwInnerSubEx, context);
    }

    /// \cond INTERNAL
    void _iceI_throwInnerSubEx(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<M> opM(const ::std::shared_ptr<M>& v1, ::std::shared_ptr<M>& v2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpMResult>(true, this, &InitialPrx::_iceI_opM, v1, context).get();
        v2 = ::std::move(_result.v2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opMAsync(const ::std::shared_ptr<M>& v1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpMResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpMResult, P>(false, this, &InitialPrx::_iceI_opM, v1, context);
    }

    ::std::function<void()>
    opMAsync(const ::std::shared_ptr<M>& v1,
             ::std::function<void(::std::shared_ptr<::Test::M>, ::std::shared_ptr<::Test::M>)> response,
             ::std::function<void(::std::exception_ptr)> ex = nullptr,
             ::std::function<void(bool)> sent = nullptr,
             const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpMResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.v2));
        };
        return _makeLambdaOutgoing<Initial::OpMResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opM, v1, context);
    }

    /// \cond INTERNAL
    void _iceI_opM(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpMResult>>&, const ::std::shared_ptr<M>&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<F1> opF1(const ::std::shared_ptr<F1>& f11, ::std::shared_ptr<F1>& f12, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpF1Result>(true, this, &InitialPrx::_iceI_opF1, f11, context).get();
        f12 = ::std::move(_result.f12);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opF1Async(const ::std::shared_ptr<F1>& f11, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpF1Result>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpF1Result, P>(false, this, &InitialPrx::_iceI_opF1, f11, context);
    }

    ::std::function<void()>
    opF1Async(const ::std::shared_ptr<F1>& f11,
              ::std::function<void(::std::shared_ptr<::Test::F1>, ::std::shared_ptr<::Test::F1>)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpF1Result&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.f12));
        };
        return _makeLambdaOutgoing<Initial::OpF1Result>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opF1, f11, context);
    }

    /// \cond INTERNAL
    void _iceI_opF1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpF1Result>>&, const ::std::shared_ptr<F1>&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<F2Prx> opF2(const ::std::shared_ptr<F2Prx>& f21, ::std::shared_ptr<F2Prx>& f22, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpF2Result>(true, this, &InitialPrx::_iceI_opF2, f21, context).get();
        f22 = ::std::move(_result.f22);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opF2Async(const ::std::shared_ptr<F2Prx>& f21, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpF2Result>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpF2Result, P>(false, this, &InitialPrx::_iceI_opF2, f21, context);
    }

    ::std::function<void()>
    opF2Async(const ::std::shared_ptr<F2Prx>& f21,
              ::std::function<void(::std::shared_ptr<::Test::F2Prx>, ::std::shared_ptr<::Test::F2Prx>)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpF2Result&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.f22));
        };
        return _makeLambdaOutgoing<Initial::OpF2Result>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opF2, f21, context);
    }

    /// \cond INTERNAL
    void _iceI_opF2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpF2Result>>&, const ::std::shared_ptr<F2Prx>&, const ::Ice::Context&);
    /// \endcond

    bool hasF3(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<bool>(true, this, &InitialPrx::_iceI_hasF3, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto hasF3Async(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<bool>>().get_future())
    {
        return _makePromiseOutgoing<bool, P>(false, this, &InitialPrx::_iceI_hasF3, context);
    }

    ::std::function<void()>
    hasF3Async(::std::function<void(bool)> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<bool>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_hasF3, context);
    }

    /// \cond INTERNAL
    void _iceI_hasF3(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<F3> opF3(const ::std::shared_ptr<F3>& f31, ::std::shared_ptr<F3>& f32, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpF3Result>(true, this, &InitialPrx::_iceI_opF3, f31, context).get();
        f32 = ::std::move(_result.f32);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opF3Async(const ::std::shared_ptr<F3>& f31, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpF3Result>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpF3Result, P>(false, this, &InitialPrx::_iceI_opF3, f31, context);
    }

    ::std::function<void()>
    opF3Async(const ::std::shared_ptr<F3>& f31,
              ::std::function<void(::std::shared_ptr<::Test::F3>, ::std::shared_ptr<::Test::F3>)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpF3Result&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.f32));
        };
        return _makeLambdaOutgoing<Initial::OpF3Result>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opF3, f31, context);
    }

    /// \cond INTERNAL
    void _iceI_opF3(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpF3Result>>&, const ::std::shared_ptr<F3>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit InitialPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    /// \cond INTERNAL
    InitialPrx(const ::IceInternal::ReferencePtr& ref) : ::Ice::ObjectPrx(ref)
    {
    }
    /// \endcond

protected:

    /// \cond INTERNAL
    InitialPrx() = default;
    /// \endcond
};

class TestIntfPrx : public ::Ice::Proxy<TestIntfPrx, ::Ice::ObjectPrx>
{
public:

    ::std::shared_ptr<Base> opDerived(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::Base>>(true, this, &TestIntfPrx::_iceI_opDerived, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto opDerivedAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::Test::Base>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::Base>, P>(false, this, &TestIntfPrx::_iceI_opDerived, context);
    }

    ::std::function<void()>
    opDerivedAsync(::std::function<void(::std::shared_ptr<::Test::Base>)> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::shared_ptr<::Test::Base>>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_opDerived, context);
    }

    /// \cond INTERNAL
    void _iceI_opDerived(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::Base>>>&, const ::Ice::Context&);
    /// \endcond

    void throwDerived(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_throwDerived, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto throwDerivedAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &TestIntfPrx::_iceI_throwDerived, context);
    }

    ::std::function<void()>
    throwDerivedAsync(::std::function<void()> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_throwDerived, context);
    }

    /// \cond INTERNAL
    void _iceI_throwDerived(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit TestIntfPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    /// \cond INTERNAL
    TestIntfPrx(const ::IceInternal::ReferencePtr& ref) : ::Ice::ObjectPrx(ref)
    {
    }
    /// \endcond

protected:

    /// \cond INTERNAL
    TestIntfPrx() = default;
    /// \endcond
};

class UnexpectedObjectExceptionTestPrx : public ::Ice::Proxy<UnexpectedObjectExceptionTestPrx, ::Ice::ObjectPrx>
{
public:

    ::std::shared_ptr<Empty> op(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::Empty>>(true, this, &UnexpectedObjectExceptionTestPrx::_iceI_op, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto opAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::Test::Empty>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::Empty>, P>(false, this, &UnexpectedObjectExceptionTestPrx::_iceI_op, context);
    }

    ::std::function<void()>
    opAsync(::std::function<void(::std::shared_ptr<::Test::Empty>)> response,
            ::std::function<void(::std::exception_ptr)> ex = nullptr,
            ::std::function<void(bool)> sent = nullptr,
            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::shared_ptr<::Test::Empty>>(std::move(response), std::move(ex), std::move(sent), this, &Test::UnexpectedObjectExceptionTestPrx::_iceI_op, context);
    }

    /// \cond INTERNAL
    void _iceI_op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::Empty>>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit UnexpectedObjectExceptionTestPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    /// \cond INTERNAL
    UnexpectedObjectExceptionTestPrx(const ::IceInternal::ReferencePtr& ref) : ::Ice::ObjectPrx(ref)
    {
    }
    /// \endcond

protected:

    /// \cond INTERNAL
    UnexpectedObjectExceptionTestPrx() = default;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::Test::S>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Test::S, S>
{
    static void read(S* istr, ::Test::S& v)
    {
        istr->readAll(v.str);
    }
};

template<typename S>
struct StreamReader<::Test::Base, S>
{
    static void read(S* istr, ::Test::Base& v)
    {
        istr->readAll(v.theS, v.str);
    }
};

template<typename S>
struct StreamReader<::Test::BaseEx, S>
{
    static void read(S* istr, ::Test::BaseEx& v)
    {
        istr->readAll(v.reason);
    }
};

template<typename S>
struct StreamReader<::Test::A, S>
{
    static void read(S* istr, ::Test::A& v)
    {
        istr->readAll(v.theB, v.theC, v.preMarshalInvoked, v.postUnmarshalInvoked);
    }
};

template<typename S>
struct StreamWriter<::Test::B, S>
{
    static void write(S* ostr, const ::Test::B& v)
    {
        ostr->writeAll(v.theA);
    }
};

template<typename S>
struct StreamReader<::Test::B, S>
{
    static void read(S* istr, ::Test::B& v)
    {
        istr->readAll(v.theA);
    }
};

template<typename S>
struct StreamReader<::Test::C, S>
{
    static void read(S* istr, ::Test::C& v)
    {
        istr->readAll(v.theB, v.preMarshalInvoked, v.postUnmarshalInvoked);
    }
};

template<typename S>
struct StreamReader<::Test::D, S>
{
    static void read(S* istr, ::Test::D& v)
    {
        istr->readAll(v.theA, v.theB, v.theC, v.preMarshalInvoked, v.postUnmarshalInvoked);
    }
};

template<typename S>
struct StreamReader<::Test::E, S>
{
    static void read(S* istr, ::Test::E& v)
    {
        istr->readAll(v.i, v.s);
    }
};

template<typename S>
struct StreamReader<::Test::F, S>
{
    static void read(S* istr, ::Test::F& v)
    {
        istr->readAll(v.e1, v.e2);
    }
};

template<typename S>
struct StreamWriter<::Test::G, S>
{
    static void write(S*, const ::Test::G&)
    {
    }
};

template<typename S>
struct StreamReader<::Test::G, S>
{
    static void read(S*, ::Test::G&)
    {
    }
};

template<typename S>
struct StreamReader<::Test::Inner::A, S>
{
    static void read(S* istr, ::Test::Inner::A& v)
    {
        istr->readAll(v.theA);
    }
};

template<typename S>
struct StreamReader<::Test::Inner::Ex, S>
{
    static void read(S* istr, ::Test::Inner::Ex& v)
    {
        istr->readAll(v.reason);
    }
};

template<typename S>
struct StreamReader<::Test::Inner::Sub::A, S>
{
    static void read(S* istr, ::Test::Inner::Sub::A& v)
    {
        istr->readAll(v.theA);
    }
};

template<typename S>
struct StreamReader<::Test::Inner::Sub::Ex, S>
{
    static void read(S* istr, ::Test::Inner::Sub::Ex& v)
    {
        istr->readAll(v.reason);
    }
};

template<typename S>
struct StreamReader<::Test::A1, S>
{
    static void read(S* istr, ::Test::A1& v)
    {
        istr->readAll(v.name);
    }
};

template<typename S>
struct StreamReader<::Test::B1, S>
{
    static void read(S* istr, ::Test::B1& v)
    {
        istr->readAll(v.a1, v.a2);
    }
};

template<typename S>
struct StreamWriter<::Test::D1, S>
{
    static void write(S* ostr, const ::Test::D1& v)
    {
        ostr->writeAll(v.a3, v.a4);
    }
};

template<typename S>
struct StreamReader<::Test::D1, S>
{
    static void read(S* istr, ::Test::D1& v)
    {
        istr->readAll(v.a3, v.a4);
    }
};

template<typename S>
struct StreamReader<::Test::EBase, S>
{
    static void read(S* istr, ::Test::EBase& v)
    {
        istr->readAll(v.a1, v.a2);
    }
};

template<typename S>
struct StreamWriter<::Test::EDerived, S>
{
    static void write(S* ostr, const ::Test::EDerived& v)
    {
        ostr->writeAll(v.a3, v.a4);
    }
};

template<typename S>
struct StreamReader<::Test::EDerived, S>
{
    static void read(S* istr, ::Test::EDerived& v)
    {
        istr->readAll(v.a3, v.a4);
    }
};

template<typename S>
struct StreamReader<::Test::Recursive, S>
{
    static void read(S* istr, ::Test::Recursive& v)
    {
        istr->readAll(v.v);
    }
};

template<typename S>
struct StreamReader<::Test::K, S>
{
    static void read(S* istr, ::Test::K& v)
    {
        istr->readAll(v.value);
    }
};

template<typename S>
struct StreamReader<::Test::L, S>
{
    static void read(S* istr, ::Test::L& v)
    {
        istr->readAll(v.data);
    }
};

template<>
struct StreamableTraits<::Test::StructKey>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 5;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Test::StructKey, S>
{
    static void read(S* istr, ::Test::StructKey& v)
    {
        istr->readAll(v.i, v.s);
    }
};

template<typename S>
struct StreamReader<::Test::M, S>
{
    static void read(S* istr, ::Test::M& v)
    {
        istr->readAll(v.v);
    }
};

template<typename S>
struct StreamReader<::Test::F3, S>
{
    static void read(S* istr, ::Test::F3& v)
    {
        istr->readAll(v.f1, v.f2);
    }
};

template<typename S>
struct StreamReader<::Test::COneMember, S>
{
    static void read(S* istr, ::Test::COneMember& v)
    {
        istr->readAll(v.e);
    }
};

template<typename S>
struct StreamReader<::Test::CTwoMembers, S>
{
    static void read(S* istr, ::Test::CTwoMembers& v)
    {
        istr->readAll(v.e1, v.e2);
    }
};

template<typename S>
struct StreamReader<::Test::EOneMember, S>
{
    static void read(S* istr, ::Test::EOneMember& v)
    {
        istr->readAll(v.e);
    }
};

template<typename S>
struct StreamReader<::Test::ETwoMembers, S>
{
    static void read(S* istr, ::Test::ETwoMembers& v)
    {
        istr->readAll(v.e1, v.e2);
    }
};

template<>
struct StreamableTraits<::Test::SOneMember>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Test::SOneMember, S>
{
    static void read(S* istr, ::Test::SOneMember& v)
    {
        istr->readAll(v.e);
    }
};

template<>
struct StreamableTraits<::Test::STwoMembers>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Test::STwoMembers, S>
{
    static void read(S* istr, ::Test::STwoMembers& v)
    {
        istr->readAll(v.e1, v.e2);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace Test
{

using BasePtr = ::std::shared_ptr<Base>;

using BPtr = ::std::shared_ptr<B>;

using CPtr = ::std::shared_ptr<C>;

using APtr = ::std::shared_ptr<A>;

using DPtr = ::std::shared_ptr<D>;

using EPtr = ::std::shared_ptr<E>;

using FPtr = ::std::shared_ptr<F>;

using GPtr = ::std::shared_ptr<G>;

using IPtr = ::std::shared_ptr<I>;
using IPrxPtr = ::std::shared_ptr<IPrx>;

using JPtr = ::std::shared_ptr<J>;
using JPrxPtr = ::std::shared_ptr<JPrx>;

using CompactExtPtr = ::std::shared_ptr<CompactExt>;

using CompactPtr = ::std::shared_ptr<Compact>;

/// \cond INTERNAL
namespace Inner
{

using APtr = ::std::shared_ptr<A>;

/// \cond INTERNAL
namespace Sub
{

using APtr = ::std::shared_ptr<A>;

}
/// \endcond

}
/// \endcond

using A1Ptr = ::std::shared_ptr<A1>;

using B1Ptr = ::std::shared_ptr<B1>;

using D1Ptr = ::std::shared_ptr<D1>;

using RecursivePtr = ::std::shared_ptr<Recursive>;

using KPtr = ::std::shared_ptr<K>;

using LPtr = ::std::shared_ptr<L>;

using MPtr = ::std::shared_ptr<M>;

using F1Ptr = ::std::shared_ptr<F1>;

using F2Ptr = ::std::shared_ptr<F2>;
using F2PrxPtr = ::std::shared_ptr<F2Prx>;

using F3Ptr = ::std::shared_ptr<F3>;

using InitialPtr = ::std::shared_ptr<Initial>;
using InitialPrxPtr = ::std::shared_ptr<InitialPrx>;

using TestIntfPtr = ::std::shared_ptr<TestIntf>;
using TestIntfPrxPtr = ::std::shared_ptr<TestIntfPrx>;

using EmptyPtr = ::std::shared_ptr<Empty>;

using AlsoEmptyPtr = ::std::shared_ptr<AlsoEmpty>;

using UnexpectedObjectExceptionTestPtr = ::std::shared_ptr<UnexpectedObjectExceptionTest>;
using UnexpectedObjectExceptionTestPrxPtr = ::std::shared_ptr<UnexpectedObjectExceptionTestPrx>;

using COneMemberPtr = ::std::shared_ptr<COneMember>;

using CTwoMembersPtr = ::std::shared_ptr<CTwoMembers>;

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
