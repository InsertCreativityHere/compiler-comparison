// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#define ICE_BUILDING_GENERATED_CODE
#include "Test.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/FactoryTable.h>
#include <Ice/OutgoingAsync.h>
#include <algorithm>
#include <array>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

void
Test::HoldPrx::putOnHold(std::int32_t iceP_delay, const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &HoldPrx::_iceI_putOnHold, iceP_delay, context).get();
}

std::future<void>
Test::HoldPrx::putOnHoldAsync(std::int32_t iceP_delay, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &HoldPrx::_iceI_putOnHold, iceP_delay, context);
}

std::function<void()>
Test::HoldPrx::putOnHoldAsync(std::int32_t iceP_delay, std::function<void()> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::HoldPrx::_iceI_putOnHold, iceP_delay, context);
}

void
Test::HoldPrx::_iceI_putOnHold(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, std::int32_t iceP_delay, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "putOnHold";

    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_delay);
        },
        nullptr);
}

void
Test::HoldPrx::waitForHold(const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &HoldPrx::_iceI_waitForHold, context).get();
}

std::future<void>
Test::HoldPrx::waitForHoldAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &HoldPrx::_iceI_waitForHold, context);
}

std::function<void()>
Test::HoldPrx::waitForHoldAsync(std::function<void()> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::HoldPrx::_iceI_waitForHold, context);
}

void
Test::HoldPrx::_iceI_waitForHold(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "waitForHold";

    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        nullptr,
        nullptr);
}

void
Test::HoldPrx::setOneway(std::int32_t iceP_value, std::int32_t iceP_expected, const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &HoldPrx::_iceI_setOneway, iceP_value, iceP_expected, context).get();
}

std::future<void>
Test::HoldPrx::setOnewayAsync(std::int32_t iceP_value, std::int32_t iceP_expected, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &HoldPrx::_iceI_setOneway, iceP_value, iceP_expected, context);
}

std::function<void()>
Test::HoldPrx::setOnewayAsync(std::int32_t iceP_value, std::int32_t iceP_expected, std::function<void()> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::HoldPrx::_iceI_setOneway, iceP_value, iceP_expected, context);
}

void
Test::HoldPrx::_iceI_setOneway(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, std::int32_t iceP_value, std::int32_t iceP_expected, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "setOneway";

    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_value, iceP_expected);
        },
        nullptr);
}

std::int32_t
Test::HoldPrx::set(std::int32_t iceP_value, std::int32_t iceP_delay, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::int32_t>(true, this, &HoldPrx::_iceI_set, iceP_value, iceP_delay, context).get();
}

std::future<std::int32_t>
Test::HoldPrx::setAsync(std::int32_t iceP_value, std::int32_t iceP_delay, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::int32_t>(false, this, &HoldPrx::_iceI_set, iceP_value, iceP_delay, context);
}

std::function<void()>
Test::HoldPrx::setAsync(std::int32_t iceP_value, std::int32_t iceP_delay, std::function<void(std::int32_t)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<std::int32_t>(std::move(response), std::move(ex), std::move(sent), this, &Test::HoldPrx::_iceI_set, iceP_value, iceP_delay, context);
}

void
Test::HoldPrx::_iceI_set(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::int32_t>>& outAsync, std::int32_t iceP_value, std::int32_t iceP_delay, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "set";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_value, iceP_delay);
        },
        nullptr);
}

void
Test::HoldPrx::shutdown(const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &HoldPrx::_iceI_shutdown, context).get();
}

std::future<void>
Test::HoldPrx::shutdownAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &HoldPrx::_iceI_shutdown, context);
}

std::function<void()>
Test::HoldPrx::shutdownAsync(std::function<void()> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::HoldPrx::_iceI_shutdown, context);
}

void
Test::HoldPrx::_iceI_shutdown(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "shutdown";

    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        nullptr,
        nullptr);
}

Test::HoldPrx::~HoldPrx() = default;

const char*
Test::HoldPrx::ice_staticId() noexcept
{
    return "::Test::Hold";
}

std::vector<std::string>
Test::Hold::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Object", "::Test::Hold"};
    return allTypeIds;
}

std::string
Test::Hold::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

const char*
Test::Hold::ice_staticId() noexcept
{
    return "::Test::Hold";
}

/// \cond INTERNAL
void
Test::Hold::_iceD_putOnHold(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::int32_t iceP_delay;
    istr->readAll(iceP_delay);
    istr->endEncapsulation();
    auto responseHandler = std::make_shared<IceInternal::AsyncResponseHandler>(std::move(sendResponse), request.current());
    try
    {
        this->putOnHoldAsync(iceP_delay, [responseHandler] { responseHandler->sendEmptyResponse(); }, [responseHandler](std::exception_ptr ex) { responseHandler->sendException(ex); }, responseHandler->current());
    }
    catch (...)
    {
        responseHandler->sendException(std::current_exception());
    }
}
/// \endcond

/// \cond INTERNAL
void
Test::Hold::_iceD_waitForHold(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    auto responseHandler = std::make_shared<IceInternal::AsyncResponseHandler>(std::move(sendResponse), request.current());
    try
    {
        this->waitForHoldAsync([responseHandler] { responseHandler->sendEmptyResponse(); }, [responseHandler](std::exception_ptr ex) { responseHandler->sendException(ex); }, responseHandler->current());
    }
    catch (...)
    {
        responseHandler->sendException(std::current_exception());
    }
}
/// \endcond

/// \cond INTERNAL
void
Test::Hold::_iceD_setOneway(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::int32_t iceP_value;
    std::int32_t iceP_expected;
    istr->readAll(iceP_value, iceP_expected);
    istr->endEncapsulation();
    this->setOneway(iceP_value, iceP_expected, request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Hold::_iceD_set(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::int32_t iceP_value;
    std::int32_t iceP_delay;
    istr->readAll(iceP_value, iceP_delay);
    istr->endEncapsulation();
    const std::int32_t ret = this->set(iceP_value, iceP_delay, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Hold::_iceD_shutdown(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->shutdown(request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Hold::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 9> allOperations{"ice_id", "ice_ids", "ice_isA", "ice_ping", "putOnHold", "set", "setOneway", "shutdown", "waitForHold"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation);
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_putOnHold(request, std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_set(request, std::move(sendResponse));
            break;
        }
        case 6:
        {
            _iceD_setOneway(request, std::move(sendResponse));
            break;
        }
        case 7:
        {
            _iceD_shutdown(request, std::move(sendResponse));
            break;
        }
        case 8:
        {
            _iceD_waitForHold(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}
/// \endcond
