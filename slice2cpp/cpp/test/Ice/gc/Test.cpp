//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Test.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::C> iceC_Test_C_init("::Test::C");

const ::IceInternal::DefaultValueFactoryInit<::Test::C2> iceC_Test_C2_init("::Test::C2");

const ::IceInternal::DefaultValueFactoryInit<::Test::Leaf> iceC_Test_Leaf_init("::Test::Leaf");

const ::IceInternal::DefaultValueFactoryInit<::Test::Node> iceC_Test_Node_init("::Test::Node");

const ::IceInternal::DefaultValueFactoryInit<::Test::CTest> iceC_Test_CTest_init("::Test::CTest");

const ::IceInternal::DefaultValueFactoryInit<::Test::AAA::C> iceC_Test_AAA_C_init("::Test::AAA::C");

const ::IceInternal::DefaultValueFactoryInit<::Test::AAA::B> iceC_Test_AAA_B_init("::Test::AAA::B");

const ::IceInternal::DefaultValueFactoryInit<::Test::CCC::Forward> iceC_Test_CCC_Forward_init("::Test::CCC::Forward");

const ::std::string iceC_Test_DDD_I_ids[2] =
{
    "::Ice::Object",
    "::Test::DDD::I"
};
const ::std::string iceC_Test_DDD_I_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "op"
};
const ::std::string iceC_Test_DDD_I_op_name = "op";

const ::IceInternal::DefaultValueFactoryInit<::Test::DDD::C> iceC_Test_DDD_C_init("::Test::DDD::C");

const ::IceInternal::DefaultValueFactoryInit<::Test::DDD::U> iceC_Test_DDD_U_init("::Test::DDD::U");

const ::IceInternal::DefaultValueFactoryInit<::Test::DDD::C2> iceC_Test_DDD_C2_init("::Test::DDD::C2");

}

bool
Test::DDD::I::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_DDD_I_ids, iceC_Test_DDD_I_ids + 2, s);
}

::std::vector<::std::string>
Test::DDD::I::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_DDD_I_ids[0], &iceC_Test_DDD_I_ids[2]);
}

::std::string
Test::DDD::I::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::DDD::I::ice_staticId()
{
    static const ::std::string typeId = "::Test::DDD::I";
    return typeId;
}

/// \cond INTERNAL
bool
Test::DDD::I::_iceD_op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->op(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::DDD::I::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_DDD_I_ops, iceC_Test_DDD_I_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_DDD_I_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_op(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::C::~C()
{
}

const ::std::string&
Test::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::C";
    return typeId;
}

Test::C2::~C2()
{
}

const ::std::string&
Test::C2::ice_staticId()
{
    static const ::std::string typeId = "::Test::C2";
    return typeId;
}

Test::Leaf::~Leaf()
{
}

const ::std::string&
Test::Leaf::ice_staticId()
{
    static const ::std::string typeId = "::Test::Leaf";
    return typeId;
}

Test::Node::~Node()
{
}

const ::std::string&
Test::Node::ice_staticId()
{
    static const ::std::string typeId = "::Test::Node";
    return typeId;
}

Test::CTest::~CTest()
{
}

const ::std::string&
Test::CTest::ice_staticId()
{
    static const ::std::string typeId = "::Test::CTest";
    return typeId;
}

Test::AAA::C::~C()
{
}

const ::std::string&
Test::AAA::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::AAA::C";
    return typeId;
}

Test::AAA::B::~B()
{
}

const ::std::string&
Test::AAA::B::ice_staticId()
{
    static const ::std::string typeId = "::Test::AAA::B";
    return typeId;
}

Test::CCC::Forward::~Forward()
{
}

const ::std::string&
Test::CCC::Forward::ice_staticId()
{
    static const ::std::string typeId = "::Test::CCC::Forward";
    return typeId;
}

Test::DDD::C::~C()
{
}

const ::std::string&
Test::DDD::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::DDD::C";
    return typeId;
}

Test::DDD::U::~U()
{
}

const ::std::string&
Test::DDD::U::ice_staticId()
{
    static const ::std::string typeId = "::Test::DDD::U";
    return typeId;
}

Test::DDD::C2::~C2()
{
}

const ::std::string&
Test::DDD::C2::ice_staticId()
{
    static const ::std::string typeId = "::Test::DDD::C2";
    return typeId;
}

/// \cond INTERNAL
void
Test::DDD::IPrx::_iceI_op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_DDD_I_op_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::DDD::IPrx::_newInstance() const
{
    return ::IceInternal::createProxy<IPrx>();
}
/// \endcond

const ::std::string&
Test::DDD::IPrx::ice_staticId()
{
    return I::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

namespace
{

}

namespace
{

}

namespace
{

}

namespace
{

}

namespace
{

const ::std::string iceC_Test_DDD_I_op_name = "op";

}

}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(C* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< C>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new C;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::C::_newInstance() const
{
    return new C;
}
/// \endcond

const ::std::string&
IceProxy::Test::C::ice_staticId()
{
    return ::Test::C::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(C2* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< C2>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new C2;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::C2::_newInstance() const
{
    return new C2;
}
/// \endcond

const ::std::string&
IceProxy::Test::C2::ice_staticId()
{
    return ::Test::C2::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(Leaf* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Leaf>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Leaf;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Leaf::_newInstance() const
{
    return new Leaf;
}
/// \endcond

const ::std::string&
IceProxy::Test::Leaf::ice_staticId()
{
    return ::Test::Leaf::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(Node* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Node>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Node;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Node::_newInstance() const
{
    return new Node;
}
/// \endcond

const ::std::string&
IceProxy::Test::Node::ice_staticId()
{
    return ::Test::Node::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(CTest* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< CTest>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new CTest;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::CTest::_newInstance() const
{
    return new CTest;
}
/// \endcond

const ::std::string&
IceProxy::Test::CTest::ice_staticId()
{
    return ::Test::CTest::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::AAA::upCast(C* p) { return p; }

void
::IceProxy::Test::AAA::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< C>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new C;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::AAA::C::_newInstance() const
{
    return new C;
}
/// \endcond

const ::std::string&
IceProxy::Test::AAA::C::ice_staticId()
{
    return ::Test::AAA::C::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::AAA::upCast(B* p) { return p; }

void
::IceProxy::Test::AAA::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< B>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new B;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::AAA::B::_newInstance() const
{
    return new B;
}
/// \endcond

const ::std::string&
IceProxy::Test::AAA::B::ice_staticId()
{
    return ::Test::AAA::B::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::CCC::upCast(Forward* p) { return p; }

void
::IceProxy::Test::CCC::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Forward>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Forward;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::CCC::Forward::_newInstance() const
{
    return new Forward;
}
/// \endcond

const ::std::string&
IceProxy::Test::CCC::Forward::ice_staticId()
{
    return ::Test::CCC::Forward::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::DDD::upCast(I* p) { return p; }

void
::IceProxy::Test::DDD::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< I>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new I;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::DDD::I::_iceI_begin_op(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_DDD_I_op_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_DDD_I_op_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_DDD_I_op_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::DDD::I::end_op(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_DDD_I_op_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::DDD::I::_newInstance() const
{
    return new I;
}
/// \endcond

const ::std::string&
IceProxy::Test::DDD::I::ice_staticId()
{
    return ::Test::DDD::I::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::DDD::upCast(C* p) { return p; }

void
::IceProxy::Test::DDD::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< C>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new C;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::DDD::C::_newInstance() const
{
    return new C;
}
/// \endcond

const ::std::string&
IceProxy::Test::DDD::C::ice_staticId()
{
    return ::Test::DDD::C::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::DDD::upCast(U* p) { return p; }

void
::IceProxy::Test::DDD::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< U>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new U;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::DDD::U::_newInstance() const
{
    return new U;
}
/// \endcond

const ::std::string&
IceProxy::Test::DDD::U::ice_staticId()
{
    return ::Test::DDD::U::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::DDD::upCast(C2* p) { return p; }

void
::IceProxy::Test::DDD::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< C2>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new C2;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::DDD::C2::_newInstance() const
{
    return new C2;
}
/// \endcond

const ::std::string&
IceProxy::Test::DDD::C2::ice_staticId()
{
    return ::Test::DDD::C2::ice_staticId();
}

Test::C::~C()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(C* p) { return p; }

/// \endcond

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
Test::C::ice_clone() const
{
    ::Ice::Object* p = new C(*this);
    return p;
}
#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_Test_C_ids[2] =
{
    "::Ice::Object",
    "::Test::C"
};

}

bool
Test::C::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_C_ids, iceC_Test_C_ids + 2, s);
}

::std::vector< ::std::string>
Test::C::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_C_ids[0], &iceC_Test_C_ids[2]);
}

const ::std::string&
Test::C::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::C";
    return typeId;
}

void
Test::C::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    if(left)
    {
        if((::Test::upCast(left.get())->_iceGcVisit(v_)))
        {
            left = 0;
        }
    }
    if(right)
    {
        if((::Test::upCast(right.get())->_iceGcVisit(v_)))
        {
            right = 0;
        }
    }
}

/// \cond STREAM
void
Test::C::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< C, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::C::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< C, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::C> iceC_Test_C_init("::Test::C");
}

::Ice::ValueFactoryPtr
Test::C::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::C::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(CPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = CPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(C::ice_staticId(), v);
    }
}
/// \endcond

Test::C2::~C2()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(C2* p) { return p; }

/// \endcond

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
Test::C2::ice_clone() const
{
    ::Ice::Object* p = new C2(*this);
    return p;
}
#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_Test_C2_ids[2] =
{
    "::Ice::Object",
    "::Test::C2"
};

}

bool
Test::C2::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_C2_ids, iceC_Test_C2_ids + 2, s);
}

::std::vector< ::std::string>
Test::C2::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_C2_ids[0], &iceC_Test_C2_ids[2]);
}

const ::std::string&
Test::C2::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::C2::ice_staticId()
{
    static const ::std::string typeId = "::Test::C2";
    return typeId;
}

void
Test::C2::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    {
        for(::Test::S2Seq::iterator _i0 = theS2Seq.begin(); _i0 != theS2Seq.end(); ++_i0)
        {
            {
                for(::Test::C2Dict::iterator _i2 = (*_i0).theC2Dict.begin(); _i2 != (*_i0).theC2Dict.end(); ++_i2)
                {
                    if((*_i2).second)
                    {
                        if((::Test::upCast((*_i2).second.get())->_iceGcVisit(v_)))
                        {
                            (*_i2).second = 0;
                        }
                    }
                }
            }
        }
    }
}

/// \cond STREAM
void
Test::C2::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< C2, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::C2::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< C2, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::C2> iceC_Test_C2_init("::Test::C2");
}

::Ice::ValueFactoryPtr
Test::C2::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::C2::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(C2Ptr& handle, const ::Ice::ObjectPtr& v)
{
    handle = C2Ptr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(C2::ice_staticId(), v);
    }
}
/// \endcond

Test::Leaf::~Leaf()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(Leaf* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::Leaf::ice_clone() const
{
    ::Ice::Object* p = new Leaf(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_Leaf_ids[2] =
{
    "::Ice::Object",
    "::Test::Leaf"
};

}

bool
Test::Leaf::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Leaf_ids, iceC_Test_Leaf_ids + 2, s);
}

::std::vector< ::std::string>
Test::Leaf::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Leaf_ids[0], &iceC_Test_Leaf_ids[2]);
}

const ::std::string&
Test::Leaf::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Leaf::ice_staticId()
{
    static const ::std::string typeId = "::Test::Leaf";
    return typeId;
}

/// \cond STREAM
void
Test::Leaf::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Leaf, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Leaf::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Leaf, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::Leaf> iceC_Test_Leaf_init("::Test::Leaf");
}

::Ice::ValueFactoryPtr
Test::Leaf::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::Leaf::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(LeafPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = LeafPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Leaf::ice_staticId(), v);
    }
}
/// \endcond

Test::Node::~Node()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(Node* p) { return p; }

/// \endcond

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
Test::Node::ice_clone() const
{
    ::Ice::Object* p = new Node(*this);
    return p;
}
#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_Test_Node_ids[2] =
{
    "::Ice::Object",
    "::Test::Node"
};

}

bool
Test::Node::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Node_ids, iceC_Test_Node_ids + 2, s);
}

::std::vector< ::std::string>
Test::Node::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Node_ids[0], &iceC_Test_Node_ids[2]);
}

const ::std::string&
Test::Node::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Node::ice_staticId()
{
    static const ::std::string typeId = "::Test::Node";
    return typeId;
}

void
Test::Node::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    if(l)
    {
        if((::Test::upCast(l.get())->_iceGcVisit(v_)))
        {
            l = 0;
        }
    }
    if(n)
    {
        if((::Test::upCast(n.get())->_iceGcVisit(v_)))
        {
            n = 0;
        }
    }
}

/// \cond STREAM
void
Test::Node::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Node, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Node::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Node, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::Node> iceC_Test_Node_init("::Test::Node");
}

::Ice::ValueFactoryPtr
Test::Node::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::Node::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(NodePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = NodePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Node::ice_staticId(), v);
    }
}
/// \endcond

Test::CTest::~CTest()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(CTest* p) { return p; }

/// \endcond

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
Test::CTest::ice_clone() const
{
    ::Ice::Object* p = new CTest(*this);
    return p;
}
#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_Test_CTest_ids[2] =
{
    "::Ice::Object",
    "::Test::CTest"
};

}

bool
Test::CTest::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_CTest_ids, iceC_Test_CTest_ids + 2, s);
}

::std::vector< ::std::string>
Test::CTest::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_CTest_ids[0], &iceC_Test_CTest_ids[2]);
}

const ::std::string&
Test::CTest::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::CTest::ice_staticId()
{
    static const ::std::string typeId = "::Test::CTest";
    return typeId;
}

void
Test::CTest::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    {
        for(::Test::CSeq::iterator _i0 = theCSeq.begin(); _i0 != theCSeq.end(); ++_i0)
        {
            if((*_i0))
            {
                if((::Test::upCast((*_i0).get())->_iceGcVisit(v_)))
                {
                    (*_i0) = 0;
                }
            }
        }
    }
    {
        for(::Test::SSeq::iterator _i0 = theSSeq.begin(); _i0 != theSSeq.end(); ++_i0)
        {
            if((*_i0).theC)
            {
                if((::Test::upCast((*_i0).theC.get())->_iceGcVisit(v_)))
                {
                    (*_i0).theC = 0;
                }
            }
        }
    }
    {
        for(::Test::C2DictSeq::iterator _i0 = theC2DictSeq.begin(); _i0 != theC2DictSeq.end(); ++_i0)
        {
            {
                for(::Test::C2Dict::iterator _i1 = (*_i0).begin(); _i1 != (*_i0).end(); ++_i1)
                {
                    if((*_i1).second)
                    {
                        if((::Test::upCast((*_i1).second.get())->_iceGcVisit(v_)))
                        {
                            (*_i1).second = 0;
                        }
                    }
                }
            }
        }
    }
    {
        for(::Test::CSeqSeq::iterator _i0 = theCSeqSeq.begin(); _i0 != theCSeqSeq.end(); ++_i0)
        {
            {
                for(::Test::CSeq::iterator _i1 = (*_i0).begin(); _i1 != (*_i0).end(); ++_i1)
                {
                    if((*_i1))
                    {
                        if((::Test::upCast((*_i1).get())->_iceGcVisit(v_)))
                        {
                            (*_i1) = 0;
                        }
                    }
                }
            }
        }
    }
    if(theS.theC)
    {
        if((::Test::upCast(theS.theC.get())->_iceGcVisit(v_)))
        {
            theS.theC = 0;
        }
    }
    {
        for(::Test::SSeq::iterator _i1 = theA.theSSeq.begin(); _i1 != theA.theSSeq.end(); ++_i1)
        {
            if((*_i1).theC)
            {
                if((::Test::upCast((*_i1).theC.get())->_iceGcVisit(v_)))
                {
                    (*_i1).theC = 0;
                }
            }
        }
    }
    {
        for(::Test::C2Dict::iterator _i1 = theS2.theC2Dict.begin(); _i1 != theS2.theC2Dict.end(); ++_i1)
        {
            if((*_i1).second)
            {
                if((::Test::upCast((*_i1).second.get())->_iceGcVisit(v_)))
                {
                    (*_i1).second = 0;
                }
            }
        }
    }
    if(theB.theS.theC)
    {
        if((::Test::upCast(theB.theS.theC.get())->_iceGcVisit(v_)))
        {
            theB.theS.theC = 0;
        }
    }
    {
        for(::Test::CDict::iterator _i0 = theCDict.begin(); _i0 != theCDict.end(); ++_i0)
        {
            if((*_i0).second)
            {
                if((::Test::upCast((*_i0).second.get())->_iceGcVisit(v_)))
                {
                    (*_i0).second = 0;
                }
            }
        }
    }
    {
        for(::Test::CSeqDict::iterator _i0 = theCSeqDict.begin(); _i0 != theCSeqDict.end(); ++_i0)
        {
            {
                for(::Test::CSeq::iterator _i1 = (*_i0).second.begin(); _i1 != (*_i0).second.end(); ++_i1)
                {
                    if((*_i1))
                    {
                        if((::Test::upCast((*_i1).get())->_iceGcVisit(v_)))
                        {
                            (*_i1) = 0;
                        }
                    }
                }
            }
        }
    }
    {
        for(::Test::SDict::iterator _i0 = theSDict.begin(); _i0 != theSDict.end(); ++_i0)
        {
            if((*_i0).second.theC)
            {
                if((::Test::upCast((*_i0).second.theC.get())->_iceGcVisit(v_)))
                {
                    (*_i0).second.theC = 0;
                }
            }
        }
    }
    {
        for(::Test::CDictDict::iterator _i0 = theCDictDict.begin(); _i0 != theCDictDict.end(); ++_i0)
        {
            {
                for(::Test::CDict::iterator _i1 = (*_i0).second.begin(); _i1 != (*_i0).second.end(); ++_i1)
                {
                    if((*_i1).second)
                    {
                        if((::Test::upCast((*_i1).second.get())->_iceGcVisit(v_)))
                        {
                            (*_i1).second = 0;
                        }
                    }
                }
            }
        }
    }
}

/// \cond STREAM
void
Test::CTest::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< CTest, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::CTest::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< CTest, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::CTest> iceC_Test_CTest_init("::Test::CTest");
}

::Ice::ValueFactoryPtr
Test::CTest::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::CTest::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(CTestPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = CTestPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(CTest::ice_staticId(), v);
    }
}
/// \endcond

Test::AAA::C::~C()
{
}

/// \cond INTERNAL
::Ice::Object* Test::AAA::upCast(C* p) { return p; }

/// \endcond

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
Test::AAA::C::ice_clone() const
{
    ::Ice::Object* p = new C(*this);
    return p;
}
#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_Test_AAA_C_ids[2] =
{
    "::Ice::Object",
    "::Test::AAA::C"
};

}

bool
Test::AAA::C::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_AAA_C_ids, iceC_Test_AAA_C_ids + 2, s);
}

::std::vector< ::std::string>
Test::AAA::C::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_AAA_C_ids[0], &iceC_Test_AAA_C_ids[2]);
}

const ::std::string&
Test::AAA::C::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::AAA::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::AAA::C";
    return typeId;
}

void
Test::AAA::C::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    if(obj1)
    {
        if((obj1.get())->_iceGcVisit(v_))
        {
            obj1 = 0;
        }
    }
    if(obj2)
    {
        if((obj2.get())->_iceGcVisit(v_))
        {
            obj2 = 0;
        }
    }
    if(b1)
    {
        if((::Test::AAA::upCast(b1.get())->_iceGcVisit(v_)))
        {
            b1 = 0;
        }
    }
    if(b2)
    {
        if((::Test::AAA::upCast(b2.get())->_iceGcVisit(v_)))
        {
            b2 = 0;
        }
    }
    {
        for(::Test::AAA::BSeq::iterator _i0 = x.begin(); _i0 != x.end(); ++_i0)
        {
            if((*_i0))
            {
                if((::Test::AAA::upCast((*_i0).get())->_iceGcVisit(v_)))
                {
                    (*_i0) = 0;
                }
            }
        }
    }
    {
        for(::Test::AAA::BDict::iterator _i0 = y.begin(); _i0 != y.end(); ++_i0)
        {
            if((*_i0).second)
            {
                if((::Test::AAA::upCast((*_i0).second.get())->_iceGcVisit(v_)))
                {
                    (*_i0).second = 0;
                }
            }
        }
    }
    if(z.bMem)
    {
        if((::Test::AAA::upCast(z.bMem.get())->_iceGcVisit(v_)))
        {
            z.bMem = 0;
        }
    }
}

/// \cond STREAM
void
Test::AAA::C::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< C, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::AAA::C::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< C, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::AAA::C> iceC_Test_AAA_C_init("::Test::AAA::C");
}

::Ice::ValueFactoryPtr
Test::AAA::C::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::AAA::C::ice_staticId());
}

/// \cond INTERNAL
void
Test::AAA::_icePatchObjectPtr(CPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = CPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(C::ice_staticId(), v);
    }
}
/// \endcond

Test::AAA::B::~B()
{
}

/// \cond INTERNAL
::Ice::Object* Test::AAA::upCast(B* p) { return p; }

/// \endcond

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
Test::AAA::B::ice_clone() const
{
    ::Ice::Object* p = new B(*this);
    return p;
}
#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_Test_AAA_B_ids[2] =
{
    "::Ice::Object",
    "::Test::AAA::B"
};

}

bool
Test::AAA::B::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_AAA_B_ids, iceC_Test_AAA_B_ids + 2, s);
}

::std::vector< ::std::string>
Test::AAA::B::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_AAA_B_ids[0], &iceC_Test_AAA_B_ids[2]);
}

const ::std::string&
Test::AAA::B::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::AAA::B::ice_staticId()
{
    static const ::std::string typeId = "::Test::AAA::B";
    return typeId;
}

void
Test::AAA::B::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    if(obj1)
    {
        if((obj1.get())->_iceGcVisit(v_))
        {
            obj1 = 0;
        }
    }
    if(obj2)
    {
        if((obj2.get())->_iceGcVisit(v_))
        {
            obj2 = 0;
        }
    }
    if(c1)
    {
        if((::Test::AAA::upCast(c1.get())->_iceGcVisit(v_)))
        {
            c1 = 0;
        }
    }
    if(c2)
    {
        if((::Test::AAA::upCast(c2.get())->_iceGcVisit(v_)))
        {
            c2 = 0;
        }
    }
    {
        for(::Test::AAA::CSeq::iterator _i0 = x.begin(); _i0 != x.end(); ++_i0)
        {
            if((*_i0))
            {
                if((::Test::AAA::upCast((*_i0).get())->_iceGcVisit(v_)))
                {
                    (*_i0) = 0;
                }
            }
        }
    }
    {
        for(::Test::AAA::CDict::iterator _i0 = y.begin(); _i0 != y.end(); ++_i0)
        {
            if((*_i0).second)
            {
                if((::Test::AAA::upCast((*_i0).second.get())->_iceGcVisit(v_)))
                {
                    (*_i0).second = 0;
                }
            }
        }
    }
    if(z.cMem)
    {
        if((::Test::AAA::upCast(z.cMem.get())->_iceGcVisit(v_)))
        {
            z.cMem = 0;
        }
    }
}

/// \cond STREAM
void
Test::AAA::B::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< B, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::AAA::B::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< B, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::AAA::B> iceC_Test_AAA_B_init("::Test::AAA::B");
}

::Ice::ValueFactoryPtr
Test::AAA::B::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::AAA::B::ice_staticId());
}

/// \cond INTERNAL
void
Test::AAA::_icePatchObjectPtr(BPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = BPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(B::ice_staticId(), v);
    }
}
/// \endcond

Test::CCC::Forward::~Forward()
{
}

/// \cond INTERNAL
::Ice::Object* Test::CCC::upCast(Forward* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::CCC::Forward::ice_clone() const
{
    ::Ice::Object* p = new Forward(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_CCC_Forward_ids[2] =
{
    "::Ice::Object",
    "::Test::CCC::Forward"
};

}

bool
Test::CCC::Forward::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_CCC_Forward_ids, iceC_Test_CCC_Forward_ids + 2, s);
}

::std::vector< ::std::string>
Test::CCC::Forward::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_CCC_Forward_ids[0], &iceC_Test_CCC_Forward_ids[2]);
}

const ::std::string&
Test::CCC::Forward::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::CCC::Forward::ice_staticId()
{
    static const ::std::string typeId = "::Test::CCC::Forward";
    return typeId;
}

/// \cond STREAM
void
Test::CCC::Forward::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Forward, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::CCC::Forward::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Forward, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::CCC::Forward> iceC_Test_CCC_Forward_init("::Test::CCC::Forward");
}

::Ice::ValueFactoryPtr
Test::CCC::Forward::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::CCC::Forward::ice_staticId());
}

/// \cond INTERNAL
void
Test::CCC::_icePatchObjectPtr(ForwardPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ForwardPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Forward::ice_staticId(), v);
    }
}
/// \endcond

Test::DDD::I::~I()
{
}

/// \cond INTERNAL
::Ice::Object* Test::DDD::upCast(I* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Test_DDD_I_ids[2] =
{
    "::Ice::Object",
    "::Test::DDD::I"
};

}

bool
Test::DDD::I::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_DDD_I_ids, iceC_Test_DDD_I_ids + 2, s);
}

::std::vector< ::std::string>
Test::DDD::I::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_DDD_I_ids[0], &iceC_Test_DDD_I_ids[2]);
}

const ::std::string&
Test::DDD::I::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::DDD::I::ice_staticId()
{
    static const ::std::string typeId = "::Test::DDD::I";
    return typeId;
}

/// \cond INTERNAL
bool
Test::DDD::I::_iceD_op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->op(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_DDD_I_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "op"
};

}

/// \cond INTERNAL
bool
Test::DDD::I::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_DDD_I_all, iceC_Test_DDD_I_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_DDD_I_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_op(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::DDD::I::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< I, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::DDD::I::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< I, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Test::DDD::_icePatchObjectPtr(IPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = IPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(I::ice_staticId(), v);
    }
}
/// \endcond

Test::DDD::C::~C()
{
}

/// \cond INTERNAL
::Ice::Object* Test::DDD::upCast(C* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::DDD::C::ice_clone() const
{
    ::Ice::Object* p = new C(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_DDD_C_ids[2] =
{
    "::Ice::Object",
    "::Test::DDD::C"
};

}

bool
Test::DDD::C::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_DDD_C_ids, iceC_Test_DDD_C_ids + 2, s);
}

::std::vector< ::std::string>
Test::DDD::C::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_DDD_C_ids[0], &iceC_Test_DDD_C_ids[2]);
}

const ::std::string&
Test::DDD::C::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::DDD::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::DDD::C";
    return typeId;
}

/// \cond STREAM
void
Test::DDD::C::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< C, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::DDD::C::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< C, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::DDD::C> iceC_Test_DDD_C_init("::Test::DDD::C");
}

::Ice::ValueFactoryPtr
Test::DDD::C::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::DDD::C::ice_staticId());
}

/// \cond INTERNAL
void
Test::DDD::_icePatchObjectPtr(CPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = CPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(C::ice_staticId(), v);
    }
}
/// \endcond

Test::DDD::U::~U()
{
}

/// \cond INTERNAL
::Ice::Object* Test::DDD::upCast(U* p) { return p; }

/// \endcond

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
Test::DDD::U::ice_clone() const
{
    ::Ice::Object* p = new U(*this);
    return p;
}
#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_Test_DDD_U_ids[2] =
{
    "::Ice::Object",
    "::Test::DDD::U"
};

}

bool
Test::DDD::U::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_DDD_U_ids, iceC_Test_DDD_U_ids + 2, s);
}

::std::vector< ::std::string>
Test::DDD::U::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_DDD_U_ids[0], &iceC_Test_DDD_U_ids[2]);
}

const ::std::string&
Test::DDD::U::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::DDD::U::ice_staticId()
{
    static const ::std::string typeId = "::Test::DDD::U";
    return typeId;
}

void
Test::DDD::U::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    if(myI)
    {
        if((::Test::DDD::upCast(myI.get())->_iceGcVisit(v_)))
        {
            myI = 0;
        }
    }
    if(myC)
    {
        if((::Test::DDD::upCast(myC.get())->_iceGcVisit(v_)))
        {
            myC = 0;
        }
    }
    if(myC2)
    {
        if((::Test::DDD::upCast(myC2.get())->_iceGcVisit(v_)))
        {
            myC2 = 0;
        }
    }
}

/// \cond STREAM
void
Test::DDD::U::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< U, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::DDD::U::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< U, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::DDD::U> iceC_Test_DDD_U_init("::Test::DDD::U");
}

::Ice::ValueFactoryPtr
Test::DDD::U::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::DDD::U::ice_staticId());
}

/// \cond INTERNAL
void
Test::DDD::_icePatchObjectPtr(UPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = UPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(U::ice_staticId(), v);
    }
}
/// \endcond

Test::DDD::C2::~C2()
{
}

/// \cond INTERNAL
::Ice::Object* Test::DDD::upCast(C2* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::DDD::C2::ice_clone() const
{
    ::Ice::Object* p = new C2(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_DDD_C2_ids[2] =
{
    "::Ice::Object",
    "::Test::DDD::C2"
};

}

bool
Test::DDD::C2::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_DDD_C2_ids, iceC_Test_DDD_C2_ids + 2, s);
}

::std::vector< ::std::string>
Test::DDD::C2::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_DDD_C2_ids[0], &iceC_Test_DDD_C2_ids[2]);
}

const ::std::string&
Test::DDD::C2::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::DDD::C2::ice_staticId()
{
    static const ::std::string typeId = "::Test::DDD::C2";
    return typeId;
}

/// \cond STREAM
void
Test::DDD::C2::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< C2, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::DDD::C2::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< C2, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::DDD::C2> iceC_Test_DDD_C2_init("::Test::DDD::C2");
}

::Ice::ValueFactoryPtr
Test::DDD::C2::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::DDD::C2::ice_staticId());
}

/// \cond INTERNAL
void
Test::DDD::_icePatchObjectPtr(C2Ptr& handle, const ::Ice::ObjectPtr& v)
{
    handle = C2Ptr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(C2::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
