//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::BadEncodingException> iceC_Test_BadEncodingException_init("::Test::BadEncodingException");

const ::std::string iceC_Test_MyObject_ids[2] =
{
    "::Ice::Object",
    "::Test::MyObject"
};
const ::std::string iceC_Test_MyObject_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "narrow",
    "shutdown",
    "widen"
};
const ::std::string iceC_Test_MyObject_widen_name = "widen";
const ::std::string iceC_Test_MyObject_narrow_name = "narrow";
const ::std::string iceC_Test_MyObject_shutdown_name = "shutdown";

}

Test::BadEncodingException::~BadEncodingException()
{
}

const ::std::string&
Test::BadEncodingException::ice_staticId()
{
    static const ::std::string typeId = "::Test::BadEncodingException";
    return typeId;
}

bool
Test::MyObject::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MyObject_ids, iceC_Test_MyObject_ids + 2, s);
}

::std::vector<::std::string>
Test::MyObject::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_MyObject_ids[0], &iceC_Test_MyObject_ids[2]);
}

::std::string
Test::MyObject::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MyObject::ice_staticId()
{
    static const ::std::string typeId = "::Test::MyObject";
    return typeId;
}

/// \cond INTERNAL
bool
Test::MyObject::_iceD_widen(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_msg;
    istr->readAll(iceP_msg);
    inS.endReadParams();
    ::std::wstring ret = this->widen(::std::move(iceP_msg), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyObject::_iceD_narrow(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::wstring iceP_wmsg;
    istr->readAll(iceP_wmsg);
    inS.endReadParams();
    ::std::string ret = this->narrow(::std::move(iceP_wmsg), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyObject::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyObject::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_MyObject_ops, iceC_Test_MyObject_ops + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_MyObject_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_narrow(in, current);
        }
        case 5:
        {
            return _iceD_shutdown(in, current);
        }
        case 6:
        {
            return _iceD_widen(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
Test::MyObjectPrx::_iceI_widen(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::wstring>>& outAsync, const ::std::string& iceP_msg, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyObject_widen_name);
    outAsync->invoke(iceC_Test_MyObject_widen_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_msg);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const BadEncodingException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyObjectPrx::_iceI_narrow(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::std::wstring& iceP_wmsg, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyObject_narrow_name);
    outAsync->invoke(iceC_Test_MyObject_narrow_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_wmsg);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyObjectPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_MyObject_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::MyObjectPrx::_newInstance() const
{
    return ::IceInternal::createProxy<MyObjectPrx>();
}
/// \endcond

const ::std::string&
Test::MyObjectPrx::ice_staticId()
{
    return MyObject::ice_staticId();
}
