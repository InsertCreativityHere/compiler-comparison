//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `WstringAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __WstringAMD_h__
#define __WstringAMD_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Test1
{

class WstringClass;
class WstringClassPrx;

}

namespace Test2
{

class WstringClass;
class WstringClassPrx;

}

namespace Test1
{

using WstringSeq = ::std::vector<::std::wstring>;

using WstringWStringDict = ::std::map<::std::wstring, ::std::wstring>;

struct WstringStruct
{
    ::std::wstring s;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::wstring&> ice_tuple() const
    {
        return std::tie(s);
    }
};

class WstringException : public ::Ice::UserExceptionHelper<WstringException, ::Ice::UserException>
{
public:

    virtual ~WstringException();

    WstringException(const WstringException&) = default;

    WstringException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    WstringException(const ::std::wstring& reason) :
        reason(reason)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::wstring&> ice_tuple() const
    {
        return std::tie(reason);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::wstring reason;
};

/// \cond INTERNAL
static WstringException _iceS_WstringException_init;
/// \endcond

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace Test2
{

using WstringSeq = ::std::vector<::std::wstring>;

using WstringWStringDict = ::std::map<::std::wstring, ::std::wstring>;

struct WstringStruct
{
    ::std::wstring s;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::wstring&> ice_tuple() const
    {
        return std::tie(s);
    }
};

class WstringException : public ::Ice::UserExceptionHelper<WstringException, ::Ice::UserException>
{
public:

    virtual ~WstringException();

    WstringException(const WstringException&) = default;

    WstringException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    WstringException(const ::std::wstring& reason) :
        reason(reason)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::wstring&> ice_tuple() const
    {
        return std::tie(reason);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::wstring reason;
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace Test1
{

class WstringClass : public virtual ::Ice::Object
{
public:

    using ProxyType = WstringClassPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Encapsulates the results of a call to opString.
     */
    struct OpStringResult
    {
        ::std::wstring returnValue;
        ::std::wstring s2;
    };

    virtual void opStringAsync(::std::wstring s1, ::std::function<void(const ::std::wstring& returnValue, const ::std::wstring& s2)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opString(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opStruct.
     */
    struct OpStructResult
    {
        WstringStruct returnValue;
        WstringStruct s2;
    };

    virtual void opStructAsync(WstringStruct s1, ::std::function<void(const WstringStruct& returnValue, const WstringStruct& s2)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opStruct(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void throwExceptAsync(::std::wstring reason, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_throwExcept(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace Test2
{

class WstringClass : public virtual ::Ice::Object
{
public:

    using ProxyType = WstringClassPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Encapsulates the results of a call to opString.
     */
    struct OpStringResult
    {
        ::std::wstring returnValue;
        ::std::wstring s2;
    };

    virtual void opStringAsync(::std::wstring s1, ::std::function<void(const ::std::wstring& returnValue, const ::std::wstring& s2)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opString(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opStruct.
     */
    struct OpStructResult
    {
        WstringStruct returnValue;
        WstringStruct s2;
    };

    virtual void opStructAsync(WstringStruct s1, ::std::function<void(const WstringStruct& returnValue, const WstringStruct& s2)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opStruct(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void throwExceptAsync(::std::wstring reason, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_throwExcept(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace Test1
{

class WstringClassPrx : public virtual ::Ice::Proxy<WstringClassPrx, ::Ice::ObjectPrx>
{
public:

    ::std::wstring opString(const ::std::wstring& s1, ::std::wstring& s2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<WstringClass::OpStringResult>(true, this, &WstringClassPrx::_iceI_opString, s1, context).get();
        s2 = ::std::move(_result.s2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opStringAsync(const ::std::wstring& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<WstringClass::OpStringResult>>().get_future())
    {
        return _makePromiseOutgoing<WstringClass::OpStringResult, P>(false, this, &WstringClassPrx::_iceI_opString, s1, context);
    }

    ::std::function<void()>
    opStringAsync(const ::std::wstring& s1,
                  ::std::function<void(::std::wstring, ::std::wstring)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](WstringClass::OpStringResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.s2));
        };
        return _makeLambdaOutgoing<WstringClass::OpStringResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test1::WstringClassPrx::_iceI_opString, s1, context);
    }

    /// \cond INTERNAL
    void _iceI_opString(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<WstringClass::OpStringResult>>&, const ::std::wstring&, const ::Ice::Context&);
    /// \endcond

    WstringStruct opStruct(const WstringStruct& s1, WstringStruct& s2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<WstringClass::OpStructResult>(true, this, &WstringClassPrx::_iceI_opStruct, s1, context).get();
        s2 = ::std::move(_result.s2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opStructAsync(const WstringStruct& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<WstringClass::OpStructResult>>().get_future())
    {
        return _makePromiseOutgoing<WstringClass::OpStructResult, P>(false, this, &WstringClassPrx::_iceI_opStruct, s1, context);
    }

    ::std::function<void()>
    opStructAsync(const WstringStruct& s1,
                  ::std::function<void(::Test1::WstringStruct, ::Test1::WstringStruct)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](WstringClass::OpStructResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.s2));
        };
        return _makeLambdaOutgoing<WstringClass::OpStructResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test1::WstringClassPrx::_iceI_opStruct, s1, context);
    }

    /// \cond INTERNAL
    void _iceI_opStruct(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<WstringClass::OpStructResult>>&, const WstringStruct&, const ::Ice::Context&);
    /// \endcond

    void throwExcept(const ::std::wstring& reason, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &WstringClassPrx::_iceI_throwExcept, reason, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto throwExceptAsync(const ::std::wstring& reason, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &WstringClassPrx::_iceI_throwExcept, reason, context);
    }

    ::std::function<void()>
    throwExceptAsync(const ::std::wstring& reason,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test1::WstringClassPrx::_iceI_throwExcept, reason, context);
    }

    /// \cond INTERNAL
    void _iceI_throwExcept(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::wstring&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    WstringClassPrx() = default;
    friend ::std::shared_ptr<WstringClassPrx> IceInternal::createProxy<WstringClassPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

namespace Test2
{

class WstringClassPrx : public virtual ::Ice::Proxy<WstringClassPrx, ::Ice::ObjectPrx>
{
public:

    ::std::wstring opString(const ::std::wstring& s1, ::std::wstring& s2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<WstringClass::OpStringResult>(true, this, &WstringClassPrx::_iceI_opString, s1, context).get();
        s2 = ::std::move(_result.s2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opStringAsync(const ::std::wstring& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<WstringClass::OpStringResult>>().get_future())
    {
        return _makePromiseOutgoing<WstringClass::OpStringResult, P>(false, this, &WstringClassPrx::_iceI_opString, s1, context);
    }

    ::std::function<void()>
    opStringAsync(const ::std::wstring& s1,
                  ::std::function<void(::std::wstring, ::std::wstring)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](WstringClass::OpStringResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.s2));
        };
        return _makeLambdaOutgoing<WstringClass::OpStringResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test2::WstringClassPrx::_iceI_opString, s1, context);
    }

    /// \cond INTERNAL
    void _iceI_opString(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<WstringClass::OpStringResult>>&, const ::std::wstring&, const ::Ice::Context&);
    /// \endcond

    WstringStruct opStruct(const WstringStruct& s1, WstringStruct& s2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<WstringClass::OpStructResult>(true, this, &WstringClassPrx::_iceI_opStruct, s1, context).get();
        s2 = ::std::move(_result.s2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opStructAsync(const WstringStruct& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<WstringClass::OpStructResult>>().get_future())
    {
        return _makePromiseOutgoing<WstringClass::OpStructResult, P>(false, this, &WstringClassPrx::_iceI_opStruct, s1, context);
    }

    ::std::function<void()>
    opStructAsync(const WstringStruct& s1,
                  ::std::function<void(::Test2::WstringStruct, ::Test2::WstringStruct)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](WstringClass::OpStructResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.s2));
        };
        return _makeLambdaOutgoing<WstringClass::OpStructResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test2::WstringClassPrx::_iceI_opStruct, s1, context);
    }

    /// \cond INTERNAL
    void _iceI_opStruct(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<WstringClass::OpStructResult>>&, const WstringStruct&, const ::Ice::Context&);
    /// \endcond

    void throwExcept(const ::std::wstring& reason, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &WstringClassPrx::_iceI_throwExcept, reason, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto throwExceptAsync(const ::std::wstring& reason, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &WstringClassPrx::_iceI_throwExcept, reason, context);
    }

    ::std::function<void()>
    throwExceptAsync(const ::std::wstring& reason,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test2::WstringClassPrx::_iceI_throwExcept, reason, context);
    }

    /// \cond INTERNAL
    void _iceI_throwExcept(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::wstring&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    WstringClassPrx() = default;
    friend ::std::shared_ptr<WstringClassPrx> IceInternal::createProxy<WstringClassPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::Test1::WstringStruct>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Test1::WstringStruct, S>
{
    static void read(S* istr, ::Test1::WstringStruct& v)
    {
        istr->readAll(v.s);
    }
};

template<typename S>
struct StreamReader<::Test1::WstringException, S>
{
    static void read(S* istr, ::Test1::WstringException& v)
    {
        istr->readAll(v.reason);
    }
};

}
/// \endcond

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::Test2::WstringStruct>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Test2::WstringStruct, S>
{
    static void read(S* istr, ::Test2::WstringStruct& v)
    {
        istr->readAll(v.s);
    }
};

template<typename S>
struct StreamReader<::Test2::WstringException, S>
{
    static void read(S* istr, ::Test2::WstringException& v)
    {
        istr->readAll(v.reason);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace Test1
{

using WstringClassPtr = ::std::shared_ptr<WstringClass>;
using WstringClassPrxPtr = ::std::shared_ptr<WstringClassPrx>;

}
/// \endcond

/// \cond INTERNAL
namespace Test2
{

using WstringClassPtr = ::std::shared_ptr<WstringClass>;
using WstringClassPrxPtr = ::std::shared_ptr<WstringClassPrx>;

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
