//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Wstring.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Wstring.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test1::WstringException> iceC_Test1_WstringException_init("::Test1::WstringException");

const ::std::string iceC_Test1_WstringClass_ids[2] =
{
    "::Ice::Object",
    "::Test1::WstringClass"
};
const ::std::string iceC_Test1_WstringClass_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opString",
    "opStruct",
    "throwExcept"
};
const ::std::string iceC_Test1_WstringClass_opString_name = "opString";
const ::std::string iceC_Test1_WstringClass_opStruct_name = "opStruct";
const ::std::string iceC_Test1_WstringClass_throwExcept_name = "throwExcept";

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test2::WstringException> iceC_Test2_WstringException_init("::Test2::WstringException");

const ::std::string iceC_Test2_WstringClass_ids[2] =
{
    "::Ice::Object",
    "::Test2::WstringClass"
};
const ::std::string iceC_Test2_WstringClass_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opString",
    "opStruct",
    "throwExcept"
};
const ::std::string iceC_Test2_WstringClass_opString_name = "opString";
const ::std::string iceC_Test2_WstringClass_opStruct_name = "opStruct";
const ::std::string iceC_Test2_WstringClass_throwExcept_name = "throwExcept";

}

::std::wstring
Test1::WstringClassPrx::opString(const ::std::wstring& iceP_s1, ::std::wstring& iceP_s2, const ::Ice::Context& context)
{
    auto _result = _makePromiseOutgoing<::std::tuple<::std::wstring, ::std::wstring>>(true, this, &WstringClassPrx::_iceI_opString, iceP_s1, context).get();
    iceP_s2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::std::wstring, ::std::wstring>>
Test1::WstringClassPrx::opStringAsync(const ::std::wstring& iceP_s1, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::tuple<::std::wstring, ::std::wstring>, ::std::promise>(false, this, &WstringClassPrx::_iceI_opString, iceP_s1, context);
}

::std::function<void()>
Test1::WstringClassPrx::opStringAsync(const ::std::wstring& iceP_s1,
                                      ::std::function<void (::std::wstring, ::std::wstring)> response,
                                      ::std::function<void(::std::exception_ptr)> ex,
                                      ::std::function<void(bool)> sent,
                                      const ::Ice::Context& context)
{
    auto _responseCb = [response](::std::tuple<::std::wstring, ::std::wstring>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<::std::wstring, ::std::wstring>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test1::WstringClassPrx::_iceI_opString, iceP_s1, context);
}

/// \cond INTERNAL
void
Test1::WstringClassPrx::_iceI_opString(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::std::wstring, ::std::wstring>>>& outAsync, const ::std::wstring& iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test1_WstringClass_opString_name);
    outAsync->invoke(iceC_Test1_WstringClass_opString_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::std::wstring, ::std::wstring> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::Test1::WstringStruct
Test1::WstringClassPrx::opStruct(const WstringStruct& iceP_s1, WstringStruct& iceP_s2, const ::Ice::Context& context)
{
    auto _result = _makePromiseOutgoing<::std::tuple<WstringStruct, WstringStruct>>(true, this, &WstringClassPrx::_iceI_opStruct, iceP_s1, context).get();
    iceP_s2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test1::WstringStruct, ::Test1::WstringStruct>>
Test1::WstringClassPrx::opStructAsync(const WstringStruct& iceP_s1, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::tuple<WstringStruct, WstringStruct>, ::std::promise>(false, this, &WstringClassPrx::_iceI_opStruct, iceP_s1, context);
}

::std::function<void()>
Test1::WstringClassPrx::opStructAsync(const WstringStruct& iceP_s1,
                                      ::std::function<void (::Test1::WstringStruct, ::Test1::WstringStruct)> response,
                                      ::std::function<void(::std::exception_ptr)> ex,
                                      ::std::function<void(bool)> sent,
                                      const ::Ice::Context& context)
{
    auto _responseCb = [response](::std::tuple<WstringStruct, WstringStruct>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<WstringStruct, WstringStruct>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test1::WstringClassPrx::_iceI_opStruct, iceP_s1, context);
}

/// \cond INTERNAL
void
Test1::WstringClassPrx::_iceI_opStruct(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<WstringStruct, WstringStruct>>>& outAsync, const WstringStruct& iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test1_WstringClass_opStruct_name);
    outAsync->invoke(iceC_Test1_WstringClass_opStruct_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<WstringStruct, WstringStruct> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

void
Test1::WstringClassPrx::throwExcept(const ::std::wstring& iceP_reason, const ::Ice::Context& context)
{
    _makePromiseOutgoing<void>(true, this, &WstringClassPrx::_iceI_throwExcept, iceP_reason, context).get();
}

::std::future<void>
Test1::WstringClassPrx::throwExceptAsync(const ::std::wstring& iceP_reason, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &WstringClassPrx::_iceI_throwExcept, iceP_reason, context);
}

::std::function<void()>
Test1::WstringClassPrx::throwExceptAsync(const ::std::wstring& iceP_reason,
                                         ::std::function<void ()> response,
                                         ::std::function<void(::std::exception_ptr)> ex,
                                         ::std::function<void(bool)> sent,
                                         const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test1::WstringClassPrx::_iceI_throwExcept, iceP_reason, context);
}

/// \cond INTERNAL
void
Test1::WstringClassPrx::_iceI_throwExcept(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::wstring& iceP_reason, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test1_WstringClass_throwExcept_name);
    outAsync->invoke(iceC_Test1_WstringClass_throwExcept_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_reason);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const WstringException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

const ::std::string&
Test1::WstringClassPrx::ice_staticId()
{
    return WstringClass::ice_staticId();
}

::std::wstring
Test2::WstringClassPrx::opString(const ::std::wstring& iceP_s1, ::std::wstring& iceP_s2, const ::Ice::Context& context)
{
    auto _result = _makePromiseOutgoing<::std::tuple<::std::wstring, ::std::wstring>>(true, this, &WstringClassPrx::_iceI_opString, iceP_s1, context).get();
    iceP_s2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::std::wstring, ::std::wstring>>
Test2::WstringClassPrx::opStringAsync(const ::std::wstring& iceP_s1, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::tuple<::std::wstring, ::std::wstring>, ::std::promise>(false, this, &WstringClassPrx::_iceI_opString, iceP_s1, context);
}

::std::function<void()>
Test2::WstringClassPrx::opStringAsync(const ::std::wstring& iceP_s1,
                                      ::std::function<void (::std::wstring, ::std::wstring)> response,
                                      ::std::function<void(::std::exception_ptr)> ex,
                                      ::std::function<void(bool)> sent,
                                      const ::Ice::Context& context)
{
    auto _responseCb = [response](::std::tuple<::std::wstring, ::std::wstring>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<::std::wstring, ::std::wstring>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test2::WstringClassPrx::_iceI_opString, iceP_s1, context);
}

/// \cond INTERNAL
void
Test2::WstringClassPrx::_iceI_opString(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::std::wstring, ::std::wstring>>>& outAsync, const ::std::wstring& iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test2_WstringClass_opString_name);
    outAsync->invoke(iceC_Test2_WstringClass_opString_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::std::wstring, ::std::wstring> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::Test2::WstringStruct
Test2::WstringClassPrx::opStruct(const WstringStruct& iceP_s1, WstringStruct& iceP_s2, const ::Ice::Context& context)
{
    auto _result = _makePromiseOutgoing<::std::tuple<WstringStruct, WstringStruct>>(true, this, &WstringClassPrx::_iceI_opStruct, iceP_s1, context).get();
    iceP_s2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test2::WstringStruct, ::Test2::WstringStruct>>
Test2::WstringClassPrx::opStructAsync(const WstringStruct& iceP_s1, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::tuple<WstringStruct, WstringStruct>, ::std::promise>(false, this, &WstringClassPrx::_iceI_opStruct, iceP_s1, context);
}

::std::function<void()>
Test2::WstringClassPrx::opStructAsync(const WstringStruct& iceP_s1,
                                      ::std::function<void (::Test2::WstringStruct, ::Test2::WstringStruct)> response,
                                      ::std::function<void(::std::exception_ptr)> ex,
                                      ::std::function<void(bool)> sent,
                                      const ::Ice::Context& context)
{
    auto _responseCb = [response](::std::tuple<WstringStruct, WstringStruct>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<WstringStruct, WstringStruct>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test2::WstringClassPrx::_iceI_opStruct, iceP_s1, context);
}

/// \cond INTERNAL
void
Test2::WstringClassPrx::_iceI_opStruct(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<WstringStruct, WstringStruct>>>& outAsync, const WstringStruct& iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test2_WstringClass_opStruct_name);
    outAsync->invoke(iceC_Test2_WstringClass_opStruct_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<WstringStruct, WstringStruct> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

void
Test2::WstringClassPrx::throwExcept(const ::std::wstring& iceP_reason, const ::Ice::Context& context)
{
    _makePromiseOutgoing<void>(true, this, &WstringClassPrx::_iceI_throwExcept, iceP_reason, context).get();
}

::std::future<void>
Test2::WstringClassPrx::throwExceptAsync(const ::std::wstring& iceP_reason, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &WstringClassPrx::_iceI_throwExcept, iceP_reason, context);
}

::std::function<void()>
Test2::WstringClassPrx::throwExceptAsync(const ::std::wstring& iceP_reason,
                                         ::std::function<void ()> response,
                                         ::std::function<void(::std::exception_ptr)> ex,
                                         ::std::function<void(bool)> sent,
                                         const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test2::WstringClassPrx::_iceI_throwExcept, iceP_reason, context);
}

/// \cond INTERNAL
void
Test2::WstringClassPrx::_iceI_throwExcept(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::wstring& iceP_reason, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test2_WstringClass_throwExcept_name);
    outAsync->invoke(iceC_Test2_WstringClass_throwExcept_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_reason);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const WstringException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

const ::std::string&
Test2::WstringClassPrx::ice_staticId()
{
    return WstringClass::ice_staticId();
}

Test1::WstringException::~WstringException()
{
}

const ::std::string&
Test1::WstringException::ice_staticId()
{
    static const ::std::string typeId = "::Test1::WstringException";
    return typeId;
}

Test2::WstringException::~WstringException()
{
}

const ::std::string&
Test2::WstringException::ice_staticId()
{
    static const ::std::string typeId = "::Test2::WstringException";
    return typeId;
}

bool
Test1::WstringClass::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test1_WstringClass_ids, iceC_Test1_WstringClass_ids + 2, s);
}

::std::vector<::std::string>
Test1::WstringClass::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test1_WstringClass_ids[0], &iceC_Test1_WstringClass_ids[2]);
}

::std::string
Test1::WstringClass::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test1::WstringClass::ice_staticId()
{
    static const ::std::string typeId = "::Test1::WstringClass";
    return typeId;
}

/// \cond INTERNAL
bool
Test1::WstringClass::_iceD_opString(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::wstring iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    ::std::wstring iceP_s2;
    ::std::wstring ret = this->opString(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test1::WstringClass::_iceD_opStruct(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    WstringStruct iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    WstringStruct iceP_s2;
    WstringStruct ret = this->opStruct(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test1::WstringClass::_iceD_throwExcept(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::wstring iceP_reason;
    istr->readAll(iceP_reason);
    inS.endReadParams();
    this->throwExcept(::std::move(iceP_reason), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test1::WstringClass::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test1_WstringClass_ops, iceC_Test1_WstringClass_ops + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test1_WstringClass_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opString(in, current);
        }
        case 5:
        {
            return _iceD_opStruct(in, current);
        }
        case 6:
        {
            return _iceD_throwExcept(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test2::WstringClass::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test2_WstringClass_ids, iceC_Test2_WstringClass_ids + 2, s);
}

::std::vector<::std::string>
Test2::WstringClass::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test2_WstringClass_ids[0], &iceC_Test2_WstringClass_ids[2]);
}

::std::string
Test2::WstringClass::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test2::WstringClass::ice_staticId()
{
    static const ::std::string typeId = "::Test2::WstringClass";
    return typeId;
}

/// \cond INTERNAL
bool
Test2::WstringClass::_iceD_opString(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::wstring iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    ::std::wstring iceP_s2;
    ::std::wstring ret = this->opString(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test2::WstringClass::_iceD_opStruct(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    WstringStruct iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    WstringStruct iceP_s2;
    WstringStruct ret = this->opStruct(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test2::WstringClass::_iceD_throwExcept(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::wstring iceP_reason;
    istr->readAll(iceP_reason);
    inS.endReadParams();
    this->throwExcept(::std::move(iceP_reason), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test2::WstringClass::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test2_WstringClass_ops, iceC_Test2_WstringClass_ops + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test2_WstringClass_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opString(in, current);
        }
        case 5:
        {
            return _iceD_opStruct(in, current);
        }
        case 6:
        {
            return _iceD_throwExcept(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

namespace Ice
{
}

namespace Ice
{
}
