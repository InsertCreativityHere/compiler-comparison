//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Wstring.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Wstring_h__
#define __Wstring_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace Test1
{

class WstringClass;
class WstringClassPrx;

}

namespace Test2
{

class WstringClass;
class WstringClassPrx;

}

namespace Test1
{

using WstringSeq = ::std::vector<::std::wstring>;

using WstringWStringDict = ::std::map<::std::wstring, ::std::wstring>;

struct WstringStruct
{
    ::std::wstring s;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::wstring&> ice_tuple() const
    {
        return std::tie(s);
    }
};

class WstringException : public ::Ice::UserExceptionHelper<WstringException, ::Ice::UserException>
{
public:

    virtual ~WstringException();

    WstringException(const WstringException&) = default;

    WstringException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    WstringException(const ::std::wstring& reason) :
        reason(reason)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::wstring&> ice_tuple() const
    {
        return std::tie(reason);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::wstring reason;
};

/// \cond INTERNAL
static WstringException _iceS_WstringException_init;
/// \endcond

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace Test2
{

using WstringSeq = ::std::vector<::std::wstring>;

using WstringWStringDict = ::std::map<::std::wstring, ::std::wstring>;

struct WstringStruct
{
    ::std::wstring s;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::wstring&> ice_tuple() const
    {
        return std::tie(s);
    }
};

class WstringException : public ::Ice::UserExceptionHelper<WstringException, ::Ice::UserException>
{
public:

    virtual ~WstringException();

    WstringException(const WstringException&) = default;

    WstringException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    WstringException(const ::std::wstring& reason) :
        reason(reason)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::wstring&> ice_tuple() const
    {
        return std::tie(reason);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::wstring reason;
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace Test1
{

class WstringClass : public virtual ::Ice::Object
{
public:

    using ProxyType = WstringClassPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Encapsulates the results of a call to opString.
     */
    struct OpStringResult
    {
        ::std::wstring returnValue;
        ::std::wstring s2;
    };

    virtual ::std::wstring opString(::std::wstring s1, ::std::wstring& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opString(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opStruct.
     */
    struct OpStructResult
    {
        WstringStruct returnValue;
        WstringStruct s2;
    };

    virtual WstringStruct opStruct(WstringStruct s1, WstringStruct& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opStruct(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void throwExcept(::std::wstring reason, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_throwExcept(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace Test2
{

class WstringClass : public virtual ::Ice::Object
{
public:

    using ProxyType = WstringClassPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Encapsulates the results of a call to opString.
     */
    struct OpStringResult
    {
        ::std::wstring returnValue;
        ::std::wstring s2;
    };

    virtual ::std::wstring opString(::std::wstring s1, ::std::wstring& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opString(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opStruct.
     */
    struct OpStructResult
    {
        WstringStruct returnValue;
        WstringStruct s2;
    };

    virtual WstringStruct opStruct(WstringStruct s1, WstringStruct& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opStruct(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void throwExcept(::std::wstring reason, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_throwExcept(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace Test1
{

class WstringClassPrx : public virtual ::Ice::Proxy<WstringClassPrx, ::Ice::ObjectPrx>
{
public:

    ::std::wstring opString(const ::std::wstring& s1, ::std::wstring& s2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<WstringClass::OpStringResult>(true, this, &WstringClassPrx::_iceI_opString, s1, context).get();
        s2 = ::std::move(_result.s2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opStringAsync(const ::std::wstring& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<WstringClass::OpStringResult>>().get_future())
    {
        return _makePromiseOutgoing<WstringClass::OpStringResult, P>(false, this, &WstringClassPrx::_iceI_opString, s1, context);
    }

    ::std::function<void()>
    opStringAsync(const ::std::wstring& s1,
                  ::std::function<void(::std::wstring, ::std::wstring)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](WstringClass::OpStringResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.s2));
        };
        return _makeLambdaOutgoing<WstringClass::OpStringResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test1::WstringClassPrx::_iceI_opString, s1, context);
    }

    /// \cond INTERNAL
    void _iceI_opString(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<WstringClass::OpStringResult>>&, const ::std::wstring&, const ::Ice::Context&);
    /// \endcond

    WstringStruct opStruct(const WstringStruct& s1, WstringStruct& s2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<WstringClass::OpStructResult>(true, this, &WstringClassPrx::_iceI_opStruct, s1, context).get();
        s2 = ::std::move(_result.s2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opStructAsync(const WstringStruct& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<WstringClass::OpStructResult>>().get_future())
    {
        return _makePromiseOutgoing<WstringClass::OpStructResult, P>(false, this, &WstringClassPrx::_iceI_opStruct, s1, context);
    }

    ::std::function<void()>
    opStructAsync(const WstringStruct& s1,
                  ::std::function<void(::Test1::WstringStruct, ::Test1::WstringStruct)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](WstringClass::OpStructResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.s2));
        };
        return _makeLambdaOutgoing<WstringClass::OpStructResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test1::WstringClassPrx::_iceI_opStruct, s1, context);
    }

    /// \cond INTERNAL
    void _iceI_opStruct(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<WstringClass::OpStructResult>>&, const WstringStruct&, const ::Ice::Context&);
    /// \endcond

    void throwExcept(const ::std::wstring& reason, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &WstringClassPrx::_iceI_throwExcept, reason, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto throwExceptAsync(const ::std::wstring& reason, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &WstringClassPrx::_iceI_throwExcept, reason, context);
    }

    ::std::function<void()>
    throwExceptAsync(const ::std::wstring& reason,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test1::WstringClassPrx::_iceI_throwExcept, reason, context);
    }

    /// \cond INTERNAL
    void _iceI_throwExcept(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::wstring&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    WstringClassPrx() = default;
    friend ::std::shared_ptr<WstringClassPrx> IceInternal::createProxy<WstringClassPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

namespace Test2
{

class WstringClassPrx : public virtual ::Ice::Proxy<WstringClassPrx, ::Ice::ObjectPrx>
{
public:

    ::std::wstring opString(const ::std::wstring& s1, ::std::wstring& s2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<WstringClass::OpStringResult>(true, this, &WstringClassPrx::_iceI_opString, s1, context).get();
        s2 = ::std::move(_result.s2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opStringAsync(const ::std::wstring& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<WstringClass::OpStringResult>>().get_future())
    {
        return _makePromiseOutgoing<WstringClass::OpStringResult, P>(false, this, &WstringClassPrx::_iceI_opString, s1, context);
    }

    ::std::function<void()>
    opStringAsync(const ::std::wstring& s1,
                  ::std::function<void(::std::wstring, ::std::wstring)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](WstringClass::OpStringResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.s2));
        };
        return _makeLambdaOutgoing<WstringClass::OpStringResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test2::WstringClassPrx::_iceI_opString, s1, context);
    }

    /// \cond INTERNAL
    void _iceI_opString(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<WstringClass::OpStringResult>>&, const ::std::wstring&, const ::Ice::Context&);
    /// \endcond

    WstringStruct opStruct(const WstringStruct& s1, WstringStruct& s2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<WstringClass::OpStructResult>(true, this, &WstringClassPrx::_iceI_opStruct, s1, context).get();
        s2 = ::std::move(_result.s2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opStructAsync(const WstringStruct& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<WstringClass::OpStructResult>>().get_future())
    {
        return _makePromiseOutgoing<WstringClass::OpStructResult, P>(false, this, &WstringClassPrx::_iceI_opStruct, s1, context);
    }

    ::std::function<void()>
    opStructAsync(const WstringStruct& s1,
                  ::std::function<void(::Test2::WstringStruct, ::Test2::WstringStruct)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](WstringClass::OpStructResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.s2));
        };
        return _makeLambdaOutgoing<WstringClass::OpStructResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test2::WstringClassPrx::_iceI_opStruct, s1, context);
    }

    /// \cond INTERNAL
    void _iceI_opStruct(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<WstringClass::OpStructResult>>&, const WstringStruct&, const ::Ice::Context&);
    /// \endcond

    void throwExcept(const ::std::wstring& reason, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &WstringClassPrx::_iceI_throwExcept, reason, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto throwExceptAsync(const ::std::wstring& reason, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &WstringClassPrx::_iceI_throwExcept, reason, context);
    }

    ::std::function<void()>
    throwExceptAsync(const ::std::wstring& reason,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test2::WstringClassPrx::_iceI_throwExcept, reason, context);
    }

    /// \cond INTERNAL
    void _iceI_throwExcept(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::wstring&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    WstringClassPrx() = default;
    friend ::std::shared_ptr<WstringClassPrx> IceInternal::createProxy<WstringClassPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::Test1::WstringStruct>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Test1::WstringStruct, S>
{
    static void read(S* istr, ::Test1::WstringStruct& v)
    {
        istr->readAll(v.s);
    }
};

template<typename S>
struct StreamReader<::Test1::WstringException, S>
{
    static void read(S* istr, ::Test1::WstringException& v)
    {
        istr->readAll(v.reason);
    }
};

}
/// \endcond

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::Test2::WstringStruct>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Test2::WstringStruct, S>
{
    static void read(S* istr, ::Test2::WstringStruct& v)
    {
        istr->readAll(v.s);
    }
};

template<typename S>
struct StreamReader<::Test2::WstringException, S>
{
    static void read(S* istr, ::Test2::WstringException& v)
    {
        istr->readAll(v.reason);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace Test1
{

using WstringClassPtr = ::std::shared_ptr<WstringClass>;
using WstringClassPrxPtr = ::std::shared_ptr<WstringClassPrx>;

}
/// \endcond

/// \cond INTERNAL
namespace Test2
{

using WstringClassPtr = ::std::shared_ptr<WstringClass>;
using WstringClassPrxPtr = ::std::shared_ptr<WstringClassPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace Test1
{

class WstringClass;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< WstringClass>&);
::IceProxy::Ice::Object* upCast(WstringClass*);
/// \endcond

}

namespace Test2
{

class WstringClass;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< WstringClass>&);
::IceProxy::Ice::Object* upCast(WstringClass*);
/// \endcond

}

}

namespace Test1
{

class WstringClass;
/// \cond INTERNAL
::Ice::Object* upCast(WstringClass*);
/// \endcond
typedef ::IceInternal::Handle< WstringClass> WstringClassPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test1::WstringClass> WstringClassPrx;
typedef WstringClassPrx WstringClassPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(WstringClassPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace Test2
{

class WstringClass;
/// \cond INTERNAL
::Ice::Object* upCast(WstringClass*);
/// \endcond
typedef ::IceInternal::Handle< WstringClass> WstringClassPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test2::WstringClass> WstringClassPrx;
typedef WstringClassPrx WstringClassPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(WstringClassPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace Test1
{

typedef ::std::vector< ::std::wstring> WstringSeq;

typedef ::std::map< ::std::wstring, ::std::wstring> WstringWStringDict;

struct WstringStruct
{
    ::std::wstring s;

    bool operator==(const WstringStruct& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(s != rhs_.s)
        {
            return false;
        }
        return true;
    }

    bool operator<(const WstringStruct& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(s < rhs_.s)
        {
            return true;
        }
        else if(rhs_.s < s)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const WstringStruct& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const WstringStruct& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const WstringStruct& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const WstringStruct& rhs_) const
    {
        return !operator<(rhs_);
    }
};

class WstringException : public ::Ice::UserException
{
public:

    WstringException() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    explicit WstringException(const ::std::wstring& reason);
    WstringException(const WstringException&) = default;
    virtual ~WstringException();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual WstringException* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::std::wstring reason;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
static WstringException _iceS_WstringException_init;
/// \endcond

}

namespace Test2
{

typedef ::std::vector< ::std::wstring> WstringSeq;

typedef ::std::map< ::std::wstring, ::std::wstring> WstringWStringDict;

struct WstringStruct
{
    ::std::wstring s;

    bool operator==(const WstringStruct& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(s != rhs_.s)
        {
            return false;
        }
        return true;
    }

    bool operator<(const WstringStruct& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(s < rhs_.s)
        {
            return true;
        }
        else if(rhs_.s < s)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const WstringStruct& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const WstringStruct& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const WstringStruct& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const WstringStruct& rhs_) const
    {
        return !operator<(rhs_);
    }
};

class WstringException : public ::Ice::UserException
{
public:

    WstringException() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    explicit WstringException(const ::std::wstring& reason);
    WstringException(const WstringException&) = default;
    virtual ~WstringException();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual WstringException* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::std::wstring reason;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

}

namespace Test1
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test1::WstringClass::begin_opString.
 * Create a wrapper instance by calling ::Test1::newCallback_WstringClass_opString.
 */
class Callback_WstringClass_opString_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WstringClass_opString_Base> Callback_WstringClass_opStringPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test1::WstringClass::begin_opStruct.
 * Create a wrapper instance by calling ::Test1::newCallback_WstringClass_opStruct.
 */
class Callback_WstringClass_opStruct_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WstringClass_opStruct_Base> Callback_WstringClass_opStructPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test1::WstringClass::begin_throwExcept.
 * Create a wrapper instance by calling ::Test1::newCallback_WstringClass_throwExcept.
 */
class Callback_WstringClass_throwExcept_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WstringClass_throwExcept_Base> Callback_WstringClass_throwExceptPtr;

}

namespace Test2
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test2::WstringClass::begin_opString.
 * Create a wrapper instance by calling ::Test2::newCallback_WstringClass_opString.
 */
class Callback_WstringClass_opString_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WstringClass_opString_Base> Callback_WstringClass_opStringPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test2::WstringClass::begin_opStruct.
 * Create a wrapper instance by calling ::Test2::newCallback_WstringClass_opStruct.
 */
class Callback_WstringClass_opStruct_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WstringClass_opStruct_Base> Callback_WstringClass_opStructPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test2::WstringClass::begin_throwExcept.
 * Create a wrapper instance by calling ::Test2::newCallback_WstringClass_throwExcept.
 */
class Callback_WstringClass_throwExcept_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WstringClass_throwExcept_Base> Callback_WstringClass_throwExceptPtr;

}

namespace IceProxy
{

namespace Test1
{

class WstringClass : public virtual ::Ice::Proxy<WstringClass, ::IceProxy::Ice::Object>
{
public:

    ::std::wstring opString(const ::std::wstring& s1, ::std::wstring& s2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opString(s2, _iceI_begin_opString(s1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opString(const ::std::wstring& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opString(s1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opString(const ::std::wstring& s1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opString(s1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opString(const ::std::wstring& s1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opString(s1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opString(const ::std::wstring& s1, const ::Test1::Callback_WstringClass_opStringPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opString(s1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opString(const ::std::wstring& s1, const ::Ice::Context& context, const ::Test1::Callback_WstringClass_opStringPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opString(s1, context, cb, cookie);
    }

    ::std::wstring end_opString(::std::wstring& s2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opString(::std::wstring& iceP_s2, ::std::wstring& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opString(const ::std::wstring&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test1::WstringStruct opStruct(const ::Test1::WstringStruct& s1, ::Test1::WstringStruct& s2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opStruct(s2, _iceI_begin_opStruct(s1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opStruct(const ::Test1::WstringStruct& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opStruct(s1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opStruct(const ::Test1::WstringStruct& s1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opStruct(s1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opStruct(const ::Test1::WstringStruct& s1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opStruct(s1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opStruct(const ::Test1::WstringStruct& s1, const ::Test1::Callback_WstringClass_opStructPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opStruct(s1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opStruct(const ::Test1::WstringStruct& s1, const ::Ice::Context& context, const ::Test1::Callback_WstringClass_opStructPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opStruct(s1, context, cb, cookie);
    }

    ::Test1::WstringStruct end_opStruct(::Test1::WstringStruct& s2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opStruct(::Test1::WstringStruct& iceP_s2, ::Test1::WstringStruct& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opStruct(const ::Test1::WstringStruct&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void throwExcept(const ::std::wstring& reason, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_throwExcept(_iceI_begin_throwExcept(reason, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_throwExcept(const ::std::wstring& reason, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_throwExcept(reason, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwExcept(const ::std::wstring& reason, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_throwExcept(reason, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_throwExcept(const ::std::wstring& reason, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_throwExcept(reason, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_throwExcept(const ::std::wstring& reason, const ::Test1::Callback_WstringClass_throwExceptPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_throwExcept(reason, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_throwExcept(const ::std::wstring& reason, const ::Ice::Context& context, const ::Test1::Callback_WstringClass_throwExceptPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_throwExcept(reason, context, cb, cookie);
    }

    void end_throwExcept(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_throwExcept(const ::std::wstring&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

namespace Test2
{

class WstringClass : public virtual ::Ice::Proxy<WstringClass, ::IceProxy::Ice::Object>
{
public:

    ::std::wstring opString(const ::std::wstring& s1, ::std::wstring& s2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opString(s2, _iceI_begin_opString(s1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opString(const ::std::wstring& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opString(s1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opString(const ::std::wstring& s1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opString(s1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opString(const ::std::wstring& s1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opString(s1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opString(const ::std::wstring& s1, const ::Test2::Callback_WstringClass_opStringPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opString(s1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opString(const ::std::wstring& s1, const ::Ice::Context& context, const ::Test2::Callback_WstringClass_opStringPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opString(s1, context, cb, cookie);
    }

    ::std::wstring end_opString(::std::wstring& s2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opString(::std::wstring& iceP_s2, ::std::wstring& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opString(const ::std::wstring&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test2::WstringStruct opStruct(const ::Test2::WstringStruct& s1, ::Test2::WstringStruct& s2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opStruct(s2, _iceI_begin_opStruct(s1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opStruct(const ::Test2::WstringStruct& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opStruct(s1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opStruct(const ::Test2::WstringStruct& s1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opStruct(s1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opStruct(const ::Test2::WstringStruct& s1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opStruct(s1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opStruct(const ::Test2::WstringStruct& s1, const ::Test2::Callback_WstringClass_opStructPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opStruct(s1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opStruct(const ::Test2::WstringStruct& s1, const ::Ice::Context& context, const ::Test2::Callback_WstringClass_opStructPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opStruct(s1, context, cb, cookie);
    }

    ::Test2::WstringStruct end_opStruct(::Test2::WstringStruct& s2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opStruct(::Test2::WstringStruct& iceP_s2, ::Test2::WstringStruct& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opStruct(const ::Test2::WstringStruct&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void throwExcept(const ::std::wstring& reason, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_throwExcept(_iceI_begin_throwExcept(reason, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_throwExcept(const ::std::wstring& reason, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_throwExcept(reason, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwExcept(const ::std::wstring& reason, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_throwExcept(reason, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_throwExcept(const ::std::wstring& reason, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_throwExcept(reason, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_throwExcept(const ::std::wstring& reason, const ::Test2::Callback_WstringClass_throwExceptPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_throwExcept(reason, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_throwExcept(const ::std::wstring& reason, const ::Ice::Context& context, const ::Test2::Callback_WstringClass_throwExceptPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_throwExcept(reason, context, cb, cookie);
    }

    void end_throwExcept(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_throwExcept(const ::std::wstring&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace Test1
{

class WstringClass : public virtual ::Ice::Object
{
public:

    typedef WstringClassPrx ProxyType;
    typedef WstringClassPtr PointerType;

    virtual ~WstringClass();
    WstringClass() = default;
    WstringClass(const WstringClass&) = default;
    WstringClass& operator=(const WstringClass&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::wstring opString(const ::std::wstring& s1, ::std::wstring& s2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opString(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual WstringStruct opStruct(const WstringStruct& s1, WstringStruct& s2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opStruct(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void throwExcept(const ::std::wstring& reason, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_throwExcept(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const WstringClass& lhs, const WstringClass& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const WstringClass& lhs, const WstringClass& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

namespace Test2
{

class WstringClass : public virtual ::Ice::Object
{
public:

    typedef WstringClassPrx ProxyType;
    typedef WstringClassPtr PointerType;

    virtual ~WstringClass();
    WstringClass() = default;
    WstringClass(const WstringClass&) = default;
    WstringClass& operator=(const WstringClass&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::wstring opString(const ::std::wstring& s1, ::std::wstring& s2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opString(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual WstringStruct opStruct(const WstringStruct& s1, WstringStruct& s2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opStruct(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void throwExcept(const ::std::wstring& reason, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_throwExcept(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const WstringClass& lhs, const WstringClass& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const WstringClass& lhs, const WstringClass& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::Test1::WstringStruct>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::Test1::WstringStruct, S>
{
    static void write(S* ostr, const ::Test1::WstringStruct& v)
    {
        ostr->write(v.s);
    }
};

template<typename S>
struct StreamReader< ::Test1::WstringStruct, S>
{
    static void read(S* istr, ::Test1::WstringStruct& v)
    {
        istr->read(v.s);
    }
};

template<>
struct StreamableTraits< ::Test1::WstringException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::Test1::WstringException, S>
{
    static void write(S* ostr, const ::Test1::WstringException& v)
    {
        ostr->write(v.reason);
    }
};

template<typename S>
struct StreamReader< ::Test1::WstringException, S>
{
    static void read(S* istr, ::Test1::WstringException& v)
    {
        istr->read(v.reason);
    }
};

}
/// \endcond

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::Test2::WstringStruct>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::Test2::WstringStruct, S>
{
    static void write(S* ostr, const ::Test2::WstringStruct& v)
    {
        ostr->write(v.s);
    }
};

template<typename S>
struct StreamReader< ::Test2::WstringStruct, S>
{
    static void read(S* istr, ::Test2::WstringStruct& v)
    {
        istr->read(v.s);
    }
};

template<>
struct StreamableTraits< ::Test2::WstringException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::Test2::WstringException, S>
{
    static void write(S* ostr, const ::Test2::WstringException& v)
    {
        ostr->write(v.reason);
    }
};

template<typename S>
struct StreamReader< ::Test2::WstringException, S>
{
    static void read(S* istr, ::Test2::WstringException& v)
    {
        istr->read(v.reason);
    }
};

}
/// \endcond

namespace Test1
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test1::WstringClass::begin_opString.
 * Create a wrapper instance by calling ::Test1::newCallback_WstringClass_opString.
 */
template<class T>
class CallbackNC_WstringClass_opString : public Callback_WstringClass_opString_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::wstring&, const ::std::wstring&);

    CallbackNC_WstringClass_opString(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        WstringClassPrx proxy = WstringClassPrx::uncheckedCast(result->getProxy());
        ::std::wstring iceP_s2;
        ::std::wstring ret;
        try
        {
            ret = proxy->end_opString(iceP_s2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_s2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test1::WstringClass::begin_opString.
 */
template<class T> Callback_WstringClass_opStringPtr
newCallback_WstringClass_opString(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::wstring&, const ::std::wstring&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WstringClass_opString<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test1::WstringClass::begin_opString.
 */
template<class T> Callback_WstringClass_opStringPtr
newCallback_WstringClass_opString(T* instance, void (T::*cb)(const ::std::wstring&, const ::std::wstring&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WstringClass_opString<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test1::WstringClass::begin_opString.
 * Create a wrapper instance by calling ::Test1::newCallback_WstringClass_opString.
 */
template<class T, typename CT>
class Callback_WstringClass_opString : public Callback_WstringClass_opString_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::wstring&, const ::std::wstring&, const CT&);

    Callback_WstringClass_opString(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        WstringClassPrx proxy = WstringClassPrx::uncheckedCast(result->getProxy());
        ::std::wstring iceP_s2;
        ::std::wstring ret;
        try
        {
            ret = proxy->end_opString(iceP_s2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_s2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test1::WstringClass::begin_opString.
 */
template<class T, typename CT> Callback_WstringClass_opStringPtr
newCallback_WstringClass_opString(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::wstring&, const ::std::wstring&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WstringClass_opString<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test1::WstringClass::begin_opString.
 */
template<class T, typename CT> Callback_WstringClass_opStringPtr
newCallback_WstringClass_opString(T* instance, void (T::*cb)(const ::std::wstring&, const ::std::wstring&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WstringClass_opString<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test1::WstringClass::begin_opStruct.
 * Create a wrapper instance by calling ::Test1::newCallback_WstringClass_opStruct.
 */
template<class T>
class CallbackNC_WstringClass_opStruct : public Callback_WstringClass_opStruct_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const WstringStruct&, const WstringStruct&);

    CallbackNC_WstringClass_opStruct(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        WstringClassPrx proxy = WstringClassPrx::uncheckedCast(result->getProxy());
        WstringStruct iceP_s2;
        WstringStruct ret;
        try
        {
            ret = proxy->end_opStruct(iceP_s2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_s2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test1::WstringClass::begin_opStruct.
 */
template<class T> Callback_WstringClass_opStructPtr
newCallback_WstringClass_opStruct(const IceUtil::Handle<T>& instance, void (T::*cb)(const WstringStruct&, const WstringStruct&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WstringClass_opStruct<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test1::WstringClass::begin_opStruct.
 */
template<class T> Callback_WstringClass_opStructPtr
newCallback_WstringClass_opStruct(T* instance, void (T::*cb)(const WstringStruct&, const WstringStruct&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WstringClass_opStruct<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test1::WstringClass::begin_opStruct.
 * Create a wrapper instance by calling ::Test1::newCallback_WstringClass_opStruct.
 */
template<class T, typename CT>
class Callback_WstringClass_opStruct : public Callback_WstringClass_opStruct_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const WstringStruct&, const WstringStruct&, const CT&);

    Callback_WstringClass_opStruct(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        WstringClassPrx proxy = WstringClassPrx::uncheckedCast(result->getProxy());
        WstringStruct iceP_s2;
        WstringStruct ret;
        try
        {
            ret = proxy->end_opStruct(iceP_s2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_s2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test1::WstringClass::begin_opStruct.
 */
template<class T, typename CT> Callback_WstringClass_opStructPtr
newCallback_WstringClass_opStruct(const IceUtil::Handle<T>& instance, void (T::*cb)(const WstringStruct&, const WstringStruct&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WstringClass_opStruct<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test1::WstringClass::begin_opStruct.
 */
template<class T, typename CT> Callback_WstringClass_opStructPtr
newCallback_WstringClass_opStruct(T* instance, void (T::*cb)(const WstringStruct&, const WstringStruct&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WstringClass_opStruct<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test1::WstringClass::begin_throwExcept.
 * Create a wrapper instance by calling ::Test1::newCallback_WstringClass_throwExcept.
 */
template<class T>
class CallbackNC_WstringClass_throwExcept : public Callback_WstringClass_throwExcept_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_WstringClass_throwExcept(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        WstringClassPrx proxy = WstringClassPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_throwExcept(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test1::WstringClass::begin_throwExcept.
 */
template<class T> Callback_WstringClass_throwExceptPtr
newCallback_WstringClass_throwExcept(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WstringClass_throwExcept<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test1::WstringClass::begin_throwExcept.
 */
template<class T> Callback_WstringClass_throwExceptPtr
newCallback_WstringClass_throwExcept(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WstringClass_throwExcept<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test1::WstringClass::begin_throwExcept.
 */
template<class T> Callback_WstringClass_throwExceptPtr
newCallback_WstringClass_throwExcept(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WstringClass_throwExcept<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test1::WstringClass::begin_throwExcept.
 */
template<class T> Callback_WstringClass_throwExceptPtr
newCallback_WstringClass_throwExcept(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WstringClass_throwExcept<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test1::WstringClass::begin_throwExcept.
 * Create a wrapper instance by calling ::Test1::newCallback_WstringClass_throwExcept.
 */
template<class T, typename CT>
class Callback_WstringClass_throwExcept : public Callback_WstringClass_throwExcept_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_WstringClass_throwExcept(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        WstringClassPrx proxy = WstringClassPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_throwExcept(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test1::WstringClass::begin_throwExcept.
 */
template<class T, typename CT> Callback_WstringClass_throwExceptPtr
newCallback_WstringClass_throwExcept(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WstringClass_throwExcept<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test1::WstringClass::begin_throwExcept.
 */
template<class T, typename CT> Callback_WstringClass_throwExceptPtr
newCallback_WstringClass_throwExcept(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WstringClass_throwExcept<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test1::WstringClass::begin_throwExcept.
 */
template<class T, typename CT> Callback_WstringClass_throwExceptPtr
newCallback_WstringClass_throwExcept(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WstringClass_throwExcept<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test1::WstringClass::begin_throwExcept.
 */
template<class T, typename CT> Callback_WstringClass_throwExceptPtr
newCallback_WstringClass_throwExcept(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WstringClass_throwExcept<T, CT>(instance, 0, excb, sentcb);
}

}

namespace Test2
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test2::WstringClass::begin_opString.
 * Create a wrapper instance by calling ::Test2::newCallback_WstringClass_opString.
 */
template<class T>
class CallbackNC_WstringClass_opString : public Callback_WstringClass_opString_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::wstring&, const ::std::wstring&);

    CallbackNC_WstringClass_opString(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        WstringClassPrx proxy = WstringClassPrx::uncheckedCast(result->getProxy());
        ::std::wstring iceP_s2;
        ::std::wstring ret;
        try
        {
            ret = proxy->end_opString(iceP_s2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_s2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test2::WstringClass::begin_opString.
 */
template<class T> Callback_WstringClass_opStringPtr
newCallback_WstringClass_opString(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::wstring&, const ::std::wstring&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WstringClass_opString<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test2::WstringClass::begin_opString.
 */
template<class T> Callback_WstringClass_opStringPtr
newCallback_WstringClass_opString(T* instance, void (T::*cb)(const ::std::wstring&, const ::std::wstring&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WstringClass_opString<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test2::WstringClass::begin_opString.
 * Create a wrapper instance by calling ::Test2::newCallback_WstringClass_opString.
 */
template<class T, typename CT>
class Callback_WstringClass_opString : public Callback_WstringClass_opString_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::wstring&, const ::std::wstring&, const CT&);

    Callback_WstringClass_opString(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        WstringClassPrx proxy = WstringClassPrx::uncheckedCast(result->getProxy());
        ::std::wstring iceP_s2;
        ::std::wstring ret;
        try
        {
            ret = proxy->end_opString(iceP_s2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_s2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test2::WstringClass::begin_opString.
 */
template<class T, typename CT> Callback_WstringClass_opStringPtr
newCallback_WstringClass_opString(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::wstring&, const ::std::wstring&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WstringClass_opString<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test2::WstringClass::begin_opString.
 */
template<class T, typename CT> Callback_WstringClass_opStringPtr
newCallback_WstringClass_opString(T* instance, void (T::*cb)(const ::std::wstring&, const ::std::wstring&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WstringClass_opString<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test2::WstringClass::begin_opStruct.
 * Create a wrapper instance by calling ::Test2::newCallback_WstringClass_opStruct.
 */
template<class T>
class CallbackNC_WstringClass_opStruct : public Callback_WstringClass_opStruct_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const WstringStruct&, const WstringStruct&);

    CallbackNC_WstringClass_opStruct(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        WstringClassPrx proxy = WstringClassPrx::uncheckedCast(result->getProxy());
        WstringStruct iceP_s2;
        WstringStruct ret;
        try
        {
            ret = proxy->end_opStruct(iceP_s2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_s2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test2::WstringClass::begin_opStruct.
 */
template<class T> Callback_WstringClass_opStructPtr
newCallback_WstringClass_opStruct(const IceUtil::Handle<T>& instance, void (T::*cb)(const WstringStruct&, const WstringStruct&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WstringClass_opStruct<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test2::WstringClass::begin_opStruct.
 */
template<class T> Callback_WstringClass_opStructPtr
newCallback_WstringClass_opStruct(T* instance, void (T::*cb)(const WstringStruct&, const WstringStruct&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WstringClass_opStruct<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test2::WstringClass::begin_opStruct.
 * Create a wrapper instance by calling ::Test2::newCallback_WstringClass_opStruct.
 */
template<class T, typename CT>
class Callback_WstringClass_opStruct : public Callback_WstringClass_opStruct_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const WstringStruct&, const WstringStruct&, const CT&);

    Callback_WstringClass_opStruct(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        WstringClassPrx proxy = WstringClassPrx::uncheckedCast(result->getProxy());
        WstringStruct iceP_s2;
        WstringStruct ret;
        try
        {
            ret = proxy->end_opStruct(iceP_s2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_s2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test2::WstringClass::begin_opStruct.
 */
template<class T, typename CT> Callback_WstringClass_opStructPtr
newCallback_WstringClass_opStruct(const IceUtil::Handle<T>& instance, void (T::*cb)(const WstringStruct&, const WstringStruct&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WstringClass_opStruct<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test2::WstringClass::begin_opStruct.
 */
template<class T, typename CT> Callback_WstringClass_opStructPtr
newCallback_WstringClass_opStruct(T* instance, void (T::*cb)(const WstringStruct&, const WstringStruct&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WstringClass_opStruct<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test2::WstringClass::begin_throwExcept.
 * Create a wrapper instance by calling ::Test2::newCallback_WstringClass_throwExcept.
 */
template<class T>
class CallbackNC_WstringClass_throwExcept : public Callback_WstringClass_throwExcept_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_WstringClass_throwExcept(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        WstringClassPrx proxy = WstringClassPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_throwExcept(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test2::WstringClass::begin_throwExcept.
 */
template<class T> Callback_WstringClass_throwExceptPtr
newCallback_WstringClass_throwExcept(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WstringClass_throwExcept<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test2::WstringClass::begin_throwExcept.
 */
template<class T> Callback_WstringClass_throwExceptPtr
newCallback_WstringClass_throwExcept(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WstringClass_throwExcept<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test2::WstringClass::begin_throwExcept.
 */
template<class T> Callback_WstringClass_throwExceptPtr
newCallback_WstringClass_throwExcept(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WstringClass_throwExcept<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test2::WstringClass::begin_throwExcept.
 */
template<class T> Callback_WstringClass_throwExceptPtr
newCallback_WstringClass_throwExcept(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WstringClass_throwExcept<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test2::WstringClass::begin_throwExcept.
 * Create a wrapper instance by calling ::Test2::newCallback_WstringClass_throwExcept.
 */
template<class T, typename CT>
class Callback_WstringClass_throwExcept : public Callback_WstringClass_throwExcept_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_WstringClass_throwExcept(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        WstringClassPrx proxy = WstringClassPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_throwExcept(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test2::WstringClass::begin_throwExcept.
 */
template<class T, typename CT> Callback_WstringClass_throwExceptPtr
newCallback_WstringClass_throwExcept(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WstringClass_throwExcept<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test2::WstringClass::begin_throwExcept.
 */
template<class T, typename CT> Callback_WstringClass_throwExceptPtr
newCallback_WstringClass_throwExcept(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WstringClass_throwExcept<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test2::WstringClass::begin_throwExcept.
 */
template<class T, typename CT> Callback_WstringClass_throwExceptPtr
newCallback_WstringClass_throwExcept(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WstringClass_throwExcept<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test2::WstringClass::begin_throwExcept.
 */
template<class T, typename CT> Callback_WstringClass_throwExceptPtr
newCallback_WstringClass_throwExcept(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WstringClass_throwExcept<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
