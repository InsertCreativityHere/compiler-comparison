// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'WstringAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#define ICE_BUILDING_GENERATED_CODE
#include "WstringAMD.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/FactoryTable.h>
#include <Ice/OutgoingAsync.h>
#include <algorithm>
#include <array>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{
    const IceInternal::FactoryTableInit iceC_factoryTableInit;
    const IceInternal::DefaultUserExceptionFactoryInit<::Test1::WstringException> iceC_Test1_WstringException_init("::Test1::WstringException");
    const IceInternal::DefaultUserExceptionFactoryInit<::Test2::WstringException> iceC_Test2_WstringException_init("::Test2::WstringException");
}

::std::wstring
Test1::WstringClassPrx::opString(::std::wstring_view iceP_s1, ::std::wstring& iceP_s2, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<::std::tuple<::std::wstring, ::std::wstring>>(true, this, &WstringClassPrx::_iceI_opString, iceP_s1, context).get();
    iceP_s2 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::std::wstring, ::std::wstring>>
Test1::WstringClassPrx::opStringAsync(::std::wstring_view iceP_s1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<::std::tuple<::std::wstring, ::std::wstring>>(false, this, &WstringClassPrx::_iceI_opString, iceP_s1, context);
}

::std::function<void()>
Test1::WstringClassPrx::opStringAsync(::std::wstring_view iceP_s1, ::std::function<void(::std::wstring, ::std::wstring)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<::std::wstring, ::std::wstring>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<::std::tuple<::std::wstring, ::std::wstring>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test1::WstringClassPrx::_iceI_opString, iceP_s1, context);
}

void
Test1::WstringClassPrx::_iceI_opString(const ::std::shared_ptr<IceInternal::OutgoingAsyncT<::std::tuple<::std::wstring, ::std::wstring>>>& outAsync, ::std::wstring_view iceP_s1, const Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opString";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            ::std::tuple<::std::wstring, ::std::wstring> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test1::WstringStruct
Test1::WstringClassPrx::opStruct(const WstringStruct& iceP_s1, WstringStruct& iceP_s2, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<::std::tuple<WstringStruct, WstringStruct>>(true, this, &WstringClassPrx::_iceI_opStruct, iceP_s1, context).get();
    iceP_s2 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test1::WstringStruct, ::Test1::WstringStruct>>
Test1::WstringClassPrx::opStructAsync(const WstringStruct& iceP_s1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<::std::tuple<WstringStruct, WstringStruct>>(false, this, &WstringClassPrx::_iceI_opStruct, iceP_s1, context);
}

::std::function<void()>
Test1::WstringClassPrx::opStructAsync(const WstringStruct& iceP_s1, ::std::function<void(::Test1::WstringStruct, ::Test1::WstringStruct)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<WstringStruct, WstringStruct>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<::std::tuple<WstringStruct, WstringStruct>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test1::WstringClassPrx::_iceI_opStruct, iceP_s1, context);
}

void
Test1::WstringClassPrx::_iceI_opStruct(const ::std::shared_ptr<IceInternal::OutgoingAsyncT<::std::tuple<WstringStruct, WstringStruct>>>& outAsync, const WstringStruct& iceP_s1, const Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opStruct";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            ::std::tuple<WstringStruct, WstringStruct> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

void
Test1::WstringClassPrx::throwExcept(::std::wstring_view iceP_reason, const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &WstringClassPrx::_iceI_throwExcept, iceP_reason, context).get();
}

::std::future<void>
Test1::WstringClassPrx::throwExceptAsync(::std::wstring_view iceP_reason, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &WstringClassPrx::_iceI_throwExcept, iceP_reason, context);
}

::std::function<void()>
Test1::WstringClassPrx::throwExceptAsync(::std::wstring_view iceP_reason, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test1::WstringClassPrx::_iceI_throwExcept, iceP_reason, context);
}

void
Test1::WstringClassPrx::_iceI_throwExcept(const ::std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, ::std::wstring_view iceP_reason, const Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "throwExcept";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_reason);
        },
        [](const Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch (const WstringException&)
            {
                throw;
            }
            catch (const Ice::UserException&)
            {
            }
        });
}

Test1::WstringClassPrx::~WstringClassPrx() = default;

const char*
Test1::WstringClassPrx::ice_staticId() noexcept
{
    return "::Test1::WstringClass";
}

::std::wstring
Test2::WstringClassPrx::opString(::std::wstring_view iceP_s1, ::std::wstring& iceP_s2, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<::std::tuple<::std::wstring, ::std::wstring>>(true, this, &WstringClassPrx::_iceI_opString, iceP_s1, context).get();
    iceP_s2 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::std::wstring, ::std::wstring>>
Test2::WstringClassPrx::opStringAsync(::std::wstring_view iceP_s1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<::std::tuple<::std::wstring, ::std::wstring>>(false, this, &WstringClassPrx::_iceI_opString, iceP_s1, context);
}

::std::function<void()>
Test2::WstringClassPrx::opStringAsync(::std::wstring_view iceP_s1, ::std::function<void(::std::wstring, ::std::wstring)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<::std::wstring, ::std::wstring>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<::std::tuple<::std::wstring, ::std::wstring>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test2::WstringClassPrx::_iceI_opString, iceP_s1, context);
}

void
Test2::WstringClassPrx::_iceI_opString(const ::std::shared_ptr<IceInternal::OutgoingAsyncT<::std::tuple<::std::wstring, ::std::wstring>>>& outAsync, ::std::wstring_view iceP_s1, const Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opString";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            ::std::tuple<::std::wstring, ::std::wstring> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test2::WstringStruct
Test2::WstringClassPrx::opStruct(const WstringStruct& iceP_s1, WstringStruct& iceP_s2, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<::std::tuple<WstringStruct, WstringStruct>>(true, this, &WstringClassPrx::_iceI_opStruct, iceP_s1, context).get();
    iceP_s2 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test2::WstringStruct, ::Test2::WstringStruct>>
Test2::WstringClassPrx::opStructAsync(const WstringStruct& iceP_s1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<::std::tuple<WstringStruct, WstringStruct>>(false, this, &WstringClassPrx::_iceI_opStruct, iceP_s1, context);
}

::std::function<void()>
Test2::WstringClassPrx::opStructAsync(const WstringStruct& iceP_s1, ::std::function<void(::Test2::WstringStruct, ::Test2::WstringStruct)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<WstringStruct, WstringStruct>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<::std::tuple<WstringStruct, WstringStruct>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test2::WstringClassPrx::_iceI_opStruct, iceP_s1, context);
}

void
Test2::WstringClassPrx::_iceI_opStruct(const ::std::shared_ptr<IceInternal::OutgoingAsyncT<::std::tuple<WstringStruct, WstringStruct>>>& outAsync, const WstringStruct& iceP_s1, const Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opStruct";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            ::std::tuple<WstringStruct, WstringStruct> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

void
Test2::WstringClassPrx::throwExcept(::std::wstring_view iceP_reason, const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &WstringClassPrx::_iceI_throwExcept, iceP_reason, context).get();
}

::std::future<void>
Test2::WstringClassPrx::throwExceptAsync(::std::wstring_view iceP_reason, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &WstringClassPrx::_iceI_throwExcept, iceP_reason, context);
}

::std::function<void()>
Test2::WstringClassPrx::throwExceptAsync(::std::wstring_view iceP_reason, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test2::WstringClassPrx::_iceI_throwExcept, iceP_reason, context);
}

void
Test2::WstringClassPrx::_iceI_throwExcept(const ::std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, ::std::wstring_view iceP_reason, const Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "throwExcept";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_reason);
        },
        [](const Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch (const WstringException&)
            {
                throw;
            }
            catch (const Ice::UserException&)
            {
            }
        });
}

Test2::WstringClassPrx::~WstringClassPrx() = default;

const char*
Test2::WstringClassPrx::ice_staticId() noexcept
{
    return "::Test2::WstringClass";
}

void
Test1::WstringStruct::ice_printFields(::std::ostream& os) const
{
    Ice::print(os << "s = ", this->s);
}

::std::ostream&
Test1::operator<<(::std::ostream& os, const ::Test1::WstringStruct& value)
{
    os << "Test1::WstringStruct{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

void
Test1::WstringException::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "reason = ", this->reason);
}

const char*
Test1::WstringException::ice_staticId() noexcept
{
    return "::Test1::WstringException";
}

const char*
Test1::WstringException::ice_id() const noexcept
{
    return ice_staticId();
}

void
Test1::WstringException::ice_throw() const
{
    throw *this;
}

void
Test1::WstringException::_writeImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->reason);
    ostr->endSlice();
}

void
Test1::WstringException::_readImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->reason);
    istr->endSlice();
}

void
Test2::WstringStruct::ice_printFields(::std::ostream& os) const
{
    Ice::print(os << "s = ", this->s);
}

::std::ostream&
Test2::operator<<(::std::ostream& os, const ::Test2::WstringStruct& value)
{
    os << "Test2::WstringStruct{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

void
Test2::WstringException::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "reason = ", this->reason);
}

const char*
Test2::WstringException::ice_staticId() noexcept
{
    return "::Test2::WstringException";
}

const char*
Test2::WstringException::ice_id() const noexcept
{
    return ice_staticId();
}

void
Test2::WstringException::ice_throw() const
{
    throw *this;
}

void
Test2::WstringException::_writeImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->reason);
    ostr->endSlice();
}

void
Test2::WstringException::_readImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->reason);
    istr->endSlice();
}

::std::vector<::std::string>
Test1::WstringClass::ice_ids(const Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::Test1::WstringClass"};
    return allTypeIds;
}

::std::string
Test1::WstringClass::ice_id(const Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

const char*
Test1::WstringClass::ice_staticId() noexcept
{
    return "::Test1::WstringClass";
}

/// \cond INTERNAL
void
Test1::WstringClass::_iceD_opString(
    Ice::IncomingRequest& request,
    ::std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::std::wstring iceP_s1;
    istr->readAll(iceP_s1);
    istr->endEncapsulation();
    auto responseHandler = ::std::make_shared<IceInternal::AsyncResponseHandler>(::std::move(sendResponse), request.current());
    auto responseCb = [responseHandler](::std::wstring_view ret, ::std::wstring_view iceP_s2)
    {
        responseHandler->sendResponse(
            [&](Ice::OutputStream* ostr)
            {
                ostr->writeAll(iceP_s2, ret);
            });
    };
    try
    {
        this->opStringAsync(::std::move(iceP_s1), ::std::move(responseCb), [responseHandler](std::exception_ptr ex) { responseHandler->sendException(ex); }, responseHandler->current());
    }
    catch (...)
    {
        responseHandler->sendException(::std::current_exception());
    }
}
/// \endcond

/// \cond INTERNAL
void
Test1::WstringClass::_iceD_opStruct(
    Ice::IncomingRequest& request,
    ::std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    WstringStruct iceP_s1;
    istr->readAll(iceP_s1);
    istr->endEncapsulation();
    auto responseHandler = ::std::make_shared<IceInternal::AsyncResponseHandler>(::std::move(sendResponse), request.current());
    auto responseCb = [responseHandler](const WstringStruct& ret, const WstringStruct& iceP_s2)
    {
        responseHandler->sendResponse(
            [&](Ice::OutputStream* ostr)
            {
                ostr->writeAll(iceP_s2, ret);
            });
    };
    try
    {
        this->opStructAsync(::std::move(iceP_s1), ::std::move(responseCb), [responseHandler](std::exception_ptr ex) { responseHandler->sendException(ex); }, responseHandler->current());
    }
    catch (...)
    {
        responseHandler->sendException(::std::current_exception());
    }
}
/// \endcond

/// \cond INTERNAL
void
Test1::WstringClass::_iceD_throwExcept(
    Ice::IncomingRequest& request,
    ::std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::std::wstring iceP_reason;
    istr->readAll(iceP_reason);
    istr->endEncapsulation();
    auto responseHandler = ::std::make_shared<IceInternal::AsyncResponseHandler>(::std::move(sendResponse), request.current());
    try
    {
        this->throwExceptAsync(::std::move(iceP_reason), [responseHandler] { responseHandler->sendEmptyResponse(); }, [responseHandler](std::exception_ptr ex) { responseHandler->sendException(ex); }, responseHandler->current());
    }
    catch (...)
    {
        responseHandler->sendException(::std::current_exception());
    }
}
/// \endcond

/// \cond INTERNAL
void
Test1::WstringClass::dispatch(Ice::IncomingRequest& request, ::std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr ::std::array<::std::string_view, 7> allOperations{"ice_id", "ice_ids", "ice_isA", "ice_ping", "opString", "opStruct", "throwExcept"};

    const Ice::Current& current = request.current();
    auto r = ::std::equal_range(allOperations.begin(), allOperations.end(), current.operation);
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(::std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_ice_id(request, ::std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_ids(request, ::std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_isA(request, ::std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ping(request, ::std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_opString(request, ::std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_opStruct(request, ::std::move(sendResponse));
            break;
        }
        case 6:
        {
            _iceD_throwExcept(request, ::std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(::std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}
/// \endcond

::std::vector<::std::string>
Test2::WstringClass::ice_ids(const Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::Test2::WstringClass"};
    return allTypeIds;
}

::std::string
Test2::WstringClass::ice_id(const Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

const char*
Test2::WstringClass::ice_staticId() noexcept
{
    return "::Test2::WstringClass";
}

/// \cond INTERNAL
void
Test2::WstringClass::_iceD_opString(
    Ice::IncomingRequest& request,
    ::std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::std::wstring iceP_s1;
    istr->readAll(iceP_s1);
    istr->endEncapsulation();
    auto responseHandler = ::std::make_shared<IceInternal::AsyncResponseHandler>(::std::move(sendResponse), request.current());
    auto responseCb = [responseHandler](::std::wstring_view ret, ::std::wstring_view iceP_s2)
    {
        responseHandler->sendResponse(
            [&](Ice::OutputStream* ostr)
            {
                ostr->writeAll(iceP_s2, ret);
            });
    };
    try
    {
        this->opStringAsync(::std::move(iceP_s1), ::std::move(responseCb), [responseHandler](std::exception_ptr ex) { responseHandler->sendException(ex); }, responseHandler->current());
    }
    catch (...)
    {
        responseHandler->sendException(::std::current_exception());
    }
}
/// \endcond

/// \cond INTERNAL
void
Test2::WstringClass::_iceD_opStruct(
    Ice::IncomingRequest& request,
    ::std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    WstringStruct iceP_s1;
    istr->readAll(iceP_s1);
    istr->endEncapsulation();
    auto responseHandler = ::std::make_shared<IceInternal::AsyncResponseHandler>(::std::move(sendResponse), request.current());
    auto responseCb = [responseHandler](const WstringStruct& ret, const WstringStruct& iceP_s2)
    {
        responseHandler->sendResponse(
            [&](Ice::OutputStream* ostr)
            {
                ostr->writeAll(iceP_s2, ret);
            });
    };
    try
    {
        this->opStructAsync(::std::move(iceP_s1), ::std::move(responseCb), [responseHandler](std::exception_ptr ex) { responseHandler->sendException(ex); }, responseHandler->current());
    }
    catch (...)
    {
        responseHandler->sendException(::std::current_exception());
    }
}
/// \endcond

/// \cond INTERNAL
void
Test2::WstringClass::_iceD_throwExcept(
    Ice::IncomingRequest& request,
    ::std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::std::wstring iceP_reason;
    istr->readAll(iceP_reason);
    istr->endEncapsulation();
    auto responseHandler = ::std::make_shared<IceInternal::AsyncResponseHandler>(::std::move(sendResponse), request.current());
    try
    {
        this->throwExceptAsync(::std::move(iceP_reason), [responseHandler] { responseHandler->sendEmptyResponse(); }, [responseHandler](std::exception_ptr ex) { responseHandler->sendException(ex); }, responseHandler->current());
    }
    catch (...)
    {
        responseHandler->sendException(::std::current_exception());
    }
}
/// \endcond

/// \cond INTERNAL
void
Test2::WstringClass::dispatch(Ice::IncomingRequest& request, ::std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr ::std::array<::std::string_view, 7> allOperations{"ice_id", "ice_ids", "ice_isA", "ice_ping", "opString", "opStruct", "throwExcept"};

    const Ice::Current& current = request.current();
    auto r = ::std::equal_range(allOperations.begin(), allOperations.end(), current.operation);
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(::std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_ice_id(request, ::std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_ids(request, ::std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_isA(request, ::std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ping(request, ::std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_opString(request, ::std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_opStruct(request, ::std::move(sendResponse));
            break;
        }
        case 6:
        {
            _iceD_throwExcept(request, ::std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(::std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}
/// \endcond
