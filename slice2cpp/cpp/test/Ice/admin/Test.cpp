//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Test.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_Test_RemoteCommunicator_ids[2] =
{
    "::Ice::Object",
    "::Test::RemoteCommunicator"
};
const ::std::string iceC_Test_RemoteCommunicator_ops[] =
{
    "addUpdateCallback",
    "destroy",
    "error",
    "getAdmin",
    "getChanges",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "print",
    "removeUpdateCallback",
    "shutdown",
    "trace",
    "waitForShutdown",
    "warning"
};
const ::std::string iceC_Test_RemoteCommunicator_getAdmin_name = "getAdmin";
const ::std::string iceC_Test_RemoteCommunicator_getChanges_name = "getChanges";
const ::std::string iceC_Test_RemoteCommunicator_addUpdateCallback_name = "addUpdateCallback";
const ::std::string iceC_Test_RemoteCommunicator_removeUpdateCallback_name = "removeUpdateCallback";
const ::std::string iceC_Test_RemoteCommunicator_print_name = "print";
const ::std::string iceC_Test_RemoteCommunicator_trace_name = "trace";
const ::std::string iceC_Test_RemoteCommunicator_warning_name = "warning";
const ::std::string iceC_Test_RemoteCommunicator_error_name = "error";
const ::std::string iceC_Test_RemoteCommunicator_shutdown_name = "shutdown";
const ::std::string iceC_Test_RemoteCommunicator_waitForShutdown_name = "waitForShutdown";
const ::std::string iceC_Test_RemoteCommunicator_destroy_name = "destroy";

const ::std::string iceC_Test_RemoteCommunicatorFactory_ids[2] =
{
    "::Ice::Object",
    "::Test::RemoteCommunicatorFactory"
};
const ::std::string iceC_Test_RemoteCommunicatorFactory_ops[] =
{
    "createCommunicator",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "shutdown"
};
const ::std::string iceC_Test_RemoteCommunicatorFactory_createCommunicator_name = "createCommunicator";
const ::std::string iceC_Test_RemoteCommunicatorFactory_shutdown_name = "shutdown";

const ::std::string iceC_Test_TestFacet_ids[2] =
{
    "::Ice::Object",
    "::Test::TestFacet"
};
const ::std::string iceC_Test_TestFacet_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "op"
};
const ::std::string iceC_Test_TestFacet_op_name = "op";

}

bool
Test::RemoteCommunicator::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_RemoteCommunicator_ids, iceC_Test_RemoteCommunicator_ids + 2, s);
}

::std::vector<::std::string>
Test::RemoteCommunicator::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_RemoteCommunicator_ids[0], &iceC_Test_RemoteCommunicator_ids[2]);
}

::std::string
Test::RemoteCommunicator::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::RemoteCommunicator::ice_staticId()
{
    static const ::std::string typeId = "::Test::RemoteCommunicator";
    return typeId;
}

/// \cond INTERNAL
bool
Test::RemoteCommunicator::_iceD_getAdmin(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<::Ice::ObjectPrx> ret = this->getAdmin(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::RemoteCommunicator::_iceD_getChanges(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::Ice::PropertyDict ret = this->getChanges(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::RemoteCommunicator::_iceD_addUpdateCallback(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->addUpdateCallback(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::RemoteCommunicator::_iceD_removeUpdateCallback(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->removeUpdateCallback(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::RemoteCommunicator::_iceD_print(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_message;
    istr->readAll(iceP_message);
    inS.endReadParams();
    this->print(::std::move(iceP_message), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::RemoteCommunicator::_iceD_trace(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_category;
    ::std::string iceP_message;
    istr->readAll(iceP_category, iceP_message);
    inS.endReadParams();
    this->trace(::std::move(iceP_category), ::std::move(iceP_message), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::RemoteCommunicator::_iceD_warning(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_message;
    istr->readAll(iceP_message);
    inS.endReadParams();
    this->warning(::std::move(iceP_message), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::RemoteCommunicator::_iceD_error(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_message;
    istr->readAll(iceP_message);
    inS.endReadParams();
    this->error(::std::move(iceP_message), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::RemoteCommunicator::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::RemoteCommunicator::_iceD_waitForShutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->waitForShutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::RemoteCommunicator::_iceD_destroy(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->destroy(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::RemoteCommunicator::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_RemoteCommunicator_ops, iceC_Test_RemoteCommunicator_ops + 15, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_RemoteCommunicator_ops)
    {
        case 0:
        {
            return _iceD_addUpdateCallback(in, current);
        }
        case 1:
        {
            return _iceD_destroy(in, current);
        }
        case 2:
        {
            return _iceD_error(in, current);
        }
        case 3:
        {
            return _iceD_getAdmin(in, current);
        }
        case 4:
        {
            return _iceD_getChanges(in, current);
        }
        case 5:
        {
            return _iceD_ice_id(in, current);
        }
        case 6:
        {
            return _iceD_ice_ids(in, current);
        }
        case 7:
        {
            return _iceD_ice_isA(in, current);
        }
        case 8:
        {
            return _iceD_ice_ping(in, current);
        }
        case 9:
        {
            return _iceD_print(in, current);
        }
        case 10:
        {
            return _iceD_removeUpdateCallback(in, current);
        }
        case 11:
        {
            return _iceD_shutdown(in, current);
        }
        case 12:
        {
            return _iceD_trace(in, current);
        }
        case 13:
        {
            return _iceD_waitForShutdown(in, current);
        }
        case 14:
        {
            return _iceD_warning(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::RemoteCommunicatorFactory::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_RemoteCommunicatorFactory_ids, iceC_Test_RemoteCommunicatorFactory_ids + 2, s);
}

::std::vector<::std::string>
Test::RemoteCommunicatorFactory::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_RemoteCommunicatorFactory_ids[0], &iceC_Test_RemoteCommunicatorFactory_ids[2]);
}

::std::string
Test::RemoteCommunicatorFactory::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::RemoteCommunicatorFactory::ice_staticId()
{
    static const ::std::string typeId = "::Test::RemoteCommunicatorFactory";
    return typeId;
}

/// \cond INTERNAL
bool
Test::RemoteCommunicatorFactory::_iceD_createCommunicator(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Ice::PropertyDict iceP_props;
    istr->readAll(iceP_props);
    inS.endReadParams();
    ::std::shared_ptr<RemoteCommunicatorPrx> ret = this->createCommunicator(::std::move(iceP_props), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::RemoteCommunicatorFactory::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::RemoteCommunicatorFactory::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_RemoteCommunicatorFactory_ops, iceC_Test_RemoteCommunicatorFactory_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_RemoteCommunicatorFactory_ops)
    {
        case 0:
        {
            return _iceD_createCommunicator(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::TestFacet::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_TestFacet_ids, iceC_Test_TestFacet_ids + 2, s);
}

::std::vector<::std::string>
Test::TestFacet::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_TestFacet_ids[0], &iceC_Test_TestFacet_ids[2]);
}

::std::string
Test::TestFacet::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::TestFacet::ice_staticId()
{
    static const ::std::string typeId = "::Test::TestFacet";
    return typeId;
}

/// \cond INTERNAL
bool
Test::TestFacet::_iceD_op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->op(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestFacet::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_TestFacet_ops, iceC_Test_TestFacet_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_TestFacet_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_op(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
Test::RemoteCommunicatorPrx::_iceI_getAdmin(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Ice::ObjectPrx>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_RemoteCommunicator_getAdmin_name);
    outAsync->invoke(iceC_Test_RemoteCommunicator_getAdmin_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::RemoteCommunicatorPrx::_iceI_getChanges(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Ice::PropertyDict>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_RemoteCommunicator_getChanges_name);
    outAsync->invoke(iceC_Test_RemoteCommunicator_getChanges_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::RemoteCommunicatorPrx::_iceI_addUpdateCallback(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_RemoteCommunicator_addUpdateCallback_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::RemoteCommunicatorPrx::_iceI_removeUpdateCallback(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_RemoteCommunicator_removeUpdateCallback_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::RemoteCommunicatorPrx::_iceI_print(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_message, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_RemoteCommunicator_print_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_message);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::RemoteCommunicatorPrx::_iceI_trace(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_category, const ::std::string& iceP_message, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_RemoteCommunicator_trace_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_category, iceP_message);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::RemoteCommunicatorPrx::_iceI_warning(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_message, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_RemoteCommunicator_warning_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_message);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::RemoteCommunicatorPrx::_iceI_error(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_message, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_RemoteCommunicator_error_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_message);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::RemoteCommunicatorPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_RemoteCommunicator_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::RemoteCommunicatorPrx::_iceI_waitForShutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_RemoteCommunicator_waitForShutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::RemoteCommunicatorPrx::_iceI_destroy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_RemoteCommunicator_destroy_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::RemoteCommunicatorPrx::_newInstance() const
{
    return ::IceInternal::createProxy<RemoteCommunicatorPrx>();
}
/// \endcond

const ::std::string&
Test::RemoteCommunicatorPrx::ice_staticId()
{
    return RemoteCommunicator::ice_staticId();
}

/// \cond INTERNAL
void
Test::RemoteCommunicatorFactoryPrx::_iceI_createCommunicator(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::RemoteCommunicatorPrx>>>& outAsync, const ::Ice::PropertyDict& iceP_props, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_RemoteCommunicatorFactory_createCommunicator_name);
    outAsync->invoke(iceC_Test_RemoteCommunicatorFactory_createCommunicator_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_props);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::RemoteCommunicatorFactoryPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_RemoteCommunicatorFactory_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::RemoteCommunicatorFactoryPrx::_newInstance() const
{
    return ::IceInternal::createProxy<RemoteCommunicatorFactoryPrx>();
}
/// \endcond

const ::std::string&
Test::RemoteCommunicatorFactoryPrx::ice_staticId()
{
    return RemoteCommunicatorFactory::ice_staticId();
}

/// \cond INTERNAL
void
Test::TestFacetPrx::_iceI_op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_TestFacet_op_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::TestFacetPrx::_newInstance() const
{
    return ::IceInternal::createProxy<TestFacetPrx>();
}
/// \endcond

const ::std::string&
Test::TestFacetPrx::ice_staticId()
{
    return TestFacet::ice_staticId();
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_Test_RemoteCommunicator_getAdmin_name = "getAdmin";

const ::std::string iceC_Test_RemoteCommunicator_getChanges_name = "getChanges";

const ::std::string iceC_Test_RemoteCommunicator_addUpdateCallback_name = "addUpdateCallback";

const ::std::string iceC_Test_RemoteCommunicator_removeUpdateCallback_name = "removeUpdateCallback";

const ::std::string iceC_Test_RemoteCommunicator_print_name = "print";

const ::std::string iceC_Test_RemoteCommunicator_trace_name = "trace";

const ::std::string iceC_Test_RemoteCommunicator_warning_name = "warning";

const ::std::string iceC_Test_RemoteCommunicator_error_name = "error";

const ::std::string iceC_Test_RemoteCommunicator_shutdown_name = "shutdown";

const ::std::string iceC_Test_RemoteCommunicator_waitForShutdown_name = "waitForShutdown";

const ::std::string iceC_Test_RemoteCommunicator_destroy_name = "destroy";

const ::std::string iceC_Test_RemoteCommunicatorFactory_createCommunicator_name = "createCommunicator";

const ::std::string iceC_Test_RemoteCommunicatorFactory_shutdown_name = "shutdown";

const ::std::string iceC_Test_TestFacet_op_name = "op";

}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(RemoteCommunicator* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< RemoteCommunicator>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new RemoteCommunicator;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::RemoteCommunicator::_iceI_begin_getAdmin(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_RemoteCommunicator_getAdmin_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_RemoteCommunicator_getAdmin_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_RemoteCommunicator_getAdmin_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_RemoteCommunicator_getAdmin_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::ObjectPrx
IceProxy::Test::RemoteCommunicator::end_getAdmin(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_RemoteCommunicator_getAdmin_name);
    ::Ice::ObjectPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::RemoteCommunicator::_iceI_begin_getChanges(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_RemoteCommunicator_getChanges_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_RemoteCommunicator_getChanges_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_RemoteCommunicator_getChanges_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_RemoteCommunicator_getChanges_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::PropertyDict
IceProxy::Test::RemoteCommunicator::end_getChanges(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_RemoteCommunicator_getChanges_name);
    ::Ice::PropertyDict ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::RemoteCommunicator::_iceI_begin_addUpdateCallback(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_RemoteCommunicator_addUpdateCallback_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_RemoteCommunicator_addUpdateCallback_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_RemoteCommunicator_addUpdateCallback_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::RemoteCommunicator::end_addUpdateCallback(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_RemoteCommunicator_addUpdateCallback_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::RemoteCommunicator::_iceI_begin_removeUpdateCallback(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_RemoteCommunicator_removeUpdateCallback_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_RemoteCommunicator_removeUpdateCallback_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_RemoteCommunicator_removeUpdateCallback_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::RemoteCommunicator::end_removeUpdateCallback(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_RemoteCommunicator_removeUpdateCallback_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::RemoteCommunicator::_iceI_begin_print(const ::std::string& iceP_message, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_RemoteCommunicator_print_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_RemoteCommunicator_print_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_message);
        result->endWriteParams();
        result->invoke(iceC_Test_RemoteCommunicator_print_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::RemoteCommunicator::end_print(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_RemoteCommunicator_print_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::RemoteCommunicator::_iceI_begin_trace(const ::std::string& iceP_category, const ::std::string& iceP_message, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_RemoteCommunicator_trace_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_RemoteCommunicator_trace_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_category);
        ostr->write(iceP_message);
        result->endWriteParams();
        result->invoke(iceC_Test_RemoteCommunicator_trace_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::RemoteCommunicator::end_trace(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_RemoteCommunicator_trace_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::RemoteCommunicator::_iceI_begin_warning(const ::std::string& iceP_message, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_RemoteCommunicator_warning_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_RemoteCommunicator_warning_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_message);
        result->endWriteParams();
        result->invoke(iceC_Test_RemoteCommunicator_warning_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::RemoteCommunicator::end_warning(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_RemoteCommunicator_warning_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::RemoteCommunicator::_iceI_begin_error(const ::std::string& iceP_message, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_RemoteCommunicator_error_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_RemoteCommunicator_error_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_message);
        result->endWriteParams();
        result->invoke(iceC_Test_RemoteCommunicator_error_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::RemoteCommunicator::end_error(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_RemoteCommunicator_error_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::RemoteCommunicator::_iceI_begin_shutdown(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_RemoteCommunicator_shutdown_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_RemoteCommunicator_shutdown_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_RemoteCommunicator_shutdown_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::RemoteCommunicator::end_shutdown(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_RemoteCommunicator_shutdown_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::RemoteCommunicator::_iceI_begin_waitForShutdown(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_RemoteCommunicator_waitForShutdown_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_RemoteCommunicator_waitForShutdown_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_RemoteCommunicator_waitForShutdown_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::RemoteCommunicator::end_waitForShutdown(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_RemoteCommunicator_waitForShutdown_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::RemoteCommunicator::_iceI_begin_destroy(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_RemoteCommunicator_destroy_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_RemoteCommunicator_destroy_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_RemoteCommunicator_destroy_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::RemoteCommunicator::end_destroy(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_RemoteCommunicator_destroy_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::RemoteCommunicator::_newInstance() const
{
    return new RemoteCommunicator;
}
/// \endcond

const ::std::string&
IceProxy::Test::RemoteCommunicator::ice_staticId()
{
    return ::Test::RemoteCommunicator::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(RemoteCommunicatorFactory* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< RemoteCommunicatorFactory>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new RemoteCommunicatorFactory;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::RemoteCommunicatorFactory::_iceI_begin_createCommunicator(const ::Ice::PropertyDict& iceP_props, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_RemoteCommunicatorFactory_createCommunicator_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_RemoteCommunicatorFactory_createCommunicator_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_RemoteCommunicatorFactory_createCommunicator_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_props);
        result->endWriteParams();
        result->invoke(iceC_Test_RemoteCommunicatorFactory_createCommunicator_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::RemoteCommunicatorPrx
IceProxy::Test::RemoteCommunicatorFactory::end_createCommunicator(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_RemoteCommunicatorFactory_createCommunicator_name);
    ::Test::RemoteCommunicatorPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::RemoteCommunicatorFactory::_iceI_begin_shutdown(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_RemoteCommunicatorFactory_shutdown_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_RemoteCommunicatorFactory_shutdown_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_RemoteCommunicatorFactory_shutdown_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::RemoteCommunicatorFactory::end_shutdown(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_RemoteCommunicatorFactory_shutdown_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::RemoteCommunicatorFactory::_newInstance() const
{
    return new RemoteCommunicatorFactory;
}
/// \endcond

const ::std::string&
IceProxy::Test::RemoteCommunicatorFactory::ice_staticId()
{
    return ::Test::RemoteCommunicatorFactory::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(TestFacet* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< TestFacet>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new TestFacet;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::TestFacet::_iceI_begin_op(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_TestFacet_op_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_TestFacet_op_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_TestFacet_op_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::TestFacet::end_op(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_TestFacet_op_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::TestFacet::_newInstance() const
{
    return new TestFacet;
}
/// \endcond

const ::std::string&
IceProxy::Test::TestFacet::ice_staticId()
{
    return ::Test::TestFacet::ice_staticId();
}

Test::RemoteCommunicator::~RemoteCommunicator()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(RemoteCommunicator* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Test_RemoteCommunicator_ids[2] =
{
    "::Ice::Object",
    "::Test::RemoteCommunicator"
};

}

bool
Test::RemoteCommunicator::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_RemoteCommunicator_ids, iceC_Test_RemoteCommunicator_ids + 2, s);
}

::std::vector< ::std::string>
Test::RemoteCommunicator::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_RemoteCommunicator_ids[0], &iceC_Test_RemoteCommunicator_ids[2]);
}

const ::std::string&
Test::RemoteCommunicator::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::RemoteCommunicator::ice_staticId()
{
    static const ::std::string typeId = "::Test::RemoteCommunicator";
    return typeId;
}

/// \cond INTERNAL
bool
Test::RemoteCommunicator::_iceD_getAdmin(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::Ice::ObjectPrx ret = this->getAdmin(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::RemoteCommunicator::_iceD_getChanges(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::Ice::PropertyDict ret = this->getChanges(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::RemoteCommunicator::_iceD_addUpdateCallback(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->addUpdateCallback(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::RemoteCommunicator::_iceD_removeUpdateCallback(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->removeUpdateCallback(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::RemoteCommunicator::_iceD_print(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_message;
    istr->read(iceP_message);
    inS.endReadParams();
    this->print(iceP_message, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::RemoteCommunicator::_iceD_trace(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_category;
    ::std::string iceP_message;
    istr->read(iceP_category);
    istr->read(iceP_message);
    inS.endReadParams();
    this->trace(iceP_category, iceP_message, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::RemoteCommunicator::_iceD_warning(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_message;
    istr->read(iceP_message);
    inS.endReadParams();
    this->warning(iceP_message, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::RemoteCommunicator::_iceD_error(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_message;
    istr->read(iceP_message);
    inS.endReadParams();
    this->error(iceP_message, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::RemoteCommunicator::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::RemoteCommunicator::_iceD_waitForShutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->waitForShutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::RemoteCommunicator::_iceD_destroy(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->destroy(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_RemoteCommunicator_all[] =
{
    "addUpdateCallback",
    "destroy",
    "error",
    "getAdmin",
    "getChanges",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "print",
    "removeUpdateCallback",
    "shutdown",
    "trace",
    "waitForShutdown",
    "warning"
};

}

/// \cond INTERNAL
bool
Test::RemoteCommunicator::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_RemoteCommunicator_all, iceC_Test_RemoteCommunicator_all + 15, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_RemoteCommunicator_all)
    {
        case 0:
        {
            return _iceD_addUpdateCallback(in, current);
        }
        case 1:
        {
            return _iceD_destroy(in, current);
        }
        case 2:
        {
            return _iceD_error(in, current);
        }
        case 3:
        {
            return _iceD_getAdmin(in, current);
        }
        case 4:
        {
            return _iceD_getChanges(in, current);
        }
        case 5:
        {
            return _iceD_ice_id(in, current);
        }
        case 6:
        {
            return _iceD_ice_ids(in, current);
        }
        case 7:
        {
            return _iceD_ice_isA(in, current);
        }
        case 8:
        {
            return _iceD_ice_ping(in, current);
        }
        case 9:
        {
            return _iceD_print(in, current);
        }
        case 10:
        {
            return _iceD_removeUpdateCallback(in, current);
        }
        case 11:
        {
            return _iceD_shutdown(in, current);
        }
        case 12:
        {
            return _iceD_trace(in, current);
        }
        case 13:
        {
            return _iceD_waitForShutdown(in, current);
        }
        case 14:
        {
            return _iceD_warning(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::RemoteCommunicator::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< RemoteCommunicator, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::RemoteCommunicator::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< RemoteCommunicator, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(RemoteCommunicatorPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = RemoteCommunicatorPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(RemoteCommunicator::ice_staticId(), v);
    }
}
/// \endcond

Test::RemoteCommunicatorFactory::~RemoteCommunicatorFactory()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(RemoteCommunicatorFactory* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Test_RemoteCommunicatorFactory_ids[2] =
{
    "::Ice::Object",
    "::Test::RemoteCommunicatorFactory"
};

}

bool
Test::RemoteCommunicatorFactory::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_RemoteCommunicatorFactory_ids, iceC_Test_RemoteCommunicatorFactory_ids + 2, s);
}

::std::vector< ::std::string>
Test::RemoteCommunicatorFactory::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_RemoteCommunicatorFactory_ids[0], &iceC_Test_RemoteCommunicatorFactory_ids[2]);
}

const ::std::string&
Test::RemoteCommunicatorFactory::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::RemoteCommunicatorFactory::ice_staticId()
{
    static const ::std::string typeId = "::Test::RemoteCommunicatorFactory";
    return typeId;
}

/// \cond INTERNAL
bool
Test::RemoteCommunicatorFactory::_iceD_createCommunicator(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::PropertyDict iceP_props;
    istr->read(iceP_props);
    inS.endReadParams();
    RemoteCommunicatorPrx ret = this->createCommunicator(iceP_props, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::RemoteCommunicatorFactory::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_RemoteCommunicatorFactory_all[] =
{
    "createCommunicator",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "shutdown"
};

}

/// \cond INTERNAL
bool
Test::RemoteCommunicatorFactory::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_RemoteCommunicatorFactory_all, iceC_Test_RemoteCommunicatorFactory_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_RemoteCommunicatorFactory_all)
    {
        case 0:
        {
            return _iceD_createCommunicator(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::RemoteCommunicatorFactory::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< RemoteCommunicatorFactory, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::RemoteCommunicatorFactory::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< RemoteCommunicatorFactory, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(RemoteCommunicatorFactoryPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = RemoteCommunicatorFactoryPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(RemoteCommunicatorFactory::ice_staticId(), v);
    }
}
/// \endcond

Test::TestFacet::~TestFacet()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(TestFacet* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Test_TestFacet_ids[2] =
{
    "::Ice::Object",
    "::Test::TestFacet"
};

}

bool
Test::TestFacet::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_TestFacet_ids, iceC_Test_TestFacet_ids + 2, s);
}

::std::vector< ::std::string>
Test::TestFacet::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_TestFacet_ids[0], &iceC_Test_TestFacet_ids[2]);
}

const ::std::string&
Test::TestFacet::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::TestFacet::ice_staticId()
{
    static const ::std::string typeId = "::Test::TestFacet";
    return typeId;
}

/// \cond INTERNAL
bool
Test::TestFacet::_iceD_op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->op(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_TestFacet_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "op"
};

}

/// \cond INTERNAL
bool
Test::TestFacet::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_TestFacet_all, iceC_Test_TestFacet_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_TestFacet_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_op(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::TestFacet::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< TestFacet, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::TestFacet::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< TestFacet, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(TestFacetPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = TestFacetPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(TestFacet::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
