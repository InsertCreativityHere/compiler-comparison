//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `TestAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <TestAMD.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_Test_MyClass_ids[2] =
{
    "::Ice::Object",
    "::Test::MyClass"
};
const ::std::string iceC_Test_MyClass_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opBool",
    "opBoolBoolSD",
    "opBoolS",
    "opBoolSS",
    "opByte",
    "opByte1",
    "opByteBoolD",
    "opByteBoolD1",
    "opByteBoolD2",
    "opByteBoolDS",
    "opByteByteSD",
    "opByteS",
    "opByteSOneway",
    "opByteSOnewayCallCount",
    "opByteSS",
    "opContext",
    "opDouble1",
    "opDoubleMarshaling",
    "opFloat1",
    "opFloatDouble",
    "opFloatDoubleS",
    "opFloatDoubleSS",
    "opIdempotent",
    "opInt1",
    "opIntIntSD",
    "opIntS",
    "opLong1",
    "opLongFloatD",
    "opLongFloatDS",
    "opLongLongSD",
    "opMDict1",
    "opMDict2",
    "opMSeq1",
    "opMSeq2",
    "opMStruct1",
    "opMStruct2",
    "opMyClass",
    "opMyEnum",
    "opMyEnumMyEnumSD",
    "opMyEnumStringD",
    "opMyEnumStringDS",
    "opMyStructMyEnumD",
    "opMyStructMyEnumDS",
    "opNonmutating",
    "opShort1",
    "opShortIntD",
    "opShortIntDS",
    "opShortIntLong",
    "opShortIntLongS",
    "opShortIntLongSS",
    "opShortShortSD",
    "opString",
    "opString1",
    "opStringDoubleSD",
    "opStringFloatSD",
    "opStringLiterals",
    "opStringMyEnumD",
    "opStringMyEnumDS",
    "opStringS",
    "opStringS1",
    "opStringS2",
    "opStringSS",
    "opStringSSS",
    "opStringStringD",
    "opStringStringDS",
    "opStringStringSD",
    "opStruct",
    "opVoid",
    "opWStringLiterals",
    "shutdown"
};
const ::std::string iceC_Test_MyClass_shutdown_name = "shutdown";
const ::std::string iceC_Test_MyClass_opVoid_name = "opVoid";
const ::std::string iceC_Test_MyClass_opByte_name = "opByte";
const ::std::string iceC_Test_MyClass_opBool_name = "opBool";
const ::std::string iceC_Test_MyClass_opShortIntLong_name = "opShortIntLong";
const ::std::string iceC_Test_MyClass_opFloatDouble_name = "opFloatDouble";
const ::std::string iceC_Test_MyClass_opString_name = "opString";
const ::std::string iceC_Test_MyClass_opMyEnum_name = "opMyEnum";
const ::std::string iceC_Test_MyClass_opMyClass_name = "opMyClass";
const ::std::string iceC_Test_MyClass_opStruct_name = "opStruct";
const ::std::string iceC_Test_MyClass_opByteS_name = "opByteS";
const ::std::string iceC_Test_MyClass_opBoolS_name = "opBoolS";
const ::std::string iceC_Test_MyClass_opShortIntLongS_name = "opShortIntLongS";
const ::std::string iceC_Test_MyClass_opFloatDoubleS_name = "opFloatDoubleS";
const ::std::string iceC_Test_MyClass_opStringS_name = "opStringS";
const ::std::string iceC_Test_MyClass_opByteSS_name = "opByteSS";
const ::std::string iceC_Test_MyClass_opBoolSS_name = "opBoolSS";
const ::std::string iceC_Test_MyClass_opShortIntLongSS_name = "opShortIntLongSS";
const ::std::string iceC_Test_MyClass_opFloatDoubleSS_name = "opFloatDoubleSS";
const ::std::string iceC_Test_MyClass_opStringSS_name = "opStringSS";
const ::std::string iceC_Test_MyClass_opStringSSS_name = "opStringSSS";
const ::std::string iceC_Test_MyClass_opByteBoolD_name = "opByteBoolD";
const ::std::string iceC_Test_MyClass_opShortIntD_name = "opShortIntD";
const ::std::string iceC_Test_MyClass_opLongFloatD_name = "opLongFloatD";
const ::std::string iceC_Test_MyClass_opStringStringD_name = "opStringStringD";
const ::std::string iceC_Test_MyClass_opStringMyEnumD_name = "opStringMyEnumD";
const ::std::string iceC_Test_MyClass_opMyEnumStringD_name = "opMyEnumStringD";
const ::std::string iceC_Test_MyClass_opMyStructMyEnumD_name = "opMyStructMyEnumD";
const ::std::string iceC_Test_MyClass_opByteBoolDS_name = "opByteBoolDS";
const ::std::string iceC_Test_MyClass_opShortIntDS_name = "opShortIntDS";
const ::std::string iceC_Test_MyClass_opLongFloatDS_name = "opLongFloatDS";
const ::std::string iceC_Test_MyClass_opStringStringDS_name = "opStringStringDS";
const ::std::string iceC_Test_MyClass_opStringMyEnumDS_name = "opStringMyEnumDS";
const ::std::string iceC_Test_MyClass_opMyEnumStringDS_name = "opMyEnumStringDS";
const ::std::string iceC_Test_MyClass_opMyStructMyEnumDS_name = "opMyStructMyEnumDS";
const ::std::string iceC_Test_MyClass_opByteByteSD_name = "opByteByteSD";
const ::std::string iceC_Test_MyClass_opBoolBoolSD_name = "opBoolBoolSD";
const ::std::string iceC_Test_MyClass_opShortShortSD_name = "opShortShortSD";
const ::std::string iceC_Test_MyClass_opIntIntSD_name = "opIntIntSD";
const ::std::string iceC_Test_MyClass_opLongLongSD_name = "opLongLongSD";
const ::std::string iceC_Test_MyClass_opStringFloatSD_name = "opStringFloatSD";
const ::std::string iceC_Test_MyClass_opStringDoubleSD_name = "opStringDoubleSD";
const ::std::string iceC_Test_MyClass_opStringStringSD_name = "opStringStringSD";
const ::std::string iceC_Test_MyClass_opMyEnumMyEnumSD_name = "opMyEnumMyEnumSD";
const ::std::string iceC_Test_MyClass_opIntS_name = "opIntS";
const ::std::string iceC_Test_MyClass_opByteSOneway_name = "opByteSOneway";
const ::std::string iceC_Test_MyClass_opByteSOnewayCallCount_name = "opByteSOnewayCallCount";
const ::std::string iceC_Test_MyClass_opContext_name = "opContext";
const ::std::string iceC_Test_MyClass_opDoubleMarshaling_name = "opDoubleMarshaling";
const ::std::string iceC_Test_MyClass_opIdempotent_name = "opIdempotent";
const ::std::string iceC_Test_MyClass_opNonmutating_name = "opNonmutating";
const ::std::string iceC_Test_MyClass_opByte1_name = "opByte1";
const ::std::string iceC_Test_MyClass_opShort1_name = "opShort1";
const ::std::string iceC_Test_MyClass_opInt1_name = "opInt1";
const ::std::string iceC_Test_MyClass_opLong1_name = "opLong1";
const ::std::string iceC_Test_MyClass_opFloat1_name = "opFloat1";
const ::std::string iceC_Test_MyClass_opDouble1_name = "opDouble1";
const ::std::string iceC_Test_MyClass_opString1_name = "opString1";
const ::std::string iceC_Test_MyClass_opStringS1_name = "opStringS1";
const ::std::string iceC_Test_MyClass_opByteBoolD1_name = "opByteBoolD1";
const ::std::string iceC_Test_MyClass_opStringS2_name = "opStringS2";
const ::std::string iceC_Test_MyClass_opByteBoolD2_name = "opByteBoolD2";
const ::std::string iceC_Test_MyClass_opStringLiterals_name = "opStringLiterals";
const ::std::string iceC_Test_MyClass_opWStringLiterals_name = "opWStringLiterals";
const ::std::string iceC_Test_MyClass_opMStruct1_name = "opMStruct1";
const ::std::string iceC_Test_MyClass_opMStruct2_name = "opMStruct2";
const ::std::string iceC_Test_MyClass_opMSeq1_name = "opMSeq1";
const ::std::string iceC_Test_MyClass_opMSeq2_name = "opMSeq2";
const ::std::string iceC_Test_MyClass_opMDict1_name = "opMDict1";
const ::std::string iceC_Test_MyClass_opMDict2_name = "opMDict2";

const ::IceInternal::DefaultValueFactoryInit<::Test::MyClass1> iceC_Test_MyClass1_init("::Test::MyClass1");

const ::std::string iceC_Test_MyDerivedClass_ids[3] =
{
    "::Ice::Object",
    "::Test::MyClass",
    "::Test::MyDerivedClass"
};
const ::std::string iceC_Test_MyDerivedClass_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opBool",
    "opBoolBoolSD",
    "opBoolS",
    "opBoolSS",
    "opByte",
    "opByte1",
    "opByteBoolD",
    "opByteBoolD1",
    "opByteBoolD2",
    "opByteBoolDS",
    "opByteByteSD",
    "opByteS",
    "opByteSOneway",
    "opByteSOnewayCallCount",
    "opByteSS",
    "opContext",
    "opDerived",
    "opDouble1",
    "opDoubleMarshaling",
    "opFloat1",
    "opFloatDouble",
    "opFloatDoubleS",
    "opFloatDoubleSS",
    "opIdempotent",
    "opInt1",
    "opIntIntSD",
    "opIntS",
    "opLong1",
    "opLongFloatD",
    "opLongFloatDS",
    "opLongLongSD",
    "opMDict1",
    "opMDict2",
    "opMSeq1",
    "opMSeq2",
    "opMStruct1",
    "opMStruct2",
    "opMyClass",
    "opMyClass1",
    "opMyEnum",
    "opMyEnumMyEnumSD",
    "opMyEnumStringD",
    "opMyEnumStringDS",
    "opMyStruct1",
    "opMyStructMyEnumD",
    "opMyStructMyEnumDS",
    "opNonmutating",
    "opShort1",
    "opShortIntD",
    "opShortIntDS",
    "opShortIntLong",
    "opShortIntLongS",
    "opShortIntLongSS",
    "opShortShortSD",
    "opString",
    "opString1",
    "opStringDoubleSD",
    "opStringFloatSD",
    "opStringLiterals",
    "opStringMyEnumD",
    "opStringMyEnumDS",
    "opStringS",
    "opStringS1",
    "opStringS2",
    "opStringSS",
    "opStringSSS",
    "opStringStringD",
    "opStringStringDS",
    "opStringStringSD",
    "opStruct",
    "opVoid",
    "opWStringLiterals",
    "shutdown"
};
const ::std::string iceC_Test_MyDerivedClass_opDerived_name = "opDerived";
const ::std::string iceC_Test_MyDerivedClass_opMyClass1_name = "opMyClass1";
const ::std::string iceC_Test_MyDerivedClass_opMyStruct1_name = "opMyStruct1";

}

bool
Test::MyClass::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MyClass_ids, iceC_Test_MyClass_ids + 2, s);
}

::std::vector<::std::string>
Test::MyClass::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_MyClass_ids[0], &iceC_Test_MyClass_ids[2]);
}

::std::string
Test::MyClass::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MyClass::ice_staticId()
{
    static const ::std::string typeId = "::Test::MyClass";
    return typeId;
}

/// \cond INTERNAL
bool
Test::MyClass::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->shutdownAsync(inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opVoid(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opVoidAsync(inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opByte(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Ice::Byte iceP_p1;
    ::Ice::Byte iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](::Ice::Byte ret, ::Ice::Byte iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opByteAsync(iceP_p1, iceP_p2, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opBool(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    bool iceP_p1;
    bool iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](bool ret, bool iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opBoolAsync(iceP_p1, iceP_p2, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opShortIntLong(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    short iceP_p1;
    int iceP_p2;
    long long int iceP_p3;
    istr->readAll(iceP_p1, iceP_p2, iceP_p3);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](long long int ret, short iceP_p4, int iceP_p5, long long int iceP_p6)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p4, iceP_p5, iceP_p6, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opShortIntLongAsync(iceP_p1, iceP_p2, iceP_p3, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opFloatDouble(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    float iceP_p1;
    double iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](double ret, float iceP_p3, double iceP_p4)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, iceP_p4, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opFloatDoubleAsync(iceP_p1, iceP_p2, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opString(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_p1;
    ::std::string iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ::std::string& ret, const ::std::string& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opStringAsync(::std::move(iceP_p1), ::std::move(iceP_p2), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMyEnum(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    MyEnum iceP_p1;
    istr->readAll(iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](MyEnum ret, MyEnum iceP_p2)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p2, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opMyEnumAsync(iceP_p1, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMyClass(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<MyClassPrx> iceP_p1;
    istr->readAll(iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ::std::shared_ptr<MyClassPrx>& ret, const ::std::shared_ptr<MyClassPrx>& iceP_p2, const ::std::shared_ptr<MyClassPrx>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p2, iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opMyClassAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStruct(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Structure iceP_p1;
    Structure iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const Structure& ret, const Structure& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opStructAsync(::std::move(iceP_p1), ::std::move(iceP_p2), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opByteS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ByteS iceP_p1;
    ByteS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ByteS& ret, const ByteS& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opByteSAsync(::std::move(iceP_p1), ::std::move(iceP_p2), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opBoolS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    BoolS iceP_p1;
    BoolS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const BoolS& ret, const BoolS& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opBoolSAsync(::std::move(iceP_p1), ::std::move(iceP_p2), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opShortIntLongS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ShortS iceP_p1;
    IntS iceP_p2;
    LongS iceP_p3;
    istr->readAll(iceP_p1, iceP_p2, iceP_p3);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const LongS& ret, const ShortS& iceP_p4, const IntS& iceP_p5, const LongS& iceP_p6)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p4, iceP_p5, iceP_p6, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opShortIntLongSAsync(::std::move(iceP_p1), ::std::move(iceP_p2), ::std::move(iceP_p3), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opFloatDoubleS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    FloatS iceP_p1;
    DoubleS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const DoubleS& ret, const FloatS& iceP_p3, const DoubleS& iceP_p4)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, iceP_p4, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opFloatDoubleSAsync(::std::move(iceP_p1), ::std::move(iceP_p2), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    StringS iceP_p1;
    StringS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const StringS& ret, const StringS& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opStringSAsync(::std::move(iceP_p1), ::std::move(iceP_p2), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opByteSS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ByteSS iceP_p1;
    ByteSS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ByteSS& ret, const ByteSS& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opByteSSAsync(::std::move(iceP_p1), ::std::move(iceP_p2), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opBoolSS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    BoolSS iceP_p1;
    BoolSS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const BoolSS& ret, const BoolSS& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opBoolSSAsync(::std::move(iceP_p1), ::std::move(iceP_p2), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opShortIntLongSS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ShortSS iceP_p1;
    IntSS iceP_p2;
    LongSS iceP_p3;
    istr->readAll(iceP_p1, iceP_p2, iceP_p3);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const LongSS& ret, const ShortSS& iceP_p4, const IntSS& iceP_p5, const LongSS& iceP_p6)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p4, iceP_p5, iceP_p6, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opShortIntLongSSAsync(::std::move(iceP_p1), ::std::move(iceP_p2), ::std::move(iceP_p3), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opFloatDoubleSS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    FloatSS iceP_p1;
    DoubleSS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const DoubleSS& ret, const FloatSS& iceP_p3, const DoubleSS& iceP_p4)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, iceP_p4, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opFloatDoubleSSAsync(::std::move(iceP_p1), ::std::move(iceP_p2), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringSS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    StringSS iceP_p1;
    StringSS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const StringSS& ret, const StringSS& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opStringSSAsync(::std::move(iceP_p1), ::std::move(iceP_p2), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringSSS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    StringSSS iceP_p1;
    StringSSS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const StringSSS& ret, const StringSSS& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opStringSSSAsync(::std::move(iceP_p1), ::std::move(iceP_p2), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opByteBoolD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ByteBoolD iceP_p1;
    ByteBoolD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ByteBoolD& ret, const ByteBoolD& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opByteBoolDAsync(::std::move(iceP_p1), ::std::move(iceP_p2), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opShortIntD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ShortIntD iceP_p1;
    ShortIntD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ShortIntD& ret, const ShortIntD& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opShortIntDAsync(::std::move(iceP_p1), ::std::move(iceP_p2), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opLongFloatD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    LongFloatD iceP_p1;
    LongFloatD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const LongFloatD& ret, const LongFloatD& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opLongFloatDAsync(::std::move(iceP_p1), ::std::move(iceP_p2), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringStringD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    StringStringD iceP_p1;
    StringStringD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const StringStringD& ret, const StringStringD& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opStringStringDAsync(::std::move(iceP_p1), ::std::move(iceP_p2), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringMyEnumD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    StringMyEnumD iceP_p1;
    StringMyEnumD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const StringMyEnumD& ret, const StringMyEnumD& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opStringMyEnumDAsync(::std::move(iceP_p1), ::std::move(iceP_p2), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMyEnumStringD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    MyEnumStringD iceP_p1;
    MyEnumStringD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const MyEnumStringD& ret, const MyEnumStringD& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opMyEnumStringDAsync(::std::move(iceP_p1), ::std::move(iceP_p2), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMyStructMyEnumD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    MyStructMyEnumD iceP_p1;
    MyStructMyEnumD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const MyStructMyEnumD& ret, const MyStructMyEnumD& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opMyStructMyEnumDAsync(::std::move(iceP_p1), ::std::move(iceP_p2), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opByteBoolDS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ByteBoolDS iceP_p1;
    ByteBoolDS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ByteBoolDS& ret, const ByteBoolDS& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opByteBoolDSAsync(::std::move(iceP_p1), ::std::move(iceP_p2), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opShortIntDS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ShortIntDS iceP_p1;
    ShortIntDS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ShortIntDS& ret, const ShortIntDS& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opShortIntDSAsync(::std::move(iceP_p1), ::std::move(iceP_p2), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opLongFloatDS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    LongFloatDS iceP_p1;
    LongFloatDS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const LongFloatDS& ret, const LongFloatDS& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opLongFloatDSAsync(::std::move(iceP_p1), ::std::move(iceP_p2), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringStringDS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    StringStringDS iceP_p1;
    StringStringDS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const StringStringDS& ret, const StringStringDS& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opStringStringDSAsync(::std::move(iceP_p1), ::std::move(iceP_p2), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringMyEnumDS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    StringMyEnumDS iceP_p1;
    StringMyEnumDS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const StringMyEnumDS& ret, const StringMyEnumDS& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opStringMyEnumDSAsync(::std::move(iceP_p1), ::std::move(iceP_p2), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMyEnumStringDS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    MyEnumStringDS iceP_p1;
    MyEnumStringDS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const MyEnumStringDS& ret, const MyEnumStringDS& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opMyEnumStringDSAsync(::std::move(iceP_p1), ::std::move(iceP_p2), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMyStructMyEnumDS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    MyStructMyEnumDS iceP_p1;
    MyStructMyEnumDS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const MyStructMyEnumDS& ret, const MyStructMyEnumDS& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opMyStructMyEnumDSAsync(::std::move(iceP_p1), ::std::move(iceP_p2), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opByteByteSD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ByteByteSD iceP_p1;
    ByteByteSD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ByteByteSD& ret, const ByteByteSD& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opByteByteSDAsync(::std::move(iceP_p1), ::std::move(iceP_p2), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opBoolBoolSD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    BoolBoolSD iceP_p1;
    BoolBoolSD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const BoolBoolSD& ret, const BoolBoolSD& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opBoolBoolSDAsync(::std::move(iceP_p1), ::std::move(iceP_p2), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opShortShortSD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ShortShortSD iceP_p1;
    ShortShortSD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ShortShortSD& ret, const ShortShortSD& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opShortShortSDAsync(::std::move(iceP_p1), ::std::move(iceP_p2), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opIntIntSD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    IntIntSD iceP_p1;
    IntIntSD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const IntIntSD& ret, const IntIntSD& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opIntIntSDAsync(::std::move(iceP_p1), ::std::move(iceP_p2), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opLongLongSD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    LongLongSD iceP_p1;
    LongLongSD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const LongLongSD& ret, const LongLongSD& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opLongLongSDAsync(::std::move(iceP_p1), ::std::move(iceP_p2), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringFloatSD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    StringFloatSD iceP_p1;
    StringFloatSD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const StringFloatSD& ret, const StringFloatSD& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opStringFloatSDAsync(::std::move(iceP_p1), ::std::move(iceP_p2), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringDoubleSD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    StringDoubleSD iceP_p1;
    StringDoubleSD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const StringDoubleSD& ret, const StringDoubleSD& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opStringDoubleSDAsync(::std::move(iceP_p1), ::std::move(iceP_p2), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringStringSD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    StringStringSD iceP_p1;
    StringStringSD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const StringStringSD& ret, const StringStringSD& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opStringStringSDAsync(::std::move(iceP_p1), ::std::move(iceP_p2), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMyEnumMyEnumSD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    MyEnumMyEnumSD iceP_p1;
    MyEnumMyEnumSD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const MyEnumMyEnumSD& ret, const MyEnumMyEnumSD& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opMyEnumMyEnumSDAsync(::std::move(iceP_p1), ::std::move(iceP_p2), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opIntS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    IntS iceP_s;
    istr->readAll(iceP_s);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const IntS& ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opIntSAsync(::std::move(iceP_s), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opByteSOneway(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ByteS iceP_s;
    istr->readAll(iceP_s);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opByteSOnewayAsync(::std::move(iceP_s), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opByteSOnewayCallCount(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opByteSOnewayCallCountAsync(responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opContext(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ::Ice::Context& ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opContextAsync(responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opDoubleMarshaling(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    double iceP_p1;
    DoubleS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opDoubleMarshalingAsync(iceP_p1, ::std::move(iceP_p2), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opIdempotent(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opIdempotentAsync(inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opNonmutating(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opNonmutatingAsync(inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opByte1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Ice::Byte iceP_opByte1;
    istr->readAll(iceP_opByte1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](::Ice::Byte ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opByte1Async(iceP_opByte1, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opShort1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    short iceP_opShort1;
    istr->readAll(iceP_opShort1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](short ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opShort1Async(iceP_opShort1, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opInt1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_opInt1;
    istr->readAll(iceP_opInt1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opInt1Async(iceP_opInt1, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opLong1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    long long int iceP_opLong1;
    istr->readAll(iceP_opLong1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](long long int ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opLong1Async(iceP_opLong1, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opFloat1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    float iceP_opFloat1;
    istr->readAll(iceP_opFloat1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](float ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opFloat1Async(iceP_opFloat1, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opDouble1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    double iceP_opDouble1;
    istr->readAll(iceP_opDouble1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](double ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opDouble1Async(iceP_opDouble1, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opString1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_opString1;
    istr->readAll(iceP_opString1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ::std::string& ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opString1Async(::std::move(iceP_opString1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringS1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    StringS iceP_opStringS1;
    istr->readAll(iceP_opStringS1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const StringS& ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opStringS1Async(::std::move(iceP_opStringS1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opByteBoolD1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ByteBoolD iceP_opByteBoolD1;
    istr->readAll(iceP_opByteBoolD1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ByteBoolD& ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opByteBoolD1Async(::std::move(iceP_opByteBoolD1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringS2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    StringS iceP_stringS;
    istr->readAll(iceP_stringS);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const StringS& ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opStringS2Async(::std::move(iceP_stringS), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opByteBoolD2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ByteBoolD iceP_byteBoolD;
    istr->readAll(iceP_byteBoolD);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ByteBoolD& ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opByteBoolD2Async(::std::move(iceP_byteBoolD), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringLiterals(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const StringS& ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opStringLiteralsAsync(responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opWStringLiterals(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const WStringS& ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opWStringLiteralsAsync(responseCB, inA->exception(), current);
    return false;
}
/// \endcond

Test::MyClass::OpMStruct1MarshaledResult::OpMStruct1MarshaledResult(const Structure& ret, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll(ret);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMStruct1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opMStruct1Async(inA->response<OpMStruct1MarshaledResult>(), inA->exception(), current);
    return false;
}
/// \endcond

Test::MyClass::OpMStruct2MarshaledResult::OpMStruct2MarshaledResult(const Structure& ret, const Structure& iceP_p2, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll(iceP_p2, ret);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMStruct2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Structure iceP_p1;
    istr->readAll(iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opMStruct2Async(::std::move(iceP_p1), inA->response<OpMStruct2MarshaledResult>(), inA->exception(), current);
    return false;
}
/// \endcond

Test::MyClass::OpMSeq1MarshaledResult::OpMSeq1MarshaledResult(const StringS& ret, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll(ret);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMSeq1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opMSeq1Async(inA->response<OpMSeq1MarshaledResult>(), inA->exception(), current);
    return false;
}
/// \endcond

Test::MyClass::OpMSeq2MarshaledResult::OpMSeq2MarshaledResult(const StringS& ret, const StringS& iceP_p2, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll(iceP_p2, ret);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMSeq2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    StringS iceP_p1;
    istr->readAll(iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opMSeq2Async(::std::move(iceP_p1), inA->response<OpMSeq2MarshaledResult>(), inA->exception(), current);
    return false;
}
/// \endcond

Test::MyClass::OpMDict1MarshaledResult::OpMDict1MarshaledResult(const StringStringD& ret, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll(ret);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMDict1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opMDict1Async(inA->response<OpMDict1MarshaledResult>(), inA->exception(), current);
    return false;
}
/// \endcond

Test::MyClass::OpMDict2MarshaledResult::OpMDict2MarshaledResult(const StringStringD& ret, const StringStringD& iceP_p2, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll(iceP_p2, ret);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMDict2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    StringStringD iceP_p1;
    istr->readAll(iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opMDict2Async(::std::move(iceP_p1), inA->response<OpMDict2MarshaledResult>(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_MyClass_ops, iceC_Test_MyClass_ops + 74, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_MyClass_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opBool(in, current);
        }
        case 5:
        {
            return _iceD_opBoolBoolSD(in, current);
        }
        case 6:
        {
            return _iceD_opBoolS(in, current);
        }
        case 7:
        {
            return _iceD_opBoolSS(in, current);
        }
        case 8:
        {
            return _iceD_opByte(in, current);
        }
        case 9:
        {
            return _iceD_opByte1(in, current);
        }
        case 10:
        {
            return _iceD_opByteBoolD(in, current);
        }
        case 11:
        {
            return _iceD_opByteBoolD1(in, current);
        }
        case 12:
        {
            return _iceD_opByteBoolD2(in, current);
        }
        case 13:
        {
            return _iceD_opByteBoolDS(in, current);
        }
        case 14:
        {
            return _iceD_opByteByteSD(in, current);
        }
        case 15:
        {
            return _iceD_opByteS(in, current);
        }
        case 16:
        {
            return _iceD_opByteSOneway(in, current);
        }
        case 17:
        {
            return _iceD_opByteSOnewayCallCount(in, current);
        }
        case 18:
        {
            return _iceD_opByteSS(in, current);
        }
        case 19:
        {
            return _iceD_opContext(in, current);
        }
        case 20:
        {
            return _iceD_opDouble1(in, current);
        }
        case 21:
        {
            return _iceD_opDoubleMarshaling(in, current);
        }
        case 22:
        {
            return _iceD_opFloat1(in, current);
        }
        case 23:
        {
            return _iceD_opFloatDouble(in, current);
        }
        case 24:
        {
            return _iceD_opFloatDoubleS(in, current);
        }
        case 25:
        {
            return _iceD_opFloatDoubleSS(in, current);
        }
        case 26:
        {
            return _iceD_opIdempotent(in, current);
        }
        case 27:
        {
            return _iceD_opInt1(in, current);
        }
        case 28:
        {
            return _iceD_opIntIntSD(in, current);
        }
        case 29:
        {
            return _iceD_opIntS(in, current);
        }
        case 30:
        {
            return _iceD_opLong1(in, current);
        }
        case 31:
        {
            return _iceD_opLongFloatD(in, current);
        }
        case 32:
        {
            return _iceD_opLongFloatDS(in, current);
        }
        case 33:
        {
            return _iceD_opLongLongSD(in, current);
        }
        case 34:
        {
            return _iceD_opMDict1(in, current);
        }
        case 35:
        {
            return _iceD_opMDict2(in, current);
        }
        case 36:
        {
            return _iceD_opMSeq1(in, current);
        }
        case 37:
        {
            return _iceD_opMSeq2(in, current);
        }
        case 38:
        {
            return _iceD_opMStruct1(in, current);
        }
        case 39:
        {
            return _iceD_opMStruct2(in, current);
        }
        case 40:
        {
            return _iceD_opMyClass(in, current);
        }
        case 41:
        {
            return _iceD_opMyEnum(in, current);
        }
        case 42:
        {
            return _iceD_opMyEnumMyEnumSD(in, current);
        }
        case 43:
        {
            return _iceD_opMyEnumStringD(in, current);
        }
        case 44:
        {
            return _iceD_opMyEnumStringDS(in, current);
        }
        case 45:
        {
            return _iceD_opMyStructMyEnumD(in, current);
        }
        case 46:
        {
            return _iceD_opMyStructMyEnumDS(in, current);
        }
        case 47:
        {
            return _iceD_opNonmutating(in, current);
        }
        case 48:
        {
            return _iceD_opShort1(in, current);
        }
        case 49:
        {
            return _iceD_opShortIntD(in, current);
        }
        case 50:
        {
            return _iceD_opShortIntDS(in, current);
        }
        case 51:
        {
            return _iceD_opShortIntLong(in, current);
        }
        case 52:
        {
            return _iceD_opShortIntLongS(in, current);
        }
        case 53:
        {
            return _iceD_opShortIntLongSS(in, current);
        }
        case 54:
        {
            return _iceD_opShortShortSD(in, current);
        }
        case 55:
        {
            return _iceD_opString(in, current);
        }
        case 56:
        {
            return _iceD_opString1(in, current);
        }
        case 57:
        {
            return _iceD_opStringDoubleSD(in, current);
        }
        case 58:
        {
            return _iceD_opStringFloatSD(in, current);
        }
        case 59:
        {
            return _iceD_opStringLiterals(in, current);
        }
        case 60:
        {
            return _iceD_opStringMyEnumD(in, current);
        }
        case 61:
        {
            return _iceD_opStringMyEnumDS(in, current);
        }
        case 62:
        {
            return _iceD_opStringS(in, current);
        }
        case 63:
        {
            return _iceD_opStringS1(in, current);
        }
        case 64:
        {
            return _iceD_opStringS2(in, current);
        }
        case 65:
        {
            return _iceD_opStringSS(in, current);
        }
        case 66:
        {
            return _iceD_opStringSSS(in, current);
        }
        case 67:
        {
            return _iceD_opStringStringD(in, current);
        }
        case 68:
        {
            return _iceD_opStringStringDS(in, current);
        }
        case 69:
        {
            return _iceD_opStringStringSD(in, current);
        }
        case 70:
        {
            return _iceD_opStruct(in, current);
        }
        case 71:
        {
            return _iceD_opVoid(in, current);
        }
        case 72:
        {
            return _iceD_opWStringLiterals(in, current);
        }
        case 73:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::MyDerivedClass::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MyDerivedClass_ids, iceC_Test_MyDerivedClass_ids + 3, s);
}

::std::vector<::std::string>
Test::MyDerivedClass::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_MyDerivedClass_ids[0], &iceC_Test_MyDerivedClass_ids[3]);
}

::std::string
Test::MyDerivedClass::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MyDerivedClass::ice_staticId()
{
    static const ::std::string typeId = "::Test::MyDerivedClass";
    return typeId;
}

/// \cond INTERNAL
bool
Test::MyDerivedClass::_iceD_opDerived(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opDerivedAsync(inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyDerivedClass::_iceD_opMyClass1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<MyClass1> iceP_opMyClass1;
    istr->readAll(iceP_opMyClass1);
    istr->readPendingValues();
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ::std::shared_ptr<MyClass1>& ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        ostr->writePendingValues();
        inA->endWriteParams();
        inA->completed();
    };
    this->opMyClass1Async(::std::move(iceP_opMyClass1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyDerivedClass::_iceD_opMyStruct1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    MyStruct1 iceP_opMyStruct1;
    istr->readAll(iceP_opMyStruct1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const MyStruct1& ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opMyStruct1Async(::std::move(iceP_opMyStruct1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyDerivedClass::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_MyDerivedClass_ops, iceC_Test_MyDerivedClass_ops + 77, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_MyDerivedClass_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opBool(in, current);
        }
        case 5:
        {
            return _iceD_opBoolBoolSD(in, current);
        }
        case 6:
        {
            return _iceD_opBoolS(in, current);
        }
        case 7:
        {
            return _iceD_opBoolSS(in, current);
        }
        case 8:
        {
            return _iceD_opByte(in, current);
        }
        case 9:
        {
            return _iceD_opByte1(in, current);
        }
        case 10:
        {
            return _iceD_opByteBoolD(in, current);
        }
        case 11:
        {
            return _iceD_opByteBoolD1(in, current);
        }
        case 12:
        {
            return _iceD_opByteBoolD2(in, current);
        }
        case 13:
        {
            return _iceD_opByteBoolDS(in, current);
        }
        case 14:
        {
            return _iceD_opByteByteSD(in, current);
        }
        case 15:
        {
            return _iceD_opByteS(in, current);
        }
        case 16:
        {
            return _iceD_opByteSOneway(in, current);
        }
        case 17:
        {
            return _iceD_opByteSOnewayCallCount(in, current);
        }
        case 18:
        {
            return _iceD_opByteSS(in, current);
        }
        case 19:
        {
            return _iceD_opContext(in, current);
        }
        case 20:
        {
            return _iceD_opDerived(in, current);
        }
        case 21:
        {
            return _iceD_opDouble1(in, current);
        }
        case 22:
        {
            return _iceD_opDoubleMarshaling(in, current);
        }
        case 23:
        {
            return _iceD_opFloat1(in, current);
        }
        case 24:
        {
            return _iceD_opFloatDouble(in, current);
        }
        case 25:
        {
            return _iceD_opFloatDoubleS(in, current);
        }
        case 26:
        {
            return _iceD_opFloatDoubleSS(in, current);
        }
        case 27:
        {
            return _iceD_opIdempotent(in, current);
        }
        case 28:
        {
            return _iceD_opInt1(in, current);
        }
        case 29:
        {
            return _iceD_opIntIntSD(in, current);
        }
        case 30:
        {
            return _iceD_opIntS(in, current);
        }
        case 31:
        {
            return _iceD_opLong1(in, current);
        }
        case 32:
        {
            return _iceD_opLongFloatD(in, current);
        }
        case 33:
        {
            return _iceD_opLongFloatDS(in, current);
        }
        case 34:
        {
            return _iceD_opLongLongSD(in, current);
        }
        case 35:
        {
            return _iceD_opMDict1(in, current);
        }
        case 36:
        {
            return _iceD_opMDict2(in, current);
        }
        case 37:
        {
            return _iceD_opMSeq1(in, current);
        }
        case 38:
        {
            return _iceD_opMSeq2(in, current);
        }
        case 39:
        {
            return _iceD_opMStruct1(in, current);
        }
        case 40:
        {
            return _iceD_opMStruct2(in, current);
        }
        case 41:
        {
            return _iceD_opMyClass(in, current);
        }
        case 42:
        {
            return _iceD_opMyClass1(in, current);
        }
        case 43:
        {
            return _iceD_opMyEnum(in, current);
        }
        case 44:
        {
            return _iceD_opMyEnumMyEnumSD(in, current);
        }
        case 45:
        {
            return _iceD_opMyEnumStringD(in, current);
        }
        case 46:
        {
            return _iceD_opMyEnumStringDS(in, current);
        }
        case 47:
        {
            return _iceD_opMyStruct1(in, current);
        }
        case 48:
        {
            return _iceD_opMyStructMyEnumD(in, current);
        }
        case 49:
        {
            return _iceD_opMyStructMyEnumDS(in, current);
        }
        case 50:
        {
            return _iceD_opNonmutating(in, current);
        }
        case 51:
        {
            return _iceD_opShort1(in, current);
        }
        case 52:
        {
            return _iceD_opShortIntD(in, current);
        }
        case 53:
        {
            return _iceD_opShortIntDS(in, current);
        }
        case 54:
        {
            return _iceD_opShortIntLong(in, current);
        }
        case 55:
        {
            return _iceD_opShortIntLongS(in, current);
        }
        case 56:
        {
            return _iceD_opShortIntLongSS(in, current);
        }
        case 57:
        {
            return _iceD_opShortShortSD(in, current);
        }
        case 58:
        {
            return _iceD_opString(in, current);
        }
        case 59:
        {
            return _iceD_opString1(in, current);
        }
        case 60:
        {
            return _iceD_opStringDoubleSD(in, current);
        }
        case 61:
        {
            return _iceD_opStringFloatSD(in, current);
        }
        case 62:
        {
            return _iceD_opStringLiterals(in, current);
        }
        case 63:
        {
            return _iceD_opStringMyEnumD(in, current);
        }
        case 64:
        {
            return _iceD_opStringMyEnumDS(in, current);
        }
        case 65:
        {
            return _iceD_opStringS(in, current);
        }
        case 66:
        {
            return _iceD_opStringS1(in, current);
        }
        case 67:
        {
            return _iceD_opStringS2(in, current);
        }
        case 68:
        {
            return _iceD_opStringSS(in, current);
        }
        case 69:
        {
            return _iceD_opStringSSS(in, current);
        }
        case 70:
        {
            return _iceD_opStringStringD(in, current);
        }
        case 71:
        {
            return _iceD_opStringStringDS(in, current);
        }
        case 72:
        {
            return _iceD_opStringStringSD(in, current);
        }
        case 73:
        {
            return _iceD_opStruct(in, current);
        }
        case 74:
        {
            return _iceD_opVoid(in, current);
        }
        case 75:
        {
            return _iceD_opWStringLiterals(in, current);
        }
        case 76:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::MyClass1::~MyClass1()
{
}

const ::std::string&
Test::MyClass1::ice_staticId()
{
    static const ::std::string typeId = "::Test::MyClass1";
    return typeId;
}

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_MyClass_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opVoid(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_MyClass_opVoid_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opByte(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpByteResult>>& outAsync, ::Ice::Byte iceP_p1, ::Ice::Byte iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opByte_name);
    outAsync->invoke(iceC_Test_MyClass_opByte_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpByteResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opBool(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpBoolResult>>& outAsync, bool iceP_p1, bool iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opBool_name);
    outAsync->invoke(iceC_Test_MyClass_opBool_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpBoolResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opShortIntLong(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpShortIntLongResult>>& outAsync, short iceP_p1, int iceP_p2, long long int iceP_p3, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opShortIntLong_name);
    outAsync->invoke(iceC_Test_MyClass_opShortIntLong_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2, iceP_p3);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpShortIntLongResult v;
            istr->readAll(v.p4, v.p5, v.p6, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opFloatDouble(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpFloatDoubleResult>>& outAsync, float iceP_p1, double iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opFloatDouble_name);
    outAsync->invoke(iceC_Test_MyClass_opFloatDouble_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpFloatDoubleResult v;
            istr->readAll(v.p3, v.p4, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opString(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpStringResult>>& outAsync, const ::std::string& iceP_p1, const ::std::string& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opString_name);
    outAsync->invoke(iceC_Test_MyClass_opString_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpStringResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opMyEnum(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpMyEnumResult>>& outAsync, MyEnum iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMyEnum_name);
    outAsync->invoke(iceC_Test_MyClass_opMyEnum_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpMyEnumResult v;
            istr->readAll(v.p2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opMyClass(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpMyClassResult>>& outAsync, const ::std::shared_ptr<MyClassPrx>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMyClass_name);
    outAsync->invoke(iceC_Test_MyClass_opMyClass_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpMyClassResult v;
            istr->readAll(v.p2, v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opStruct(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpStructResult>>& outAsync, const Structure& iceP_p1, const Structure& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStruct_name);
    outAsync->invoke(iceC_Test_MyClass_opStruct_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpStructResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opByteS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpByteSResult>>& outAsync, const ByteS& iceP_p1, const ByteS& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opByteS_name);
    outAsync->invoke(iceC_Test_MyClass_opByteS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpByteSResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opBoolS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpBoolSResult>>& outAsync, const BoolS& iceP_p1, const BoolS& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opBoolS_name);
    outAsync->invoke(iceC_Test_MyClass_opBoolS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpBoolSResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opShortIntLongS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpShortIntLongSResult>>& outAsync, const ShortS& iceP_p1, const IntS& iceP_p2, const LongS& iceP_p3, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opShortIntLongS_name);
    outAsync->invoke(iceC_Test_MyClass_opShortIntLongS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2, iceP_p3);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpShortIntLongSResult v;
            istr->readAll(v.p4, v.p5, v.p6, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opFloatDoubleS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpFloatDoubleSResult>>& outAsync, const FloatS& iceP_p1, const DoubleS& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opFloatDoubleS_name);
    outAsync->invoke(iceC_Test_MyClass_opFloatDoubleS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpFloatDoubleSResult v;
            istr->readAll(v.p3, v.p4, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opStringS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpStringSResult>>& outAsync, const StringS& iceP_p1, const StringS& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringS_name);
    outAsync->invoke(iceC_Test_MyClass_opStringS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpStringSResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opByteSS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpByteSSResult>>& outAsync, const ByteSS& iceP_p1, const ByteSS& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opByteSS_name);
    outAsync->invoke(iceC_Test_MyClass_opByteSS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpByteSSResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opBoolSS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpBoolSSResult>>& outAsync, const BoolSS& iceP_p1, const BoolSS& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opBoolSS_name);
    outAsync->invoke(iceC_Test_MyClass_opBoolSS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpBoolSSResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opShortIntLongSS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpShortIntLongSSResult>>& outAsync, const ShortSS& iceP_p1, const IntSS& iceP_p2, const LongSS& iceP_p3, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opShortIntLongSS_name);
    outAsync->invoke(iceC_Test_MyClass_opShortIntLongSS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2, iceP_p3);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpShortIntLongSSResult v;
            istr->readAll(v.p4, v.p5, v.p6, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opFloatDoubleSS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpFloatDoubleSSResult>>& outAsync, const FloatSS& iceP_p1, const DoubleSS& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opFloatDoubleSS_name);
    outAsync->invoke(iceC_Test_MyClass_opFloatDoubleSS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpFloatDoubleSSResult v;
            istr->readAll(v.p3, v.p4, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opStringSS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpStringSSResult>>& outAsync, const StringSS& iceP_p1, const StringSS& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringSS_name);
    outAsync->invoke(iceC_Test_MyClass_opStringSS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpStringSSResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opStringSSS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpStringSSSResult>>& outAsync, const StringSSS& iceP_p1, const StringSSS& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringSSS_name);
    outAsync->invoke(iceC_Test_MyClass_opStringSSS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpStringSSSResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opByteBoolD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpByteBoolDResult>>& outAsync, const ByteBoolD& iceP_p1, const ByteBoolD& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opByteBoolD_name);
    outAsync->invoke(iceC_Test_MyClass_opByteBoolD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpByteBoolDResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opShortIntD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpShortIntDResult>>& outAsync, const ShortIntD& iceP_p1, const ShortIntD& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opShortIntD_name);
    outAsync->invoke(iceC_Test_MyClass_opShortIntD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpShortIntDResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opLongFloatD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpLongFloatDResult>>& outAsync, const LongFloatD& iceP_p1, const LongFloatD& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opLongFloatD_name);
    outAsync->invoke(iceC_Test_MyClass_opLongFloatD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpLongFloatDResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opStringStringD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpStringStringDResult>>& outAsync, const StringStringD& iceP_p1, const StringStringD& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringStringD_name);
    outAsync->invoke(iceC_Test_MyClass_opStringStringD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpStringStringDResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opStringMyEnumD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpStringMyEnumDResult>>& outAsync, const StringMyEnumD& iceP_p1, const StringMyEnumD& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringMyEnumD_name);
    outAsync->invoke(iceC_Test_MyClass_opStringMyEnumD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpStringMyEnumDResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opMyEnumStringD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpMyEnumStringDResult>>& outAsync, const MyEnumStringD& iceP_p1, const MyEnumStringD& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMyEnumStringD_name);
    outAsync->invoke(iceC_Test_MyClass_opMyEnumStringD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpMyEnumStringDResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opMyStructMyEnumD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpMyStructMyEnumDResult>>& outAsync, const MyStructMyEnumD& iceP_p1, const MyStructMyEnumD& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMyStructMyEnumD_name);
    outAsync->invoke(iceC_Test_MyClass_opMyStructMyEnumD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpMyStructMyEnumDResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opByteBoolDS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpByteBoolDSResult>>& outAsync, const ByteBoolDS& iceP_p1, const ByteBoolDS& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opByteBoolDS_name);
    outAsync->invoke(iceC_Test_MyClass_opByteBoolDS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpByteBoolDSResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opShortIntDS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpShortIntDSResult>>& outAsync, const ShortIntDS& iceP_p1, const ShortIntDS& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opShortIntDS_name);
    outAsync->invoke(iceC_Test_MyClass_opShortIntDS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpShortIntDSResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opLongFloatDS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpLongFloatDSResult>>& outAsync, const LongFloatDS& iceP_p1, const LongFloatDS& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opLongFloatDS_name);
    outAsync->invoke(iceC_Test_MyClass_opLongFloatDS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpLongFloatDSResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opStringStringDS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpStringStringDSResult>>& outAsync, const StringStringDS& iceP_p1, const StringStringDS& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringStringDS_name);
    outAsync->invoke(iceC_Test_MyClass_opStringStringDS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpStringStringDSResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opStringMyEnumDS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpStringMyEnumDSResult>>& outAsync, const StringMyEnumDS& iceP_p1, const StringMyEnumDS& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringMyEnumDS_name);
    outAsync->invoke(iceC_Test_MyClass_opStringMyEnumDS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpStringMyEnumDSResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opMyEnumStringDS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpMyEnumStringDSResult>>& outAsync, const MyEnumStringDS& iceP_p1, const MyEnumStringDS& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMyEnumStringDS_name);
    outAsync->invoke(iceC_Test_MyClass_opMyEnumStringDS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpMyEnumStringDSResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opMyStructMyEnumDS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpMyStructMyEnumDSResult>>& outAsync, const MyStructMyEnumDS& iceP_p1, const MyStructMyEnumDS& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMyStructMyEnumDS_name);
    outAsync->invoke(iceC_Test_MyClass_opMyStructMyEnumDS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpMyStructMyEnumDSResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opByteByteSD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpByteByteSDResult>>& outAsync, const ByteByteSD& iceP_p1, const ByteByteSD& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opByteByteSD_name);
    outAsync->invoke(iceC_Test_MyClass_opByteByteSD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpByteByteSDResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opBoolBoolSD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpBoolBoolSDResult>>& outAsync, const BoolBoolSD& iceP_p1, const BoolBoolSD& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opBoolBoolSD_name);
    outAsync->invoke(iceC_Test_MyClass_opBoolBoolSD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpBoolBoolSDResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opShortShortSD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpShortShortSDResult>>& outAsync, const ShortShortSD& iceP_p1, const ShortShortSD& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opShortShortSD_name);
    outAsync->invoke(iceC_Test_MyClass_opShortShortSD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpShortShortSDResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opIntIntSD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpIntIntSDResult>>& outAsync, const IntIntSD& iceP_p1, const IntIntSD& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opIntIntSD_name);
    outAsync->invoke(iceC_Test_MyClass_opIntIntSD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpIntIntSDResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opLongLongSD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpLongLongSDResult>>& outAsync, const LongLongSD& iceP_p1, const LongLongSD& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opLongLongSD_name);
    outAsync->invoke(iceC_Test_MyClass_opLongLongSD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpLongLongSDResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opStringFloatSD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpStringFloatSDResult>>& outAsync, const StringFloatSD& iceP_p1, const StringFloatSD& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringFloatSD_name);
    outAsync->invoke(iceC_Test_MyClass_opStringFloatSD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpStringFloatSDResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opStringDoubleSD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpStringDoubleSDResult>>& outAsync, const StringDoubleSD& iceP_p1, const StringDoubleSD& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringDoubleSD_name);
    outAsync->invoke(iceC_Test_MyClass_opStringDoubleSD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpStringDoubleSDResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opStringStringSD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpStringStringSDResult>>& outAsync, const StringStringSD& iceP_p1, const StringStringSD& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringStringSD_name);
    outAsync->invoke(iceC_Test_MyClass_opStringStringSD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpStringStringSDResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opMyEnumMyEnumSD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpMyEnumMyEnumSDResult>>& outAsync, const MyEnumMyEnumSD& iceP_p1, const MyEnumMyEnumSD& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMyEnumMyEnumSD_name);
    outAsync->invoke(iceC_Test_MyClass_opMyEnumMyEnumSD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpMyEnumMyEnumSDResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opIntS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::IntS>>& outAsync, const IntS& iceP_s, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opIntS_name);
    outAsync->invoke(iceC_Test_MyClass_opIntS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opByteSOneway(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ByteS& iceP_s, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_MyClass_opByteSOneway_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opByteSOnewayCallCount(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opByteSOnewayCallCount_name);
    outAsync->invoke(iceC_Test_MyClass_opByteSOnewayCallCount_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opContext(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Ice::Context>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opContext_name);
    outAsync->invoke(iceC_Test_MyClass_opContext_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opDoubleMarshaling(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, double iceP_p1, const DoubleS& iceP_p2, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_MyClass_opDoubleMarshaling_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opIdempotent(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_MyClass_opIdempotent_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opNonmutating(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_MyClass_opNonmutating_name, ::Ice::OperationMode::Nonmutating, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opByte1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Ice::Byte>>& outAsync, ::Ice::Byte iceP_opByte1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opByte1_name);
    outAsync->invoke(iceC_Test_MyClass_opByte1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_opByte1);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opShort1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<short>>& outAsync, short iceP_opShort1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opShort1_name);
    outAsync->invoke(iceC_Test_MyClass_opShort1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_opShort1);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opInt1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, int iceP_opInt1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opInt1_name);
    outAsync->invoke(iceC_Test_MyClass_opInt1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_opInt1);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opLong1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<long long int>>& outAsync, long long int iceP_opLong1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opLong1_name);
    outAsync->invoke(iceC_Test_MyClass_opLong1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_opLong1);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opFloat1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<float>>& outAsync, float iceP_opFloat1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opFloat1_name);
    outAsync->invoke(iceC_Test_MyClass_opFloat1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_opFloat1);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opDouble1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<double>>& outAsync, double iceP_opDouble1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opDouble1_name);
    outAsync->invoke(iceC_Test_MyClass_opDouble1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_opDouble1);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opString1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::std::string& iceP_opString1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opString1_name);
    outAsync->invoke(iceC_Test_MyClass_opString1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_opString1);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opStringS1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::StringS>>& outAsync, const StringS& iceP_opStringS1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringS1_name);
    outAsync->invoke(iceC_Test_MyClass_opStringS1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_opStringS1);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opByteBoolD1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::ByteBoolD>>& outAsync, const ByteBoolD& iceP_opByteBoolD1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opByteBoolD1_name);
    outAsync->invoke(iceC_Test_MyClass_opByteBoolD1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_opByteBoolD1);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opStringS2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::StringS>>& outAsync, const StringS& iceP_stringS, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringS2_name);
    outAsync->invoke(iceC_Test_MyClass_opStringS2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_stringS);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opByteBoolD2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::ByteBoolD>>& outAsync, const ByteBoolD& iceP_byteBoolD, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opByteBoolD2_name);
    outAsync->invoke(iceC_Test_MyClass_opByteBoolD2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_byteBoolD);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opStringLiterals(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::StringS>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringLiterals_name);
    outAsync->invoke(iceC_Test_MyClass_opStringLiterals_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opWStringLiterals(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::WStringS>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opWStringLiterals_name);
    outAsync->invoke(iceC_Test_MyClass_opWStringLiterals_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opMStruct1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::Structure>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMStruct1_name);
    outAsync->invoke(iceC_Test_MyClass_opMStruct1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opMStruct2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpMStruct2Result>>& outAsync, const Structure& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMStruct2_name);
    outAsync->invoke(iceC_Test_MyClass_opMStruct2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpMStruct2Result v;
            istr->readAll(v.p2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opMSeq1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::StringS>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMSeq1_name);
    outAsync->invoke(iceC_Test_MyClass_opMSeq1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opMSeq2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpMSeq2Result>>& outAsync, const StringS& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMSeq2_name);
    outAsync->invoke(iceC_Test_MyClass_opMSeq2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpMSeq2Result v;
            istr->readAll(v.p2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opMDict1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::StringStringD>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMDict1_name);
    outAsync->invoke(iceC_Test_MyClass_opMDict1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opMDict2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpMDict2Result>>& outAsync, const StringStringD& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMDict2_name);
    outAsync->invoke(iceC_Test_MyClass_opMDict2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpMDict2Result v;
            istr->readAll(v.p2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::MyClassPrx::_newInstance() const
{
    return ::IceInternal::createProxy<MyClassPrx>();
}
/// \endcond

const ::std::string&
Test::MyClassPrx::ice_staticId()
{
    return MyClass::ice_staticId();
}

/// \cond INTERNAL
void
Test::MyDerivedClassPrx::_iceI_opDerived(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_MyDerivedClass_opDerived_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyDerivedClassPrx::_iceI_opMyClass1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::MyClass1>>>& outAsync, const ::std::shared_ptr<MyClass1>& iceP_opMyClass1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyDerivedClass_opMyClass1_name);
    outAsync->invoke(iceC_Test_MyDerivedClass_opMyClass1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_opMyClass1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<MyClass1> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyDerivedClassPrx::_iceI_opMyStruct1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::MyStruct1>>& outAsync, const MyStruct1& iceP_opMyStruct1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyDerivedClass_opMyStruct1_name);
    outAsync->invoke(iceC_Test_MyDerivedClass_opMyStruct1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_opMyStruct1);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::MyDerivedClassPrx::_newInstance() const
{
    return ::IceInternal::createProxy<MyDerivedClassPrx>();
}
/// \endcond

const ::std::string&
Test::MyDerivedClassPrx::ice_staticId()
{
    return MyDerivedClass::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_Test_MyClass_shutdown_name = "shutdown";

const ::std::string iceC_Test_MyClass_opVoid_name = "opVoid";

const ::std::string iceC_Test_MyClass_opByte_name = "opByte";

const ::std::string iceC_Test_MyClass_opBool_name = "opBool";

const ::std::string iceC_Test_MyClass_opShortIntLong_name = "opShortIntLong";

const ::std::string iceC_Test_MyClass_opFloatDouble_name = "opFloatDouble";

const ::std::string iceC_Test_MyClass_opString_name = "opString";

const ::std::string iceC_Test_MyClass_opMyEnum_name = "opMyEnum";

const ::std::string iceC_Test_MyClass_opMyClass_name = "opMyClass";

const ::std::string iceC_Test_MyClass_opStruct_name = "opStruct";

const ::std::string iceC_Test_MyClass_opByteS_name = "opByteS";

const ::std::string iceC_Test_MyClass_opBoolS_name = "opBoolS";

const ::std::string iceC_Test_MyClass_opShortIntLongS_name = "opShortIntLongS";

const ::std::string iceC_Test_MyClass_opFloatDoubleS_name = "opFloatDoubleS";

const ::std::string iceC_Test_MyClass_opStringS_name = "opStringS";

const ::std::string iceC_Test_MyClass_opByteSS_name = "opByteSS";

const ::std::string iceC_Test_MyClass_opBoolSS_name = "opBoolSS";

const ::std::string iceC_Test_MyClass_opShortIntLongSS_name = "opShortIntLongSS";

const ::std::string iceC_Test_MyClass_opFloatDoubleSS_name = "opFloatDoubleSS";

const ::std::string iceC_Test_MyClass_opStringSS_name = "opStringSS";

const ::std::string iceC_Test_MyClass_opStringSSS_name = "opStringSSS";

const ::std::string iceC_Test_MyClass_opByteBoolD_name = "opByteBoolD";

const ::std::string iceC_Test_MyClass_opShortIntD_name = "opShortIntD";

const ::std::string iceC_Test_MyClass_opLongFloatD_name = "opLongFloatD";

const ::std::string iceC_Test_MyClass_opStringStringD_name = "opStringStringD";

const ::std::string iceC_Test_MyClass_opStringMyEnumD_name = "opStringMyEnumD";

const ::std::string iceC_Test_MyClass_opMyEnumStringD_name = "opMyEnumStringD";

const ::std::string iceC_Test_MyClass_opMyStructMyEnumD_name = "opMyStructMyEnumD";

const ::std::string iceC_Test_MyClass_opByteBoolDS_name = "opByteBoolDS";

const ::std::string iceC_Test_MyClass_opShortIntDS_name = "opShortIntDS";

const ::std::string iceC_Test_MyClass_opLongFloatDS_name = "opLongFloatDS";

const ::std::string iceC_Test_MyClass_opStringStringDS_name = "opStringStringDS";

const ::std::string iceC_Test_MyClass_opStringMyEnumDS_name = "opStringMyEnumDS";

const ::std::string iceC_Test_MyClass_opMyEnumStringDS_name = "opMyEnumStringDS";

const ::std::string iceC_Test_MyClass_opMyStructMyEnumDS_name = "opMyStructMyEnumDS";

const ::std::string iceC_Test_MyClass_opByteByteSD_name = "opByteByteSD";

const ::std::string iceC_Test_MyClass_opBoolBoolSD_name = "opBoolBoolSD";

const ::std::string iceC_Test_MyClass_opShortShortSD_name = "opShortShortSD";

const ::std::string iceC_Test_MyClass_opIntIntSD_name = "opIntIntSD";

const ::std::string iceC_Test_MyClass_opLongLongSD_name = "opLongLongSD";

const ::std::string iceC_Test_MyClass_opStringFloatSD_name = "opStringFloatSD";

const ::std::string iceC_Test_MyClass_opStringDoubleSD_name = "opStringDoubleSD";

const ::std::string iceC_Test_MyClass_opStringStringSD_name = "opStringStringSD";

const ::std::string iceC_Test_MyClass_opMyEnumMyEnumSD_name = "opMyEnumMyEnumSD";

const ::std::string iceC_Test_MyClass_opIntS_name = "opIntS";

const ::std::string iceC_Test_MyClass_opByteSOneway_name = "opByteSOneway";

const ::std::string iceC_Test_MyClass_opByteSOnewayCallCount_name = "opByteSOnewayCallCount";

const ::std::string iceC_Test_MyClass_opContext_name = "opContext";

const ::std::string iceC_Test_MyClass_opDoubleMarshaling_name = "opDoubleMarshaling";

const ::std::string iceC_Test_MyClass_opIdempotent_name = "opIdempotent";

const ::std::string iceC_Test_MyClass_opNonmutating_name = "opNonmutating";

const ::std::string iceC_Test_MyClass_opByte1_name = "opByte1";

const ::std::string iceC_Test_MyClass_opShort1_name = "opShort1";

const ::std::string iceC_Test_MyClass_opInt1_name = "opInt1";

const ::std::string iceC_Test_MyClass_opLong1_name = "opLong1";

const ::std::string iceC_Test_MyClass_opFloat1_name = "opFloat1";

const ::std::string iceC_Test_MyClass_opDouble1_name = "opDouble1";

const ::std::string iceC_Test_MyClass_opString1_name = "opString1";

const ::std::string iceC_Test_MyClass_opStringS1_name = "opStringS1";

const ::std::string iceC_Test_MyClass_opByteBoolD1_name = "opByteBoolD1";

const ::std::string iceC_Test_MyClass_opStringS2_name = "opStringS2";

const ::std::string iceC_Test_MyClass_opByteBoolD2_name = "opByteBoolD2";

const ::std::string iceC_Test_MyClass_opStringLiterals_name = "opStringLiterals";

const ::std::string iceC_Test_MyClass_opWStringLiterals_name = "opWStringLiterals";

const ::std::string iceC_Test_MyClass_opMStruct1_name = "opMStruct1";

const ::std::string iceC_Test_MyClass_opMStruct2_name = "opMStruct2";

const ::std::string iceC_Test_MyClass_opMSeq1_name = "opMSeq1";

const ::std::string iceC_Test_MyClass_opMSeq2_name = "opMSeq2";

const ::std::string iceC_Test_MyClass_opMDict1_name = "opMDict1";

const ::std::string iceC_Test_MyClass_opMDict2_name = "opMDict2";

const ::std::string iceC_Test_MyDerivedClass_opDerived_name = "opDerived";

const ::std::string iceC_Test_MyDerivedClass_opMyClass1_name = "opMyClass1";

const ::std::string iceC_Test_MyDerivedClass_opMyStruct1_name = "opMyStruct1";

}

Test::AMD_MyClass_shutdown::~AMD_MyClass_shutdown()
{
}

Test::AMD_MyClass_opVoid::~AMD_MyClass_opVoid()
{
}

Test::AMD_MyClass_opByte::~AMD_MyClass_opByte()
{
}

Test::AMD_MyClass_opBool::~AMD_MyClass_opBool()
{
}

Test::AMD_MyClass_opShortIntLong::~AMD_MyClass_opShortIntLong()
{
}

Test::AMD_MyClass_opFloatDouble::~AMD_MyClass_opFloatDouble()
{
}

Test::AMD_MyClass_opString::~AMD_MyClass_opString()
{
}

Test::AMD_MyClass_opMyEnum::~AMD_MyClass_opMyEnum()
{
}

Test::AMD_MyClass_opMyClass::~AMD_MyClass_opMyClass()
{
}

Test::AMD_MyClass_opStruct::~AMD_MyClass_opStruct()
{
}

Test::AMD_MyClass_opByteS::~AMD_MyClass_opByteS()
{
}

Test::AMD_MyClass_opBoolS::~AMD_MyClass_opBoolS()
{
}

Test::AMD_MyClass_opShortIntLongS::~AMD_MyClass_opShortIntLongS()
{
}

Test::AMD_MyClass_opFloatDoubleS::~AMD_MyClass_opFloatDoubleS()
{
}

Test::AMD_MyClass_opStringS::~AMD_MyClass_opStringS()
{
}

Test::AMD_MyClass_opByteSS::~AMD_MyClass_opByteSS()
{
}

Test::AMD_MyClass_opBoolSS::~AMD_MyClass_opBoolSS()
{
}

Test::AMD_MyClass_opShortIntLongSS::~AMD_MyClass_opShortIntLongSS()
{
}

Test::AMD_MyClass_opFloatDoubleSS::~AMD_MyClass_opFloatDoubleSS()
{
}

Test::AMD_MyClass_opStringSS::~AMD_MyClass_opStringSS()
{
}

Test::AMD_MyClass_opStringSSS::~AMD_MyClass_opStringSSS()
{
}

Test::AMD_MyClass_opByteBoolD::~AMD_MyClass_opByteBoolD()
{
}

Test::AMD_MyClass_opShortIntD::~AMD_MyClass_opShortIntD()
{
}

Test::AMD_MyClass_opLongFloatD::~AMD_MyClass_opLongFloatD()
{
}

Test::AMD_MyClass_opStringStringD::~AMD_MyClass_opStringStringD()
{
}

Test::AMD_MyClass_opStringMyEnumD::~AMD_MyClass_opStringMyEnumD()
{
}

Test::AMD_MyClass_opMyEnumStringD::~AMD_MyClass_opMyEnumStringD()
{
}

Test::AMD_MyClass_opMyStructMyEnumD::~AMD_MyClass_opMyStructMyEnumD()
{
}

Test::AMD_MyClass_opByteBoolDS::~AMD_MyClass_opByteBoolDS()
{
}

Test::AMD_MyClass_opShortIntDS::~AMD_MyClass_opShortIntDS()
{
}

Test::AMD_MyClass_opLongFloatDS::~AMD_MyClass_opLongFloatDS()
{
}

Test::AMD_MyClass_opStringStringDS::~AMD_MyClass_opStringStringDS()
{
}

Test::AMD_MyClass_opStringMyEnumDS::~AMD_MyClass_opStringMyEnumDS()
{
}

Test::AMD_MyClass_opMyEnumStringDS::~AMD_MyClass_opMyEnumStringDS()
{
}

Test::AMD_MyClass_opMyStructMyEnumDS::~AMD_MyClass_opMyStructMyEnumDS()
{
}

Test::AMD_MyClass_opByteByteSD::~AMD_MyClass_opByteByteSD()
{
}

Test::AMD_MyClass_opBoolBoolSD::~AMD_MyClass_opBoolBoolSD()
{
}

Test::AMD_MyClass_opShortShortSD::~AMD_MyClass_opShortShortSD()
{
}

Test::AMD_MyClass_opIntIntSD::~AMD_MyClass_opIntIntSD()
{
}

Test::AMD_MyClass_opLongLongSD::~AMD_MyClass_opLongLongSD()
{
}

Test::AMD_MyClass_opStringFloatSD::~AMD_MyClass_opStringFloatSD()
{
}

Test::AMD_MyClass_opStringDoubleSD::~AMD_MyClass_opStringDoubleSD()
{
}

Test::AMD_MyClass_opStringStringSD::~AMD_MyClass_opStringStringSD()
{
}

Test::AMD_MyClass_opMyEnumMyEnumSD::~AMD_MyClass_opMyEnumMyEnumSD()
{
}

Test::AMD_MyClass_opIntS::~AMD_MyClass_opIntS()
{
}

Test::AMD_MyClass_opByteSOneway::~AMD_MyClass_opByteSOneway()
{
}

Test::AMD_MyClass_opByteSOnewayCallCount::~AMD_MyClass_opByteSOnewayCallCount()
{
}

Test::AMD_MyClass_opContext::~AMD_MyClass_opContext()
{
}

Test::AMD_MyClass_opDoubleMarshaling::~AMD_MyClass_opDoubleMarshaling()
{
}

Test::AMD_MyClass_opIdempotent::~AMD_MyClass_opIdempotent()
{
}

Test::AMD_MyClass_opNonmutating::~AMD_MyClass_opNonmutating()
{
}

Test::AMD_MyClass_opByte1::~AMD_MyClass_opByte1()
{
}

Test::AMD_MyClass_opShort1::~AMD_MyClass_opShort1()
{
}

Test::AMD_MyClass_opInt1::~AMD_MyClass_opInt1()
{
}

Test::AMD_MyClass_opLong1::~AMD_MyClass_opLong1()
{
}

Test::AMD_MyClass_opFloat1::~AMD_MyClass_opFloat1()
{
}

Test::AMD_MyClass_opDouble1::~AMD_MyClass_opDouble1()
{
}

Test::AMD_MyClass_opString1::~AMD_MyClass_opString1()
{
}

Test::AMD_MyClass_opStringS1::~AMD_MyClass_opStringS1()
{
}

Test::AMD_MyClass_opByteBoolD1::~AMD_MyClass_opByteBoolD1()
{
}

Test::AMD_MyClass_opStringS2::~AMD_MyClass_opStringS2()
{
}

Test::AMD_MyClass_opByteBoolD2::~AMD_MyClass_opByteBoolD2()
{
}

Test::AMD_MyClass_opStringLiterals::~AMD_MyClass_opStringLiterals()
{
}

Test::AMD_MyClass_opWStringLiterals::~AMD_MyClass_opWStringLiterals()
{
}

Test::AMD_MyClass_opMStruct1::~AMD_MyClass_opMStruct1()
{
}

Test::AMD_MyClass_opMStruct2::~AMD_MyClass_opMStruct2()
{
}

Test::AMD_MyClass_opMSeq1::~AMD_MyClass_opMSeq1()
{
}

Test::AMD_MyClass_opMSeq2::~AMD_MyClass_opMSeq2()
{
}

Test::AMD_MyClass_opMDict1::~AMD_MyClass_opMDict1()
{
}

Test::AMD_MyClass_opMDict2::~AMD_MyClass_opMDict2()
{
}

Test::AMD_MyDerivedClass_opDerived::~AMD_MyDerivedClass_opDerived()
{
}

Test::AMD_MyDerivedClass_opMyClass1::~AMD_MyDerivedClass_opMyClass1()
{
}

Test::AMD_MyDerivedClass_opMyStruct1::~AMD_MyDerivedClass_opMyStruct1()
{
}

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_shutdown::AMD_MyClass_shutdown(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_shutdown::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opVoid::AMD_MyClass_opVoid(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opVoid::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opByte::AMD_MyClass_opByte(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opByte::ice_response(::Ice::Byte ret, ::Ice::Byte p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opBool::AMD_MyClass_opBool(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opBool::ice_response(bool ret, bool p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opShortIntLong::AMD_MyClass_opShortIntLong(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opShortIntLong::ice_response(::Ice::Long ret, ::Ice::Short p4, ::Ice::Int p5, ::Ice::Long p6)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p4);
    ostr->write(p5);
    ostr->write(p6);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opFloatDouble::AMD_MyClass_opFloatDouble(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opFloatDouble::ice_response(::Ice::Double ret, ::Ice::Float p3, ::Ice::Double p4)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(p4);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opString::AMD_MyClass_opString(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opString::ice_response(const ::std::string& ret, const ::std::string& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opMyEnum::AMD_MyClass_opMyEnum(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opMyEnum::ice_response(::Test::MyEnum ret, ::Test::MyEnum p2)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p2);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opMyClass::AMD_MyClass_opMyClass(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opMyClass::ice_response(const ::Test::MyClassPrx& ret, const ::Test::MyClassPrx& p2, const ::Test::MyClassPrx& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p2);
    ostr->write(p3);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opStruct::AMD_MyClass_opStruct(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opStruct::ice_response(const ::Test::Structure& ret, const ::Test::Structure& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opByteS::AMD_MyClass_opByteS(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opByteS::ice_response(const ::Test::ByteS& ret, const ::Test::ByteS& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opBoolS::AMD_MyClass_opBoolS(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opBoolS::ice_response(const ::Test::BoolS& ret, const ::Test::BoolS& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opShortIntLongS::AMD_MyClass_opShortIntLongS(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opShortIntLongS::ice_response(const ::Test::LongS& ret, const ::Test::ShortS& p4, const ::Test::IntS& p5, const ::Test::LongS& p6)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p4);
    ostr->write(p5);
    ostr->write(p6);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opFloatDoubleS::AMD_MyClass_opFloatDoubleS(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opFloatDoubleS::ice_response(const ::Test::DoubleS& ret, const ::Test::FloatS& p3, const ::Test::DoubleS& p4)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(p4);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opStringS::AMD_MyClass_opStringS(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opStringS::ice_response(const ::Test::StringS& ret, const ::Test::StringS& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opByteSS::AMD_MyClass_opByteSS(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opByteSS::ice_response(const ::Test::ByteSS& ret, const ::Test::ByteSS& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opBoolSS::AMD_MyClass_opBoolSS(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opBoolSS::ice_response(const ::Test::BoolSS& ret, const ::Test::BoolSS& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opShortIntLongSS::AMD_MyClass_opShortIntLongSS(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opShortIntLongSS::ice_response(const ::Test::LongSS& ret, const ::Test::ShortSS& p4, const ::Test::IntSS& p5, const ::Test::LongSS& p6)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p4);
    ostr->write(p5);
    ostr->write(p6);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opFloatDoubleSS::AMD_MyClass_opFloatDoubleSS(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opFloatDoubleSS::ice_response(const ::Test::DoubleSS& ret, const ::Test::FloatSS& p3, const ::Test::DoubleSS& p4)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(p4);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opStringSS::AMD_MyClass_opStringSS(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opStringSS::ice_response(const ::Test::StringSS& ret, const ::Test::StringSS& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opStringSSS::AMD_MyClass_opStringSSS(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opStringSSS::ice_response(const ::Test::StringSSS& ret, const ::Test::StringSSS& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opByteBoolD::AMD_MyClass_opByteBoolD(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opByteBoolD::ice_response(const ::Test::ByteBoolD& ret, const ::Test::ByteBoolD& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opShortIntD::AMD_MyClass_opShortIntD(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opShortIntD::ice_response(const ::Test::ShortIntD& ret, const ::Test::ShortIntD& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opLongFloatD::AMD_MyClass_opLongFloatD(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opLongFloatD::ice_response(const ::Test::LongFloatD& ret, const ::Test::LongFloatD& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opStringStringD::AMD_MyClass_opStringStringD(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opStringStringD::ice_response(const ::Test::StringStringD& ret, const ::Test::StringStringD& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opStringMyEnumD::AMD_MyClass_opStringMyEnumD(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opStringMyEnumD::ice_response(const ::Test::StringMyEnumD& ret, const ::Test::StringMyEnumD& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opMyEnumStringD::AMD_MyClass_opMyEnumStringD(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opMyEnumStringD::ice_response(const ::Test::MyEnumStringD& ret, const ::Test::MyEnumStringD& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opMyStructMyEnumD::AMD_MyClass_opMyStructMyEnumD(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opMyStructMyEnumD::ice_response(const ::Test::MyStructMyEnumD& ret, const ::Test::MyStructMyEnumD& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opByteBoolDS::AMD_MyClass_opByteBoolDS(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opByteBoolDS::ice_response(const ::Test::ByteBoolDS& ret, const ::Test::ByteBoolDS& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opShortIntDS::AMD_MyClass_opShortIntDS(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opShortIntDS::ice_response(const ::Test::ShortIntDS& ret, const ::Test::ShortIntDS& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opLongFloatDS::AMD_MyClass_opLongFloatDS(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opLongFloatDS::ice_response(const ::Test::LongFloatDS& ret, const ::Test::LongFloatDS& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opStringStringDS::AMD_MyClass_opStringStringDS(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opStringStringDS::ice_response(const ::Test::StringStringDS& ret, const ::Test::StringStringDS& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opStringMyEnumDS::AMD_MyClass_opStringMyEnumDS(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opStringMyEnumDS::ice_response(const ::Test::StringMyEnumDS& ret, const ::Test::StringMyEnumDS& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opMyEnumStringDS::AMD_MyClass_opMyEnumStringDS(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opMyEnumStringDS::ice_response(const ::Test::MyEnumStringDS& ret, const ::Test::MyEnumStringDS& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opMyStructMyEnumDS::AMD_MyClass_opMyStructMyEnumDS(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opMyStructMyEnumDS::ice_response(const ::Test::MyStructMyEnumDS& ret, const ::Test::MyStructMyEnumDS& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opByteByteSD::AMD_MyClass_opByteByteSD(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opByteByteSD::ice_response(const ::Test::ByteByteSD& ret, const ::Test::ByteByteSD& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opBoolBoolSD::AMD_MyClass_opBoolBoolSD(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opBoolBoolSD::ice_response(const ::Test::BoolBoolSD& ret, const ::Test::BoolBoolSD& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opShortShortSD::AMD_MyClass_opShortShortSD(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opShortShortSD::ice_response(const ::Test::ShortShortSD& ret, const ::Test::ShortShortSD& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opIntIntSD::AMD_MyClass_opIntIntSD(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opIntIntSD::ice_response(const ::Test::IntIntSD& ret, const ::Test::IntIntSD& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opLongLongSD::AMD_MyClass_opLongLongSD(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opLongLongSD::ice_response(const ::Test::LongLongSD& ret, const ::Test::LongLongSD& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opStringFloatSD::AMD_MyClass_opStringFloatSD(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opStringFloatSD::ice_response(const ::Test::StringFloatSD& ret, const ::Test::StringFloatSD& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opStringDoubleSD::AMD_MyClass_opStringDoubleSD(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opStringDoubleSD::ice_response(const ::Test::StringDoubleSD& ret, const ::Test::StringDoubleSD& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opStringStringSD::AMD_MyClass_opStringStringSD(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opStringStringSD::ice_response(const ::Test::StringStringSD& ret, const ::Test::StringStringSD& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opMyEnumMyEnumSD::AMD_MyClass_opMyEnumMyEnumSD(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opMyEnumMyEnumSD::ice_response(const ::Test::MyEnumMyEnumSD& ret, const ::Test::MyEnumMyEnumSD& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p3);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opIntS::AMD_MyClass_opIntS(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opIntS::ice_response(const ::Test::IntS& ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opByteSOneway::AMD_MyClass_opByteSOneway(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opByteSOneway::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opByteSOnewayCallCount::AMD_MyClass_opByteSOnewayCallCount(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opByteSOnewayCallCount::ice_response(::Ice::Int ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opContext::AMD_MyClass_opContext(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opContext::ice_response(const ::Ice::Context& ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opDoubleMarshaling::AMD_MyClass_opDoubleMarshaling(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opDoubleMarshaling::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opIdempotent::AMD_MyClass_opIdempotent(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opIdempotent::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opNonmutating::AMD_MyClass_opNonmutating(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opNonmutating::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opByte1::AMD_MyClass_opByte1(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opByte1::ice_response(::Ice::Byte ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opShort1::AMD_MyClass_opShort1(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opShort1::ice_response(::Ice::Short ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opInt1::AMD_MyClass_opInt1(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opInt1::ice_response(::Ice::Int ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opLong1::AMD_MyClass_opLong1(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opLong1::ice_response(::Ice::Long ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opFloat1::AMD_MyClass_opFloat1(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opFloat1::ice_response(::Ice::Float ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opDouble1::AMD_MyClass_opDouble1(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opDouble1::ice_response(::Ice::Double ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opString1::AMD_MyClass_opString1(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opString1::ice_response(const ::std::string& ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opStringS1::AMD_MyClass_opStringS1(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opStringS1::ice_response(const ::Test::StringS& ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opByteBoolD1::AMD_MyClass_opByteBoolD1(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opByteBoolD1::ice_response(const ::Test::ByteBoolD& ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opStringS2::AMD_MyClass_opStringS2(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opStringS2::ice_response(const ::Test::StringS& ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opByteBoolD2::AMD_MyClass_opByteBoolD2(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opByteBoolD2::ice_response(const ::Test::ByteBoolD& ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opStringLiterals::AMD_MyClass_opStringLiterals(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opStringLiterals::ice_response(const ::Test::StringS& ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opWStringLiterals::AMD_MyClass_opWStringLiterals(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opWStringLiterals::ice_response(const ::Test::WStringS& ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opMStruct1::AMD_MyClass_opMStruct1(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opMStruct1::ice_response(const ::Test::Structure& ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opMStruct2::AMD_MyClass_opMStruct2(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opMStruct2::ice_response(const ::Test::Structure& ret, const ::Test::Structure& p2)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p2);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opMSeq1::AMD_MyClass_opMSeq1(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opMSeq1::ice_response(const ::Test::StringS& ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opMSeq2::AMD_MyClass_opMSeq2(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opMSeq2::ice_response(const ::Test::StringS& ret, const ::Test::StringS& p2)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p2);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opMDict1::AMD_MyClass_opMDict1(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opMDict1::ice_response(const ::Test::StringStringD& ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyClass_opMDict2::AMD_MyClass_opMDict2(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyClass_opMDict2::ice_response(const ::Test::StringStringD& ret, const ::Test::StringStringD& p2)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(p2);
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyDerivedClass_opDerived::AMD_MyDerivedClass_opDerived(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyDerivedClass_opDerived::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyDerivedClass_opMyClass1::AMD_MyDerivedClass_opMyClass1(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyDerivedClass_opMyClass1::ice_response(const ::Test::MyClass1Ptr& ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyDerivedClass_opMyStruct1::AMD_MyDerivedClass_opMyStruct1(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyDerivedClass_opMyStruct1::ice_response(const ::Test::MyStruct1& ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(MyClass* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< MyClass>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new MyClass;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_shutdown(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_shutdown_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_shutdown_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_MyClass_shutdown_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::MyClass::end_shutdown(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_MyClass_shutdown_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opVoid(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opVoid_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opVoid_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_MyClass_opVoid_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::MyClass::end_opVoid(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_MyClass_opVoid_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opByte(::Ice::Byte iceP_p1, ::Ice::Byte iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opByte_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opByte_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opByte_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opByte_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Byte
IceProxy::Test::MyClass::end_opByte(::Ice::Byte& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opByte_name);
    ::Ice::Byte ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opByte(::Ice::Byte& iceP_p3, ::Ice::Byte& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opByte_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opBool(bool iceP_p1, bool iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opBool_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opBool_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opBool_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opBool_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::Test::MyClass::end_opBool(bool& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opBool_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opBool(bool& iceP_p3, bool& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opBool_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opShortIntLong(::Ice::Short iceP_p1, ::Ice::Int iceP_p2, ::Ice::Long iceP_p3, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opShortIntLong_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opShortIntLong_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opShortIntLong_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        ostr->write(iceP_p3);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opShortIntLong_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Long
IceProxy::Test::MyClass::end_opShortIntLong(::Ice::Short& iceP_p4, ::Ice::Int& iceP_p5, ::Ice::Long& iceP_p6, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opShortIntLong_name);
    ::Ice::Long ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p4);
    istr->read(iceP_p5);
    istr->read(iceP_p6);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opShortIntLong(::Ice::Short& iceP_p4, ::Ice::Int& iceP_p5, ::Ice::Long& iceP_p6, ::Ice::Long& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opShortIntLong_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p4);
    istr->read(iceP_p5);
    istr->read(iceP_p6);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opFloatDouble(::Ice::Float iceP_p1, ::Ice::Double iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opFloatDouble_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opFloatDouble_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opFloatDouble_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opFloatDouble_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Double
IceProxy::Test::MyClass::end_opFloatDouble(::Ice::Float& iceP_p3, ::Ice::Double& iceP_p4, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opFloatDouble_name);
    ::Ice::Double ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(iceP_p4);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opFloatDouble(::Ice::Float& iceP_p3, ::Ice::Double& iceP_p4, ::Ice::Double& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opFloatDouble_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(iceP_p4);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opString(const ::std::string& iceP_p1, const ::std::string& iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opString_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opString_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opString_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opString_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::Test::MyClass::end_opString(::std::string& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opString_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opString(::std::string& iceP_p3, ::std::string& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opString_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opMyEnum(::Test::MyEnum iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMyEnum_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opMyEnum_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opMyEnum_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opMyEnum_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::MyEnum
IceProxy::Test::MyClass::end_opMyEnum(::Test::MyEnum& iceP_p2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opMyEnum_name);
    ::Test::MyEnum ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p2);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opMyEnum(::Test::MyEnum& iceP_p2, ::Test::MyEnum& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opMyEnum_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p2);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opMyClass(const ::Test::MyClassPrx& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMyClass_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opMyClass_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opMyClass_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opMyClass_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::MyClassPrx
IceProxy::Test::MyClass::end_opMyClass(::Test::MyClassPrx& iceP_p2, ::Test::MyClassPrx& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opMyClass_name);
    ::Test::MyClassPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p2);
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opMyClass(::Test::MyClassPrx& iceP_p2, ::Test::MyClassPrx& iceP_p3, ::Test::MyClassPrx& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opMyClass_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p2);
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opStruct(const ::Test::Structure& iceP_p1, const ::Test::Structure& iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStruct_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opStruct_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opStruct_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opStruct_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::Structure
IceProxy::Test::MyClass::end_opStruct(::Test::Structure& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opStruct_name);
    ::Test::Structure ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opStruct(::Test::Structure& iceP_p3, ::Test::Structure& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opStruct_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opByteS(const ::Test::ByteS& iceP_p1, const ::Test::ByteS& iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opByteS_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opByteS_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opByteS_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opByteS_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::ByteS
IceProxy::Test::MyClass::end_opByteS(::Test::ByteS& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opByteS_name);
    ::Test::ByteS ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opByteS(::Test::ByteS& iceP_p3, ::Test::ByteS& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opByteS_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opBoolS(const ::Test::BoolS& iceP_p1, const ::Test::BoolS& iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opBoolS_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opBoolS_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opBoolS_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opBoolS_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::BoolS
IceProxy::Test::MyClass::end_opBoolS(::Test::BoolS& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opBoolS_name);
    ::Test::BoolS ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opBoolS(::Test::BoolS& iceP_p3, ::Test::BoolS& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opBoolS_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opShortIntLongS(const ::Test::ShortS& iceP_p1, const ::Test::IntS& iceP_p2, const ::Test::LongS& iceP_p3, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opShortIntLongS_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opShortIntLongS_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opShortIntLongS_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        ostr->write(iceP_p3);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opShortIntLongS_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::LongS
IceProxy::Test::MyClass::end_opShortIntLongS(::Test::ShortS& iceP_p4, ::Test::IntS& iceP_p5, ::Test::LongS& iceP_p6, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opShortIntLongS_name);
    ::Test::LongS ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p4);
    istr->read(iceP_p5);
    istr->read(iceP_p6);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opShortIntLongS(::Test::ShortS& iceP_p4, ::Test::IntS& iceP_p5, ::Test::LongS& iceP_p6, ::Test::LongS& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opShortIntLongS_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p4);
    istr->read(iceP_p5);
    istr->read(iceP_p6);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opFloatDoubleS(const ::Test::FloatS& iceP_p1, const ::Test::DoubleS& iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opFloatDoubleS_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opFloatDoubleS_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opFloatDoubleS_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opFloatDoubleS_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::DoubleS
IceProxy::Test::MyClass::end_opFloatDoubleS(::Test::FloatS& iceP_p3, ::Test::DoubleS& iceP_p4, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opFloatDoubleS_name);
    ::Test::DoubleS ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(iceP_p4);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opFloatDoubleS(::Test::FloatS& iceP_p3, ::Test::DoubleS& iceP_p4, ::Test::DoubleS& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opFloatDoubleS_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(iceP_p4);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opStringS(const ::Test::StringS& iceP_p1, const ::Test::StringS& iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringS_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opStringS_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opStringS_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opStringS_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::StringS
IceProxy::Test::MyClass::end_opStringS(::Test::StringS& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opStringS_name);
    ::Test::StringS ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opStringS(::Test::StringS& iceP_p3, ::Test::StringS& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opStringS_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opByteSS(const ::Test::ByteSS& iceP_p1, const ::Test::ByteSS& iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opByteSS_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opByteSS_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opByteSS_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opByteSS_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::ByteSS
IceProxy::Test::MyClass::end_opByteSS(::Test::ByteSS& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opByteSS_name);
    ::Test::ByteSS ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opByteSS(::Test::ByteSS& iceP_p3, ::Test::ByteSS& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opByteSS_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opBoolSS(const ::Test::BoolSS& iceP_p1, const ::Test::BoolSS& iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opBoolSS_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opBoolSS_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opBoolSS_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opBoolSS_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::BoolSS
IceProxy::Test::MyClass::end_opBoolSS(::Test::BoolSS& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opBoolSS_name);
    ::Test::BoolSS ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opBoolSS(::Test::BoolSS& iceP_p3, ::Test::BoolSS& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opBoolSS_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opShortIntLongSS(const ::Test::ShortSS& iceP_p1, const ::Test::IntSS& iceP_p2, const ::Test::LongSS& iceP_p3, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opShortIntLongSS_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opShortIntLongSS_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opShortIntLongSS_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        ostr->write(iceP_p3);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opShortIntLongSS_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::LongSS
IceProxy::Test::MyClass::end_opShortIntLongSS(::Test::ShortSS& iceP_p4, ::Test::IntSS& iceP_p5, ::Test::LongSS& iceP_p6, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opShortIntLongSS_name);
    ::Test::LongSS ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p4);
    istr->read(iceP_p5);
    istr->read(iceP_p6);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opShortIntLongSS(::Test::ShortSS& iceP_p4, ::Test::IntSS& iceP_p5, ::Test::LongSS& iceP_p6, ::Test::LongSS& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opShortIntLongSS_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p4);
    istr->read(iceP_p5);
    istr->read(iceP_p6);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opFloatDoubleSS(const ::Test::FloatSS& iceP_p1, const ::Test::DoubleSS& iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opFloatDoubleSS_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opFloatDoubleSS_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opFloatDoubleSS_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opFloatDoubleSS_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::DoubleSS
IceProxy::Test::MyClass::end_opFloatDoubleSS(::Test::FloatSS& iceP_p3, ::Test::DoubleSS& iceP_p4, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opFloatDoubleSS_name);
    ::Test::DoubleSS ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(iceP_p4);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opFloatDoubleSS(::Test::FloatSS& iceP_p3, ::Test::DoubleSS& iceP_p4, ::Test::DoubleSS& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opFloatDoubleSS_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(iceP_p4);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opStringSS(const ::Test::StringSS& iceP_p1, const ::Test::StringSS& iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringSS_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opStringSS_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opStringSS_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opStringSS_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::StringSS
IceProxy::Test::MyClass::end_opStringSS(::Test::StringSS& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opStringSS_name);
    ::Test::StringSS ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opStringSS(::Test::StringSS& iceP_p3, ::Test::StringSS& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opStringSS_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opStringSSS(const ::Test::StringSSS& iceP_p1, const ::Test::StringSSS& iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringSSS_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opStringSSS_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opStringSSS_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opStringSSS_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::StringSSS
IceProxy::Test::MyClass::end_opStringSSS(::Test::StringSSS& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opStringSSS_name);
    ::Test::StringSSS ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opStringSSS(::Test::StringSSS& iceP_p3, ::Test::StringSSS& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opStringSSS_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opByteBoolD(const ::Test::ByteBoolD& iceP_p1, const ::Test::ByteBoolD& iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opByteBoolD_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opByteBoolD_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opByteBoolD_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opByteBoolD_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::ByteBoolD
IceProxy::Test::MyClass::end_opByteBoolD(::Test::ByteBoolD& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opByteBoolD_name);
    ::Test::ByteBoolD ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opByteBoolD(::Test::ByteBoolD& iceP_p3, ::Test::ByteBoolD& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opByteBoolD_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opShortIntD(const ::Test::ShortIntD& iceP_p1, const ::Test::ShortIntD& iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opShortIntD_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opShortIntD_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opShortIntD_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opShortIntD_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::ShortIntD
IceProxy::Test::MyClass::end_opShortIntD(::Test::ShortIntD& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opShortIntD_name);
    ::Test::ShortIntD ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opShortIntD(::Test::ShortIntD& iceP_p3, ::Test::ShortIntD& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opShortIntD_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opLongFloatD(const ::Test::LongFloatD& iceP_p1, const ::Test::LongFloatD& iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opLongFloatD_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opLongFloatD_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opLongFloatD_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opLongFloatD_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::LongFloatD
IceProxy::Test::MyClass::end_opLongFloatD(::Test::LongFloatD& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opLongFloatD_name);
    ::Test::LongFloatD ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opLongFloatD(::Test::LongFloatD& iceP_p3, ::Test::LongFloatD& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opLongFloatD_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opStringStringD(const ::Test::StringStringD& iceP_p1, const ::Test::StringStringD& iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringStringD_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opStringStringD_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opStringStringD_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opStringStringD_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::StringStringD
IceProxy::Test::MyClass::end_opStringStringD(::Test::StringStringD& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opStringStringD_name);
    ::Test::StringStringD ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opStringStringD(::Test::StringStringD& iceP_p3, ::Test::StringStringD& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opStringStringD_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opStringMyEnumD(const ::Test::StringMyEnumD& iceP_p1, const ::Test::StringMyEnumD& iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringMyEnumD_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opStringMyEnumD_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opStringMyEnumD_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opStringMyEnumD_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::StringMyEnumD
IceProxy::Test::MyClass::end_opStringMyEnumD(::Test::StringMyEnumD& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opStringMyEnumD_name);
    ::Test::StringMyEnumD ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opStringMyEnumD(::Test::StringMyEnumD& iceP_p3, ::Test::StringMyEnumD& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opStringMyEnumD_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opMyEnumStringD(const ::Test::MyEnumStringD& iceP_p1, const ::Test::MyEnumStringD& iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMyEnumStringD_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opMyEnumStringD_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opMyEnumStringD_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opMyEnumStringD_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::MyEnumStringD
IceProxy::Test::MyClass::end_opMyEnumStringD(::Test::MyEnumStringD& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opMyEnumStringD_name);
    ::Test::MyEnumStringD ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opMyEnumStringD(::Test::MyEnumStringD& iceP_p3, ::Test::MyEnumStringD& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opMyEnumStringD_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opMyStructMyEnumD(const ::Test::MyStructMyEnumD& iceP_p1, const ::Test::MyStructMyEnumD& iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMyStructMyEnumD_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opMyStructMyEnumD_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opMyStructMyEnumD_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opMyStructMyEnumD_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::MyStructMyEnumD
IceProxy::Test::MyClass::end_opMyStructMyEnumD(::Test::MyStructMyEnumD& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opMyStructMyEnumD_name);
    ::Test::MyStructMyEnumD ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opMyStructMyEnumD(::Test::MyStructMyEnumD& iceP_p3, ::Test::MyStructMyEnumD& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opMyStructMyEnumD_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opByteBoolDS(const ::Test::ByteBoolDS& iceP_p1, const ::Test::ByteBoolDS& iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opByteBoolDS_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opByteBoolDS_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opByteBoolDS_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opByteBoolDS_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::ByteBoolDS
IceProxy::Test::MyClass::end_opByteBoolDS(::Test::ByteBoolDS& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opByteBoolDS_name);
    ::Test::ByteBoolDS ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opByteBoolDS(::Test::ByteBoolDS& iceP_p3, ::Test::ByteBoolDS& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opByteBoolDS_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opShortIntDS(const ::Test::ShortIntDS& iceP_p1, const ::Test::ShortIntDS& iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opShortIntDS_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opShortIntDS_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opShortIntDS_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opShortIntDS_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::ShortIntDS
IceProxy::Test::MyClass::end_opShortIntDS(::Test::ShortIntDS& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opShortIntDS_name);
    ::Test::ShortIntDS ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opShortIntDS(::Test::ShortIntDS& iceP_p3, ::Test::ShortIntDS& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opShortIntDS_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opLongFloatDS(const ::Test::LongFloatDS& iceP_p1, const ::Test::LongFloatDS& iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opLongFloatDS_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opLongFloatDS_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opLongFloatDS_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opLongFloatDS_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::LongFloatDS
IceProxy::Test::MyClass::end_opLongFloatDS(::Test::LongFloatDS& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opLongFloatDS_name);
    ::Test::LongFloatDS ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opLongFloatDS(::Test::LongFloatDS& iceP_p3, ::Test::LongFloatDS& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opLongFloatDS_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opStringStringDS(const ::Test::StringStringDS& iceP_p1, const ::Test::StringStringDS& iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringStringDS_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opStringStringDS_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opStringStringDS_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opStringStringDS_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::StringStringDS
IceProxy::Test::MyClass::end_opStringStringDS(::Test::StringStringDS& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opStringStringDS_name);
    ::Test::StringStringDS ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opStringStringDS(::Test::StringStringDS& iceP_p3, ::Test::StringStringDS& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opStringStringDS_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opStringMyEnumDS(const ::Test::StringMyEnumDS& iceP_p1, const ::Test::StringMyEnumDS& iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringMyEnumDS_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opStringMyEnumDS_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opStringMyEnumDS_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opStringMyEnumDS_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::StringMyEnumDS
IceProxy::Test::MyClass::end_opStringMyEnumDS(::Test::StringMyEnumDS& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opStringMyEnumDS_name);
    ::Test::StringMyEnumDS ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opStringMyEnumDS(::Test::StringMyEnumDS& iceP_p3, ::Test::StringMyEnumDS& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opStringMyEnumDS_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opMyEnumStringDS(const ::Test::MyEnumStringDS& iceP_p1, const ::Test::MyEnumStringDS& iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMyEnumStringDS_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opMyEnumStringDS_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opMyEnumStringDS_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opMyEnumStringDS_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::MyEnumStringDS
IceProxy::Test::MyClass::end_opMyEnumStringDS(::Test::MyEnumStringDS& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opMyEnumStringDS_name);
    ::Test::MyEnumStringDS ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opMyEnumStringDS(::Test::MyEnumStringDS& iceP_p3, ::Test::MyEnumStringDS& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opMyEnumStringDS_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opMyStructMyEnumDS(const ::Test::MyStructMyEnumDS& iceP_p1, const ::Test::MyStructMyEnumDS& iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMyStructMyEnumDS_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opMyStructMyEnumDS_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opMyStructMyEnumDS_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opMyStructMyEnumDS_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::MyStructMyEnumDS
IceProxy::Test::MyClass::end_opMyStructMyEnumDS(::Test::MyStructMyEnumDS& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opMyStructMyEnumDS_name);
    ::Test::MyStructMyEnumDS ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opMyStructMyEnumDS(::Test::MyStructMyEnumDS& iceP_p3, ::Test::MyStructMyEnumDS& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opMyStructMyEnumDS_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opByteByteSD(const ::Test::ByteByteSD& iceP_p1, const ::Test::ByteByteSD& iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opByteByteSD_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opByteByteSD_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opByteByteSD_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opByteByteSD_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::ByteByteSD
IceProxy::Test::MyClass::end_opByteByteSD(::Test::ByteByteSD& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opByteByteSD_name);
    ::Test::ByteByteSD ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opByteByteSD(::Test::ByteByteSD& iceP_p3, ::Test::ByteByteSD& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opByteByteSD_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opBoolBoolSD(const ::Test::BoolBoolSD& iceP_p1, const ::Test::BoolBoolSD& iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opBoolBoolSD_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opBoolBoolSD_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opBoolBoolSD_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opBoolBoolSD_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::BoolBoolSD
IceProxy::Test::MyClass::end_opBoolBoolSD(::Test::BoolBoolSD& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opBoolBoolSD_name);
    ::Test::BoolBoolSD ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opBoolBoolSD(::Test::BoolBoolSD& iceP_p3, ::Test::BoolBoolSD& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opBoolBoolSD_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opShortShortSD(const ::Test::ShortShortSD& iceP_p1, const ::Test::ShortShortSD& iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opShortShortSD_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opShortShortSD_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opShortShortSD_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opShortShortSD_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::ShortShortSD
IceProxy::Test::MyClass::end_opShortShortSD(::Test::ShortShortSD& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opShortShortSD_name);
    ::Test::ShortShortSD ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opShortShortSD(::Test::ShortShortSD& iceP_p3, ::Test::ShortShortSD& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opShortShortSD_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opIntIntSD(const ::Test::IntIntSD& iceP_p1, const ::Test::IntIntSD& iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opIntIntSD_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opIntIntSD_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opIntIntSD_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opIntIntSD_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::IntIntSD
IceProxy::Test::MyClass::end_opIntIntSD(::Test::IntIntSD& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opIntIntSD_name);
    ::Test::IntIntSD ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opIntIntSD(::Test::IntIntSD& iceP_p3, ::Test::IntIntSD& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opIntIntSD_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opLongLongSD(const ::Test::LongLongSD& iceP_p1, const ::Test::LongLongSD& iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opLongLongSD_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opLongLongSD_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opLongLongSD_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opLongLongSD_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::LongLongSD
IceProxy::Test::MyClass::end_opLongLongSD(::Test::LongLongSD& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opLongLongSD_name);
    ::Test::LongLongSD ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opLongLongSD(::Test::LongLongSD& iceP_p3, ::Test::LongLongSD& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opLongLongSD_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opStringFloatSD(const ::Test::StringFloatSD& iceP_p1, const ::Test::StringFloatSD& iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringFloatSD_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opStringFloatSD_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opStringFloatSD_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opStringFloatSD_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::StringFloatSD
IceProxy::Test::MyClass::end_opStringFloatSD(::Test::StringFloatSD& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opStringFloatSD_name);
    ::Test::StringFloatSD ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opStringFloatSD(::Test::StringFloatSD& iceP_p3, ::Test::StringFloatSD& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opStringFloatSD_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opStringDoubleSD(const ::Test::StringDoubleSD& iceP_p1, const ::Test::StringDoubleSD& iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringDoubleSD_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opStringDoubleSD_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opStringDoubleSD_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opStringDoubleSD_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::StringDoubleSD
IceProxy::Test::MyClass::end_opStringDoubleSD(::Test::StringDoubleSD& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opStringDoubleSD_name);
    ::Test::StringDoubleSD ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opStringDoubleSD(::Test::StringDoubleSD& iceP_p3, ::Test::StringDoubleSD& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opStringDoubleSD_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opStringStringSD(const ::Test::StringStringSD& iceP_p1, const ::Test::StringStringSD& iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringStringSD_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opStringStringSD_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opStringStringSD_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opStringStringSD_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::StringStringSD
IceProxy::Test::MyClass::end_opStringStringSD(::Test::StringStringSD& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opStringStringSD_name);
    ::Test::StringStringSD ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opStringStringSD(::Test::StringStringSD& iceP_p3, ::Test::StringStringSD& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opStringStringSD_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opMyEnumMyEnumSD(const ::Test::MyEnumMyEnumSD& iceP_p1, const ::Test::MyEnumMyEnumSD& iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMyEnumMyEnumSD_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opMyEnumMyEnumSD_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opMyEnumMyEnumSD_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opMyEnumMyEnumSD_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::MyEnumMyEnumSD
IceProxy::Test::MyClass::end_opMyEnumMyEnumSD(::Test::MyEnumMyEnumSD& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opMyEnumMyEnumSD_name);
    ::Test::MyEnumMyEnumSD ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opMyEnumMyEnumSD(::Test::MyEnumMyEnumSD& iceP_p3, ::Test::MyEnumMyEnumSD& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opMyEnumMyEnumSD_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p3);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opIntS(const ::Test::IntS& iceP_s, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opIntS_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opIntS_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opIntS_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_s);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opIntS_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::IntS
IceProxy::Test::MyClass::end_opIntS(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opIntS_name);
    ::Test::IntS ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opByteSOneway(const ::Test::ByteS& iceP_s, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opByteSOneway_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opByteSOneway_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_s);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opByteSOneway_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::MyClass::end_opByteSOneway(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_MyClass_opByteSOneway_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opByteSOnewayCallCount(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opByteSOnewayCallCount_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opByteSOnewayCallCount_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opByteSOnewayCallCount_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_MyClass_opByteSOnewayCallCount_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::Test::MyClass::end_opByteSOnewayCallCount(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opByteSOnewayCallCount_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opContext(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opContext_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opContext_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opContext_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_MyClass_opContext_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Context
IceProxy::Test::MyClass::end_opContext(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opContext_name);
    ::Ice::Context ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opDoubleMarshaling(::Ice::Double iceP_p1, const ::Test::DoubleS& iceP_p2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opDoubleMarshaling_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opDoubleMarshaling_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        ostr->write(iceP_p2);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opDoubleMarshaling_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::MyClass::end_opDoubleMarshaling(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_MyClass_opDoubleMarshaling_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opIdempotent(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opIdempotent_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opIdempotent_name, ::Ice::Idempotent, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_MyClass_opIdempotent_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::MyClass::end_opIdempotent(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_MyClass_opIdempotent_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opNonmutating(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opNonmutating_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opNonmutating_name, ::Ice::Nonmutating, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_MyClass_opNonmutating_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::MyClass::end_opNonmutating(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_MyClass_opNonmutating_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opByte1(::Ice::Byte iceP_opByte1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opByte1_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opByte1_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opByte1_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_opByte1);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opByte1_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Byte
IceProxy::Test::MyClass::end_opByte1(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opByte1_name);
    ::Ice::Byte ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opShort1(::Ice::Short iceP_opShort1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opShort1_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opShort1_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opShort1_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_opShort1);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opShort1_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Short
IceProxy::Test::MyClass::end_opShort1(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opShort1_name);
    ::Ice::Short ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opInt1(::Ice::Int iceP_opInt1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opInt1_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opInt1_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opInt1_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_opInt1);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opInt1_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::Test::MyClass::end_opInt1(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opInt1_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opLong1(::Ice::Long iceP_opLong1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opLong1_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opLong1_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opLong1_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_opLong1);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opLong1_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Long
IceProxy::Test::MyClass::end_opLong1(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opLong1_name);
    ::Ice::Long ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opFloat1(::Ice::Float iceP_opFloat1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opFloat1_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opFloat1_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opFloat1_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_opFloat1);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opFloat1_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Float
IceProxy::Test::MyClass::end_opFloat1(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opFloat1_name);
    ::Ice::Float ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opDouble1(::Ice::Double iceP_opDouble1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opDouble1_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opDouble1_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opDouble1_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_opDouble1);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opDouble1_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Double
IceProxy::Test::MyClass::end_opDouble1(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opDouble1_name);
    ::Ice::Double ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opString1(const ::std::string& iceP_opString1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opString1_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opString1_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opString1_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_opString1);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opString1_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::Test::MyClass::end_opString1(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opString1_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opStringS1(const ::Test::StringS& iceP_opStringS1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringS1_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opStringS1_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opStringS1_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_opStringS1);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opStringS1_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::StringS
IceProxy::Test::MyClass::end_opStringS1(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opStringS1_name);
    ::Test::StringS ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opByteBoolD1(const ::Test::ByteBoolD& iceP_opByteBoolD1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opByteBoolD1_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opByteBoolD1_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opByteBoolD1_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_opByteBoolD1);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opByteBoolD1_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::ByteBoolD
IceProxy::Test::MyClass::end_opByteBoolD1(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opByteBoolD1_name);
    ::Test::ByteBoolD ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opStringS2(const ::Test::StringS& iceP_stringS, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringS2_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opStringS2_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opStringS2_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_stringS);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opStringS2_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::StringS
IceProxy::Test::MyClass::end_opStringS2(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opStringS2_name);
    ::Test::StringS ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opByteBoolD2(const ::Test::ByteBoolD& iceP_byteBoolD, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opByteBoolD2_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opByteBoolD2_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opByteBoolD2_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_byteBoolD);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opByteBoolD2_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::ByteBoolD
IceProxy::Test::MyClass::end_opByteBoolD2(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opByteBoolD2_name);
    ::Test::ByteBoolD ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opStringLiterals(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringLiterals_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opStringLiterals_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opStringLiterals_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_MyClass_opStringLiterals_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::StringS
IceProxy::Test::MyClass::end_opStringLiterals(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opStringLiterals_name);
    ::Test::StringS ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opWStringLiterals(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opWStringLiterals_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opWStringLiterals_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opWStringLiterals_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_MyClass_opWStringLiterals_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::WStringS
IceProxy::Test::MyClass::end_opWStringLiterals(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opWStringLiterals_name);
    ::Test::WStringS ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opMStruct1(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMStruct1_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opMStruct1_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opMStruct1_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_MyClass_opMStruct1_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::Structure
IceProxy::Test::MyClass::end_opMStruct1(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opMStruct1_name);
    ::Test::Structure ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opMStruct2(const ::Test::Structure& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMStruct2_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opMStruct2_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opMStruct2_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opMStruct2_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::Structure
IceProxy::Test::MyClass::end_opMStruct2(::Test::Structure& iceP_p2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opMStruct2_name);
    ::Test::Structure ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p2);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opMStruct2(::Test::Structure& iceP_p2, ::Test::Structure& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opMStruct2_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p2);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opMSeq1(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMSeq1_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opMSeq1_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opMSeq1_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_MyClass_opMSeq1_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::StringS
IceProxy::Test::MyClass::end_opMSeq1(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opMSeq1_name);
    ::Test::StringS ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opMSeq2(const ::Test::StringS& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMSeq2_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opMSeq2_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opMSeq2_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opMSeq2_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::StringS
IceProxy::Test::MyClass::end_opMSeq2(::Test::StringS& iceP_p2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opMSeq2_name);
    ::Test::StringS ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p2);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opMSeq2(::Test::StringS& iceP_p2, ::Test::StringS& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opMSeq2_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p2);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opMDict1(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMDict1_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opMDict1_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opMDict1_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_MyClass_opMDict1_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::StringStringD
IceProxy::Test::MyClass::end_opMDict1(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opMDict1_name);
    ::Test::StringStringD ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::MyClass::_iceI_begin_opMDict2(const ::Test::StringStringD& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMDict2_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyClass_opMDict2_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyClass_opMDict2_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_MyClass_opMDict2_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::StringStringD
IceProxy::Test::MyClass::end_opMDict2(::Test::StringStringD& iceP_p2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opMDict2_name);
    ::Test::StringStringD ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p2);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::MyClass::_iceI_end_opMDict2(::Test::StringStringD& iceP_p2, ::Test::StringStringD& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyClass_opMDict2_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_p2);
    istr->read(ret);
    result->_endReadParams();
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::MyClass::_newInstance() const
{
    return new MyClass;
}
/// \endcond

const ::std::string&
IceProxy::Test::MyClass::ice_staticId()
{
    return ::Test::MyClass::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(MyClass1* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< MyClass1>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new MyClass1;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::MyClass1::_newInstance() const
{
    return new MyClass1;
}
/// \endcond

const ::std::string&
IceProxy::Test::MyClass1::ice_staticId()
{
    return ::Test::MyClass1::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(MyDerivedClass* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< MyDerivedClass>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new MyDerivedClass;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::MyDerivedClass::_iceI_begin_opDerived(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyDerivedClass_opDerived_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyDerivedClass_opDerived_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_MyDerivedClass_opDerived_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::MyDerivedClass::end_opDerived(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_MyDerivedClass_opDerived_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::MyDerivedClass::_iceI_begin_opMyClass1(const ::Test::MyClass1Ptr& iceP_opMyClass1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyDerivedClass_opMyClass1_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyDerivedClass_opMyClass1_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyDerivedClass_opMyClass1_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_opMyClass1);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_MyDerivedClass_opMyClass1_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::MyClass1Ptr
IceProxy::Test::MyDerivedClass::end_opMyClass1(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyDerivedClass_opMyClass1_name);
    ::Test::MyClass1Ptr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::MyDerivedClass::_iceI_begin_opMyStruct1(const ::Test::MyStruct1& iceP_opMyStruct1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyDerivedClass_opMyStruct1_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyDerivedClass_opMyStruct1_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyDerivedClass_opMyStruct1_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_opMyStruct1);
        result->endWriteParams();
        result->invoke(iceC_Test_MyDerivedClass_opMyStruct1_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::MyStruct1
IceProxy::Test::MyDerivedClass::end_opMyStruct1(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyDerivedClass_opMyStruct1_name);
    ::Test::MyStruct1 ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::MyDerivedClass::_newInstance() const
{
    return new MyDerivedClass;
}
/// \endcond

const ::std::string&
IceProxy::Test::MyDerivedClass::ice_staticId()
{
    return ::Test::MyDerivedClass::ice_staticId();
}

Test::MyClass::~MyClass()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(MyClass* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Test_MyClass_ids[2] =
{
    "::Ice::Object",
    "::Test::MyClass"
};

}

bool
Test::MyClass::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MyClass_ids, iceC_Test_MyClass_ids + 2, s);
}

::std::vector< ::std::string>
Test::MyClass::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_MyClass_ids[0], &iceC_Test_MyClass_ids[2]);
}

const ::std::string&
Test::MyClass::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MyClass::ice_staticId()
{
    static const ::std::string typeId = "::Test::MyClass";
    return typeId;
}

/// \cond INTERNAL
bool
Test::MyClass::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown_async(new IceAsync::Test::AMD_MyClass_shutdown(inS), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opVoid(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->opVoid_async(new IceAsync::Test::AMD_MyClass_opVoid(inS), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opByte(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Byte iceP_p1;
    ::Ice::Byte iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opByte_async(new IceAsync::Test::AMD_MyClass_opByte(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opBool(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    bool iceP_p1;
    bool iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opBool_async(new IceAsync::Test::AMD_MyClass_opBool(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opShortIntLong(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Short iceP_p1;
    ::Ice::Int iceP_p2;
    ::Ice::Long iceP_p3;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    istr->read(iceP_p3);
    inS.endReadParams();
    this->opShortIntLong_async(new IceAsync::Test::AMD_MyClass_opShortIntLong(inS), iceP_p1, iceP_p2, iceP_p3, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opFloatDouble(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Float iceP_p1;
    ::Ice::Double iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opFloatDouble_async(new IceAsync::Test::AMD_MyClass_opFloatDouble(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opString(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_p1;
    ::std::string iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opString_async(new IceAsync::Test::AMD_MyClass_opString(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMyEnum(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    MyEnum iceP_p1;
    istr->read(iceP_p1);
    inS.endReadParams();
    this->opMyEnum_async(new IceAsync::Test::AMD_MyClass_opMyEnum(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMyClass(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    MyClassPrx iceP_p1;
    istr->read(iceP_p1);
    inS.endReadParams();
    this->opMyClass_async(new IceAsync::Test::AMD_MyClass_opMyClass(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStruct(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    Structure iceP_p1;
    Structure iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opStruct_async(new IceAsync::Test::AMD_MyClass_opStruct(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opByteS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ByteS iceP_p1;
    ByteS iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opByteS_async(new IceAsync::Test::AMD_MyClass_opByteS(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opBoolS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    BoolS iceP_p1;
    BoolS iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opBoolS_async(new IceAsync::Test::AMD_MyClass_opBoolS(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opShortIntLongS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ShortS iceP_p1;
    IntS iceP_p2;
    LongS iceP_p3;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    istr->read(iceP_p3);
    inS.endReadParams();
    this->opShortIntLongS_async(new IceAsync::Test::AMD_MyClass_opShortIntLongS(inS), iceP_p1, iceP_p2, iceP_p3, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opFloatDoubleS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    FloatS iceP_p1;
    DoubleS iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opFloatDoubleS_async(new IceAsync::Test::AMD_MyClass_opFloatDoubleS(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    StringS iceP_p1;
    StringS iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opStringS_async(new IceAsync::Test::AMD_MyClass_opStringS(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opByteSS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ByteSS iceP_p1;
    ByteSS iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opByteSS_async(new IceAsync::Test::AMD_MyClass_opByteSS(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opBoolSS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    BoolSS iceP_p1;
    BoolSS iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opBoolSS_async(new IceAsync::Test::AMD_MyClass_opBoolSS(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opShortIntLongSS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ShortSS iceP_p1;
    IntSS iceP_p2;
    LongSS iceP_p3;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    istr->read(iceP_p3);
    inS.endReadParams();
    this->opShortIntLongSS_async(new IceAsync::Test::AMD_MyClass_opShortIntLongSS(inS), iceP_p1, iceP_p2, iceP_p3, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opFloatDoubleSS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    FloatSS iceP_p1;
    DoubleSS iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opFloatDoubleSS_async(new IceAsync::Test::AMD_MyClass_opFloatDoubleSS(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringSS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    StringSS iceP_p1;
    StringSS iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opStringSS_async(new IceAsync::Test::AMD_MyClass_opStringSS(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringSSS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    StringSSS iceP_p1;
    StringSSS iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opStringSSS_async(new IceAsync::Test::AMD_MyClass_opStringSSS(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opByteBoolD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ByteBoolD iceP_p1;
    ByteBoolD iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opByteBoolD_async(new IceAsync::Test::AMD_MyClass_opByteBoolD(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opShortIntD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ShortIntD iceP_p1;
    ShortIntD iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opShortIntD_async(new IceAsync::Test::AMD_MyClass_opShortIntD(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opLongFloatD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    LongFloatD iceP_p1;
    LongFloatD iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opLongFloatD_async(new IceAsync::Test::AMD_MyClass_opLongFloatD(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringStringD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    StringStringD iceP_p1;
    StringStringD iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opStringStringD_async(new IceAsync::Test::AMD_MyClass_opStringStringD(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringMyEnumD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    StringMyEnumD iceP_p1;
    StringMyEnumD iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opStringMyEnumD_async(new IceAsync::Test::AMD_MyClass_opStringMyEnumD(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMyEnumStringD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    MyEnumStringD iceP_p1;
    MyEnumStringD iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opMyEnumStringD_async(new IceAsync::Test::AMD_MyClass_opMyEnumStringD(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMyStructMyEnumD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    MyStructMyEnumD iceP_p1;
    MyStructMyEnumD iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opMyStructMyEnumD_async(new IceAsync::Test::AMD_MyClass_opMyStructMyEnumD(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opByteBoolDS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ByteBoolDS iceP_p1;
    ByteBoolDS iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opByteBoolDS_async(new IceAsync::Test::AMD_MyClass_opByteBoolDS(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opShortIntDS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ShortIntDS iceP_p1;
    ShortIntDS iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opShortIntDS_async(new IceAsync::Test::AMD_MyClass_opShortIntDS(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opLongFloatDS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    LongFloatDS iceP_p1;
    LongFloatDS iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opLongFloatDS_async(new IceAsync::Test::AMD_MyClass_opLongFloatDS(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringStringDS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    StringStringDS iceP_p1;
    StringStringDS iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opStringStringDS_async(new IceAsync::Test::AMD_MyClass_opStringStringDS(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringMyEnumDS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    StringMyEnumDS iceP_p1;
    StringMyEnumDS iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opStringMyEnumDS_async(new IceAsync::Test::AMD_MyClass_opStringMyEnumDS(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMyEnumStringDS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    MyEnumStringDS iceP_p1;
    MyEnumStringDS iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opMyEnumStringDS_async(new IceAsync::Test::AMD_MyClass_opMyEnumStringDS(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMyStructMyEnumDS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    MyStructMyEnumDS iceP_p1;
    MyStructMyEnumDS iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opMyStructMyEnumDS_async(new IceAsync::Test::AMD_MyClass_opMyStructMyEnumDS(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opByteByteSD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ByteByteSD iceP_p1;
    ByteByteSD iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opByteByteSD_async(new IceAsync::Test::AMD_MyClass_opByteByteSD(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opBoolBoolSD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    BoolBoolSD iceP_p1;
    BoolBoolSD iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opBoolBoolSD_async(new IceAsync::Test::AMD_MyClass_opBoolBoolSD(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opShortShortSD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ShortShortSD iceP_p1;
    ShortShortSD iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opShortShortSD_async(new IceAsync::Test::AMD_MyClass_opShortShortSD(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opIntIntSD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IntIntSD iceP_p1;
    IntIntSD iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opIntIntSD_async(new IceAsync::Test::AMD_MyClass_opIntIntSD(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opLongLongSD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    LongLongSD iceP_p1;
    LongLongSD iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opLongLongSD_async(new IceAsync::Test::AMD_MyClass_opLongLongSD(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringFloatSD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    StringFloatSD iceP_p1;
    StringFloatSD iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opStringFloatSD_async(new IceAsync::Test::AMD_MyClass_opStringFloatSD(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringDoubleSD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    StringDoubleSD iceP_p1;
    StringDoubleSD iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opStringDoubleSD_async(new IceAsync::Test::AMD_MyClass_opStringDoubleSD(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringStringSD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    StringStringSD iceP_p1;
    StringStringSD iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opStringStringSD_async(new IceAsync::Test::AMD_MyClass_opStringStringSD(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMyEnumMyEnumSD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    MyEnumMyEnumSD iceP_p1;
    MyEnumMyEnumSD iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opMyEnumMyEnumSD_async(new IceAsync::Test::AMD_MyClass_opMyEnumMyEnumSD(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opIntS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IntS iceP_s;
    istr->read(iceP_s);
    inS.endReadParams();
    this->opIntS_async(new IceAsync::Test::AMD_MyClass_opIntS(inS), iceP_s, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opByteSOneway(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ByteS iceP_s;
    istr->read(iceP_s);
    inS.endReadParams();
    this->opByteSOneway_async(new IceAsync::Test::AMD_MyClass_opByteSOneway(inS), iceP_s, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opByteSOnewayCallCount(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->opByteSOnewayCallCount_async(new IceAsync::Test::AMD_MyClass_opByteSOnewayCallCount(inS), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opContext(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->opContext_async(new IceAsync::Test::AMD_MyClass_opContext(inS), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opDoubleMarshaling(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Double iceP_p1;
    DoubleS iceP_p2;
    istr->read(iceP_p1);
    istr->read(iceP_p2);
    inS.endReadParams();
    this->opDoubleMarshaling_async(new IceAsync::Test::AMD_MyClass_opDoubleMarshaling(inS), iceP_p1, iceP_p2, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opIdempotent(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    inS.readEmptyParams();
    this->opIdempotent_async(new IceAsync::Test::AMD_MyClass_opIdempotent(inS), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opNonmutating(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    inS.readEmptyParams();
    this->opNonmutating_async(new IceAsync::Test::AMD_MyClass_opNonmutating(inS), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opByte1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Byte iceP_opByte1;
    istr->read(iceP_opByte1);
    inS.endReadParams();
    this->opByte1_async(new IceAsync::Test::AMD_MyClass_opByte1(inS), iceP_opByte1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opShort1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Short iceP_opShort1;
    istr->read(iceP_opShort1);
    inS.endReadParams();
    this->opShort1_async(new IceAsync::Test::AMD_MyClass_opShort1(inS), iceP_opShort1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opInt1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_opInt1;
    istr->read(iceP_opInt1);
    inS.endReadParams();
    this->opInt1_async(new IceAsync::Test::AMD_MyClass_opInt1(inS), iceP_opInt1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opLong1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Long iceP_opLong1;
    istr->read(iceP_opLong1);
    inS.endReadParams();
    this->opLong1_async(new IceAsync::Test::AMD_MyClass_opLong1(inS), iceP_opLong1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opFloat1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Float iceP_opFloat1;
    istr->read(iceP_opFloat1);
    inS.endReadParams();
    this->opFloat1_async(new IceAsync::Test::AMD_MyClass_opFloat1(inS), iceP_opFloat1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opDouble1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Double iceP_opDouble1;
    istr->read(iceP_opDouble1);
    inS.endReadParams();
    this->opDouble1_async(new IceAsync::Test::AMD_MyClass_opDouble1(inS), iceP_opDouble1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opString1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_opString1;
    istr->read(iceP_opString1);
    inS.endReadParams();
    this->opString1_async(new IceAsync::Test::AMD_MyClass_opString1(inS), iceP_opString1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringS1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    StringS iceP_opStringS1;
    istr->read(iceP_opStringS1);
    inS.endReadParams();
    this->opStringS1_async(new IceAsync::Test::AMD_MyClass_opStringS1(inS), iceP_opStringS1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opByteBoolD1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ByteBoolD iceP_opByteBoolD1;
    istr->read(iceP_opByteBoolD1);
    inS.endReadParams();
    this->opByteBoolD1_async(new IceAsync::Test::AMD_MyClass_opByteBoolD1(inS), iceP_opByteBoolD1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringS2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    StringS iceP_stringS;
    istr->read(iceP_stringS);
    inS.endReadParams();
    this->opStringS2_async(new IceAsync::Test::AMD_MyClass_opStringS2(inS), iceP_stringS, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opByteBoolD2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ByteBoolD iceP_byteBoolD;
    istr->read(iceP_byteBoolD);
    inS.endReadParams();
    this->opByteBoolD2_async(new IceAsync::Test::AMD_MyClass_opByteBoolD2(inS), iceP_byteBoolD, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringLiterals(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->opStringLiterals_async(new IceAsync::Test::AMD_MyClass_opStringLiterals(inS), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opWStringLiterals(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->opWStringLiterals_async(new IceAsync::Test::AMD_MyClass_opWStringLiterals(inS), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMStruct1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->opMStruct1_async(new IceAsync::Test::AMD_MyClass_opMStruct1(inS), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMStruct2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    Structure iceP_p1;
    istr->read(iceP_p1);
    inS.endReadParams();
    this->opMStruct2_async(new IceAsync::Test::AMD_MyClass_opMStruct2(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMSeq1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->opMSeq1_async(new IceAsync::Test::AMD_MyClass_opMSeq1(inS), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMSeq2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    StringS iceP_p1;
    istr->read(iceP_p1);
    inS.endReadParams();
    this->opMSeq2_async(new IceAsync::Test::AMD_MyClass_opMSeq2(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMDict1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->opMDict1_async(new IceAsync::Test::AMD_MyClass_opMDict1(inS), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMDict2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    StringStringD iceP_p1;
    istr->read(iceP_p1);
    inS.endReadParams();
    this->opMDict2_async(new IceAsync::Test::AMD_MyClass_opMDict2(inS), iceP_p1, current);
    return false;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_MyClass_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opBool",
    "opBoolBoolSD",
    "opBoolS",
    "opBoolSS",
    "opByte",
    "opByte1",
    "opByteBoolD",
    "opByteBoolD1",
    "opByteBoolD2",
    "opByteBoolDS",
    "opByteByteSD",
    "opByteS",
    "opByteSOneway",
    "opByteSOnewayCallCount",
    "opByteSS",
    "opContext",
    "opDouble1",
    "opDoubleMarshaling",
    "opFloat1",
    "opFloatDouble",
    "opFloatDoubleS",
    "opFloatDoubleSS",
    "opIdempotent",
    "opInt1",
    "opIntIntSD",
    "opIntS",
    "opLong1",
    "opLongFloatD",
    "opLongFloatDS",
    "opLongLongSD",
    "opMDict1",
    "opMDict2",
    "opMSeq1",
    "opMSeq2",
    "opMStruct1",
    "opMStruct2",
    "opMyClass",
    "opMyEnum",
    "opMyEnumMyEnumSD",
    "opMyEnumStringD",
    "opMyEnumStringDS",
    "opMyStructMyEnumD",
    "opMyStructMyEnumDS",
    "opNonmutating",
    "opShort1",
    "opShortIntD",
    "opShortIntDS",
    "opShortIntLong",
    "opShortIntLongS",
    "opShortIntLongSS",
    "opShortShortSD",
    "opString",
    "opString1",
    "opStringDoubleSD",
    "opStringFloatSD",
    "opStringLiterals",
    "opStringMyEnumD",
    "opStringMyEnumDS",
    "opStringS",
    "opStringS1",
    "opStringS2",
    "opStringSS",
    "opStringSSS",
    "opStringStringD",
    "opStringStringDS",
    "opStringStringSD",
    "opStruct",
    "opVoid",
    "opWStringLiterals",
    "shutdown"
};

}

/// \cond INTERNAL
bool
Test::MyClass::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_MyClass_all, iceC_Test_MyClass_all + 74, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_MyClass_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opBool(in, current);
        }
        case 5:
        {
            return _iceD_opBoolBoolSD(in, current);
        }
        case 6:
        {
            return _iceD_opBoolS(in, current);
        }
        case 7:
        {
            return _iceD_opBoolSS(in, current);
        }
        case 8:
        {
            return _iceD_opByte(in, current);
        }
        case 9:
        {
            return _iceD_opByte1(in, current);
        }
        case 10:
        {
            return _iceD_opByteBoolD(in, current);
        }
        case 11:
        {
            return _iceD_opByteBoolD1(in, current);
        }
        case 12:
        {
            return _iceD_opByteBoolD2(in, current);
        }
        case 13:
        {
            return _iceD_opByteBoolDS(in, current);
        }
        case 14:
        {
            return _iceD_opByteByteSD(in, current);
        }
        case 15:
        {
            return _iceD_opByteS(in, current);
        }
        case 16:
        {
            return _iceD_opByteSOneway(in, current);
        }
        case 17:
        {
            return _iceD_opByteSOnewayCallCount(in, current);
        }
        case 18:
        {
            return _iceD_opByteSS(in, current);
        }
        case 19:
        {
            return _iceD_opContext(in, current);
        }
        case 20:
        {
            return _iceD_opDouble1(in, current);
        }
        case 21:
        {
            return _iceD_opDoubleMarshaling(in, current);
        }
        case 22:
        {
            return _iceD_opFloat1(in, current);
        }
        case 23:
        {
            return _iceD_opFloatDouble(in, current);
        }
        case 24:
        {
            return _iceD_opFloatDoubleS(in, current);
        }
        case 25:
        {
            return _iceD_opFloatDoubleSS(in, current);
        }
        case 26:
        {
            return _iceD_opIdempotent(in, current);
        }
        case 27:
        {
            return _iceD_opInt1(in, current);
        }
        case 28:
        {
            return _iceD_opIntIntSD(in, current);
        }
        case 29:
        {
            return _iceD_opIntS(in, current);
        }
        case 30:
        {
            return _iceD_opLong1(in, current);
        }
        case 31:
        {
            return _iceD_opLongFloatD(in, current);
        }
        case 32:
        {
            return _iceD_opLongFloatDS(in, current);
        }
        case 33:
        {
            return _iceD_opLongLongSD(in, current);
        }
        case 34:
        {
            return _iceD_opMDict1(in, current);
        }
        case 35:
        {
            return _iceD_opMDict2(in, current);
        }
        case 36:
        {
            return _iceD_opMSeq1(in, current);
        }
        case 37:
        {
            return _iceD_opMSeq2(in, current);
        }
        case 38:
        {
            return _iceD_opMStruct1(in, current);
        }
        case 39:
        {
            return _iceD_opMStruct2(in, current);
        }
        case 40:
        {
            return _iceD_opMyClass(in, current);
        }
        case 41:
        {
            return _iceD_opMyEnum(in, current);
        }
        case 42:
        {
            return _iceD_opMyEnumMyEnumSD(in, current);
        }
        case 43:
        {
            return _iceD_opMyEnumStringD(in, current);
        }
        case 44:
        {
            return _iceD_opMyEnumStringDS(in, current);
        }
        case 45:
        {
            return _iceD_opMyStructMyEnumD(in, current);
        }
        case 46:
        {
            return _iceD_opMyStructMyEnumDS(in, current);
        }
        case 47:
        {
            return _iceD_opNonmutating(in, current);
        }
        case 48:
        {
            return _iceD_opShort1(in, current);
        }
        case 49:
        {
            return _iceD_opShortIntD(in, current);
        }
        case 50:
        {
            return _iceD_opShortIntDS(in, current);
        }
        case 51:
        {
            return _iceD_opShortIntLong(in, current);
        }
        case 52:
        {
            return _iceD_opShortIntLongS(in, current);
        }
        case 53:
        {
            return _iceD_opShortIntLongSS(in, current);
        }
        case 54:
        {
            return _iceD_opShortShortSD(in, current);
        }
        case 55:
        {
            return _iceD_opString(in, current);
        }
        case 56:
        {
            return _iceD_opString1(in, current);
        }
        case 57:
        {
            return _iceD_opStringDoubleSD(in, current);
        }
        case 58:
        {
            return _iceD_opStringFloatSD(in, current);
        }
        case 59:
        {
            return _iceD_opStringLiterals(in, current);
        }
        case 60:
        {
            return _iceD_opStringMyEnumD(in, current);
        }
        case 61:
        {
            return _iceD_opStringMyEnumDS(in, current);
        }
        case 62:
        {
            return _iceD_opStringS(in, current);
        }
        case 63:
        {
            return _iceD_opStringS1(in, current);
        }
        case 64:
        {
            return _iceD_opStringS2(in, current);
        }
        case 65:
        {
            return _iceD_opStringSS(in, current);
        }
        case 66:
        {
            return _iceD_opStringSSS(in, current);
        }
        case 67:
        {
            return _iceD_opStringStringD(in, current);
        }
        case 68:
        {
            return _iceD_opStringStringDS(in, current);
        }
        case 69:
        {
            return _iceD_opStringStringSD(in, current);
        }
        case 70:
        {
            return _iceD_opStruct(in, current);
        }
        case 71:
        {
            return _iceD_opVoid(in, current);
        }
        case 72:
        {
            return _iceD_opWStringLiterals(in, current);
        }
        case 73:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::MyClass::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< MyClass, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::MyClass::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< MyClass, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(MyClassPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = MyClassPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(MyClass::ice_staticId(), v);
    }
}
/// \endcond

Test::MyClass1::~MyClass1()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(MyClass1* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::MyClass1::ice_clone() const
{
    ::Ice::Object* p = new MyClass1(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_MyClass1_ids[2] =
{
    "::Ice::Object",
    "::Test::MyClass1"
};

}

bool
Test::MyClass1::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MyClass1_ids, iceC_Test_MyClass1_ids + 2, s);
}

::std::vector< ::std::string>
Test::MyClass1::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_MyClass1_ids[0], &iceC_Test_MyClass1_ids[2]);
}

const ::std::string&
Test::MyClass1::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MyClass1::ice_staticId()
{
    static const ::std::string typeId = "::Test::MyClass1";
    return typeId;
}

/// \cond STREAM
void
Test::MyClass1::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< MyClass1, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::MyClass1::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< MyClass1, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::MyClass1> iceC_Test_MyClass1_init("::Test::MyClass1");
}

::Ice::ValueFactoryPtr
Test::MyClass1::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::MyClass1::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(MyClass1Ptr& handle, const ::Ice::ObjectPtr& v)
{
    handle = MyClass1Ptr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(MyClass1::ice_staticId(), v);
    }
}
/// \endcond

Test::MyDerivedClass::~MyDerivedClass()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(MyDerivedClass* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Test_MyDerivedClass_ids[3] =
{
    "::Ice::Object",
    "::Test::MyClass",
    "::Test::MyDerivedClass"
};

}

bool
Test::MyDerivedClass::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MyDerivedClass_ids, iceC_Test_MyDerivedClass_ids + 3, s);
}

::std::vector< ::std::string>
Test::MyDerivedClass::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_MyDerivedClass_ids[0], &iceC_Test_MyDerivedClass_ids[3]);
}

const ::std::string&
Test::MyDerivedClass::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MyDerivedClass::ice_staticId()
{
    static const ::std::string typeId = "::Test::MyDerivedClass";
    return typeId;
}

/// \cond INTERNAL
bool
Test::MyDerivedClass::_iceD_opDerived(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->opDerived_async(new IceAsync::Test::AMD_MyDerivedClass_opDerived(inS), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyDerivedClass::_iceD_opMyClass1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    MyClass1Ptr iceP_opMyClass1;
    istr->read(iceP_opMyClass1);
    istr->readPendingValues();
    inS.endReadParams();
    this->opMyClass1_async(new IceAsync::Test::AMD_MyDerivedClass_opMyClass1(inS), iceP_opMyClass1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyDerivedClass::_iceD_opMyStruct1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    MyStruct1 iceP_opMyStruct1;
    istr->read(iceP_opMyStruct1);
    inS.endReadParams();
    this->opMyStruct1_async(new IceAsync::Test::AMD_MyDerivedClass_opMyStruct1(inS), iceP_opMyStruct1, current);
    return false;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_MyDerivedClass_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opBool",
    "opBoolBoolSD",
    "opBoolS",
    "opBoolSS",
    "opByte",
    "opByte1",
    "opByteBoolD",
    "opByteBoolD1",
    "opByteBoolD2",
    "opByteBoolDS",
    "opByteByteSD",
    "opByteS",
    "opByteSOneway",
    "opByteSOnewayCallCount",
    "opByteSS",
    "opContext",
    "opDerived",
    "opDouble1",
    "opDoubleMarshaling",
    "opFloat1",
    "opFloatDouble",
    "opFloatDoubleS",
    "opFloatDoubleSS",
    "opIdempotent",
    "opInt1",
    "opIntIntSD",
    "opIntS",
    "opLong1",
    "opLongFloatD",
    "opLongFloatDS",
    "opLongLongSD",
    "opMDict1",
    "opMDict2",
    "opMSeq1",
    "opMSeq2",
    "opMStruct1",
    "opMStruct2",
    "opMyClass",
    "opMyClass1",
    "opMyEnum",
    "opMyEnumMyEnumSD",
    "opMyEnumStringD",
    "opMyEnumStringDS",
    "opMyStruct1",
    "opMyStructMyEnumD",
    "opMyStructMyEnumDS",
    "opNonmutating",
    "opShort1",
    "opShortIntD",
    "opShortIntDS",
    "opShortIntLong",
    "opShortIntLongS",
    "opShortIntLongSS",
    "opShortShortSD",
    "opString",
    "opString1",
    "opStringDoubleSD",
    "opStringFloatSD",
    "opStringLiterals",
    "opStringMyEnumD",
    "opStringMyEnumDS",
    "opStringS",
    "opStringS1",
    "opStringS2",
    "opStringSS",
    "opStringSSS",
    "opStringStringD",
    "opStringStringDS",
    "opStringStringSD",
    "opStruct",
    "opVoid",
    "opWStringLiterals",
    "shutdown"
};

}

/// \cond INTERNAL
bool
Test::MyDerivedClass::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_MyDerivedClass_all, iceC_Test_MyDerivedClass_all + 77, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_MyDerivedClass_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opBool(in, current);
        }
        case 5:
        {
            return _iceD_opBoolBoolSD(in, current);
        }
        case 6:
        {
            return _iceD_opBoolS(in, current);
        }
        case 7:
        {
            return _iceD_opBoolSS(in, current);
        }
        case 8:
        {
            return _iceD_opByte(in, current);
        }
        case 9:
        {
            return _iceD_opByte1(in, current);
        }
        case 10:
        {
            return _iceD_opByteBoolD(in, current);
        }
        case 11:
        {
            return _iceD_opByteBoolD1(in, current);
        }
        case 12:
        {
            return _iceD_opByteBoolD2(in, current);
        }
        case 13:
        {
            return _iceD_opByteBoolDS(in, current);
        }
        case 14:
        {
            return _iceD_opByteByteSD(in, current);
        }
        case 15:
        {
            return _iceD_opByteS(in, current);
        }
        case 16:
        {
            return _iceD_opByteSOneway(in, current);
        }
        case 17:
        {
            return _iceD_opByteSOnewayCallCount(in, current);
        }
        case 18:
        {
            return _iceD_opByteSS(in, current);
        }
        case 19:
        {
            return _iceD_opContext(in, current);
        }
        case 20:
        {
            return _iceD_opDerived(in, current);
        }
        case 21:
        {
            return _iceD_opDouble1(in, current);
        }
        case 22:
        {
            return _iceD_opDoubleMarshaling(in, current);
        }
        case 23:
        {
            return _iceD_opFloat1(in, current);
        }
        case 24:
        {
            return _iceD_opFloatDouble(in, current);
        }
        case 25:
        {
            return _iceD_opFloatDoubleS(in, current);
        }
        case 26:
        {
            return _iceD_opFloatDoubleSS(in, current);
        }
        case 27:
        {
            return _iceD_opIdempotent(in, current);
        }
        case 28:
        {
            return _iceD_opInt1(in, current);
        }
        case 29:
        {
            return _iceD_opIntIntSD(in, current);
        }
        case 30:
        {
            return _iceD_opIntS(in, current);
        }
        case 31:
        {
            return _iceD_opLong1(in, current);
        }
        case 32:
        {
            return _iceD_opLongFloatD(in, current);
        }
        case 33:
        {
            return _iceD_opLongFloatDS(in, current);
        }
        case 34:
        {
            return _iceD_opLongLongSD(in, current);
        }
        case 35:
        {
            return _iceD_opMDict1(in, current);
        }
        case 36:
        {
            return _iceD_opMDict2(in, current);
        }
        case 37:
        {
            return _iceD_opMSeq1(in, current);
        }
        case 38:
        {
            return _iceD_opMSeq2(in, current);
        }
        case 39:
        {
            return _iceD_opMStruct1(in, current);
        }
        case 40:
        {
            return _iceD_opMStruct2(in, current);
        }
        case 41:
        {
            return _iceD_opMyClass(in, current);
        }
        case 42:
        {
            return _iceD_opMyClass1(in, current);
        }
        case 43:
        {
            return _iceD_opMyEnum(in, current);
        }
        case 44:
        {
            return _iceD_opMyEnumMyEnumSD(in, current);
        }
        case 45:
        {
            return _iceD_opMyEnumStringD(in, current);
        }
        case 46:
        {
            return _iceD_opMyEnumStringDS(in, current);
        }
        case 47:
        {
            return _iceD_opMyStruct1(in, current);
        }
        case 48:
        {
            return _iceD_opMyStructMyEnumD(in, current);
        }
        case 49:
        {
            return _iceD_opMyStructMyEnumDS(in, current);
        }
        case 50:
        {
            return _iceD_opNonmutating(in, current);
        }
        case 51:
        {
            return _iceD_opShort1(in, current);
        }
        case 52:
        {
            return _iceD_opShortIntD(in, current);
        }
        case 53:
        {
            return _iceD_opShortIntDS(in, current);
        }
        case 54:
        {
            return _iceD_opShortIntLong(in, current);
        }
        case 55:
        {
            return _iceD_opShortIntLongS(in, current);
        }
        case 56:
        {
            return _iceD_opShortIntLongSS(in, current);
        }
        case 57:
        {
            return _iceD_opShortShortSD(in, current);
        }
        case 58:
        {
            return _iceD_opString(in, current);
        }
        case 59:
        {
            return _iceD_opString1(in, current);
        }
        case 60:
        {
            return _iceD_opStringDoubleSD(in, current);
        }
        case 61:
        {
            return _iceD_opStringFloatSD(in, current);
        }
        case 62:
        {
            return _iceD_opStringLiterals(in, current);
        }
        case 63:
        {
            return _iceD_opStringMyEnumD(in, current);
        }
        case 64:
        {
            return _iceD_opStringMyEnumDS(in, current);
        }
        case 65:
        {
            return _iceD_opStringS(in, current);
        }
        case 66:
        {
            return _iceD_opStringS1(in, current);
        }
        case 67:
        {
            return _iceD_opStringS2(in, current);
        }
        case 68:
        {
            return _iceD_opStringSS(in, current);
        }
        case 69:
        {
            return _iceD_opStringSSS(in, current);
        }
        case 70:
        {
            return _iceD_opStringStringD(in, current);
        }
        case 71:
        {
            return _iceD_opStringStringDS(in, current);
        }
        case 72:
        {
            return _iceD_opStringStringSD(in, current);
        }
        case 73:
        {
            return _iceD_opStruct(in, current);
        }
        case 74:
        {
            return _iceD_opVoid(in, current);
        }
        case 75:
        {
            return _iceD_opWStringLiterals(in, current);
        }
        case 76:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::MyDerivedClass::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< MyDerivedClass, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::MyDerivedClass::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< MyDerivedClass, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(MyDerivedClassPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = MyDerivedClassPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(MyDerivedClass::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
