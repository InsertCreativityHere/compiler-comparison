//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Callback.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Callback.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_Test_CallbackReceiver_ids[2] =
{
    "::Ice::Object",
    "::Test::CallbackReceiver"
};
const ::std::string iceC_Test_CallbackReceiver_ops[] =
{
    "callback",
    "callbackWithPayload",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Test_CallbackReceiver_callback_name = "callback";
const ::std::string iceC_Test_CallbackReceiver_callbackWithPayload_name = "callbackWithPayload";

const ::std::string iceC_Test_Callback_ids[2] =
{
    "::Ice::Object",
    "::Test::Callback"
};
const ::std::string iceC_Test_Callback_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "initiateCallback",
    "initiateCallbackWithPayload",
    "shutdown"
};
const ::std::string iceC_Test_Callback_initiateCallback_name = "initiateCallback";
const ::std::string iceC_Test_Callback_initiateCallbackWithPayload_name = "initiateCallbackWithPayload";
const ::std::string iceC_Test_Callback_shutdown_name = "shutdown";

}

bool
Test::CallbackReceiver::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_CallbackReceiver_ids, iceC_Test_CallbackReceiver_ids + 2, s);
}

::std::vector<::std::string>
Test::CallbackReceiver::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_CallbackReceiver_ids[0], &iceC_Test_CallbackReceiver_ids[2]);
}

::std::string
Test::CallbackReceiver::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::CallbackReceiver::ice_staticId()
{
    static const ::std::string typeId = "::Test::CallbackReceiver";
    return typeId;
}

/// \cond INTERNAL
bool
Test::CallbackReceiver::_iceD_callback(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_token;
    istr->readAll(iceP_token);
    inS.endReadParams();
    this->callback(iceP_token, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::CallbackReceiver::_iceD_callbackWithPayload(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Ice::ByteSeq iceP_payload;
    istr->readAll(iceP_payload);
    inS.endReadParams();
    this->callbackWithPayload(::std::move(iceP_payload), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::CallbackReceiver::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_CallbackReceiver_ops, iceC_Test_CallbackReceiver_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_CallbackReceiver_ops)
    {
        case 0:
        {
            return _iceD_callback(in, current);
        }
        case 1:
        {
            return _iceD_callbackWithPayload(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::Callback::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Callback_ids, iceC_Test_Callback_ids + 2, s);
}

::std::vector<::std::string>
Test::Callback::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Callback_ids[0], &iceC_Test_Callback_ids[2]);
}

::std::string
Test::Callback::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Callback::ice_staticId()
{
    static const ::std::string typeId = "::Test::Callback";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Callback::_iceD_initiateCallback(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<CallbackReceiverPrx> iceP_proxy;
    int iceP_token;
    istr->readAll(iceP_proxy, iceP_token);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->initiateCallbackAsync(::std::move(iceP_proxy), iceP_token, inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Callback::_iceD_initiateCallbackWithPayload(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<CallbackReceiverPrx> iceP_proxy;
    istr->readAll(iceP_proxy);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->initiateCallbackWithPayloadAsync(::std::move(iceP_proxy), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Callback::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Callback::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Callback_ops, iceC_Test_Callback_ops + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Callback_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_initiateCallback(in, current);
        }
        case 5:
        {
            return _iceD_initiateCallbackWithPayload(in, current);
        }
        case 6:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
Test::CallbackReceiverPrx::_iceI_callback(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_token, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_CallbackReceiver_callback_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_token);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::CallbackReceiverPrx::_iceI_callbackWithPayload(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::ByteSeq& iceP_payload, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_CallbackReceiver_callbackWithPayload_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_payload);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::CallbackReceiverPrx::_newInstance() const
{
    return ::IceInternal::createProxy<CallbackReceiverPrx>();
}
/// \endcond

const ::std::string&
Test::CallbackReceiverPrx::ice_staticId()
{
    return CallbackReceiver::ice_staticId();
}

/// \cond INTERNAL
void
Test::CallbackPrx::_iceI_initiateCallback(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<CallbackReceiverPrx>& iceP_proxy, int iceP_token, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Callback_initiateCallback_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_proxy, iceP_token);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::CallbackPrx::_iceI_initiateCallbackWithPayload(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<CallbackReceiverPrx>& iceP_proxy, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Callback_initiateCallbackWithPayload_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_proxy);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::CallbackPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Callback_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::CallbackPrx::_newInstance() const
{
    return ::IceInternal::createProxy<CallbackPrx>();
}
/// \endcond

const ::std::string&
Test::CallbackPrx::ice_staticId()
{
    return Callback::ice_staticId();
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_Test_CallbackReceiver_callback_name = "callback";

const ::std::string iceC_Test_CallbackReceiver_callbackWithPayload_name = "callbackWithPayload";

const ::std::string iceC_Test_Callback_initiateCallback_name = "initiateCallback";

const ::std::string iceC_Test_Callback_initiateCallbackWithPayload_name = "initiateCallbackWithPayload";

const ::std::string iceC_Test_Callback_shutdown_name = "shutdown";

}

Test::AMD_Callback_initiateCallback::~AMD_Callback_initiateCallback()
{
}

Test::AMD_Callback_initiateCallbackWithPayload::~AMD_Callback_initiateCallbackWithPayload()
{
}

/// \cond INTERNAL
IceAsync::Test::AMD_Callback_initiateCallback::AMD_Callback_initiateCallback(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Callback_initiateCallback::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Callback_initiateCallbackWithPayload::AMD_Callback_initiateCallbackWithPayload(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Callback_initiateCallbackWithPayload::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(CallbackReceiver* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< CallbackReceiver>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new CallbackReceiver;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::CallbackReceiver::_iceI_begin_callback(::Ice::Int iceP_token, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_CallbackReceiver_callback_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_CallbackReceiver_callback_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_token);
        result->endWriteParams();
        result->invoke(iceC_Test_CallbackReceiver_callback_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::CallbackReceiver::end_callback(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_CallbackReceiver_callback_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::CallbackReceiver::_iceI_begin_callbackWithPayload(const ::Ice::ByteSeq& iceP_payload, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_CallbackReceiver_callbackWithPayload_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_CallbackReceiver_callbackWithPayload_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_payload);
        result->endWriteParams();
        result->invoke(iceC_Test_CallbackReceiver_callbackWithPayload_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::CallbackReceiver::end_callbackWithPayload(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_CallbackReceiver_callbackWithPayload_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::CallbackReceiver::_newInstance() const
{
    return new CallbackReceiver;
}
/// \endcond

const ::std::string&
IceProxy::Test::CallbackReceiver::ice_staticId()
{
    return ::Test::CallbackReceiver::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(Callback* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Callback>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Callback;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::Callback::_iceI_begin_initiateCallback(const ::Test::CallbackReceiverPrx& iceP_proxy, ::Ice::Int iceP_token, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Callback_initiateCallback_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Callback_initiateCallback_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_proxy);
        ostr->write(iceP_token);
        result->endWriteParams();
        result->invoke(iceC_Test_Callback_initiateCallback_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Callback::end_initiateCallback(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Callback_initiateCallback_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Callback::_iceI_begin_initiateCallbackWithPayload(const ::Test::CallbackReceiverPrx& iceP_proxy, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Callback_initiateCallbackWithPayload_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Callback_initiateCallbackWithPayload_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_proxy);
        result->endWriteParams();
        result->invoke(iceC_Test_Callback_initiateCallbackWithPayload_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Callback::end_initiateCallbackWithPayload(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Callback_initiateCallbackWithPayload_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Callback::_iceI_begin_shutdown(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Callback_shutdown_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Callback_shutdown_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Callback_shutdown_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Callback::end_shutdown(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Callback_shutdown_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Callback::_newInstance() const
{
    return new Callback;
}
/// \endcond

const ::std::string&
IceProxy::Test::Callback::ice_staticId()
{
    return ::Test::Callback::ice_staticId();
}

Test::CallbackReceiver::~CallbackReceiver()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(CallbackReceiver* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Test_CallbackReceiver_ids[2] =
{
    "::Ice::Object",
    "::Test::CallbackReceiver"
};

}

bool
Test::CallbackReceiver::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_CallbackReceiver_ids, iceC_Test_CallbackReceiver_ids + 2, s);
}

::std::vector< ::std::string>
Test::CallbackReceiver::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_CallbackReceiver_ids[0], &iceC_Test_CallbackReceiver_ids[2]);
}

const ::std::string&
Test::CallbackReceiver::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::CallbackReceiver::ice_staticId()
{
    static const ::std::string typeId = "::Test::CallbackReceiver";
    return typeId;
}

/// \cond INTERNAL
bool
Test::CallbackReceiver::_iceD_callback(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_token;
    istr->read(iceP_token);
    inS.endReadParams();
    this->callback(iceP_token, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::CallbackReceiver::_iceD_callbackWithPayload(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::ByteSeq iceP_payload;
    istr->read(iceP_payload);
    inS.endReadParams();
    this->callbackWithPayload(iceP_payload, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_CallbackReceiver_all[] =
{
    "callback",
    "callbackWithPayload",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
Test::CallbackReceiver::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_CallbackReceiver_all, iceC_Test_CallbackReceiver_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_CallbackReceiver_all)
    {
        case 0:
        {
            return _iceD_callback(in, current);
        }
        case 1:
        {
            return _iceD_callbackWithPayload(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::CallbackReceiver::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< CallbackReceiver, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::CallbackReceiver::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< CallbackReceiver, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(CallbackReceiverPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = CallbackReceiverPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(CallbackReceiver::ice_staticId(), v);
    }
}
/// \endcond

Test::Callback::~Callback()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(Callback* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Test_Callback_ids[2] =
{
    "::Ice::Object",
    "::Test::Callback"
};

}

bool
Test::Callback::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Callback_ids, iceC_Test_Callback_ids + 2, s);
}

::std::vector< ::std::string>
Test::Callback::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Callback_ids[0], &iceC_Test_Callback_ids[2]);
}

const ::std::string&
Test::Callback::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Callback::ice_staticId()
{
    static const ::std::string typeId = "::Test::Callback";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Callback::_iceD_initiateCallback(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    CallbackReceiverPrx iceP_proxy;
    ::Ice::Int iceP_token;
    istr->read(iceP_proxy);
    istr->read(iceP_token);
    inS.endReadParams();
    this->initiateCallback_async(new IceAsync::Test::AMD_Callback_initiateCallback(inS), iceP_proxy, iceP_token, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Callback::_iceD_initiateCallbackWithPayload(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    CallbackReceiverPrx iceP_proxy;
    istr->read(iceP_proxy);
    inS.endReadParams();
    this->initiateCallbackWithPayload_async(new IceAsync::Test::AMD_Callback_initiateCallbackWithPayload(inS), iceP_proxy, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Callback::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_Callback_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "initiateCallback",
    "initiateCallbackWithPayload",
    "shutdown"
};

}

/// \cond INTERNAL
bool
Test::Callback::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Callback_all, iceC_Test_Callback_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Callback_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_initiateCallback(in, current);
        }
        case 5:
        {
            return _iceD_initiateCallbackWithPayload(in, current);
        }
        case 6:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::Callback::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Callback, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Callback::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Callback, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(CallbackPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = CallbackPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Callback::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
