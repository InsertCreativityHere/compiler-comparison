//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Callback.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Callback.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::CallbackException> iceC_Test_CallbackException_init("::Test::CallbackException");

const ::std::string iceC_Test_CallbackReceiver_ids[2] =
{
    "::Ice::Object",
    "::Test::CallbackReceiver"
};
const ::std::string iceC_Test_CallbackReceiver_ops[] =
{
    "callback",
    "callbackEx",
    "callbackWithPayload",
    "concurrentCallback",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "waitCallback"
};
const ::std::string iceC_Test_CallbackReceiver_callback_name = "callback";
const ::std::string iceC_Test_CallbackReceiver_callbackEx_name = "callbackEx";
const ::std::string iceC_Test_CallbackReceiver_concurrentCallback_name = "concurrentCallback";
const ::std::string iceC_Test_CallbackReceiver_waitCallback_name = "waitCallback";
const ::std::string iceC_Test_CallbackReceiver_callbackWithPayload_name = "callbackWithPayload";

const ::std::string iceC_Test_Callback_ids[2] =
{
    "::Ice::Object",
    "::Test::Callback"
};
const ::std::string iceC_Test_Callback_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "initiateCallback",
    "initiateCallbackEx",
    "initiateCallbackWithPayload",
    "initiateConcurrentCallback",
    "initiateWaitCallback",
    "shutdown"
};
const ::std::string iceC_Test_Callback_initiateCallback_name = "initiateCallback";
const ::std::string iceC_Test_Callback_initiateCallbackEx_name = "initiateCallbackEx";
const ::std::string iceC_Test_Callback_initiateConcurrentCallback_name = "initiateConcurrentCallback";
const ::std::string iceC_Test_Callback_initiateWaitCallback_name = "initiateWaitCallback";
const ::std::string iceC_Test_Callback_initiateCallbackWithPayload_name = "initiateCallbackWithPayload";
const ::std::string iceC_Test_Callback_shutdown_name = "shutdown";

}

Test::CallbackException::~CallbackException()
{
}

const ::std::string&
Test::CallbackException::ice_staticId()
{
    static const ::std::string typeId = "::Test::CallbackException";
    return typeId;
}

bool
Test::CallbackReceiver::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_CallbackReceiver_ids, iceC_Test_CallbackReceiver_ids + 2, s);
}

::std::vector<::std::string>
Test::CallbackReceiver::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_CallbackReceiver_ids[0], &iceC_Test_CallbackReceiver_ids[2]);
}

::std::string
Test::CallbackReceiver::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::CallbackReceiver::ice_staticId()
{
    static const ::std::string typeId = "::Test::CallbackReceiver";
    return typeId;
}

/// \cond INTERNAL
bool
Test::CallbackReceiver::_iceD_callback(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->callback(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::CallbackReceiver::_iceD_callbackEx(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->callbackEx(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::CallbackReceiver::_iceD_concurrentCallback(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_number;
    istr->readAll(iceP_number);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->concurrentCallbackAsync(iceP_number, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::CallbackReceiver::_iceD_waitCallback(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->waitCallback(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::CallbackReceiver::_iceD_callbackWithPayload(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Ice::ByteSeq iceP_payload;
    istr->readAll(iceP_payload);
    inS.endReadParams();
    this->callbackWithPayload(::std::move(iceP_payload), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::CallbackReceiver::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_CallbackReceiver_ops, iceC_Test_CallbackReceiver_ops + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_CallbackReceiver_ops)
    {
        case 0:
        {
            return _iceD_callback(in, current);
        }
        case 1:
        {
            return _iceD_callbackEx(in, current);
        }
        case 2:
        {
            return _iceD_callbackWithPayload(in, current);
        }
        case 3:
        {
            return _iceD_concurrentCallback(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        case 8:
        {
            return _iceD_waitCallback(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::Callback::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Callback_ids, iceC_Test_Callback_ids + 2, s);
}

::std::vector<::std::string>
Test::Callback::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Callback_ids[0], &iceC_Test_Callback_ids[2]);
}

::std::string
Test::Callback::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Callback::ice_staticId()
{
    static const ::std::string typeId = "::Test::Callback";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Callback::_iceD_initiateCallback(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<CallbackReceiverPrx> iceP_proxy;
    istr->readAll(iceP_proxy);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->initiateCallbackAsync(::std::move(iceP_proxy), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Callback::_iceD_initiateCallbackEx(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<CallbackReceiverPrx> iceP_proxy;
    istr->readAll(iceP_proxy);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->initiateCallbackExAsync(::std::move(iceP_proxy), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Callback::_iceD_initiateConcurrentCallback(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_number;
    ::std::shared_ptr<CallbackReceiverPrx> iceP_proxy;
    istr->readAll(iceP_number, iceP_proxy);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->initiateConcurrentCallbackAsync(iceP_number, ::std::move(iceP_proxy), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Callback::_iceD_initiateWaitCallback(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<CallbackReceiverPrx> iceP_proxy;
    istr->readAll(iceP_proxy);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->initiateWaitCallbackAsync(::std::move(iceP_proxy), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Callback::_iceD_initiateCallbackWithPayload(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<CallbackReceiverPrx> iceP_proxy;
    istr->readAll(iceP_proxy);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->initiateCallbackWithPayloadAsync(::std::move(iceP_proxy), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Callback::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Callback::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Callback_ops, iceC_Test_Callback_ops + 10, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Callback_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_initiateCallback(in, current);
        }
        case 5:
        {
            return _iceD_initiateCallbackEx(in, current);
        }
        case 6:
        {
            return _iceD_initiateCallbackWithPayload(in, current);
        }
        case 7:
        {
            return _iceD_initiateConcurrentCallback(in, current);
        }
        case 8:
        {
            return _iceD_initiateWaitCallback(in, current);
        }
        case 9:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
Test::CallbackReceiverPrx::_iceI_callback(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_CallbackReceiver_callback_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::CallbackReceiverPrx::_iceI_callbackEx(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_CallbackReceiver_callbackEx_name);
    outAsync->invoke(iceC_Test_CallbackReceiver_callbackEx_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const CallbackException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::CallbackReceiverPrx::_iceI_concurrentCallback(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, int iceP_number, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_CallbackReceiver_concurrentCallback_name);
    outAsync->invoke(iceC_Test_CallbackReceiver_concurrentCallback_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_number);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::CallbackReceiverPrx::_iceI_waitCallback(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_CallbackReceiver_waitCallback_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::CallbackReceiverPrx::_iceI_callbackWithPayload(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::ByteSeq& iceP_payload, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_CallbackReceiver_callbackWithPayload_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_payload);
        },
        nullptr);
}
/// \endcond

const ::std::string&
Test::CallbackReceiverPrx::ice_staticId()
{
    return CallbackReceiver::ice_staticId();
}

/// \cond INTERNAL
void
Test::CallbackPrx::_iceI_initiateCallback(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<CallbackReceiverPrx>& iceP_proxy, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Callback_initiateCallback_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_proxy);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::CallbackPrx::_iceI_initiateCallbackEx(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<CallbackReceiverPrx>& iceP_proxy, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Callback_initiateCallbackEx_name);
    outAsync->invoke(iceC_Test_Callback_initiateCallbackEx_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_proxy);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const CallbackException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::CallbackPrx::_iceI_initiateConcurrentCallback(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, int iceP_number, const ::std::shared_ptr<CallbackReceiverPrx>& iceP_proxy, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Callback_initiateConcurrentCallback_name);
    outAsync->invoke(iceC_Test_Callback_initiateConcurrentCallback_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_number, iceP_proxy);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::CallbackPrx::_iceI_initiateWaitCallback(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<CallbackReceiverPrx>& iceP_proxy, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Callback_initiateWaitCallback_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_proxy);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::CallbackPrx::_iceI_initiateCallbackWithPayload(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<CallbackReceiverPrx>& iceP_proxy, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Callback_initiateCallbackWithPayload_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_proxy);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::CallbackPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Callback_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::CallbackPrx::ice_staticId()
{
    return Callback::ice_staticId();
}
