//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Callback.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Callback.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::CallbackException> iceC_Test_CallbackException_init("::Test::CallbackException");

const ::std::string iceC_Test_CallbackReceiver_ids[2] =
{
    "::Ice::Object",
    "::Test::CallbackReceiver"
};
const ::std::string iceC_Test_CallbackReceiver_ops[] =
{
    "callback",
    "callbackEx",
    "callbackWithPayload",
    "concurrentCallback",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "waitCallback"
};
const ::std::string iceC_Test_CallbackReceiver_callback_name = "callback";
const ::std::string iceC_Test_CallbackReceiver_callbackEx_name = "callbackEx";
const ::std::string iceC_Test_CallbackReceiver_concurrentCallback_name = "concurrentCallback";
const ::std::string iceC_Test_CallbackReceiver_waitCallback_name = "waitCallback";
const ::std::string iceC_Test_CallbackReceiver_callbackWithPayload_name = "callbackWithPayload";

const ::std::string iceC_Test_Callback_ids[2] =
{
    "::Ice::Object",
    "::Test::Callback"
};
const ::std::string iceC_Test_Callback_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "initiateCallback",
    "initiateCallbackEx",
    "initiateCallbackWithPayload",
    "initiateConcurrentCallback",
    "initiateWaitCallback",
    "shutdown"
};
const ::std::string iceC_Test_Callback_initiateCallback_name = "initiateCallback";
const ::std::string iceC_Test_Callback_initiateCallbackEx_name = "initiateCallbackEx";
const ::std::string iceC_Test_Callback_initiateConcurrentCallback_name = "initiateConcurrentCallback";
const ::std::string iceC_Test_Callback_initiateWaitCallback_name = "initiateWaitCallback";
const ::std::string iceC_Test_Callback_initiateCallbackWithPayload_name = "initiateCallbackWithPayload";
const ::std::string iceC_Test_Callback_shutdown_name = "shutdown";

}

Test::CallbackException::~CallbackException()
{
}

const ::std::string&
Test::CallbackException::ice_staticId()
{
    static const ::std::string typeId = "::Test::CallbackException";
    return typeId;
}

bool
Test::CallbackReceiver::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_CallbackReceiver_ids, iceC_Test_CallbackReceiver_ids + 2, s);
}

::std::vector<::std::string>
Test::CallbackReceiver::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_CallbackReceiver_ids[0], &iceC_Test_CallbackReceiver_ids[2]);
}

::std::string
Test::CallbackReceiver::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::CallbackReceiver::ice_staticId()
{
    static const ::std::string typeId = "::Test::CallbackReceiver";
    return typeId;
}

/// \cond INTERNAL
bool
Test::CallbackReceiver::_iceD_callback(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->callback(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::CallbackReceiver::_iceD_callbackEx(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->callbackEx(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::CallbackReceiver::_iceD_concurrentCallback(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_number;
    istr->readAll(iceP_number);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->concurrentCallbackAsync(iceP_number, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::CallbackReceiver::_iceD_waitCallback(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->waitCallback(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::CallbackReceiver::_iceD_callbackWithPayload(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Ice::ByteSeq iceP_payload;
    istr->readAll(iceP_payload);
    inS.endReadParams();
    this->callbackWithPayload(::std::move(iceP_payload), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::CallbackReceiver::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_CallbackReceiver_ops, iceC_Test_CallbackReceiver_ops + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_CallbackReceiver_ops)
    {
        case 0:
        {
            return _iceD_callback(in, current);
        }
        case 1:
        {
            return _iceD_callbackEx(in, current);
        }
        case 2:
        {
            return _iceD_callbackWithPayload(in, current);
        }
        case 3:
        {
            return _iceD_concurrentCallback(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        case 8:
        {
            return _iceD_waitCallback(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::Callback::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Callback_ids, iceC_Test_Callback_ids + 2, s);
}

::std::vector<::std::string>
Test::Callback::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Callback_ids[0], &iceC_Test_Callback_ids[2]);
}

::std::string
Test::Callback::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Callback::ice_staticId()
{
    static const ::std::string typeId = "::Test::Callback";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Callback::_iceD_initiateCallback(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<CallbackReceiverPrx> iceP_proxy;
    istr->readAll(iceP_proxy);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->initiateCallbackAsync(::std::move(iceP_proxy), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Callback::_iceD_initiateCallbackEx(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<CallbackReceiverPrx> iceP_proxy;
    istr->readAll(iceP_proxy);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->initiateCallbackExAsync(::std::move(iceP_proxy), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Callback::_iceD_initiateConcurrentCallback(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_number;
    ::std::shared_ptr<CallbackReceiverPrx> iceP_proxy;
    istr->readAll(iceP_number, iceP_proxy);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->initiateConcurrentCallbackAsync(iceP_number, ::std::move(iceP_proxy), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Callback::_iceD_initiateWaitCallback(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<CallbackReceiverPrx> iceP_proxy;
    istr->readAll(iceP_proxy);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->initiateWaitCallbackAsync(::std::move(iceP_proxy), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Callback::_iceD_initiateCallbackWithPayload(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<CallbackReceiverPrx> iceP_proxy;
    istr->readAll(iceP_proxy);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->initiateCallbackWithPayloadAsync(::std::move(iceP_proxy), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Callback::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Callback::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Callback_ops, iceC_Test_Callback_ops + 10, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Callback_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_initiateCallback(in, current);
        }
        case 5:
        {
            return _iceD_initiateCallbackEx(in, current);
        }
        case 6:
        {
            return _iceD_initiateCallbackWithPayload(in, current);
        }
        case 7:
        {
            return _iceD_initiateConcurrentCallback(in, current);
        }
        case 8:
        {
            return _iceD_initiateWaitCallback(in, current);
        }
        case 9:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
Test::CallbackReceiverPrx::_iceI_callback(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_CallbackReceiver_callback_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::CallbackReceiverPrx::_iceI_callbackEx(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_CallbackReceiver_callbackEx_name);
    outAsync->invoke(iceC_Test_CallbackReceiver_callbackEx_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const CallbackException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::CallbackReceiverPrx::_iceI_concurrentCallback(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, int iceP_number, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_CallbackReceiver_concurrentCallback_name);
    outAsync->invoke(iceC_Test_CallbackReceiver_concurrentCallback_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_number);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::CallbackReceiverPrx::_iceI_waitCallback(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_CallbackReceiver_waitCallback_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::CallbackReceiverPrx::_iceI_callbackWithPayload(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::ByteSeq& iceP_payload, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_CallbackReceiver_callbackWithPayload_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_payload);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::CallbackReceiverPrx::_newInstance() const
{
    return ::IceInternal::createProxy<CallbackReceiverPrx>();
}
/// \endcond

const ::std::string&
Test::CallbackReceiverPrx::ice_staticId()
{
    return CallbackReceiver::ice_staticId();
}

/// \cond INTERNAL
void
Test::CallbackPrx::_iceI_initiateCallback(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<CallbackReceiverPrx>& iceP_proxy, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Callback_initiateCallback_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_proxy);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::CallbackPrx::_iceI_initiateCallbackEx(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<CallbackReceiverPrx>& iceP_proxy, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Callback_initiateCallbackEx_name);
    outAsync->invoke(iceC_Test_Callback_initiateCallbackEx_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_proxy);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const CallbackException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::CallbackPrx::_iceI_initiateConcurrentCallback(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, int iceP_number, const ::std::shared_ptr<CallbackReceiverPrx>& iceP_proxy, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Callback_initiateConcurrentCallback_name);
    outAsync->invoke(iceC_Test_Callback_initiateConcurrentCallback_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_number, iceP_proxy);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::CallbackPrx::_iceI_initiateWaitCallback(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<CallbackReceiverPrx>& iceP_proxy, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Callback_initiateWaitCallback_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_proxy);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::CallbackPrx::_iceI_initiateCallbackWithPayload(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<CallbackReceiverPrx>& iceP_proxy, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Callback_initiateCallbackWithPayload_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_proxy);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::CallbackPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Callback_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::CallbackPrx::_newInstance() const
{
    return ::IceInternal::createProxy<CallbackPrx>();
}
/// \endcond

const ::std::string&
Test::CallbackPrx::ice_staticId()
{
    return Callback::ice_staticId();
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_Test_CallbackReceiver_callback_name = "callback";

const ::std::string iceC_Test_CallbackReceiver_callbackEx_name = "callbackEx";

const ::std::string iceC_Test_CallbackReceiver_concurrentCallback_name = "concurrentCallback";

const ::std::string iceC_Test_CallbackReceiver_waitCallback_name = "waitCallback";

const ::std::string iceC_Test_CallbackReceiver_callbackWithPayload_name = "callbackWithPayload";

const ::std::string iceC_Test_Callback_initiateCallback_name = "initiateCallback";

const ::std::string iceC_Test_Callback_initiateCallbackEx_name = "initiateCallbackEx";

const ::std::string iceC_Test_Callback_initiateConcurrentCallback_name = "initiateConcurrentCallback";

const ::std::string iceC_Test_Callback_initiateWaitCallback_name = "initiateWaitCallback";

const ::std::string iceC_Test_Callback_initiateCallbackWithPayload_name = "initiateCallbackWithPayload";

const ::std::string iceC_Test_Callback_shutdown_name = "shutdown";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::CallbackException> iceC_Test_CallbackException_init("::Test::CallbackException");

}

Test::CallbackException::CallbackException(::Ice::Double someValue, const ::std::string& someString) :
    ::Ice::UserException(),
    someValue(someValue),
    someString(someString)
{
}

#ifdef ICE_CPP11_COMPILER
Test::CallbackException::~CallbackException()
{
}
#else
Test::CallbackException::~CallbackException() throw()
{
}
#endif

::std::string
Test::CallbackException::ice_id() const
{
    return "::Test::CallbackException";
}

Test::CallbackException*
Test::CallbackException::ice_clone() const
{
    return new CallbackException(*this);
}

void
Test::CallbackException::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::CallbackException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::CallbackException", -1, true);
    ::Ice::StreamWriter< CallbackException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::CallbackException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< CallbackException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

Test::AMD_CallbackReceiver_concurrentCallback::~AMD_CallbackReceiver_concurrentCallback()
{
}

Test::AMD_Callback_initiateCallback::~AMD_Callback_initiateCallback()
{
}

Test::AMD_Callback_initiateCallbackEx::~AMD_Callback_initiateCallbackEx()
{
}

Test::AMD_Callback_initiateConcurrentCallback::~AMD_Callback_initiateConcurrentCallback()
{
}

Test::AMD_Callback_initiateWaitCallback::~AMD_Callback_initiateWaitCallback()
{
}

Test::AMD_Callback_initiateCallbackWithPayload::~AMD_Callback_initiateCallbackWithPayload()
{
}

/// \cond INTERNAL
IceAsync::Test::AMD_CallbackReceiver_concurrentCallback::AMD_CallbackReceiver_concurrentCallback(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_CallbackReceiver_concurrentCallback::ice_response(::Ice::Int ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Callback_initiateCallback::AMD_Callback_initiateCallback(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Callback_initiateCallback::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Callback_initiateCallbackEx::AMD_Callback_initiateCallbackEx(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Callback_initiateCallbackEx::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Callback_initiateConcurrentCallback::AMD_Callback_initiateConcurrentCallback(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Callback_initiateConcurrentCallback::ice_response(::Ice::Int ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Callback_initiateWaitCallback::AMD_Callback_initiateWaitCallback(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Callback_initiateWaitCallback::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Callback_initiateCallbackWithPayload::AMD_Callback_initiateCallbackWithPayload(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Callback_initiateCallbackWithPayload::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(CallbackReceiver* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< CallbackReceiver>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new CallbackReceiver;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::CallbackReceiver::_iceI_begin_callback(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_CallbackReceiver_callback_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_CallbackReceiver_callback_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_CallbackReceiver_callback_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::CallbackReceiver::end_callback(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_CallbackReceiver_callback_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::CallbackReceiver::_iceI_begin_callbackEx(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_CallbackReceiver_callbackEx_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_CallbackReceiver_callbackEx_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_CallbackReceiver_callbackEx_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_CallbackReceiver_callbackEx_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::CallbackReceiver::end_callbackEx(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_CallbackReceiver_callbackEx_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Test::CallbackException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::CallbackReceiver::_iceI_begin_concurrentCallback(::Ice::Int iceP_number, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_CallbackReceiver_concurrentCallback_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_CallbackReceiver_concurrentCallback_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_CallbackReceiver_concurrentCallback_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_number);
        result->endWriteParams();
        result->invoke(iceC_Test_CallbackReceiver_concurrentCallback_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::Test::CallbackReceiver::end_concurrentCallback(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_CallbackReceiver_concurrentCallback_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::CallbackReceiver::_iceI_begin_waitCallback(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_CallbackReceiver_waitCallback_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_CallbackReceiver_waitCallback_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_CallbackReceiver_waitCallback_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::CallbackReceiver::end_waitCallback(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_CallbackReceiver_waitCallback_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::CallbackReceiver::_iceI_begin_callbackWithPayload(const ::Ice::ByteSeq& iceP_payload, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_CallbackReceiver_callbackWithPayload_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_CallbackReceiver_callbackWithPayload_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_payload);
        result->endWriteParams();
        result->invoke(iceC_Test_CallbackReceiver_callbackWithPayload_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::CallbackReceiver::end_callbackWithPayload(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_CallbackReceiver_callbackWithPayload_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::CallbackReceiver::_newInstance() const
{
    return new CallbackReceiver;
}
/// \endcond

const ::std::string&
IceProxy::Test::CallbackReceiver::ice_staticId()
{
    return ::Test::CallbackReceiver::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(Callback* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Callback>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Callback;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::Callback::_iceI_begin_initiateCallback(const ::Test::CallbackReceiverPrx& iceP_proxy, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Callback_initiateCallback_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Callback_initiateCallback_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_proxy);
        result->endWriteParams();
        result->invoke(iceC_Test_Callback_initiateCallback_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Callback::end_initiateCallback(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Callback_initiateCallback_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Callback::_iceI_begin_initiateCallbackEx(const ::Test::CallbackReceiverPrx& iceP_proxy, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Callback_initiateCallbackEx_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Callback_initiateCallbackEx_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Callback_initiateCallbackEx_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_proxy);
        result->endWriteParams();
        result->invoke(iceC_Test_Callback_initiateCallbackEx_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Callback::end_initiateCallbackEx(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Callback_initiateCallbackEx_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Test::CallbackException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Callback::_iceI_begin_initiateConcurrentCallback(::Ice::Int iceP_number, const ::Test::CallbackReceiverPrx& iceP_proxy, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Callback_initiateConcurrentCallback_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Callback_initiateConcurrentCallback_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Callback_initiateConcurrentCallback_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_number);
        ostr->write(iceP_proxy);
        result->endWriteParams();
        result->invoke(iceC_Test_Callback_initiateConcurrentCallback_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::Test::Callback::end_initiateConcurrentCallback(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Callback_initiateConcurrentCallback_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Callback::_iceI_begin_initiateWaitCallback(const ::Test::CallbackReceiverPrx& iceP_proxy, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Callback_initiateWaitCallback_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Callback_initiateWaitCallback_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_proxy);
        result->endWriteParams();
        result->invoke(iceC_Test_Callback_initiateWaitCallback_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Callback::end_initiateWaitCallback(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Callback_initiateWaitCallback_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Callback::_iceI_begin_initiateCallbackWithPayload(const ::Test::CallbackReceiverPrx& iceP_proxy, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Callback_initiateCallbackWithPayload_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Callback_initiateCallbackWithPayload_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_proxy);
        result->endWriteParams();
        result->invoke(iceC_Test_Callback_initiateCallbackWithPayload_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Callback::end_initiateCallbackWithPayload(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Callback_initiateCallbackWithPayload_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Callback::_iceI_begin_shutdown(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Callback_shutdown_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Callback_shutdown_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Callback_shutdown_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Callback::end_shutdown(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Callback_shutdown_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Callback::_newInstance() const
{
    return new Callback;
}
/// \endcond

const ::std::string&
IceProxy::Test::Callback::ice_staticId()
{
    return ::Test::Callback::ice_staticId();
}

Test::CallbackReceiver::~CallbackReceiver()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(CallbackReceiver* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Test_CallbackReceiver_ids[2] =
{
    "::Ice::Object",
    "::Test::CallbackReceiver"
};

}

bool
Test::CallbackReceiver::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_CallbackReceiver_ids, iceC_Test_CallbackReceiver_ids + 2, s);
}

::std::vector< ::std::string>
Test::CallbackReceiver::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_CallbackReceiver_ids[0], &iceC_Test_CallbackReceiver_ids[2]);
}

const ::std::string&
Test::CallbackReceiver::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::CallbackReceiver::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Test::CallbackReceiver";
    return typeId;
#else
    return iceC_Test_CallbackReceiver_ids[1];
#endif
}

/// \cond INTERNAL
bool
Test::CallbackReceiver::_iceD_callback(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->callback(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::CallbackReceiver::_iceD_callbackEx(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->callbackEx(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::CallbackReceiver::_iceD_concurrentCallback(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_number;
    istr->read(iceP_number);
    inS.endReadParams();
    this->concurrentCallback_async(new IceAsync::Test::AMD_CallbackReceiver_concurrentCallback(inS), iceP_number, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::CallbackReceiver::_iceD_waitCallback(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->waitCallback(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::CallbackReceiver::_iceD_callbackWithPayload(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::ByteSeq iceP_payload;
    istr->read(iceP_payload);
    inS.endReadParams();
    this->callbackWithPayload(iceP_payload, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_CallbackReceiver_all[] =
{
    "callback",
    "callbackEx",
    "callbackWithPayload",
    "concurrentCallback",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "waitCallback"
};

}

/// \cond INTERNAL
bool
Test::CallbackReceiver::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_CallbackReceiver_all, iceC_Test_CallbackReceiver_all + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_CallbackReceiver_all)
    {
        case 0:
        {
            return _iceD_callback(in, current);
        }
        case 1:
        {
            return _iceD_callbackEx(in, current);
        }
        case 2:
        {
            return _iceD_callbackWithPayload(in, current);
        }
        case 3:
        {
            return _iceD_concurrentCallback(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        case 8:
        {
            return _iceD_waitCallback(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::CallbackReceiver::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< CallbackReceiver, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::CallbackReceiver::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< CallbackReceiver, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(CallbackReceiverPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = CallbackReceiverPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(CallbackReceiver::ice_staticId(), v);
    }
}
/// \endcond

Test::Callback::~Callback()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(Callback* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Test_Callback_ids[2] =
{
    "::Ice::Object",
    "::Test::Callback"
};

}

bool
Test::Callback::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Callback_ids, iceC_Test_Callback_ids + 2, s);
}

::std::vector< ::std::string>
Test::Callback::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Callback_ids[0], &iceC_Test_Callback_ids[2]);
}

const ::std::string&
Test::Callback::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Callback::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Test::Callback";
    return typeId;
#else
    return iceC_Test_Callback_ids[1];
#endif
}

/// \cond INTERNAL
bool
Test::Callback::_iceD_initiateCallback(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    CallbackReceiverPrx iceP_proxy;
    istr->read(iceP_proxy);
    inS.endReadParams();
    this->initiateCallback_async(new IceAsync::Test::AMD_Callback_initiateCallback(inS), iceP_proxy, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Callback::_iceD_initiateCallbackEx(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    CallbackReceiverPrx iceP_proxy;
    istr->read(iceP_proxy);
    inS.endReadParams();
    this->initiateCallbackEx_async(new IceAsync::Test::AMD_Callback_initiateCallbackEx(inS), iceP_proxy, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Callback::_iceD_initiateConcurrentCallback(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_number;
    CallbackReceiverPrx iceP_proxy;
    istr->read(iceP_number);
    istr->read(iceP_proxy);
    inS.endReadParams();
    this->initiateConcurrentCallback_async(new IceAsync::Test::AMD_Callback_initiateConcurrentCallback(inS), iceP_number, iceP_proxy, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Callback::_iceD_initiateWaitCallback(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    CallbackReceiverPrx iceP_proxy;
    istr->read(iceP_proxy);
    inS.endReadParams();
    this->initiateWaitCallback_async(new IceAsync::Test::AMD_Callback_initiateWaitCallback(inS), iceP_proxy, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Callback::_iceD_initiateCallbackWithPayload(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    CallbackReceiverPrx iceP_proxy;
    istr->read(iceP_proxy);
    inS.endReadParams();
    this->initiateCallbackWithPayload_async(new IceAsync::Test::AMD_Callback_initiateCallbackWithPayload(inS), iceP_proxy, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Callback::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_Callback_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "initiateCallback",
    "initiateCallbackEx",
    "initiateCallbackWithPayload",
    "initiateConcurrentCallback",
    "initiateWaitCallback",
    "shutdown"
};

}

/// \cond INTERNAL
bool
Test::Callback::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Callback_all, iceC_Test_Callback_all + 10, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Callback_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_initiateCallback(in, current);
        }
        case 5:
        {
            return _iceD_initiateCallbackEx(in, current);
        }
        case 6:
        {
            return _iceD_initiateCallbackWithPayload(in, current);
        }
        case 7:
        {
            return _iceD_initiateConcurrentCallback(in, current);
        }
        case 8:
        {
            return _iceD_initiateWaitCallback(in, current);
        }
        case 9:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::Callback::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Callback, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Callback::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Callback, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(CallbackPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = CallbackPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Callback::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
