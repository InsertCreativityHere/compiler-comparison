//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Callback.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Callback_h__
#define __Callback_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <Ice/BuiltinSequences.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace Test
{

class CallbackReceiver;
class CallbackReceiverPrx;
class Callback;
class CallbackPrx;

}

namespace Test
{

class CallbackException : public ::Ice::UserExceptionHelper<CallbackException, ::Ice::UserException>
{
public:

    virtual ~CallbackException();

    CallbackException(const CallbackException&) = default;

    CallbackException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    CallbackException(double someValue, const ::std::string& someString) :
        someValue(someValue),
        someString(someString)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const double&, const ::std::string&> ice_tuple() const
    {
        return std::tie(someValue, someString);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    double someValue;
    ::std::string someString;
};

/// \cond INTERNAL
static CallbackException _iceS_CallbackException_init;
/// \endcond

}

namespace Test
{

class CallbackReceiver : public virtual ::Ice::Object
{
public:

    using ProxyType = CallbackReceiverPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void callback(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_callback(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void callbackEx(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_callbackEx(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void concurrentCallbackAsync(int number, ::std::function<void(int returnValue)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_concurrentCallback(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void waitCallback(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_waitCallback(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void callbackWithPayload(::Ice::ByteSeq payload, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_callbackWithPayload(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class Callback : public virtual ::Ice::Object
{
public:

    using ProxyType = CallbackPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void initiateCallbackAsync(::std::shared_ptr<CallbackReceiverPrx> proxy, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_initiateCallback(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void initiateCallbackExAsync(::std::shared_ptr<CallbackReceiverPrx> proxy, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_initiateCallbackEx(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void initiateConcurrentCallbackAsync(int number, ::std::shared_ptr<CallbackReceiverPrx> proxy, ::std::function<void(int returnValue)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_initiateConcurrentCallback(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void initiateWaitCallbackAsync(::std::shared_ptr<CallbackReceiverPrx> proxy, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_initiateWaitCallback(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void initiateCallbackWithPayloadAsync(::std::shared_ptr<CallbackReceiverPrx> proxy, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_initiateCallbackWithPayload(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void shutdown(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace Test
{

class CallbackReceiverPrx : public virtual ::Ice::Proxy<CallbackReceiverPrx, ::Ice::ObjectPrx>
{
public:

    void callback(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &CallbackReceiverPrx::_iceI_callback, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto callbackAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &CallbackReceiverPrx::_iceI_callback, context);
    }

    ::std::function<void()>
    callbackAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::CallbackReceiverPrx::_iceI_callback, context);
    }

    /// \cond INTERNAL
    void _iceI_callback(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void callbackEx(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &CallbackReceiverPrx::_iceI_callbackEx, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto callbackExAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &CallbackReceiverPrx::_iceI_callbackEx, context);
    }

    ::std::function<void()>
    callbackExAsync(::std::function<void()> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::CallbackReceiverPrx::_iceI_callbackEx, context);
    }

    /// \cond INTERNAL
    void _iceI_callbackEx(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    int concurrentCallback(int number, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<int>(true, this, &CallbackReceiverPrx::_iceI_concurrentCallback, number, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto concurrentCallbackAsync(int number, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &CallbackReceiverPrx::_iceI_concurrentCallback, number, context);
    }

    ::std::function<void()>
    concurrentCallbackAsync(int number,
                            ::std::function<void(int)> response,
                            ::std::function<void(::std::exception_ptr)> ex = nullptr,
                            ::std::function<void(bool)> sent = nullptr,
                            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<int>(std::move(response), std::move(ex), std::move(sent), this, &Test::CallbackReceiverPrx::_iceI_concurrentCallback, number, context);
    }

    /// \cond INTERNAL
    void _iceI_concurrentCallback(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, int, const ::Ice::Context&);
    /// \endcond

    void waitCallback(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &CallbackReceiverPrx::_iceI_waitCallback, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto waitCallbackAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &CallbackReceiverPrx::_iceI_waitCallback, context);
    }

    ::std::function<void()>
    waitCallbackAsync(::std::function<void()> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::CallbackReceiverPrx::_iceI_waitCallback, context);
    }

    /// \cond INTERNAL
    void _iceI_waitCallback(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void callbackWithPayload(const ::Ice::ByteSeq& payload, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &CallbackReceiverPrx::_iceI_callbackWithPayload, payload, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto callbackWithPayloadAsync(const ::Ice::ByteSeq& payload, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &CallbackReceiverPrx::_iceI_callbackWithPayload, payload, context);
    }

    ::std::function<void()>
    callbackWithPayloadAsync(const ::Ice::ByteSeq& payload,
                             ::std::function<void()> response,
                             ::std::function<void(::std::exception_ptr)> ex = nullptr,
                             ::std::function<void(bool)> sent = nullptr,
                             const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::CallbackReceiverPrx::_iceI_callbackWithPayload, payload, context);
    }

    /// \cond INTERNAL
    void _iceI_callbackWithPayload(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::ByteSeq&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    CallbackReceiverPrx() = default;
    friend ::std::shared_ptr<CallbackReceiverPrx> IceInternal::createProxy<CallbackReceiverPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class CallbackPrx : public virtual ::Ice::Proxy<CallbackPrx, ::Ice::ObjectPrx>
{
public:

    void initiateCallback(const ::std::shared_ptr<CallbackReceiverPrx>& proxy, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &CallbackPrx::_iceI_initiateCallback, proxy, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto initiateCallbackAsync(const ::std::shared_ptr<CallbackReceiverPrx>& proxy, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &CallbackPrx::_iceI_initiateCallback, proxy, context);
    }

    ::std::function<void()>
    initiateCallbackAsync(const ::std::shared_ptr<CallbackReceiverPrx>& proxy,
                          ::std::function<void()> response,
                          ::std::function<void(::std::exception_ptr)> ex = nullptr,
                          ::std::function<void(bool)> sent = nullptr,
                          const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::CallbackPrx::_iceI_initiateCallback, proxy, context);
    }

    /// \cond INTERNAL
    void _iceI_initiateCallback(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<CallbackReceiverPrx>&, const ::Ice::Context&);
    /// \endcond

    void initiateCallbackEx(const ::std::shared_ptr<CallbackReceiverPrx>& proxy, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &CallbackPrx::_iceI_initiateCallbackEx, proxy, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto initiateCallbackExAsync(const ::std::shared_ptr<CallbackReceiverPrx>& proxy, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &CallbackPrx::_iceI_initiateCallbackEx, proxy, context);
    }

    ::std::function<void()>
    initiateCallbackExAsync(const ::std::shared_ptr<CallbackReceiverPrx>& proxy,
                            ::std::function<void()> response,
                            ::std::function<void(::std::exception_ptr)> ex = nullptr,
                            ::std::function<void(bool)> sent = nullptr,
                            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::CallbackPrx::_iceI_initiateCallbackEx, proxy, context);
    }

    /// \cond INTERNAL
    void _iceI_initiateCallbackEx(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<CallbackReceiverPrx>&, const ::Ice::Context&);
    /// \endcond

    int initiateConcurrentCallback(int number, const ::std::shared_ptr<CallbackReceiverPrx>& proxy, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<int>(true, this, &CallbackPrx::_iceI_initiateConcurrentCallback, number, proxy, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto initiateConcurrentCallbackAsync(int number, const ::std::shared_ptr<CallbackReceiverPrx>& proxy, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &CallbackPrx::_iceI_initiateConcurrentCallback, number, proxy, context);
    }

    ::std::function<void()>
    initiateConcurrentCallbackAsync(int number, const ::std::shared_ptr<CallbackReceiverPrx>& proxy,
                                    ::std::function<void(int)> response,
                                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                                    ::std::function<void(bool)> sent = nullptr,
                                    const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<int>(std::move(response), std::move(ex), std::move(sent), this, &Test::CallbackPrx::_iceI_initiateConcurrentCallback, number, proxy, context);
    }

    /// \cond INTERNAL
    void _iceI_initiateConcurrentCallback(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, int, const ::std::shared_ptr<CallbackReceiverPrx>&, const ::Ice::Context&);
    /// \endcond

    void initiateWaitCallback(const ::std::shared_ptr<CallbackReceiverPrx>& proxy, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &CallbackPrx::_iceI_initiateWaitCallback, proxy, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto initiateWaitCallbackAsync(const ::std::shared_ptr<CallbackReceiverPrx>& proxy, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &CallbackPrx::_iceI_initiateWaitCallback, proxy, context);
    }

    ::std::function<void()>
    initiateWaitCallbackAsync(const ::std::shared_ptr<CallbackReceiverPrx>& proxy,
                              ::std::function<void()> response,
                              ::std::function<void(::std::exception_ptr)> ex = nullptr,
                              ::std::function<void(bool)> sent = nullptr,
                              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::CallbackPrx::_iceI_initiateWaitCallback, proxy, context);
    }

    /// \cond INTERNAL
    void _iceI_initiateWaitCallback(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<CallbackReceiverPrx>&, const ::Ice::Context&);
    /// \endcond

    void initiateCallbackWithPayload(const ::std::shared_ptr<CallbackReceiverPrx>& proxy, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &CallbackPrx::_iceI_initiateCallbackWithPayload, proxy, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto initiateCallbackWithPayloadAsync(const ::std::shared_ptr<CallbackReceiverPrx>& proxy, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &CallbackPrx::_iceI_initiateCallbackWithPayload, proxy, context);
    }

    ::std::function<void()>
    initiateCallbackWithPayloadAsync(const ::std::shared_ptr<CallbackReceiverPrx>& proxy,
                                     ::std::function<void()> response,
                                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                                     ::std::function<void(bool)> sent = nullptr,
                                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::CallbackPrx::_iceI_initiateCallbackWithPayload, proxy, context);
    }

    /// \cond INTERNAL
    void _iceI_initiateCallbackWithPayload(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<CallbackReceiverPrx>&, const ::Ice::Context&);
    /// \endcond

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &CallbackPrx::_iceI_shutdown, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto shutdownAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &CallbackPrx::_iceI_shutdown, context);
    }

    ::std::function<void()>
    shutdownAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::CallbackPrx::_iceI_shutdown, context);
    }

    /// \cond INTERNAL
    void _iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    CallbackPrx() = default;
    friend ::std::shared_ptr<CallbackPrx> IceInternal::createProxy<CallbackPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamReader<::Test::CallbackException, S>
{
    static void read(S* istr, ::Test::CallbackException& v)
    {
        istr->readAll(v.someValue, v.someString);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace Test
{

using CallbackReceiverPtr = ::std::shared_ptr<CallbackReceiver>;
using CallbackReceiverPrxPtr = ::std::shared_ptr<CallbackReceiverPrx>;

using CallbackPtr = ::std::shared_ptr<Callback>;
using CallbackPrxPtr = ::std::shared_ptr<CallbackPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace Test
{

class CallbackReceiver;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< CallbackReceiver>&);
::IceProxy::Ice::Object* upCast(CallbackReceiver*);
/// \endcond

class Callback;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Callback>&);
::IceProxy::Ice::Object* upCast(Callback*);
/// \endcond

}

}

namespace Test
{
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::CallbackReceiver> CallbackReceiverPrx;
typedef CallbackReceiverPrx CallbackReceiverPrxPtr;

class CallbackReceiver;
typedef ::IceInternal::Handle< CallbackReceiver> CallbackReceiverPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::Callback> CallbackPrx;
typedef CallbackPrx CallbackPrxPtr;

class Callback;
typedef ::IceInternal::Handle< Callback> CallbackPtr;

}

namespace Test
{

class CallbackException : public ::Ice::UserException
{
public:

    CallbackException() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    CallbackException(::Ice::Double someValue, const ::std::string& someString);
    CallbackException(const CallbackException&) = default;
    virtual ~CallbackException();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual CallbackException* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::Ice::Double someValue;
    ::std::string someString;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
static CallbackException _iceS_CallbackException_init;
/// \endcond

}

namespace Test
{

/**
 * AMD callback class for Test::CallbackReceiver::concurrentCallback_async.
 * Call the ice_response method for a successful completion, or the ice_exception
 * method in the case of an error.
 */
class AMD_CallbackReceiver_concurrentCallback : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_CallbackReceiver_concurrentCallback();

    /**
     * Call ice_response for a successful completion.
     */
    virtual void ice_response(::Ice::Int result) = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_CallbackReceiver_concurrentCallback> AMD_CallbackReceiver_concurrentCallbackPtr;

/**
 * AMD callback class for Test::Callback::initiateCallback_async.
 * Call the ice_response method for a successful completion, or the ice_exception
 * method in the case of an error.
 */
class AMD_Callback_initiateCallback : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_Callback_initiateCallback();

    /**
     * Call ice_response for a successful completion.
     */
    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_Callback_initiateCallback> AMD_Callback_initiateCallbackPtr;

/**
 * AMD callback class for Test::Callback::initiateCallbackEx_async.
 * Call the ice_response method for a successful completion, or the ice_exception
 * method in the case of an error.
 */
class AMD_Callback_initiateCallbackEx : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_Callback_initiateCallbackEx();

    /**
     * Call ice_response for a successful completion.
     */
    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_Callback_initiateCallbackEx> AMD_Callback_initiateCallbackExPtr;

/**
 * AMD callback class for Test::Callback::initiateConcurrentCallback_async.
 * Call the ice_response method for a successful completion, or the ice_exception
 * method in the case of an error.
 */
class AMD_Callback_initiateConcurrentCallback : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_Callback_initiateConcurrentCallback();

    /**
     * Call ice_response for a successful completion.
     */
    virtual void ice_response(::Ice::Int result) = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_Callback_initiateConcurrentCallback> AMD_Callback_initiateConcurrentCallbackPtr;

/**
 * AMD callback class for Test::Callback::initiateWaitCallback_async.
 * Call the ice_response method for a successful completion, or the ice_exception
 * method in the case of an error.
 */
class AMD_Callback_initiateWaitCallback : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_Callback_initiateWaitCallback();

    /**
     * Call ice_response for a successful completion.
     */
    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_Callback_initiateWaitCallback> AMD_Callback_initiateWaitCallbackPtr;

/**
 * AMD callback class for Test::Callback::initiateCallbackWithPayload_async.
 * Call the ice_response method for a successful completion, or the ice_exception
 * method in the case of an error.
 */
class AMD_Callback_initiateCallbackWithPayload : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_Callback_initiateCallbackWithPayload();

    /**
     * Call ice_response for a successful completion.
     */
    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_Callback_initiateCallbackWithPayload> AMD_Callback_initiateCallbackWithPayloadPtr;

}

/// \cond INTERNAL
namespace IceAsync
{

namespace Test
{

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4239)
#endif

class AMD_CallbackReceiver_concurrentCallback : public ::Test::AMD_CallbackReceiver_concurrentCallback, public ::IceInternal::IncomingAsync
{
public:

    AMD_CallbackReceiver_concurrentCallback(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int);
};

#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4239)
#endif

class AMD_Callback_initiateCallback : public ::Test::AMD_Callback_initiateCallback, public ::IceInternal::IncomingAsync
{
public:

    AMD_Callback_initiateCallback(::IceInternal::Incoming&);

    virtual void ice_response();
};

#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4239)
#endif

class AMD_Callback_initiateCallbackEx : public ::Test::AMD_Callback_initiateCallbackEx, public ::IceInternal::IncomingAsync
{
public:

    AMD_Callback_initiateCallbackEx(::IceInternal::Incoming&);

    virtual void ice_response();
};

#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4239)
#endif

class AMD_Callback_initiateConcurrentCallback : public ::Test::AMD_Callback_initiateConcurrentCallback, public ::IceInternal::IncomingAsync
{
public:

    AMD_Callback_initiateConcurrentCallback(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int);
};

#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4239)
#endif

class AMD_Callback_initiateWaitCallback : public ::Test::AMD_Callback_initiateWaitCallback, public ::IceInternal::IncomingAsync
{
public:

    AMD_Callback_initiateWaitCallback(::IceInternal::Incoming&);

    virtual void ice_response();
};

#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4239)
#endif

class AMD_Callback_initiateCallbackWithPayload : public ::Test::AMD_Callback_initiateCallbackWithPayload, public ::IceInternal::IncomingAsync
{
public:

    AMD_Callback_initiateCallbackWithPayload(::IceInternal::Incoming&);

    virtual void ice_response();
};

#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

}

}
/// \endcond

namespace Test
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::CallbackReceiver::begin_callback.
 * Create a wrapper instance by calling ::Test::newCallback_CallbackReceiver_callback.
 */
class Callback_CallbackReceiver_callback_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CallbackReceiver_callback_Base> Callback_CallbackReceiver_callbackPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::CallbackReceiver::begin_callbackEx.
 * Create a wrapper instance by calling ::Test::newCallback_CallbackReceiver_callbackEx.
 */
class Callback_CallbackReceiver_callbackEx_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CallbackReceiver_callbackEx_Base> Callback_CallbackReceiver_callbackExPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::CallbackReceiver::begin_concurrentCallback.
 * Create a wrapper instance by calling ::Test::newCallback_CallbackReceiver_concurrentCallback.
 */
class Callback_CallbackReceiver_concurrentCallback_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CallbackReceiver_concurrentCallback_Base> Callback_CallbackReceiver_concurrentCallbackPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::CallbackReceiver::begin_waitCallback.
 * Create a wrapper instance by calling ::Test::newCallback_CallbackReceiver_waitCallback.
 */
class Callback_CallbackReceiver_waitCallback_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CallbackReceiver_waitCallback_Base> Callback_CallbackReceiver_waitCallbackPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::CallbackReceiver::begin_callbackWithPayload.
 * Create a wrapper instance by calling ::Test::newCallback_CallbackReceiver_callbackWithPayload.
 */
class Callback_CallbackReceiver_callbackWithPayload_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CallbackReceiver_callbackWithPayload_Base> Callback_CallbackReceiver_callbackWithPayloadPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Callback::begin_initiateCallback.
 * Create a wrapper instance by calling ::Test::newCallback_Callback_initiateCallback.
 */
class Callback_Callback_initiateCallback_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Callback_initiateCallback_Base> Callback_Callback_initiateCallbackPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Callback::begin_initiateCallbackEx.
 * Create a wrapper instance by calling ::Test::newCallback_Callback_initiateCallbackEx.
 */
class Callback_Callback_initiateCallbackEx_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Callback_initiateCallbackEx_Base> Callback_Callback_initiateCallbackExPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Callback::begin_initiateConcurrentCallback.
 * Create a wrapper instance by calling ::Test::newCallback_Callback_initiateConcurrentCallback.
 */
class Callback_Callback_initiateConcurrentCallback_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Callback_initiateConcurrentCallback_Base> Callback_Callback_initiateConcurrentCallbackPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Callback::begin_initiateWaitCallback.
 * Create a wrapper instance by calling ::Test::newCallback_Callback_initiateWaitCallback.
 */
class Callback_Callback_initiateWaitCallback_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Callback_initiateWaitCallback_Base> Callback_Callback_initiateWaitCallbackPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Callback::begin_initiateCallbackWithPayload.
 * Create a wrapper instance by calling ::Test::newCallback_Callback_initiateCallbackWithPayload.
 */
class Callback_Callback_initiateCallbackWithPayload_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Callback_initiateCallbackWithPayload_Base> Callback_Callback_initiateCallbackWithPayloadPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Callback::begin_shutdown.
 * Create a wrapper instance by calling ::Test::newCallback_Callback_shutdown.
 */
class Callback_Callback_shutdown_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Callback_shutdown_Base> Callback_Callback_shutdownPtr;

}

namespace IceProxy
{

namespace Test
{

class CallbackReceiver : public virtual ::Ice::Proxy<CallbackReceiver, ::IceProxy::Ice::Object>
{
public:

    void callback(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_callback(_iceI_begin_callback(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_callback(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_callback(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_callback(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_callback(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_callback(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_callback(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_callback(const ::Test::Callback_CallbackReceiver_callbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_callback(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_callback(const ::Ice::Context& context, const ::Test::Callback_CallbackReceiver_callbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_callback(context, cb, cookie);
    }

    void end_callback(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_callback(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void callbackEx(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_callbackEx(_iceI_begin_callbackEx(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_callbackEx(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_callbackEx(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_callbackEx(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_callbackEx(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_callbackEx(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_callbackEx(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_callbackEx(const ::Test::Callback_CallbackReceiver_callbackExPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_callbackEx(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_callbackEx(const ::Ice::Context& context, const ::Test::Callback_CallbackReceiver_callbackExPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_callbackEx(context, cb, cookie);
    }

    void end_callbackEx(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_callbackEx(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Ice::Int concurrentCallback(::Ice::Int number, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_concurrentCallback(_iceI_begin_concurrentCallback(number, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_concurrentCallback(::Ice::Int number, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_concurrentCallback(number, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_concurrentCallback(::Ice::Int number, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_concurrentCallback(number, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_concurrentCallback(::Ice::Int number, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_concurrentCallback(number, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_concurrentCallback(::Ice::Int number, const ::Test::Callback_CallbackReceiver_concurrentCallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_concurrentCallback(number, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_concurrentCallback(::Ice::Int number, const ::Ice::Context& context, const ::Test::Callback_CallbackReceiver_concurrentCallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_concurrentCallback(number, context, cb, cookie);
    }

    ::Ice::Int end_concurrentCallback(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_concurrentCallback(::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void waitCallback(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_waitCallback(_iceI_begin_waitCallback(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_waitCallback(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_waitCallback(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_waitCallback(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_waitCallback(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_waitCallback(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_waitCallback(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_waitCallback(const ::Test::Callback_CallbackReceiver_waitCallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_waitCallback(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_waitCallback(const ::Ice::Context& context, const ::Test::Callback_CallbackReceiver_waitCallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_waitCallback(context, cb, cookie);
    }

    void end_waitCallback(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_waitCallback(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void callbackWithPayload(const ::Ice::ByteSeq& payload, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_callbackWithPayload(_iceI_begin_callbackWithPayload(payload, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_callbackWithPayload(const ::Ice::ByteSeq& payload, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_callbackWithPayload(payload, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_callbackWithPayload(const ::Ice::ByteSeq& payload, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_callbackWithPayload(payload, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_callbackWithPayload(const ::Ice::ByteSeq& payload, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_callbackWithPayload(payload, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_callbackWithPayload(const ::Ice::ByteSeq& payload, const ::Test::Callback_CallbackReceiver_callbackWithPayloadPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_callbackWithPayload(payload, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_callbackWithPayload(const ::Ice::ByteSeq& payload, const ::Ice::Context& context, const ::Test::Callback_CallbackReceiver_callbackWithPayloadPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_callbackWithPayload(payload, context, cb, cookie);
    }

    void end_callbackWithPayload(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_callbackWithPayload(const ::Ice::ByteSeq&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class Callback : public virtual ::Ice::Proxy<Callback, ::IceProxy::Ice::Object>
{
public:

    void initiateCallback(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_initiateCallback(_iceI_begin_initiateCallback(proxy, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_initiateCallback(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_initiateCallback(proxy, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_initiateCallback(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_initiateCallback(proxy, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_initiateCallback(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_initiateCallback(proxy, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_initiateCallback(const ::Test::CallbackReceiverPrx& proxy, const ::Test::Callback_Callback_initiateCallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_initiateCallback(proxy, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_initiateCallback(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& context, const ::Test::Callback_Callback_initiateCallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_initiateCallback(proxy, context, cb, cookie);
    }

    void end_initiateCallback(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_initiateCallback(const ::Test::CallbackReceiverPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void initiateCallbackEx(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_initiateCallbackEx(_iceI_begin_initiateCallbackEx(proxy, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_initiateCallbackEx(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_initiateCallbackEx(proxy, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_initiateCallbackEx(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_initiateCallbackEx(proxy, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_initiateCallbackEx(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_initiateCallbackEx(proxy, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_initiateCallbackEx(const ::Test::CallbackReceiverPrx& proxy, const ::Test::Callback_Callback_initiateCallbackExPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_initiateCallbackEx(proxy, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_initiateCallbackEx(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& context, const ::Test::Callback_Callback_initiateCallbackExPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_initiateCallbackEx(proxy, context, cb, cookie);
    }

    void end_initiateCallbackEx(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_initiateCallbackEx(const ::Test::CallbackReceiverPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Ice::Int initiateConcurrentCallback(::Ice::Int number, const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_initiateConcurrentCallback(_iceI_begin_initiateConcurrentCallback(number, proxy, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_initiateConcurrentCallback(::Ice::Int number, const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_initiateConcurrentCallback(number, proxy, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_initiateConcurrentCallback(::Ice::Int number, const ::Test::CallbackReceiverPrx& proxy, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_initiateConcurrentCallback(number, proxy, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_initiateConcurrentCallback(::Ice::Int number, const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_initiateConcurrentCallback(number, proxy, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_initiateConcurrentCallback(::Ice::Int number, const ::Test::CallbackReceiverPrx& proxy, const ::Test::Callback_Callback_initiateConcurrentCallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_initiateConcurrentCallback(number, proxy, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_initiateConcurrentCallback(::Ice::Int number, const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& context, const ::Test::Callback_Callback_initiateConcurrentCallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_initiateConcurrentCallback(number, proxy, context, cb, cookie);
    }

    ::Ice::Int end_initiateConcurrentCallback(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_initiateConcurrentCallback(::Ice::Int, const ::Test::CallbackReceiverPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void initiateWaitCallback(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_initiateWaitCallback(_iceI_begin_initiateWaitCallback(proxy, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_initiateWaitCallback(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_initiateWaitCallback(proxy, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_initiateWaitCallback(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_initiateWaitCallback(proxy, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_initiateWaitCallback(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_initiateWaitCallback(proxy, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_initiateWaitCallback(const ::Test::CallbackReceiverPrx& proxy, const ::Test::Callback_Callback_initiateWaitCallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_initiateWaitCallback(proxy, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_initiateWaitCallback(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& context, const ::Test::Callback_Callback_initiateWaitCallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_initiateWaitCallback(proxy, context, cb, cookie);
    }

    void end_initiateWaitCallback(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_initiateWaitCallback(const ::Test::CallbackReceiverPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void initiateCallbackWithPayload(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_initiateCallbackWithPayload(_iceI_begin_initiateCallbackWithPayload(proxy, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_initiateCallbackWithPayload(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_initiateCallbackWithPayload(proxy, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_initiateCallbackWithPayload(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_initiateCallbackWithPayload(proxy, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_initiateCallbackWithPayload(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_initiateCallbackWithPayload(proxy, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_initiateCallbackWithPayload(const ::Test::CallbackReceiverPrx& proxy, const ::Test::Callback_Callback_initiateCallbackWithPayloadPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_initiateCallbackWithPayload(proxy, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_initiateCallbackWithPayload(const ::Test::CallbackReceiverPrx& proxy, const ::Ice::Context& context, const ::Test::Callback_Callback_initiateCallbackWithPayloadPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_initiateCallbackWithPayload(proxy, context, cb, cookie);
    }

    void end_initiateCallbackWithPayload(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_initiateCallbackWithPayload(const ::Test::CallbackReceiverPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_shutdown(_iceI_begin_shutdown(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_shutdown(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Test::Callback_Callback_shutdownPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context, const ::Test::Callback_Callback_shutdownPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(context, cb, cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_shutdown(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace Test
{

class CallbackReceiver : public virtual ::Ice::Object
{
public:

    typedef CallbackReceiverPrx ProxyType;

    virtual ~CallbackReceiver();
    CallbackReceiver() = default;
    CallbackReceiver(const CallbackReceiver&) = default;
    CallbackReceiver& operator=(const CallbackReceiver&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void callback(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_callback(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void callbackEx(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_callbackEx(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void concurrentCallback_async(const ::Test::AMD_CallbackReceiver_concurrentCallbackPtr& cb, ::Ice::Int number, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_concurrentCallback(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void waitCallback(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_waitCallback(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void callbackWithPayload(const ::Ice::ByteSeq& payload, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_callbackWithPayload(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

class Callback : public virtual ::Ice::Object
{
public:

    typedef CallbackPrx ProxyType;

    virtual ~Callback();
    Callback() = default;
    Callback(const Callback&) = default;
    Callback& operator=(const Callback&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void initiateCallback_async(const ::Test::AMD_Callback_initiateCallbackPtr& cb, const CallbackReceiverPrx& proxy, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_initiateCallback(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void initiateCallbackEx_async(const ::Test::AMD_Callback_initiateCallbackExPtr& cb, const CallbackReceiverPrx& proxy, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_initiateCallbackEx(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void initiateConcurrentCallback_async(const ::Test::AMD_Callback_initiateConcurrentCallbackPtr& cb, ::Ice::Int number, const CallbackReceiverPrx& proxy, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_initiateConcurrentCallback(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void initiateWaitCallback_async(const ::Test::AMD_Callback_initiateWaitCallbackPtr& cb, const CallbackReceiverPrx& proxy, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_initiateWaitCallback(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void initiateCallbackWithPayload_async(const ::Test::AMD_Callback_initiateCallbackWithPayloadPtr& cb, const CallbackReceiverPrx& proxy, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_initiateCallbackWithPayload(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void shutdown(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::Test::CallbackException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::Test::CallbackException, S>
{
    static void write(S* ostr, const ::Test::CallbackException& v)
    {
        ostr->write(v.someValue);
        ostr->write(v.someString);
    }
};

template<typename S>
struct StreamReader< ::Test::CallbackException, S>
{
    static void read(S* istr, ::Test::CallbackException& v)
    {
        istr->read(v.someValue);
        istr->read(v.someString);
    }
};

}
/// \endcond

namespace Test
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::CallbackReceiver::begin_callback.
 * Create a wrapper instance by calling ::Test::newCallback_CallbackReceiver_callback.
 */
template<class T>
class CallbackNC_CallbackReceiver_callback : public Callback_CallbackReceiver_callback_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CallbackReceiver_callback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::CallbackReceiver::begin_callback.
 */
template<class T> Callback_CallbackReceiver_callbackPtr
newCallback_CallbackReceiver_callback(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallbackReceiver_callback<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::CallbackReceiver::begin_callback.
 */
template<class T> Callback_CallbackReceiver_callbackPtr
newCallback_CallbackReceiver_callback(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallbackReceiver_callback<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::CallbackReceiver::begin_callback.
 */
template<class T> Callback_CallbackReceiver_callbackPtr
newCallback_CallbackReceiver_callback(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallbackReceiver_callback<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::CallbackReceiver::begin_callback.
 */
template<class T> Callback_CallbackReceiver_callbackPtr
newCallback_CallbackReceiver_callback(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallbackReceiver_callback<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::CallbackReceiver::begin_callback.
 * Create a wrapper instance by calling ::Test::newCallback_CallbackReceiver_callback.
 */
template<class T, typename CT>
class Callback_CallbackReceiver_callback : public Callback_CallbackReceiver_callback_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CallbackReceiver_callback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::CallbackReceiver::begin_callback.
 */
template<class T, typename CT> Callback_CallbackReceiver_callbackPtr
newCallback_CallbackReceiver_callback(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallbackReceiver_callback<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::CallbackReceiver::begin_callback.
 */
template<class T, typename CT> Callback_CallbackReceiver_callbackPtr
newCallback_CallbackReceiver_callback(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallbackReceiver_callback<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::CallbackReceiver::begin_callback.
 */
template<class T, typename CT> Callback_CallbackReceiver_callbackPtr
newCallback_CallbackReceiver_callback(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallbackReceiver_callback<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::CallbackReceiver::begin_callback.
 */
template<class T, typename CT> Callback_CallbackReceiver_callbackPtr
newCallback_CallbackReceiver_callback(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallbackReceiver_callback<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::CallbackReceiver::begin_callbackEx.
 * Create a wrapper instance by calling ::Test::newCallback_CallbackReceiver_callbackEx.
 */
template<class T>
class CallbackNC_CallbackReceiver_callbackEx : public Callback_CallbackReceiver_callbackEx_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CallbackReceiver_callbackEx(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CallbackReceiverPrx proxy = CallbackReceiverPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_callbackEx(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::CallbackReceiver::begin_callbackEx.
 */
template<class T> Callback_CallbackReceiver_callbackExPtr
newCallback_CallbackReceiver_callbackEx(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallbackReceiver_callbackEx<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::CallbackReceiver::begin_callbackEx.
 */
template<class T> Callback_CallbackReceiver_callbackExPtr
newCallback_CallbackReceiver_callbackEx(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallbackReceiver_callbackEx<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::CallbackReceiver::begin_callbackEx.
 */
template<class T> Callback_CallbackReceiver_callbackExPtr
newCallback_CallbackReceiver_callbackEx(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallbackReceiver_callbackEx<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::CallbackReceiver::begin_callbackEx.
 */
template<class T> Callback_CallbackReceiver_callbackExPtr
newCallback_CallbackReceiver_callbackEx(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallbackReceiver_callbackEx<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::CallbackReceiver::begin_callbackEx.
 * Create a wrapper instance by calling ::Test::newCallback_CallbackReceiver_callbackEx.
 */
template<class T, typename CT>
class Callback_CallbackReceiver_callbackEx : public Callback_CallbackReceiver_callbackEx_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CallbackReceiver_callbackEx(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CallbackReceiverPrx proxy = CallbackReceiverPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_callbackEx(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::CallbackReceiver::begin_callbackEx.
 */
template<class T, typename CT> Callback_CallbackReceiver_callbackExPtr
newCallback_CallbackReceiver_callbackEx(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallbackReceiver_callbackEx<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::CallbackReceiver::begin_callbackEx.
 */
template<class T, typename CT> Callback_CallbackReceiver_callbackExPtr
newCallback_CallbackReceiver_callbackEx(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallbackReceiver_callbackEx<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::CallbackReceiver::begin_callbackEx.
 */
template<class T, typename CT> Callback_CallbackReceiver_callbackExPtr
newCallback_CallbackReceiver_callbackEx(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallbackReceiver_callbackEx<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::CallbackReceiver::begin_callbackEx.
 */
template<class T, typename CT> Callback_CallbackReceiver_callbackExPtr
newCallback_CallbackReceiver_callbackEx(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallbackReceiver_callbackEx<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::CallbackReceiver::begin_concurrentCallback.
 * Create a wrapper instance by calling ::Test::newCallback_CallbackReceiver_concurrentCallback.
 */
template<class T>
class CallbackNC_CallbackReceiver_concurrentCallback : public Callback_CallbackReceiver_concurrentCallback_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_CallbackReceiver_concurrentCallback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CallbackReceiverPrx proxy = CallbackReceiverPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_concurrentCallback(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::CallbackReceiver::begin_concurrentCallback.
 */
template<class T> Callback_CallbackReceiver_concurrentCallbackPtr
newCallback_CallbackReceiver_concurrentCallback(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallbackReceiver_concurrentCallback<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::CallbackReceiver::begin_concurrentCallback.
 */
template<class T> Callback_CallbackReceiver_concurrentCallbackPtr
newCallback_CallbackReceiver_concurrentCallback(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallbackReceiver_concurrentCallback<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::CallbackReceiver::begin_concurrentCallback.
 * Create a wrapper instance by calling ::Test::newCallback_CallbackReceiver_concurrentCallback.
 */
template<class T, typename CT>
class Callback_CallbackReceiver_concurrentCallback : public Callback_CallbackReceiver_concurrentCallback_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_CallbackReceiver_concurrentCallback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CallbackReceiverPrx proxy = CallbackReceiverPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_concurrentCallback(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::CallbackReceiver::begin_concurrentCallback.
 */
template<class T, typename CT> Callback_CallbackReceiver_concurrentCallbackPtr
newCallback_CallbackReceiver_concurrentCallback(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallbackReceiver_concurrentCallback<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::CallbackReceiver::begin_concurrentCallback.
 */
template<class T, typename CT> Callback_CallbackReceiver_concurrentCallbackPtr
newCallback_CallbackReceiver_concurrentCallback(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallbackReceiver_concurrentCallback<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::CallbackReceiver::begin_waitCallback.
 * Create a wrapper instance by calling ::Test::newCallback_CallbackReceiver_waitCallback.
 */
template<class T>
class CallbackNC_CallbackReceiver_waitCallback : public Callback_CallbackReceiver_waitCallback_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CallbackReceiver_waitCallback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::CallbackReceiver::begin_waitCallback.
 */
template<class T> Callback_CallbackReceiver_waitCallbackPtr
newCallback_CallbackReceiver_waitCallback(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallbackReceiver_waitCallback<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::CallbackReceiver::begin_waitCallback.
 */
template<class T> Callback_CallbackReceiver_waitCallbackPtr
newCallback_CallbackReceiver_waitCallback(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallbackReceiver_waitCallback<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::CallbackReceiver::begin_waitCallback.
 */
template<class T> Callback_CallbackReceiver_waitCallbackPtr
newCallback_CallbackReceiver_waitCallback(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallbackReceiver_waitCallback<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::CallbackReceiver::begin_waitCallback.
 */
template<class T> Callback_CallbackReceiver_waitCallbackPtr
newCallback_CallbackReceiver_waitCallback(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallbackReceiver_waitCallback<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::CallbackReceiver::begin_waitCallback.
 * Create a wrapper instance by calling ::Test::newCallback_CallbackReceiver_waitCallback.
 */
template<class T, typename CT>
class Callback_CallbackReceiver_waitCallback : public Callback_CallbackReceiver_waitCallback_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CallbackReceiver_waitCallback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::CallbackReceiver::begin_waitCallback.
 */
template<class T, typename CT> Callback_CallbackReceiver_waitCallbackPtr
newCallback_CallbackReceiver_waitCallback(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallbackReceiver_waitCallback<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::CallbackReceiver::begin_waitCallback.
 */
template<class T, typename CT> Callback_CallbackReceiver_waitCallbackPtr
newCallback_CallbackReceiver_waitCallback(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallbackReceiver_waitCallback<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::CallbackReceiver::begin_waitCallback.
 */
template<class T, typename CT> Callback_CallbackReceiver_waitCallbackPtr
newCallback_CallbackReceiver_waitCallback(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallbackReceiver_waitCallback<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::CallbackReceiver::begin_waitCallback.
 */
template<class T, typename CT> Callback_CallbackReceiver_waitCallbackPtr
newCallback_CallbackReceiver_waitCallback(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallbackReceiver_waitCallback<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::CallbackReceiver::begin_callbackWithPayload.
 * Create a wrapper instance by calling ::Test::newCallback_CallbackReceiver_callbackWithPayload.
 */
template<class T>
class CallbackNC_CallbackReceiver_callbackWithPayload : public Callback_CallbackReceiver_callbackWithPayload_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CallbackReceiver_callbackWithPayload(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::CallbackReceiver::begin_callbackWithPayload.
 */
template<class T> Callback_CallbackReceiver_callbackWithPayloadPtr
newCallback_CallbackReceiver_callbackWithPayload(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallbackReceiver_callbackWithPayload<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::CallbackReceiver::begin_callbackWithPayload.
 */
template<class T> Callback_CallbackReceiver_callbackWithPayloadPtr
newCallback_CallbackReceiver_callbackWithPayload(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallbackReceiver_callbackWithPayload<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::CallbackReceiver::begin_callbackWithPayload.
 */
template<class T> Callback_CallbackReceiver_callbackWithPayloadPtr
newCallback_CallbackReceiver_callbackWithPayload(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallbackReceiver_callbackWithPayload<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::CallbackReceiver::begin_callbackWithPayload.
 */
template<class T> Callback_CallbackReceiver_callbackWithPayloadPtr
newCallback_CallbackReceiver_callbackWithPayload(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CallbackReceiver_callbackWithPayload<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::CallbackReceiver::begin_callbackWithPayload.
 * Create a wrapper instance by calling ::Test::newCallback_CallbackReceiver_callbackWithPayload.
 */
template<class T, typename CT>
class Callback_CallbackReceiver_callbackWithPayload : public Callback_CallbackReceiver_callbackWithPayload_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CallbackReceiver_callbackWithPayload(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::CallbackReceiver::begin_callbackWithPayload.
 */
template<class T, typename CT> Callback_CallbackReceiver_callbackWithPayloadPtr
newCallback_CallbackReceiver_callbackWithPayload(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallbackReceiver_callbackWithPayload<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::CallbackReceiver::begin_callbackWithPayload.
 */
template<class T, typename CT> Callback_CallbackReceiver_callbackWithPayloadPtr
newCallback_CallbackReceiver_callbackWithPayload(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallbackReceiver_callbackWithPayload<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::CallbackReceiver::begin_callbackWithPayload.
 */
template<class T, typename CT> Callback_CallbackReceiver_callbackWithPayloadPtr
newCallback_CallbackReceiver_callbackWithPayload(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallbackReceiver_callbackWithPayload<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::CallbackReceiver::begin_callbackWithPayload.
 */
template<class T, typename CT> Callback_CallbackReceiver_callbackWithPayloadPtr
newCallback_CallbackReceiver_callbackWithPayload(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CallbackReceiver_callbackWithPayload<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Callback::begin_initiateCallback.
 * Create a wrapper instance by calling ::Test::newCallback_Callback_initiateCallback.
 */
template<class T>
class CallbackNC_Callback_initiateCallback : public Callback_Callback_initiateCallback_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Callback_initiateCallback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_initiateCallback.
 */
template<class T> Callback_Callback_initiateCallbackPtr
newCallback_Callback_initiateCallback(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_initiateCallback<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_initiateCallback.
 */
template<class T> Callback_Callback_initiateCallbackPtr
newCallback_Callback_initiateCallback(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_initiateCallback<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_initiateCallback.
 */
template<class T> Callback_Callback_initiateCallbackPtr
newCallback_Callback_initiateCallback(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_initiateCallback<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_initiateCallback.
 */
template<class T> Callback_Callback_initiateCallbackPtr
newCallback_Callback_initiateCallback(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_initiateCallback<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Callback::begin_initiateCallback.
 * Create a wrapper instance by calling ::Test::newCallback_Callback_initiateCallback.
 */
template<class T, typename CT>
class Callback_Callback_initiateCallback : public Callback_Callback_initiateCallback_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Callback_initiateCallback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_initiateCallback.
 */
template<class T, typename CT> Callback_Callback_initiateCallbackPtr
newCallback_Callback_initiateCallback(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_initiateCallback<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_initiateCallback.
 */
template<class T, typename CT> Callback_Callback_initiateCallbackPtr
newCallback_Callback_initiateCallback(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_initiateCallback<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_initiateCallback.
 */
template<class T, typename CT> Callback_Callback_initiateCallbackPtr
newCallback_Callback_initiateCallback(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_initiateCallback<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_initiateCallback.
 */
template<class T, typename CT> Callback_Callback_initiateCallbackPtr
newCallback_Callback_initiateCallback(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_initiateCallback<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Callback::begin_initiateCallbackEx.
 * Create a wrapper instance by calling ::Test::newCallback_Callback_initiateCallbackEx.
 */
template<class T>
class CallbackNC_Callback_initiateCallbackEx : public Callback_Callback_initiateCallbackEx_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Callback_initiateCallbackEx(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CallbackPrx proxy = CallbackPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_initiateCallbackEx(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_initiateCallbackEx.
 */
template<class T> Callback_Callback_initiateCallbackExPtr
newCallback_Callback_initiateCallbackEx(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_initiateCallbackEx<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_initiateCallbackEx.
 */
template<class T> Callback_Callback_initiateCallbackExPtr
newCallback_Callback_initiateCallbackEx(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_initiateCallbackEx<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_initiateCallbackEx.
 */
template<class T> Callback_Callback_initiateCallbackExPtr
newCallback_Callback_initiateCallbackEx(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_initiateCallbackEx<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_initiateCallbackEx.
 */
template<class T> Callback_Callback_initiateCallbackExPtr
newCallback_Callback_initiateCallbackEx(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_initiateCallbackEx<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Callback::begin_initiateCallbackEx.
 * Create a wrapper instance by calling ::Test::newCallback_Callback_initiateCallbackEx.
 */
template<class T, typename CT>
class Callback_Callback_initiateCallbackEx : public Callback_Callback_initiateCallbackEx_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Callback_initiateCallbackEx(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CallbackPrx proxy = CallbackPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_initiateCallbackEx(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_initiateCallbackEx.
 */
template<class T, typename CT> Callback_Callback_initiateCallbackExPtr
newCallback_Callback_initiateCallbackEx(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_initiateCallbackEx<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_initiateCallbackEx.
 */
template<class T, typename CT> Callback_Callback_initiateCallbackExPtr
newCallback_Callback_initiateCallbackEx(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_initiateCallbackEx<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_initiateCallbackEx.
 */
template<class T, typename CT> Callback_Callback_initiateCallbackExPtr
newCallback_Callback_initiateCallbackEx(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_initiateCallbackEx<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_initiateCallbackEx.
 */
template<class T, typename CT> Callback_Callback_initiateCallbackExPtr
newCallback_Callback_initiateCallbackEx(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_initiateCallbackEx<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Callback::begin_initiateConcurrentCallback.
 * Create a wrapper instance by calling ::Test::newCallback_Callback_initiateConcurrentCallback.
 */
template<class T>
class CallbackNC_Callback_initiateConcurrentCallback : public Callback_Callback_initiateConcurrentCallback_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Callback_initiateConcurrentCallback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CallbackPrx proxy = CallbackPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_initiateConcurrentCallback(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_initiateConcurrentCallback.
 */
template<class T> Callback_Callback_initiateConcurrentCallbackPtr
newCallback_Callback_initiateConcurrentCallback(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_initiateConcurrentCallback<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_initiateConcurrentCallback.
 */
template<class T> Callback_Callback_initiateConcurrentCallbackPtr
newCallback_Callback_initiateConcurrentCallback(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_initiateConcurrentCallback<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Callback::begin_initiateConcurrentCallback.
 * Create a wrapper instance by calling ::Test::newCallback_Callback_initiateConcurrentCallback.
 */
template<class T, typename CT>
class Callback_Callback_initiateConcurrentCallback : public Callback_Callback_initiateConcurrentCallback_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Callback_initiateConcurrentCallback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CallbackPrx proxy = CallbackPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_initiateConcurrentCallback(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_initiateConcurrentCallback.
 */
template<class T, typename CT> Callback_Callback_initiateConcurrentCallbackPtr
newCallback_Callback_initiateConcurrentCallback(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_initiateConcurrentCallback<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_initiateConcurrentCallback.
 */
template<class T, typename CT> Callback_Callback_initiateConcurrentCallbackPtr
newCallback_Callback_initiateConcurrentCallback(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_initiateConcurrentCallback<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Callback::begin_initiateWaitCallback.
 * Create a wrapper instance by calling ::Test::newCallback_Callback_initiateWaitCallback.
 */
template<class T>
class CallbackNC_Callback_initiateWaitCallback : public Callback_Callback_initiateWaitCallback_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Callback_initiateWaitCallback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_initiateWaitCallback.
 */
template<class T> Callback_Callback_initiateWaitCallbackPtr
newCallback_Callback_initiateWaitCallback(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_initiateWaitCallback<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_initiateWaitCallback.
 */
template<class T> Callback_Callback_initiateWaitCallbackPtr
newCallback_Callback_initiateWaitCallback(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_initiateWaitCallback<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_initiateWaitCallback.
 */
template<class T> Callback_Callback_initiateWaitCallbackPtr
newCallback_Callback_initiateWaitCallback(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_initiateWaitCallback<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_initiateWaitCallback.
 */
template<class T> Callback_Callback_initiateWaitCallbackPtr
newCallback_Callback_initiateWaitCallback(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_initiateWaitCallback<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Callback::begin_initiateWaitCallback.
 * Create a wrapper instance by calling ::Test::newCallback_Callback_initiateWaitCallback.
 */
template<class T, typename CT>
class Callback_Callback_initiateWaitCallback : public Callback_Callback_initiateWaitCallback_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Callback_initiateWaitCallback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_initiateWaitCallback.
 */
template<class T, typename CT> Callback_Callback_initiateWaitCallbackPtr
newCallback_Callback_initiateWaitCallback(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_initiateWaitCallback<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_initiateWaitCallback.
 */
template<class T, typename CT> Callback_Callback_initiateWaitCallbackPtr
newCallback_Callback_initiateWaitCallback(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_initiateWaitCallback<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_initiateWaitCallback.
 */
template<class T, typename CT> Callback_Callback_initiateWaitCallbackPtr
newCallback_Callback_initiateWaitCallback(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_initiateWaitCallback<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_initiateWaitCallback.
 */
template<class T, typename CT> Callback_Callback_initiateWaitCallbackPtr
newCallback_Callback_initiateWaitCallback(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_initiateWaitCallback<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Callback::begin_initiateCallbackWithPayload.
 * Create a wrapper instance by calling ::Test::newCallback_Callback_initiateCallbackWithPayload.
 */
template<class T>
class CallbackNC_Callback_initiateCallbackWithPayload : public Callback_Callback_initiateCallbackWithPayload_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Callback_initiateCallbackWithPayload(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_initiateCallbackWithPayload.
 */
template<class T> Callback_Callback_initiateCallbackWithPayloadPtr
newCallback_Callback_initiateCallbackWithPayload(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_initiateCallbackWithPayload<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_initiateCallbackWithPayload.
 */
template<class T> Callback_Callback_initiateCallbackWithPayloadPtr
newCallback_Callback_initiateCallbackWithPayload(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_initiateCallbackWithPayload<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_initiateCallbackWithPayload.
 */
template<class T> Callback_Callback_initiateCallbackWithPayloadPtr
newCallback_Callback_initiateCallbackWithPayload(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_initiateCallbackWithPayload<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_initiateCallbackWithPayload.
 */
template<class T> Callback_Callback_initiateCallbackWithPayloadPtr
newCallback_Callback_initiateCallbackWithPayload(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_initiateCallbackWithPayload<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Callback::begin_initiateCallbackWithPayload.
 * Create a wrapper instance by calling ::Test::newCallback_Callback_initiateCallbackWithPayload.
 */
template<class T, typename CT>
class Callback_Callback_initiateCallbackWithPayload : public Callback_Callback_initiateCallbackWithPayload_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Callback_initiateCallbackWithPayload(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_initiateCallbackWithPayload.
 */
template<class T, typename CT> Callback_Callback_initiateCallbackWithPayloadPtr
newCallback_Callback_initiateCallbackWithPayload(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_initiateCallbackWithPayload<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_initiateCallbackWithPayload.
 */
template<class T, typename CT> Callback_Callback_initiateCallbackWithPayloadPtr
newCallback_Callback_initiateCallbackWithPayload(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_initiateCallbackWithPayload<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_initiateCallbackWithPayload.
 */
template<class T, typename CT> Callback_Callback_initiateCallbackWithPayloadPtr
newCallback_Callback_initiateCallbackWithPayload(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_initiateCallbackWithPayload<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_initiateCallbackWithPayload.
 */
template<class T, typename CT> Callback_Callback_initiateCallbackWithPayloadPtr
newCallback_Callback_initiateCallbackWithPayload(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_initiateCallbackWithPayload<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Callback::begin_shutdown.
 * Create a wrapper instance by calling ::Test::newCallback_Callback_shutdown.
 */
template<class T>
class CallbackNC_Callback_shutdown : public Callback_Callback_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Callback_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_shutdown.
 */
template<class T> Callback_Callback_shutdownPtr
newCallback_Callback_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_shutdown<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_shutdown.
 */
template<class T> Callback_Callback_shutdownPtr
newCallback_Callback_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_shutdown<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_shutdown.
 */
template<class T> Callback_Callback_shutdownPtr
newCallback_Callback_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_shutdown<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_shutdown.
 */
template<class T> Callback_Callback_shutdownPtr
newCallback_Callback_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Callback_shutdown<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Callback::begin_shutdown.
 * Create a wrapper instance by calling ::Test::newCallback_Callback_shutdown.
 */
template<class T, typename CT>
class Callback_Callback_shutdown : public Callback_Callback_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Callback_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_shutdown.
 */
template<class T, typename CT> Callback_Callback_shutdownPtr
newCallback_Callback_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_shutdown<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_shutdown.
 */
template<class T, typename CT> Callback_Callback_shutdownPtr
newCallback_Callback_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_shutdown<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_shutdown.
 */
template<class T, typename CT> Callback_Callback_shutdownPtr
newCallback_Callback_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_shutdown<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Callback::begin_shutdown.
 */
template<class T, typename CT> Callback_Callback_shutdownPtr
newCallback_Callback_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Callback_shutdown<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
