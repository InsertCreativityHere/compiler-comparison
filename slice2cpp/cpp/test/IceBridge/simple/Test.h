// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

// clang-format off

#ifndef Test_h_
#define Test_h_

#include <Ice/PushDisableWarnings.h>
#include <Ice/Ice.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Test
{
    class CallbackPrx;

    class MyClassPrx;
}

namespace Test
{
    class CallbackPrx : public Ice::Proxy<CallbackPrx, Ice::ObjectPrx>
    {
    public:

        void ping(const Ice::Context& context = Ice::noExplicitContext) const;

        [[nodiscard]] std::future<void> pingAsync(const Ice::Context& context = Ice::noExplicitContext) const;

        std::function<void()> // NOLINT(modernize-use-nodiscard)
        pingAsync(std::function<void()> response, std::function<void(std::exception_ptr)> ex = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// \cond INTERNAL
        void _iceI_ping(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>&, const Ice::Context&) const;
        /// \endcond

        std::int32_t getCount(const Ice::Context& context = Ice::noExplicitContext) const; // NOLINT(modernize-use-nodiscard)

        [[nodiscard]] std::future<std::int32_t> getCountAsync(const Ice::Context& context = Ice::noExplicitContext) const;

        std::function<void()> // NOLINT(modernize-use-nodiscard)
        getCountAsync(std::function<void(std::int32_t)> response, std::function<void(std::exception_ptr)> ex = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// \cond INTERNAL
        void _iceI_getCount(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::int32_t>>&, const Ice::Context&) const;
        /// \endcond

        void datagram(const Ice::Context& context = Ice::noExplicitContext) const;

        [[nodiscard]] std::future<void> datagramAsync(const Ice::Context& context = Ice::noExplicitContext) const;

        std::function<void()> // NOLINT(modernize-use-nodiscard)
        datagramAsync(std::function<void()> response, std::function<void(std::exception_ptr)> ex = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// \cond INTERNAL
        void _iceI_datagram(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>&, const Ice::Context&) const;
        /// \endcond

        std::int32_t getDatagramCount(const Ice::Context& context = Ice::noExplicitContext) const; // NOLINT(modernize-use-nodiscard)

        [[nodiscard]] std::future<std::int32_t> getDatagramCountAsync(const Ice::Context& context = Ice::noExplicitContext) const;

        std::function<void()> // NOLINT(modernize-use-nodiscard)
        getDatagramCountAsync(std::function<void(std::int32_t)> response, std::function<void(std::exception_ptr)> ex = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// \cond INTERNAL
        void _iceI_getDatagramCount(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::int32_t>>&, const Ice::Context&) const;
        /// \endcond

        /// Obtains the Slice type ID of this interface.
        /// @return The fully-scoped type ID.
        static const char* ice_staticId() noexcept;

        CallbackPrx(const CallbackPrx& other) noexcept : Ice::ObjectPrx(other) {} // NOLINT(modernize-use-equals-default)

        CallbackPrx(CallbackPrx&& other) noexcept : Ice::ObjectPrx(std::move(other)) {} // NOLINT(modernize-use-equals-default)

        CallbackPrx(const Ice::CommunicatorPtr& communicator, std::string_view proxyString) : Ice::ObjectPrx(communicator, proxyString) {} // NOLINT(modernize-use-equals-default)

        ~CallbackPrx() override;

        CallbackPrx& operator=(const CallbackPrx& rhs) noexcept
        {
            if (this != &rhs)
            {
                Ice::ObjectPrx::operator=(rhs);
            }
            return *this;
        }

        CallbackPrx& operator=(CallbackPrx&& rhs) noexcept
        {
            if (this != &rhs)
            {
                Ice::ObjectPrx::operator=(std::move(rhs));
            }
            return *this;
        }

        /// \cond INTERNAL
        static CallbackPrx _fromReference(IceInternal::ReferencePtr ref) { return CallbackPrx(std::move(ref)); }

    protected:
        CallbackPrx() = default;

        explicit CallbackPrx(IceInternal::ReferencePtr&& ref) : Ice::ObjectPrx(std::move(ref))
        {
        }
        /// \endcond
    };

    class MyClassPrx : public Ice::Proxy<MyClassPrx, Ice::ObjectPrx>
    {
    public:

        void callCallback(const Ice::Context& context = Ice::noExplicitContext) const;

        [[nodiscard]] std::future<void> callCallbackAsync(const Ice::Context& context = Ice::noExplicitContext) const;

        std::function<void()> // NOLINT(modernize-use-nodiscard)
        callCallbackAsync(std::function<void()> response, std::function<void(std::exception_ptr)> ex = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// \cond INTERNAL
        void _iceI_callCallback(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>&, const Ice::Context&) const;
        /// \endcond

        std::int32_t getCallbackCount(const Ice::Context& context = Ice::noExplicitContext) const; // NOLINT(modernize-use-nodiscard)

        [[nodiscard]] std::future<std::int32_t> getCallbackCountAsync(const Ice::Context& context = Ice::noExplicitContext) const;

        std::function<void()> // NOLINT(modernize-use-nodiscard)
        getCallbackCountAsync(std::function<void(std::int32_t)> response, std::function<void(std::exception_ptr)> ex = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// \cond INTERNAL
        void _iceI_getCallbackCount(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::int32_t>>&, const Ice::Context&) const;
        /// \endcond

        void incCounter(std::int32_t expected, const Ice::Context& context = Ice::noExplicitContext) const;

        [[nodiscard]] std::future<void> incCounterAsync(std::int32_t expected, const Ice::Context& context = Ice::noExplicitContext) const;

        std::function<void()> // NOLINT(modernize-use-nodiscard)
        incCounterAsync(std::int32_t expected, std::function<void()> response, std::function<void(std::exception_ptr)> ex = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// \cond INTERNAL
        void _iceI_incCounter(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>&, std::int32_t, const Ice::Context&) const;
        /// \endcond

        void waitCounter(std::int32_t value, const Ice::Context& context = Ice::noExplicitContext) const;

        [[nodiscard]] std::future<void> waitCounterAsync(std::int32_t value, const Ice::Context& context = Ice::noExplicitContext) const;

        std::function<void()> // NOLINT(modernize-use-nodiscard)
        waitCounterAsync(std::int32_t value, std::function<void()> response, std::function<void(std::exception_ptr)> ex = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// \cond INTERNAL
        void _iceI_waitCounter(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>&, std::int32_t, const Ice::Context&) const;
        /// \endcond

        std::int32_t getConnectionCount(const Ice::Context& context = Ice::noExplicitContext) const; // NOLINT(modernize-use-nodiscard)

        [[nodiscard]] std::future<std::int32_t> getConnectionCountAsync(const Ice::Context& context = Ice::noExplicitContext) const;

        std::function<void()> // NOLINT(modernize-use-nodiscard)
        getConnectionCountAsync(std::function<void(std::int32_t)> response, std::function<void(std::exception_ptr)> ex = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// \cond INTERNAL
        void _iceI_getConnectionCount(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::int32_t>>&, const Ice::Context&) const;
        /// \endcond

        std::string getConnectionInfo(const Ice::Context& context = Ice::noExplicitContext) const; // NOLINT(modernize-use-nodiscard)

        [[nodiscard]] std::future<std::string> getConnectionInfoAsync(const Ice::Context& context = Ice::noExplicitContext) const;

        std::function<void()> // NOLINT(modernize-use-nodiscard)
        getConnectionInfoAsync(std::function<void(std::string)> response, std::function<void(std::exception_ptr)> ex = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// \cond INTERNAL
        void _iceI_getConnectionInfo(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::string>>&, const Ice::Context&) const;
        /// \endcond

        void closeConnection(bool force, const Ice::Context& context = Ice::noExplicitContext) const;

        [[nodiscard]] std::future<void> closeConnectionAsync(bool force, const Ice::Context& context = Ice::noExplicitContext) const;

        std::function<void()> // NOLINT(modernize-use-nodiscard)
        closeConnectionAsync(bool force, std::function<void()> response, std::function<void(std::exception_ptr)> ex = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// \cond INTERNAL
        void _iceI_closeConnection(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>&, bool, const Ice::Context&) const;
        /// \endcond

        void datagram(const Ice::Context& context = Ice::noExplicitContext) const;

        [[nodiscard]] std::future<void> datagramAsync(const Ice::Context& context = Ice::noExplicitContext) const;

        std::function<void()> // NOLINT(modernize-use-nodiscard)
        datagramAsync(std::function<void()> response, std::function<void(std::exception_ptr)> ex = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// \cond INTERNAL
        void _iceI_datagram(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>&, const Ice::Context&) const;
        /// \endcond

        std::int32_t getDatagramCount(const Ice::Context& context = Ice::noExplicitContext) const; // NOLINT(modernize-use-nodiscard)

        [[nodiscard]] std::future<std::int32_t> getDatagramCountAsync(const Ice::Context& context = Ice::noExplicitContext) const;

        std::function<void()> // NOLINT(modernize-use-nodiscard)
        getDatagramCountAsync(std::function<void(std::int32_t)> response, std::function<void(std::exception_ptr)> ex = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// \cond INTERNAL
        void _iceI_getDatagramCount(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::int32_t>>&, const Ice::Context&) const;
        /// \endcond

        void callDatagramCallback(const Ice::Context& context = Ice::noExplicitContext) const;

        [[nodiscard]] std::future<void> callDatagramCallbackAsync(const Ice::Context& context = Ice::noExplicitContext) const;

        std::function<void()> // NOLINT(modernize-use-nodiscard)
        callDatagramCallbackAsync(std::function<void()> response, std::function<void(std::exception_ptr)> ex = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// \cond INTERNAL
        void _iceI_callDatagramCallback(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>&, const Ice::Context&) const;
        /// \endcond

        std::int32_t getCallbackDatagramCount(const Ice::Context& context = Ice::noExplicitContext) const; // NOLINT(modernize-use-nodiscard)

        [[nodiscard]] std::future<std::int32_t> getCallbackDatagramCountAsync(const Ice::Context& context = Ice::noExplicitContext) const;

        std::function<void()> // NOLINT(modernize-use-nodiscard)
        getCallbackDatagramCountAsync(std::function<void(std::int32_t)> response, std::function<void(std::exception_ptr)> ex = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// \cond INTERNAL
        void _iceI_getCallbackDatagramCount(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::int32_t>>&, const Ice::Context&) const;
        /// \endcond

        void shutdown(const Ice::Context& context = Ice::noExplicitContext) const;

        [[nodiscard]] std::future<void> shutdownAsync(const Ice::Context& context = Ice::noExplicitContext) const;

        std::function<void()> // NOLINT(modernize-use-nodiscard)
        shutdownAsync(std::function<void()> response, std::function<void(std::exception_ptr)> ex = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// \cond INTERNAL
        void _iceI_shutdown(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>&, const Ice::Context&) const;
        /// \endcond

        /// Obtains the Slice type ID of this interface.
        /// @return The fully-scoped type ID.
        static const char* ice_staticId() noexcept;

        MyClassPrx(const MyClassPrx& other) noexcept : Ice::ObjectPrx(other) {} // NOLINT(modernize-use-equals-default)

        MyClassPrx(MyClassPrx&& other) noexcept : Ice::ObjectPrx(std::move(other)) {} // NOLINT(modernize-use-equals-default)

        MyClassPrx(const Ice::CommunicatorPtr& communicator, std::string_view proxyString) : Ice::ObjectPrx(communicator, proxyString) {} // NOLINT(modernize-use-equals-default)

        ~MyClassPrx() override;

        MyClassPrx& operator=(const MyClassPrx& rhs) noexcept
        {
            if (this != &rhs)
            {
                Ice::ObjectPrx::operator=(rhs);
            }
            return *this;
        }

        MyClassPrx& operator=(MyClassPrx&& rhs) noexcept
        {
            if (this != &rhs)
            {
                Ice::ObjectPrx::operator=(std::move(rhs));
            }
            return *this;
        }

        /// \cond INTERNAL
        static MyClassPrx _fromReference(IceInternal::ReferencePtr ref) { return MyClassPrx(std::move(ref)); }

    protected:
        MyClassPrx() = default;

        explicit MyClassPrx(IceInternal::ReferencePtr&& ref) : Ice::ObjectPrx(std::move(ref))
        {
        }
        /// \endcond
    };
}

namespace Test
{
    class Callback : public virtual Ice::Object
    {
    public:
        using ProxyType = CallbackPrx;

        /// Obtains a list of the Slice type IDs representing the interfaces supported by this object.
        /// @param current The Current object for the invocation.
        /// @return A list of fully-scoped type IDs.
        [[nodiscard]] std::vector<std::string> ice_ids(const Ice::Current& current) const override;

        /// Obtains a Slice type ID representing the most-derived interface supported by this object.
        /// @param current The Current object for the invocation.
        /// @return A fully-scoped type ID.
        [[nodiscard]] std::string ice_id(const Ice::Current& current) const override;

        /// Obtains the Slice type ID corresponding to this interface.
        /// @return A fully-scoped type ID.
        static const char* ice_staticId() noexcept;

        virtual void ping(const Ice::Current& current) = 0;

        /// \cond INTERNAL
        void _iceD_ping(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);
        /// \endcond

        virtual std::int32_t getCount(const Ice::Current& current) = 0;

        /// \cond INTERNAL
        void _iceD_getCount(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);
        /// \endcond

        virtual void datagram(const Ice::Current& current) = 0;

        /// \cond INTERNAL
        void _iceD_datagram(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);
        /// \endcond

        virtual std::int32_t getDatagramCount(const Ice::Current& current) = 0;

        /// \cond INTERNAL
        void _iceD_getDatagramCount(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);
        /// \endcond

        void dispatch(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>) override;
    };

    using CallbackPtr = std::shared_ptr<Callback>;

    class MyClass : public virtual Ice::Object
    {
    public:
        using ProxyType = MyClassPrx;

        /// Obtains a list of the Slice type IDs representing the interfaces supported by this object.
        /// @param current The Current object for the invocation.
        /// @return A list of fully-scoped type IDs.
        [[nodiscard]] std::vector<std::string> ice_ids(const Ice::Current& current) const override;

        /// Obtains a Slice type ID representing the most-derived interface supported by this object.
        /// @param current The Current object for the invocation.
        /// @return A fully-scoped type ID.
        [[nodiscard]] std::string ice_id(const Ice::Current& current) const override;

        /// Obtains the Slice type ID corresponding to this interface.
        /// @return A fully-scoped type ID.
        static const char* ice_staticId() noexcept;

        virtual void callCallbackAsync(std::function<void()> response, std::function<void(std::exception_ptr)> exception, const Ice::Current& current) = 0;

        /// \cond INTERNAL
        void _iceD_callCallback(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);
        /// \endcond

        virtual void getCallbackCountAsync(std::function<void(std::int32_t returnValue)> response, std::function<void(std::exception_ptr)> exception, const Ice::Current& current) = 0;

        /// \cond INTERNAL
        void _iceD_getCallbackCount(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);
        /// \endcond

        virtual void incCounter(std::int32_t expected, const Ice::Current& current) = 0;

        /// \cond INTERNAL
        void _iceD_incCounter(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);
        /// \endcond

        virtual void waitCounter(std::int32_t value, const Ice::Current& current) = 0;

        /// \cond INTERNAL
        void _iceD_waitCounter(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);
        /// \endcond

        virtual std::int32_t getConnectionCount(const Ice::Current& current) = 0;

        /// \cond INTERNAL
        void _iceD_getConnectionCount(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);
        /// \endcond

        virtual std::string getConnectionInfo(const Ice::Current& current) = 0;

        /// \cond INTERNAL
        void _iceD_getConnectionInfo(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);
        /// \endcond

        virtual void closeConnection(bool force, const Ice::Current& current) = 0;

        /// \cond INTERNAL
        void _iceD_closeConnection(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);
        /// \endcond

        virtual void datagram(const Ice::Current& current) = 0;

        /// \cond INTERNAL
        void _iceD_datagram(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);
        /// \endcond

        virtual std::int32_t getDatagramCount(const Ice::Current& current) = 0;

        /// \cond INTERNAL
        void _iceD_getDatagramCount(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);
        /// \endcond

        virtual void callDatagramCallback(const Ice::Current& current) = 0;

        /// \cond INTERNAL
        void _iceD_callDatagramCallback(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);
        /// \endcond

        virtual void getCallbackDatagramCountAsync(std::function<void(std::int32_t returnValue)> response, std::function<void(std::exception_ptr)> exception, const Ice::Current& current) = 0;

        /// \cond INTERNAL
        void _iceD_getCallbackDatagramCount(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);
        /// \endcond

        virtual void shutdown(const Ice::Current& current) = 0;

        /// \cond INTERNAL
        void _iceD_shutdown(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);
        /// \endcond

        void dispatch(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>) override;
    };

    using MyClassPtr = std::shared_ptr<MyClass>;
}

#include <Ice/PopDisableWarnings.h>
#endif
