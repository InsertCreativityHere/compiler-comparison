//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `FileServer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __FileServer_h__
#define __FileServer_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <FileInfo.h>
#include <IceUtil/UndefSysMacros.h>
#include <IcePatch2/Config.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

#ifndef ICEPATCH2_API
#   if defined(ICE_STATIC_LIBS)
#       define ICEPATCH2_API /**/
#   elif defined(ICEPATCH2_API_EXPORTS)
#       define ICEPATCH2_API ICE_DECLSPEC_EXPORT
#   else
#       define ICEPATCH2_API ICE_DECLSPEC_IMPORT
#   endif
#endif

namespace IcePatch2
{


/**
 * A sequence of byte sequences. Each element is the checksum for a partition.
 */
using ByteSeqSeq = ::std::vector<::Ice::ByteSeq>;
class FileServerPrx;

}

namespace IcePatch2
{

/**
 * The interface that provides access to files.
 */
class ICEPATCH2_API FileServerPrx : public ::Ice::Proxy<FileServerPrx, ::Ice::ObjectPrx>
{
public:

    /**
     * Returns file information for the specified partition.
     * @param partition The partition number in the range 0-255.
     * @param context The Context map to send with the invocation.
     * @return A sequence containing information about the files in the specified partition.
     * @throws IcePatch2::PartitionOutOfRangeException If the partition number is out of range.
     */
    LargeFileInfoSeq getLargeFileInfoSeq(::std::int32_t partition, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Returns file information for the specified partition.
     * @param partition The partition number in the range 0-255.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<LargeFileInfoSeq> getLargeFileInfoSeqAsync(::std::int32_t partition, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Returns file information for the specified partition.
     * @param partition The partition number in the range 0-255.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    getLargeFileInfoSeqAsync(::std::int32_t partition, ::std::function<void(::IcePatch2::LargeFileInfoSeq)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_getLargeFileInfoSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<LargeFileInfoSeq>>&, ::std::int32_t, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Return the checksums for all partitions.
     * @param context The Context map to send with the invocation.
     * @return A sequence containing 256 checksums. Partitions with a checksum that differs from the previous checksum
     * for the same partition contain updated files. Partitions with a checksum that is identical to the previous
     * checksum do not contain updated files.
     */
    ByteSeqSeq getChecksumSeq(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Return the checksums for all partitions.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<ByteSeqSeq> getChecksumSeqAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Return the checksums for all partitions.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    getChecksumSeqAsync(::std::function<void(::IcePatch2::ByteSeqSeq)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_getChecksumSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<ByteSeqSeq>>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Return the master checksum for all partitions. If this checksum is the same as for a previous run, the entire
     * file set is up-to-date.
     * @param context The Context map to send with the invocation.
     * @return The master checksum for the file set.
     */
    ::Ice::ByteSeq getChecksum(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Return the master checksum for all partitions. If this checksum is the same as for a previous run, the entire
     * file set is up-to-date.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<::Ice::ByteSeq> getChecksumAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Return the master checksum for all partitions. If this checksum is the same as for a previous run, the entire
     * file set is up-to-date.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    getChecksumAsync(::std::function<void(::Ice::ByteSeq)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_getChecksum(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Ice::ByteSeq>>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Read the specified file. This operation may only return fewer bytes than requested in case there was an
     * end-of-file condition.
     * @param path The pathname (relative to the data directory) for the file to be read.
     * @param pos The file offset at which to begin reading.
     * @param num The number of bytes to be read.
     * @param context The Context map to send with the invocation.
     * @return A sequence containing the compressed file contents.
     * @throws IcePatch2::FileAccessException If an error occurred while trying to read the file.
     */
    ::Ice::ByteSeq getLargeFileCompressed(::std::string_view path, ::std::int64_t pos, ::std::int32_t num, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Read the specified file. This operation may only return fewer bytes than requested in case there was an
     * end-of-file condition.
     * @param path The pathname (relative to the data directory) for the file to be read.
     * @param pos The file offset at which to begin reading.
     * @param num The number of bytes to be read.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<::Ice::ByteSeq> getLargeFileCompressedAsync(::std::string_view path, ::std::int64_t pos, ::std::int32_t num, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Read the specified file. This operation may only return fewer bytes than requested in case there was an
     * end-of-file condition.
     * @param path The pathname (relative to the data directory) for the file to be read.
     * @param pos The file offset at which to begin reading.
     * @param num The number of bytes to be read.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    getLargeFileCompressedAsync(::std::string_view path, ::std::int64_t pos, ::std::int32_t num, ::std::function<void(::std::pair<const std::byte*, const std::byte*>)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_getLargeFileCompressed(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Ice::ByteSeq>>&, ::std::string_view, ::std::int64_t, ::std::int32_t, const ::Ice::Context&) const;
    /// \endcond

    /// \cond INTERNAL
    void _iceIL_getLargeFileCompressed(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::pair<const std::byte*, const std::byte*>>>&, ::std::string_view, ::std::int64_t, ::std::int32_t, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

    explicit FileServerPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    FileServerPrx(const FileServerPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    FileServerPrx(FileServerPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    FileServerPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, std::string_view proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    FileServerPrx& operator=(const FileServerPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    FileServerPrx& operator=(FileServerPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static FileServerPrx _fromReference(::IceInternal::ReferencePtr ref) { return FileServerPrx(::std::move(ref)); }

protected:

    FileServerPrx() = default;

    explicit FileServerPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

}

namespace IcePatch2
{

/**
 * A <code>partition</code> argument was not in the range 0-255.
 * \headerfile IcePatch2/IcePatch2.h
 */
class ICE_CLASS(ICEPATCH2_API) PartitionOutOfRangeException : public ::Ice::UserException
{
public:
    using ::Ice::UserException::UserException;

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(ICEPATCH2_API) static ::std::string_view ice_staticId() noexcept;

    ICE_MEMBER(ICEPATCH2_API) ::std::string ice_id() const override;

    ICE_MEMBER(ICEPATCH2_API) void ice_throw() const override;

protected:
    ICE_MEMBER(ICEPATCH2_API) void _writeImpl(::Ice::OutputStream*) const override;

    ICE_MEMBER(ICEPATCH2_API) void _readImpl(::Ice::InputStream*) override;
};

/// \cond INTERNAL
static PartitionOutOfRangeException _iceS_PartitionOutOfRangeException_init;
/// \endcond

/**
 * This exception is raised if a file's contents cannot be read.
 * \headerfile IcePatch2/IcePatch2.h
 */
class ICE_CLASS(ICEPATCH2_API) FileAccessException : public ::Ice::UserException
{
public:
    using ::Ice::UserException::UserException;

    /**
     * One-shot constructor to initialize all data members.
     * @param reason An explanation of the reason for the failure.
     */
    FileAccessException(::std::string reason) noexcept :
        reason(::std::move(reason))
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(reason);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(ICEPATCH2_API) static ::std::string_view ice_staticId() noexcept;

    ICE_MEMBER(ICEPATCH2_API) ::std::string ice_id() const override;

    ICE_MEMBER(ICEPATCH2_API) void ice_throw() const override;

    /**
     * An explanation of the reason for the failure.
     */
    ::std::string reason;

protected:
    ICE_MEMBER(ICEPATCH2_API) void _writeImpl(::Ice::OutputStream*) const override;

    ICE_MEMBER(ICEPATCH2_API) void _readImpl(::Ice::InputStream*) override;
};

/**
 * This exception is raised if an operation tries to use a file whose size is larger than 2.1 GB. Use the "large"
 * versions of the operations instead.
 * \headerfile IcePatch2/IcePatch2.h
 */
class ICE_CLASS(ICEPATCH2_API) FileSizeRangeException : public FileAccessException
{
public:
    using FileAccessException::FileAccessException;

    /**
     * One-shot constructor to initialize all data members.
     * @param reason An explanation of the reason for the failure.
     */
    FileSizeRangeException(::std::string reason) noexcept :
        FileAccessException(::std::move(reason))
    {
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(ICEPATCH2_API) static ::std::string_view ice_staticId() noexcept;

    ICE_MEMBER(ICEPATCH2_API) ::std::string ice_id() const override;

    ICE_MEMBER(ICEPATCH2_API) void ice_throw() const override;

protected:
    ICE_MEMBER(ICEPATCH2_API) void _writeImpl(::Ice::OutputStream*) const override;

    ICE_MEMBER(ICEPATCH2_API) void _readImpl(::Ice::InputStream*) override;
};

}

namespace IcePatch2
{

/**
 * The interface that provides access to files.
 */
class ICEPATCH2_API FileServer : public virtual ::Ice::Object
{
public:

    using ProxyType = FileServerPrx;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

    /**
     * Returns file information for the specified partition.
     * @param partition The partition number in the range 0-255.
     * @param current The Current object for the invocation.
     * @return A sequence containing information about the files in the specified partition.
     * @throws IcePatch2::PartitionOutOfRangeException If the partition number is out of range.
     */
    virtual LargeFileInfoSeq getLargeFileInfoSeq(::std::int32_t partition, const ::Ice::Current& current) const = 0;
    /// \cond INTERNAL
    void _iceD_getLargeFileInfoSeq(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>) const;
    /// \endcond

    /**
     * Return the checksums for all partitions.
     * @param current The Current object for the invocation.
     * @return A sequence containing 256 checksums. Partitions with a checksum that differs from the previous checksum
     * for the same partition contain updated files. Partitions with a checksum that is identical to the previous
     * checksum do not contain updated files.
     */
    virtual ByteSeqSeq getChecksumSeq(const ::Ice::Current& current) const = 0;
    /// \cond INTERNAL
    void _iceD_getChecksumSeq(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>) const;
    /// \endcond

    /**
     * Return the master checksum for all partitions. If this checksum is the same as for a previous run, the entire
     * file set is up-to-date.
     * @param current The Current object for the invocation.
     * @return The master checksum for the file set.
     */
    virtual ::Ice::ByteSeq getChecksum(const ::Ice::Current& current) const = 0;
    /// \cond INTERNAL
    void _iceD_getChecksum(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>) const;
    /// \endcond

    /**
     * Read the specified file. This operation may only return fewer bytes than requested in case there was an
     * end-of-file condition.
     * @param path The pathname (relative to the data directory) for the file to be read.
     * @param pos The file offset at which to begin reading.
     * @param num The number of bytes to be read.
     * @param response The response callback.
     * @param exception The exception callback.
     * @param current The Current object for the invocation.
     * @throws IcePatch2::FileAccessException If an error occurred while trying to read the file.
     */
    virtual void getLargeFileCompressedAsync(::std::string path, ::std::int64_t pos, ::std::int32_t num, ::std::function<void(::std::pair<const std::byte*, const std::byte*> returnValue)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) const = 0;
    /// \cond INTERNAL
    void _iceD_getLargeFileCompressed(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>) const;
    /// \endcond

    /// \cond INTERNAL
    void dispatch(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>) override;
    /// \endcond
};

using FileServerPtr = ::std::shared_ptr<FileServer>;

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamReader<::IcePatch2::FileAccessException, S>
{
    static void read(S* istr, ::IcePatch2::FileAccessException& v)
    {
        istr->readAll(v.reason);
    }
};

template<typename S>
struct StreamWriter<::IcePatch2::FileSizeRangeException, S>
{
    static void write(S*, const ::IcePatch2::FileSizeRangeException&)
    {
    }
};

template<typename S>
struct StreamReader<::IcePatch2::FileSizeRangeException, S>
{
    static void read(S*, ::IcePatch2::FileSizeRangeException&)
    {
    }
};

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
