//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `ServiceManager.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __ServiceManager_h__
#define __ServiceManager_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <Ice/BuiltinSequences.h>
#include <IceUtil/UndefSysMacros.h>
#include <IceBox/Config.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

#ifndef ICEBOX_API
#   if defined(ICE_STATIC_LIBS)
#       define ICEBOX_API /**/
#   elif defined(ICEBOX_API_EXPORTS)
#       define ICEBOX_API ICE_DECLSPEC_EXPORT
#   else
#       define ICEBOX_API ICE_DECLSPEC_IMPORT
#   endif
#endif

namespace IceBox
{

class ServiceObserverPrx;

using ServiceObserverPrxPtr = ::std::optional<ServiceObserverPrx>;
class ServiceManagerPrx;

using ServiceManagerPrxPtr = ::std::optional<ServiceManagerPrx>;

}

namespace IceBox
{

/**
 * An Observer interface implemented by admin clients interested in the status of services.
 * @see ServiceManager
 */
class ICEBOX_API ServiceObserverPrx : public ::Ice::Proxy<ServiceObserverPrx, ::Ice::ObjectPrx>
{
public:

    /**
     * Receives the names of the services that were started.
     * @param services The names of the services.
     * @param context The Context map to send with the invocation.
     */
    void servicesStarted(const ::Ice::StringSeq& services, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Receives the names of the services that were started.
     * @param services The names of the services.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<void> servicesStartedAsync(const ::Ice::StringSeq& services, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Receives the names of the services that were started.
     * @param services The names of the services.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    servicesStartedAsync(const ::Ice::StringSeq& services,
                         ::std::function<void()> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_servicesStarted(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::StringSeq&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Receives the names of the services that were stopped.
     * @param services The names of the services.
     * @param context The Context map to send with the invocation.
     */
    void servicesStopped(const ::Ice::StringSeq& services, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Receives the names of the services that were stopped.
     * @param services The names of the services.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<void> servicesStoppedAsync(const ::Ice::StringSeq& services, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Receives the names of the services that were stopped.
     * @param services The names of the services.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    servicesStoppedAsync(const ::Ice::StringSeq& services,
                         ::std::function<void()> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_servicesStopped(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::StringSeq&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit ServiceObserverPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    ServiceObserverPrx(const ServiceObserverPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    ServiceObserverPrx(ServiceObserverPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    ServiceObserverPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    ServiceObserverPrx& operator=(const ServiceObserverPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    ServiceObserverPrx& operator=(ServiceObserverPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static ServiceObserverPrx _fromReference(::IceInternal::ReferencePtr ref) { return ServiceObserverPrx(::std::move(ref)); }

protected:

    ServiceObserverPrx() = default;

    explicit ServiceObserverPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

/**
 * Administers a set of IceBox Service instances.
 * @see Service
 */
class ICEBOX_API ServiceManagerPrx : public ::Ice::Proxy<ServiceManagerPrx, ::Ice::ObjectPrx>
{
public:

    /**
     * Start an individual service.
     * @param service The service name.
     * @param context The Context map to send with the invocation.
     * @throws IceBox::AlreadyStartedException If the service is already running.
     * @throws IceBox::NoSuchServiceException If no service could be found with the given name.
     */
    void startService(const ::std::string& service, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Start an individual service.
     * @param service The service name.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<void> startServiceAsync(const ::std::string& service, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Start an individual service.
     * @param service The service name.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    startServiceAsync(const ::std::string& service,
                      ::std::function<void()> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_startService(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Stop an individual service.
     * @param service The service name.
     * @param context The Context map to send with the invocation.
     * @throws IceBox::AlreadyStoppedException If the service is already stopped.
     * @throws IceBox::NoSuchServiceException If no service could be found with the given name.
     */
    void stopService(const ::std::string& service, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Stop an individual service.
     * @param service The service name.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<void> stopServiceAsync(const ::std::string& service, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Stop an individual service.
     * @param service The service name.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    stopServiceAsync(const ::std::string& service,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_stopService(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Registers a new observer with the ServiceManager.
     * @param observer The new observer
     * @param context The Context map to send with the invocation.
     */
    void addObserver(const ::std::optional<ServiceObserverPrx>& observer, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Registers a new observer with the ServiceManager.
     * @param observer The new observer
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<void> addObserverAsync(const ::std::optional<ServiceObserverPrx>& observer, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Registers a new observer with the ServiceManager.
     * @param observer The new observer
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    addObserverAsync(const ::std::optional<ServiceObserverPrx>& observer,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_addObserver(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::optional<ServiceObserverPrx>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Shut down all services. This causes stop to be invoked on all configured services.
     * @param context The Context map to send with the invocation.
     */
    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Shut down all services. This causes stop to be invoked on all configured services.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<void> shutdownAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Shut down all services. This causes stop to be invoked on all configured services.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    shutdownAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit ServiceManagerPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    ServiceManagerPrx(const ServiceManagerPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    ServiceManagerPrx(ServiceManagerPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    ServiceManagerPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    ServiceManagerPrx& operator=(const ServiceManagerPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    ServiceManagerPrx& operator=(ServiceManagerPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static ServiceManagerPrx _fromReference(::IceInternal::ReferencePtr ref) { return ServiceManagerPrx(::std::move(ref)); }

protected:

    ServiceManagerPrx() = default;

    explicit ServiceManagerPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

}

namespace IceBox
{

/**
 * This exception is thrown if an attempt is made to start an already-started service.
 * \headerfile IceBox/IceBox.h
 */
class ICE_CLASS(ICEBOX_API) AlreadyStartedException : public ::Ice::UserExceptionHelper<AlreadyStartedException, ::Ice::UserException>
{
public:

    ICE_MEMBER(ICEBOX_API) virtual ~AlreadyStartedException();

    AlreadyStartedException(const AlreadyStartedException&) = default;

    AlreadyStartedException() = default;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(ICEBOX_API) static const ::std::string& ice_staticId();
};

/// \cond INTERNAL
static AlreadyStartedException _iceS_AlreadyStartedException_init;
/// \endcond

/**
 * This exception is thrown if an attempt is made to stop an already-stopped service.
 * \headerfile IceBox/IceBox.h
 */
class ICE_CLASS(ICEBOX_API) AlreadyStoppedException : public ::Ice::UserExceptionHelper<AlreadyStoppedException, ::Ice::UserException>
{
public:

    ICE_MEMBER(ICEBOX_API) virtual ~AlreadyStoppedException();

    AlreadyStoppedException(const AlreadyStoppedException&) = default;

    AlreadyStoppedException() = default;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(ICEBOX_API) static const ::std::string& ice_staticId();
};

/**
 * This exception is thrown if a service name does not refer to an existing service.
 * \headerfile IceBox/IceBox.h
 */
class ICE_CLASS(ICEBOX_API) NoSuchServiceException : public ::Ice::UserExceptionHelper<NoSuchServiceException, ::Ice::UserException>
{
public:

    ICE_MEMBER(ICEBOX_API) virtual ~NoSuchServiceException();

    NoSuchServiceException(const NoSuchServiceException&) = default;

    NoSuchServiceException() = default;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(ICEBOX_API) static const ::std::string& ice_staticId();
};

}

namespace IceBox
{

/**
 * An Observer interface implemented by admin clients interested in the status of services.
 * @see ServiceManager
 */
class ICEBOX_API ServiceObserver : public virtual ::Ice::Object
{
public:

    using ProxyType = ServiceObserverPrx;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Receives the names of the services that were started.
     * @param services The names of the services.
     * @param current The Current object for the invocation.
     */
    virtual void servicesStarted(::Ice::StringSeq services, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_servicesStarted(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Receives the names of the services that were stopped.
     * @param services The names of the services.
     * @param current The Current object for the invocation.
     */
    virtual void servicesStopped(::Ice::StringSeq services, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_servicesStopped(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

using ServiceObserverPtr = ::std::shared_ptr<ServiceObserver>;

/**
 * Administers a set of IceBox Service instances.
 * @see Service
 */
class ICEBOX_API ServiceManager : public virtual ::Ice::Object
{
public:

    using ProxyType = ServiceManagerPrx;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Start an individual service.
     * @param service The service name.
     * @param current The Current object for the invocation.
     * @throws IceBox::AlreadyStartedException If the service is already running.
     * @throws IceBox::NoSuchServiceException If no service could be found with the given name.
     */
    virtual void startService(::std::string service, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_startService(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Stop an individual service.
     * @param service The service name.
     * @param current The Current object for the invocation.
     * @throws IceBox::AlreadyStoppedException If the service is already stopped.
     * @throws IceBox::NoSuchServiceException If no service could be found with the given name.
     */
    virtual void stopService(::std::string service, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_stopService(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Registers a new observer with the ServiceManager.
     * @param observer The new observer
     * @param current The Current object for the invocation.
     */
    virtual void addObserver(::std::optional<ServiceObserverPrx> observer, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_addObserver(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Shut down all services. This causes stop to be invoked on all configured services.
     * @param current The Current object for the invocation.
     */
    virtual void shutdown(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

using ServiceManagerPtr = ::std::shared_ptr<ServiceManager>;

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
