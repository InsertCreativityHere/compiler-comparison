//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `ServiceManager.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ICEBOX_API_EXPORTS
#   define ICEBOX_API_EXPORTS
#endif
#define ICE_BUILDING_GENERATED_CODE
#include <ServiceManager.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::IceBox::AlreadyStartedException> iceC_IceBox_AlreadyStartedException_init("::IceBox::AlreadyStartedException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::IceBox::AlreadyStoppedException> iceC_IceBox_AlreadyStoppedException_init("::IceBox::AlreadyStoppedException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::IceBox::NoSuchServiceException> iceC_IceBox_NoSuchServiceException_init("::IceBox::NoSuchServiceException");

const ::std::string iceC_IceBox_ServiceObserver_ids[2] =
{
    "::Ice::Object",
    "::IceBox::ServiceObserver"
};
const ::std::string iceC_IceBox_ServiceObserver_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "servicesStarted",
    "servicesStopped"
};
const ::std::string iceC_IceBox_ServiceObserver_servicesStarted_name = "servicesStarted";
const ::std::string iceC_IceBox_ServiceObserver_servicesStopped_name = "servicesStopped";

const ::std::string iceC_IceBox_ServiceManager_ids[2] =
{
    "::Ice::Object",
    "::IceBox::ServiceManager"
};
const ::std::string iceC_IceBox_ServiceManager_ops[] =
{
    "addObserver",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "shutdown",
    "startService",
    "stopService"
};
const ::std::string iceC_IceBox_ServiceManager_startService_name = "startService";
const ::std::string iceC_IceBox_ServiceManager_stopService_name = "stopService";
const ::std::string iceC_IceBox_ServiceManager_addObserver_name = "addObserver";
const ::std::string iceC_IceBox_ServiceManager_shutdown_name = "shutdown";

}

IceBox::AlreadyStartedException::~AlreadyStartedException()
{
}

const ::std::string&
IceBox::AlreadyStartedException::ice_staticId()
{
    static const ::std::string typeId = "::IceBox::AlreadyStartedException";
    return typeId;
}

IceBox::AlreadyStoppedException::~AlreadyStoppedException()
{
}

const ::std::string&
IceBox::AlreadyStoppedException::ice_staticId()
{
    static const ::std::string typeId = "::IceBox::AlreadyStoppedException";
    return typeId;
}

IceBox::NoSuchServiceException::~NoSuchServiceException()
{
}

const ::std::string&
IceBox::NoSuchServiceException::ice_staticId()
{
    static const ::std::string typeId = "::IceBox::NoSuchServiceException";
    return typeId;
}

bool
IceBox::ServiceObserver::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_IceBox_ServiceObserver_ids, iceC_IceBox_ServiceObserver_ids + 2, s);
}

::std::vector<::std::string>
IceBox::ServiceObserver::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_IceBox_ServiceObserver_ids[0], &iceC_IceBox_ServiceObserver_ids[2]);
}

::std::string
IceBox::ServiceObserver::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
IceBox::ServiceObserver::ice_staticId()
{
    static const ::std::string typeId = "::IceBox::ServiceObserver";
    return typeId;
}

/// \cond INTERNAL
bool
IceBox::ServiceObserver::_iceD_servicesStarted(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Ice::StringSeq iceP_services;
    istr->readAll(iceP_services);
    inS.endReadParams();
    this->servicesStarted(::std::move(iceP_services), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceBox::ServiceObserver::_iceD_servicesStopped(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Ice::StringSeq iceP_services;
    istr->readAll(iceP_services);
    inS.endReadParams();
    this->servicesStopped(::std::move(iceP_services), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceBox::ServiceObserver::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_IceBox_ServiceObserver_ops, iceC_IceBox_ServiceObserver_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_IceBox_ServiceObserver_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_servicesStarted(in, current);
        }
        case 5:
        {
            return _iceD_servicesStopped(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
IceBox::ServiceManager::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_IceBox_ServiceManager_ids, iceC_IceBox_ServiceManager_ids + 2, s);
}

::std::vector<::std::string>
IceBox::ServiceManager::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_IceBox_ServiceManager_ids[0], &iceC_IceBox_ServiceManager_ids[2]);
}

::std::string
IceBox::ServiceManager::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
IceBox::ServiceManager::ice_staticId()
{
    static const ::std::string typeId = "::IceBox::ServiceManager";
    return typeId;
}

/// \cond INTERNAL
bool
IceBox::ServiceManager::_iceD_startService(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_service;
    istr->readAll(iceP_service);
    inS.endReadParams();
    this->startService(::std::move(iceP_service), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceBox::ServiceManager::_iceD_stopService(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_service;
    istr->readAll(iceP_service);
    inS.endReadParams();
    this->stopService(::std::move(iceP_service), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceBox::ServiceManager::_iceD_addObserver(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<ServiceObserverPrx> iceP_observer;
    istr->readAll(iceP_observer);
    inS.endReadParams();
    this->addObserver(::std::move(iceP_observer), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceBox::ServiceManager::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceBox::ServiceManager::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_IceBox_ServiceManager_ops, iceC_IceBox_ServiceManager_ops + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_IceBox_ServiceManager_ops)
    {
        case 0:
        {
            return _iceD_addObserver(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_shutdown(in, current);
        }
        case 6:
        {
            return _iceD_startService(in, current);
        }
        case 7:
        {
            return _iceD_stopService(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
IceBox::ServiceObserverPrx::_iceI_servicesStarted(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::StringSeq& iceP_services, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_IceBox_ServiceObserver_servicesStarted_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_services);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
IceBox::ServiceObserverPrx::_iceI_servicesStopped(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::StringSeq& iceP_services, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_IceBox_ServiceObserver_servicesStopped_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_services);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
IceBox::ServiceObserverPrx::_newInstance() const
{
    return ::IceInternal::createProxy<ServiceObserverPrx>();
}
/// \endcond

const ::std::string&
IceBox::ServiceObserverPrx::ice_staticId()
{
    return ServiceObserver::ice_staticId();
}

/// \cond INTERNAL
void
IceBox::ServiceManagerPrx::_iceI_startService(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_service, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_IceBox_ServiceManager_startService_name);
    outAsync->invoke(iceC_IceBox_ServiceManager_startService_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_service);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const AlreadyStartedException&)
            {
                throw;
            }
            catch(const NoSuchServiceException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
IceBox::ServiceManagerPrx::_iceI_stopService(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_service, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_IceBox_ServiceManager_stopService_name);
    outAsync->invoke(iceC_IceBox_ServiceManager_stopService_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_service);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const AlreadyStoppedException&)
            {
                throw;
            }
            catch(const NoSuchServiceException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
IceBox::ServiceManagerPrx::_iceI_addObserver(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<ServiceObserverPrx>& iceP_observer, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_IceBox_ServiceManager_addObserver_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_observer);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
IceBox::ServiceManagerPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_IceBox_ServiceManager_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
IceBox::ServiceManagerPrx::_newInstance() const
{
    return ::IceInternal::createProxy<ServiceManagerPrx>();
}
/// \endcond

const ::std::string&
IceBox::ServiceManagerPrx::ice_staticId()
{
    return ServiceManager::ice_staticId();
}
