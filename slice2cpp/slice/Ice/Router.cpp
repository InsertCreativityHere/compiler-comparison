//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Router.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ICE_API_EXPORTS
#   define ICE_API_EXPORTS
#endif
#define ICE_BUILDING_GENERATED_CODE
#include <Router.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

}

::std::optional<::Ice::ObjectPrx>
Ice::RouterPrx::getClientProxy(::std::optional<bool>& iceP_hasRoutingTable, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<::std::optional<::Ice::ObjectPrx>, ::std::optional<bool>>>(true, this, &RouterPrx::_iceI_getClientProxy, context).get();
    iceP_hasRoutingTable = ::std::get<1>(result);
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::std::optional<::Ice::ObjectPrx>, ::std::optional<bool>>>
Ice::RouterPrx::getClientProxyAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<::std::optional<::Ice::ObjectPrx>, ::std::optional<bool>>>(false, this, &RouterPrx::_iceI_getClientProxy, context);
}

::std::function<void()>
Ice::RouterPrx::getClientProxyAsync(::std::function<void(::std::optional<::Ice::ObjectPrx>, ::std::optional<bool>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<::std::optional<::Ice::ObjectPrx>, ::std::optional<bool>>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<::std::optional<::Ice::ObjectPrx>, ::std::optional<bool>>>(std::move(responseCb), std::move(ex), std::move(sent), this, &Ice::RouterPrx::_iceI_getClientProxy, context);
}

void
Ice::RouterPrx::_iceI_getClientProxy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::std::optional<::Ice::ObjectPrx>, ::std::optional<bool>>>>& outAsync, const Context& context) const
{
    static constexpr ::std::string_view operationName = "getClientProxy";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Nonmutating, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](InputStream* istr)
        {
            ::std::tuple<::std::optional<::Ice::ObjectPrx>, ::std::optional<bool>> v;
            istr->readAll(::std::get<0>(v));
            istr->readAll({1}, ::std::get<1>(v));
            return v;
        });
}

::std::optional<::Ice::ObjectPrx>
Ice::RouterPrx::getServerProxy(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::optional<::Ice::ObjectPrx>>(true, this, &RouterPrx::_iceI_getServerProxy, context).get();
}

::std::future<::std::optional<::Ice::ObjectPrx>>
Ice::RouterPrx::getServerProxyAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::optional<::Ice::ObjectPrx>>(false, this, &RouterPrx::_iceI_getServerProxy, context);
}

::std::function<void()>
Ice::RouterPrx::getServerProxyAsync(::std::function<void(::std::optional<::Ice::ObjectPrx>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::optional<::Ice::ObjectPrx>>(std::move(response), std::move(ex), std::move(sent), this, &Ice::RouterPrx::_iceI_getServerProxy, context);
}

void
Ice::RouterPrx::_iceI_getServerProxy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<::Ice::ObjectPrx>>>& outAsync, const Context& context) const
{
    static constexpr ::std::string_view operationName = "getServerProxy";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Nonmutating, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

::Ice::ObjectProxySeq
Ice::RouterPrx::addProxies(const ObjectProxySeq& iceP_proxies, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<ObjectProxySeq>(true, this, &RouterPrx::_iceI_addProxies, iceP_proxies, context).get();
}

::std::future<::Ice::ObjectProxySeq>
Ice::RouterPrx::addProxiesAsync(const ObjectProxySeq& iceP_proxies, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<ObjectProxySeq>(false, this, &RouterPrx::_iceI_addProxies, iceP_proxies, context);
}

::std::function<void()>
Ice::RouterPrx::addProxiesAsync(const ObjectProxySeq& iceP_proxies, ::std::function<void(::Ice::ObjectProxySeq)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<ObjectProxySeq>(std::move(response), std::move(ex), std::move(sent), this, &Ice::RouterPrx::_iceI_addProxies, iceP_proxies, context);
}

void
Ice::RouterPrx::_iceI_addProxies(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<ObjectProxySeq>>& outAsync, const ObjectProxySeq& iceP_proxies, const Context& context) const
{
    static constexpr ::std::string_view operationName = "addProxies";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        [&](OutputStream* ostr)
        {
            ostr->writeAll(iceP_proxies);
        },
        nullptr);
}

::std::string_view
Ice::RouterPrx::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Ice::Router";
    return typeId;
}

::std::optional<::Ice::RouterPrx>
Ice::RouterFinderPrx::getRouter(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::optional<RouterPrx>>(true, this, &RouterFinderPrx::_iceI_getRouter, context).get();
}

::std::future<::std::optional<::Ice::RouterPrx>>
Ice::RouterFinderPrx::getRouterAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::optional<RouterPrx>>(false, this, &RouterFinderPrx::_iceI_getRouter, context);
}

::std::function<void()>
Ice::RouterFinderPrx::getRouterAsync(::std::function<void(::std::optional<::Ice::RouterPrx>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::optional<RouterPrx>>(std::move(response), std::move(ex), std::move(sent), this, &Ice::RouterFinderPrx::_iceI_getRouter, context);
}

void
Ice::RouterFinderPrx::_iceI_getRouter(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<RouterPrx>>>& outAsync, const Context& context) const
{
    static constexpr ::std::string_view operationName = "getRouter";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

::std::string_view
Ice::RouterFinderPrx::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Ice::RouterFinder";
    return typeId;
}

::std::vector<::std::string>
Ice::Router::ice_ids(const Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::Ice::Router"};
    return allTypeIds;
}

::std::string
Ice::Router::ice_id(const Current&) const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Ice::Router::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Ice::Router";
    return typeId;
}

/// \cond INTERNAL
bool
Ice::Router::_iceD_getClientProxy(::IceInternal::Incoming& incoming) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, incoming.current().mode);
    incoming.readEmptyParams();
    ::std::optional<bool> iceP_hasRoutingTable;
    ::std::optional<::Ice::ObjectPrx> ret = this->getClientProxy(iceP_hasRoutingTable, incoming.current());
    auto ostr = incoming.startWriteParams();
    ostr->writeAll(ret);
    ostr->writeAll({1}, iceP_hasRoutingTable);
    incoming.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Ice::Router::_iceD_getServerProxy(::IceInternal::Incoming& incoming) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, incoming.current().mode);
    incoming.readEmptyParams();
    ::std::optional<::Ice::ObjectPrx> ret = this->getServerProxy(incoming.current());
    auto ostr = incoming.startWriteParams();
    ostr->writeAll(ret);
    incoming.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Ice::Router::_iceD_addProxies(::IceInternal::Incoming& incoming)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, incoming.current().mode);
    auto istr = incoming.startReadParams();
    ObjectProxySeq iceP_proxies;
    istr->readAll(iceP_proxies);
    incoming.endReadParams();
    ObjectProxySeq ret = this->addProxies(::std::move(iceP_proxies), incoming.current());
    auto ostr = incoming.startWriteParams();
    ostr->writeAll(ret);
    incoming.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Ice::Router::_iceDispatch(::IceInternal::Incoming& incoming)
{
    static constexpr ::std::string_view allOperations[] = {"addProxies", "getClientProxy", "getServerProxy", "ice_id", "ice_ids", "ice_isA", "ice_ping"};

    const ::Ice::Current& current = incoming.current();
    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 7, current.operation);
    if(r.first == r.second)
    {
        throw OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            return _iceD_addProxies(incoming);
        }
        case 1:
        {
            return _iceD_getClientProxy(incoming);
        }
        case 2:
        {
            return _iceD_getServerProxy(incoming);
        }
        case 3:
        {
            return _iceD_ice_id(incoming);
        }
        case 4:
        {
            return _iceD_ice_ids(incoming);
        }
        case 5:
        {
            return _iceD_ice_isA(incoming);
        }
        case 6:
        {
            return _iceD_ice_ping(incoming);
        }
        default:
        {
            assert(false);
            throw OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

::std::vector<::std::string>
Ice::RouterFinder::ice_ids(const Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::Ice::RouterFinder"};
    return allTypeIds;
}

::std::string
Ice::RouterFinder::ice_id(const Current&) const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Ice::RouterFinder::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Ice::RouterFinder";
    return typeId;
}

/// \cond INTERNAL
bool
Ice::RouterFinder::_iceD_getRouter(::IceInternal::Incoming& incoming)
{
    _iceCheckMode(::Ice::OperationMode::Normal, incoming.current().mode);
    incoming.readEmptyParams();
    ::std::optional<RouterPrx> ret = this->getRouter(incoming.current());
    auto ostr = incoming.startWriteParams();
    ostr->writeAll(ret);
    incoming.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Ice::RouterFinder::_iceDispatch(::IceInternal::Incoming& incoming)
{
    static constexpr ::std::string_view allOperations[] = {"getRouter", "ice_id", "ice_ids", "ice_isA", "ice_ping"};

    const ::Ice::Current& current = incoming.current();
    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 5, current.operation);
    if(r.first == r.second)
    {
        throw OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            return _iceD_getRouter(incoming);
        }
        case 1:
        {
            return _iceD_ice_id(incoming);
        }
        case 2:
        {
            return _iceD_ice_ids(incoming);
        }
        case 3:
        {
            return _iceD_ice_isA(incoming);
        }
        case 4:
        {
            return _iceD_ice_ping(incoming);
        }
        default:
        {
            assert(false);
            throw OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond
