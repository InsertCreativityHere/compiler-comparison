// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Version.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

// clang-format off

#ifndef Version_h_
#define Version_h_

#include <Ice/PushDisableWarnings.h>
#include <Ice/Config.h>
#include <Ice/Comparable.h>
#include <cstdint>
#include <ostream>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

// NOLINTBEGIN(modernize-concat-nested-namespaces)

namespace Ice
{
    struct ProtocolVersion;

    struct EncodingVersion;
}

namespace Ice
{
    /// A version structure for the protocol version.
    struct ProtocolVersion
    {
        std::uint8_t major;
        std::uint8_t minor;

        /// Obtains a tuple containing all of the struct's data members.
        /// @return The data members in a tuple.
        [[nodiscard]] std::tuple<const std::uint8_t&, const std::uint8_t&> ice_tuple() const
        {
            return std::tie(major, minor);
        }

        /// Outputs the name and value of each field of this instance to the stream.
        /// @param os The output stream.
        ICE_API void ice_printFields(std::ostream& os) const;
    };

    ICE_API std::ostream& operator<<(std::ostream&, const ProtocolVersion&);

    /// A version structure for the encoding version.
    struct EncodingVersion
    {
        std::uint8_t major;
        std::uint8_t minor;

        /// Obtains a tuple containing all of the struct's data members.
        /// @return The data members in a tuple.
        [[nodiscard]] std::tuple<const std::uint8_t&, const std::uint8_t&> ice_tuple() const
        {
            return std::tie(major, minor);
        }

        /// Outputs the name and value of each field of this instance to the stream.
        /// @param os The output stream.
        ICE_API void ice_printFields(std::ostream& os) const;
    };

    ICE_API std::ostream& operator<<(std::ostream&, const EncodingVersion&);

    using Ice::Tuple::operator<;
    using Ice::Tuple::operator<=;
    using Ice::Tuple::operator>;
    using Ice::Tuple::operator>=;
    using Ice::Tuple::operator==;
    using Ice::Tuple::operator!=;
}

// NOLINTEND(modernize-concat-nested-namespaces)

#include <Ice/PopDisableWarnings.h>
#endif
