//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Locator.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Locator_h__
#define __Locator_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <Identity.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

#ifndef ICE_API
#   if defined(ICE_STATIC_LIBS)
#       define ICE_API /**/
#   elif defined(ICE_API_EXPORTS)
#       define ICE_API ICE_DECLSPEC_EXPORT
#   else
#       define ICE_API ICE_DECLSPEC_IMPORT
#   endif
#endif

namespace Ice
{

class Process;
class ProcessPrx;

using ProcessPrxPtr = ::std::optional<ProcessPrx>;
class LocatorRegistry;
class LocatorRegistryPrx;

using LocatorRegistryPrxPtr = ::std::optional<LocatorRegistryPrx>;
class Locator;
class LocatorPrx;

using LocatorPrxPtr = ::std::optional<LocatorPrx>;
class LocatorFinder;
class LocatorFinderPrx;

using LocatorFinderPrxPtr = ::std::optional<LocatorFinderPrx>;

}

namespace Ice
{

}

namespace Ice
{

/**
 * The Ice locator interface. This interface is used by clients to lookup adapters and objects. It is also used by
 * servers to get the locator registry proxy. <p class="Note">The {@link Locator} interface is intended to be used by
 * Ice internals and by locator implementations. Regular user code should not attempt to use any functionality of this
 * interface directly.
 */
class ICE_API LocatorPrx : public Proxy<LocatorPrx, ObjectPrx>
{
public:

    /**
     * Find an object by identity and return a proxy that contains the adapter ID or endpoints which can be used to
     * access the object.
     * @param id The identity.
     * @param context The Context map to send with the invocation.
     * @return The proxy, or null if the object is not active.
     * @throws Ice::ObjectNotFoundException Raised if the object cannot be found.
     */
    ::std::optional<::Ice::ObjectPrx> findObjectById(const Identity& id, const Context& context = noExplicitContext) const;

    /**
     * Find an object by identity and return a proxy that contains the adapter ID or endpoints which can be used to
     * access the object.
     * @param id The identity.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<::std::optional<::Ice::ObjectPrx>> findObjectByIdAsync(const Identity& id, const Context& context = noExplicitContext)const;

    /**
     * Find an object by identity and return a proxy that contains the adapter ID or endpoints which can be used to
     * access the object.
     * @param id The identity.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    findObjectByIdAsync(const Identity& id,
                        ::std::function<void(::std::optional<::Ice::ObjectPrx>)> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const Context& context = noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_findObjectById(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<::Ice::ObjectPrx>>>&, const Identity&, const Context&) const;
    /// \endcond

    /**
     * Find an adapter by id and return a proxy that contains its endpoints.
     * @param id The adapter id.
     * @param context The Context map to send with the invocation.
     * @return The adapter proxy, or null if the adapter is not active.
     * @throws Ice::AdapterNotFoundException Raised if the adapter cannot be found.
     */
    ::std::optional<::Ice::ObjectPrx> findAdapterById(const ::std::string& id, const Context& context = noExplicitContext) const;

    /**
     * Find an adapter by id and return a proxy that contains its endpoints.
     * @param id The adapter id.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<::std::optional<::Ice::ObjectPrx>> findAdapterByIdAsync(const ::std::string& id, const Context& context = noExplicitContext)const;

    /**
     * Find an adapter by id and return a proxy that contains its endpoints.
     * @param id The adapter id.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    findAdapterByIdAsync(const ::std::string& id,
                         ::std::function<void(::std::optional<::Ice::ObjectPrx>)> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const Context& context = noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_findAdapterById(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<::Ice::ObjectPrx>>>&, const ::std::string&, const Context&) const;
    /// \endcond

    /**
     * Get the locator registry.
     * @param context The Context map to send with the invocation.
     * @return The locator registry.
     */
    ::std::optional<LocatorRegistryPrx> getRegistry(const Context& context = noExplicitContext) const;

    /**
     * Get the locator registry.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<::std::optional<LocatorRegistryPrx>> getRegistryAsync(const Context& context = noExplicitContext)const;

    /**
     * Get the locator registry.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    getRegistryAsync(::std::function<void(::std::optional<::Ice::LocatorRegistryPrx>)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const Context& context = noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_getRegistry(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<LocatorRegistryPrx>>>&, const Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit LocatorPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    LocatorPrx(const LocatorPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    LocatorPrx(LocatorPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    LocatorPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    LocatorPrx& operator=(const LocatorPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    LocatorPrx& operator=(LocatorPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static LocatorPrx _fromReference(::IceInternal::ReferencePtr ref) { return LocatorPrx(::std::move(ref)); }

protected:

    LocatorPrx() = default;

    explicit LocatorPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

/**
 * The Ice locator registry interface. This interface is used by servers to register adapter endpoints with the
 * locator. <p class="Note"> The {@link LocatorRegistry} interface is intended to be used by Ice internals and by
 * locator implementations. Regular user code should not attempt to use any functionality of this interface directly.
 */
class ICE_API LocatorRegistryPrx : public Proxy<LocatorRegistryPrx, ObjectPrx>
{
public:

    /**
     * Set the adapter endpoints with the locator registry.
     * @param id The adapter id.
     * @param proxy The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the
     * adapter endpoints.
     * @param context The Context map to send with the invocation.
     * @throws Ice::AdapterAlreadyActiveException Raised if an adapter with the same id is already active.
     * @throws Ice::AdapterNotFoundException Raised if the adapter cannot be found, or if the locator only allows
     * registered adapters to set their active proxy and the adapter is not registered with the locator.
     */
    void setAdapterDirectProxy(const ::std::string& id, const ::std::optional<::Ice::ObjectPrx>& proxy, const Context& context = noExplicitContext) const;

    /**
     * Set the adapter endpoints with the locator registry.
     * @param id The adapter id.
     * @param proxy The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the
     * adapter endpoints.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<void> setAdapterDirectProxyAsync(const ::std::string& id, const ::std::optional<::Ice::ObjectPrx>& proxy, const Context& context = noExplicitContext)const;

    /**
     * Set the adapter endpoints with the locator registry.
     * @param id The adapter id.
     * @param proxy The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the
     * adapter endpoints.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    setAdapterDirectProxyAsync(const ::std::string& id, const ::std::optional<::Ice::ObjectPrx>& proxy,
                               ::std::function<void()> response,
                               ::std::function<void(::std::exception_ptr)> ex = nullptr,
                               ::std::function<void(bool)> sent = nullptr,
                               const Context& context = noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_setAdapterDirectProxy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::std::optional<::Ice::ObjectPrx>&, const Context&) const;
    /// \endcond

    /**
     * Set the adapter endpoints with the locator registry.
     * @param adapterId The adapter id.
     * @param replicaGroupId The replica group id.
     * @param p The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the adapter
     * endpoints.
     * @param context The Context map to send with the invocation.
     * @throws Ice::AdapterAlreadyActiveException Raised if an adapter with the same id is already active.
     * @throws Ice::AdapterNotFoundException Raised if the adapter cannot be found, or if the locator only allows
     * registered adapters to set their active proxy and the adapter is not registered with the locator.
     * @throws Ice::InvalidReplicaGroupIdException Raised if the given replica group doesn't match the one registered with
     * the locator registry for this object adapter.
     */
    void setReplicatedAdapterDirectProxy(const ::std::string& adapterId, const ::std::string& replicaGroupId, const ::std::optional<::Ice::ObjectPrx>& p, const Context& context = noExplicitContext) const;

    /**
     * Set the adapter endpoints with the locator registry.
     * @param adapterId The adapter id.
     * @param replicaGroupId The replica group id.
     * @param p The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the adapter
     * endpoints.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<void> setReplicatedAdapterDirectProxyAsync(const ::std::string& adapterId, const ::std::string& replicaGroupId, const ::std::optional<::Ice::ObjectPrx>& p, const Context& context = noExplicitContext)const;

    /**
     * Set the adapter endpoints with the locator registry.
     * @param adapterId The adapter id.
     * @param replicaGroupId The replica group id.
     * @param p The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the adapter
     * endpoints.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    setReplicatedAdapterDirectProxyAsync(const ::std::string& adapterId, const ::std::string& replicaGroupId, const ::std::optional<::Ice::ObjectPrx>& p,
                                         ::std::function<void()> response,
                                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                                         ::std::function<void(bool)> sent = nullptr,
                                         const Context& context = noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_setReplicatedAdapterDirectProxy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::std::string&, const ::std::optional<::Ice::ObjectPrx>&, const Context&) const;
    /// \endcond

    /**
     * Set the process proxy for a server.
     * @param id The server id.
     * @param proxy The process proxy.
     * @param context The Context map to send with the invocation.
     * @throws Ice::ServerNotFoundException Raised if the server cannot be found.
     */
    void setServerProcessProxy(const ::std::string& id, const ::std::optional<ProcessPrx>& proxy, const Context& context = noExplicitContext) const;

    /**
     * Set the process proxy for a server.
     * @param id The server id.
     * @param proxy The process proxy.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<void> setServerProcessProxyAsync(const ::std::string& id, const ::std::optional<ProcessPrx>& proxy, const Context& context = noExplicitContext)const;

    /**
     * Set the process proxy for a server.
     * @param id The server id.
     * @param proxy The process proxy.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    setServerProcessProxyAsync(const ::std::string& id, const ::std::optional<ProcessPrx>& proxy,
                               ::std::function<void()> response,
                               ::std::function<void(::std::exception_ptr)> ex = nullptr,
                               ::std::function<void(bool)> sent = nullptr,
                               const Context& context = noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_setServerProcessProxy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::std::optional<ProcessPrx>&, const Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit LocatorRegistryPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    LocatorRegistryPrx(const LocatorRegistryPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    LocatorRegistryPrx(LocatorRegistryPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    LocatorRegistryPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    LocatorRegistryPrx& operator=(const LocatorRegistryPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    LocatorRegistryPrx& operator=(LocatorRegistryPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static LocatorRegistryPrx _fromReference(::IceInternal::ReferencePtr ref) { return LocatorRegistryPrx(::std::move(ref)); }

protected:

    LocatorRegistryPrx() = default;

    explicit LocatorRegistryPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

/**
 * This interface should be implemented by services implementing the <code>Ice::Locator interface</code>. It should be
 * advertised through an Ice object with the identity <code>`Ice/LocatorFinder'</code>. This allows clients to
 * retrieve the locator proxy with just the endpoint information of the service.
 */
class ICE_API LocatorFinderPrx : public Proxy<LocatorFinderPrx, ObjectPrx>
{
public:

    /**
     * Get the locator proxy implemented by the process hosting this finder object. The proxy might point to several
     * replicas.
     * @param context The Context map to send with the invocation.
     * @return The locator proxy.
     */
    ::std::optional<LocatorPrx> getLocator(const Context& context = noExplicitContext) const;

    /**
     * Get the locator proxy implemented by the process hosting this finder object. The proxy might point to several
     * replicas.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<::std::optional<LocatorPrx>> getLocatorAsync(const Context& context = noExplicitContext)const;

    /**
     * Get the locator proxy implemented by the process hosting this finder object. The proxy might point to several
     * replicas.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    getLocatorAsync(::std::function<void(::std::optional<::Ice::LocatorPrx>)> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const Context& context = noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_getLocator(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<LocatorPrx>>>&, const Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit LocatorFinderPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    LocatorFinderPrx(const LocatorFinderPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    LocatorFinderPrx(LocatorFinderPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    LocatorFinderPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    LocatorFinderPrx& operator=(const LocatorFinderPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    LocatorFinderPrx& operator=(LocatorFinderPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static LocatorFinderPrx _fromReference(::IceInternal::ReferencePtr ref) { return LocatorFinderPrx(::std::move(ref)); }

protected:

    LocatorFinderPrx() = default;

    explicit LocatorFinderPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

}

namespace Ice
{

/**
 * This exception is raised if an adapter cannot be found.
 * \headerfile Ice/Ice.h
 */
class ICE_CLASS(ICE_API) AdapterNotFoundException : public UserExceptionHelper<AdapterNotFoundException, UserException>
{
public:

    ICE_MEMBER(ICE_API) virtual ~AdapterNotFoundException();

    AdapterNotFoundException(const AdapterNotFoundException&) = default;

    AdapterNotFoundException() = default;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(ICE_API) static const ::std::string& ice_staticId();
};

/// \cond INTERNAL
static AdapterNotFoundException _iceS_AdapterNotFoundException_init;
/// \endcond

/**
 * This exception is raised if the replica group provided by the server is invalid.
 * \headerfile Ice/Ice.h
 */
class ICE_CLASS(ICE_API) InvalidReplicaGroupIdException : public UserExceptionHelper<InvalidReplicaGroupIdException, UserException>
{
public:

    ICE_MEMBER(ICE_API) virtual ~InvalidReplicaGroupIdException();

    InvalidReplicaGroupIdException(const InvalidReplicaGroupIdException&) = default;

    InvalidReplicaGroupIdException() = default;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(ICE_API) static const ::std::string& ice_staticId();
};

/**
 * This exception is raised if a server tries to set endpoints for an adapter that is already active.
 * \headerfile Ice/Ice.h
 */
class ICE_CLASS(ICE_API) AdapterAlreadyActiveException : public UserExceptionHelper<AdapterAlreadyActiveException, UserException>
{
public:

    ICE_MEMBER(ICE_API) virtual ~AdapterAlreadyActiveException();

    AdapterAlreadyActiveException(const AdapterAlreadyActiveException&) = default;

    AdapterAlreadyActiveException() = default;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(ICE_API) static const ::std::string& ice_staticId();
};

/**
 * This exception is raised if an object cannot be found.
 * \headerfile Ice/Ice.h
 */
class ICE_CLASS(ICE_API) ObjectNotFoundException : public UserExceptionHelper<ObjectNotFoundException, UserException>
{
public:

    ICE_MEMBER(ICE_API) virtual ~ObjectNotFoundException();

    ObjectNotFoundException(const ObjectNotFoundException&) = default;

    ObjectNotFoundException() = default;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(ICE_API) static const ::std::string& ice_staticId();
};

/**
 * This exception is raised if a server cannot be found.
 * \headerfile Ice/Ice.h
 */
class ICE_CLASS(ICE_API) ServerNotFoundException : public UserExceptionHelper<ServerNotFoundException, UserException>
{
public:

    ICE_MEMBER(ICE_API) virtual ~ServerNotFoundException();

    ServerNotFoundException(const ServerNotFoundException&) = default;

    ServerNotFoundException() = default;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(ICE_API) static const ::std::string& ice_staticId();
};

}

namespace Ice
{

/**
 * The Ice locator interface. This interface is used by clients to lookup adapters and objects. It is also used by
 * servers to get the locator registry proxy. <p class="Note">The {@link Locator} interface is intended to be used by
 * Ice internals and by locator implementations. Regular user code should not attempt to use any functionality of this
 * interface directly.
 */
class ICE_API Locator : public virtual Object
{
public:

    using ProxyType = LocatorPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Find an object by identity and return a proxy that contains the adapter ID or endpoints which can be used to
     * access the object.
     * @param id The identity.
     * @param response The response callback.
     * @param exception The exception callback.
     * @param current The Current object for the invocation.
     * @throws Ice::ObjectNotFoundException Raised if the object cannot be found.
     */
    virtual void findObjectByIdAsync(Identity id, ::std::function<void(const ::std::optional<::Ice::ObjectPrx>& returnValue)> response, ::std::function<void(::std::exception_ptr)> exception, const Current& current) const = 0;
    /// \cond INTERNAL
    bool _iceD_findObjectById(::IceInternal::Incoming&, const Current&) const;
    /// \endcond

    /**
     * Find an adapter by id and return a proxy that contains its endpoints.
     * @param id The adapter id.
     * @param response The response callback.
     * @param exception The exception callback.
     * @param current The Current object for the invocation.
     * @throws Ice::AdapterNotFoundException Raised if the adapter cannot be found.
     */
    virtual void findAdapterByIdAsync(::std::string id, ::std::function<void(const ::std::optional<::Ice::ObjectPrx>& returnValue)> response, ::std::function<void(::std::exception_ptr)> exception, const Current& current) const = 0;
    /// \cond INTERNAL
    bool _iceD_findAdapterById(::IceInternal::Incoming&, const Current&) const;
    /// \endcond

    /**
     * Get the locator registry.
     * @param current The Current object for the invocation.
     * @return The locator registry.
     */
    virtual ::std::optional<LocatorRegistryPrx> getRegistry(const Current& current) const = 0;
    /// \cond INTERNAL
    bool _iceD_getRegistry(::IceInternal::Incoming&, const Current&) const;
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const Current&) override;
    /// \endcond
};

/**
 * The Ice locator registry interface. This interface is used by servers to register adapter endpoints with the
 * locator. <p class="Note"> The {@link LocatorRegistry} interface is intended to be used by Ice internals and by
 * locator implementations. Regular user code should not attempt to use any functionality of this interface directly.
 */
class ICE_API LocatorRegistry : public virtual Object
{
public:

    using ProxyType = LocatorRegistryPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Set the adapter endpoints with the locator registry.
     * @param id The adapter id.
     * @param proxy The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the
     * adapter endpoints.
     * @param response The response callback.
     * @param exception The exception callback.
     * @param current The Current object for the invocation.
     * @throws Ice::AdapterAlreadyActiveException Raised if an adapter with the same id is already active.
     * @throws Ice::AdapterNotFoundException Raised if the adapter cannot be found, or if the locator only allows
     * registered adapters to set their active proxy and the adapter is not registered with the locator.
     */
    virtual void setAdapterDirectProxyAsync(::std::string id, ::std::optional<::Ice::ObjectPrx> proxy, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> exception, const Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_setAdapterDirectProxy(::IceInternal::Incoming&, const Current&);
    /// \endcond

    /**
     * Set the adapter endpoints with the locator registry.
     * @param adapterId The adapter id.
     * @param replicaGroupId The replica group id.
     * @param p The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the adapter
     * endpoints.
     * @param response The response callback.
     * @param exception The exception callback.
     * @param current The Current object for the invocation.
     * @throws Ice::AdapterAlreadyActiveException Raised if an adapter with the same id is already active.
     * @throws Ice::AdapterNotFoundException Raised if the adapter cannot be found, or if the locator only allows
     * registered adapters to set their active proxy and the adapter is not registered with the locator.
     * @throws Ice::InvalidReplicaGroupIdException Raised if the given replica group doesn't match the one registered with
     * the locator registry for this object adapter.
     */
    virtual void setReplicatedAdapterDirectProxyAsync(::std::string adapterId, ::std::string replicaGroupId, ::std::optional<::Ice::ObjectPrx> p, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> exception, const Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_setReplicatedAdapterDirectProxy(::IceInternal::Incoming&, const Current&);
    /// \endcond

    /**
     * Set the process proxy for a server.
     * @param id The server id.
     * @param proxy The process proxy.
     * @param response The response callback.
     * @param exception The exception callback.
     * @param current The Current object for the invocation.
     * @throws Ice::ServerNotFoundException Raised if the server cannot be found.
     */
    virtual void setServerProcessProxyAsync(::std::string id, ::std::optional<ProcessPrx> proxy, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> exception, const Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_setServerProcessProxy(::IceInternal::Incoming&, const Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const Current&) override;
    /// \endcond
};

/**
 * This interface should be implemented by services implementing the <code>Ice::Locator interface</code>. It should be
 * advertised through an Ice object with the identity <code>`Ice/LocatorFinder'</code>. This allows clients to
 * retrieve the locator proxy with just the endpoint information of the service.
 */
class ICE_API LocatorFinder : public virtual Object
{
public:

    using ProxyType = LocatorFinderPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Get the locator proxy implemented by the process hosting this finder object. The proxy might point to several
     * replicas.
     * @param current The Current object for the invocation.
     * @return The locator proxy.
     */
    virtual ::std::optional<LocatorPrx> getLocator(const Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getLocator(::IceInternal::Incoming&, const Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const Current&) override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

/// \cond INTERNAL
namespace Ice
{

using ProcessPtr = ::std::shared_ptr<Process>;

using LocatorRegistryPtr = ::std::shared_ptr<LocatorRegistry>;

using LocatorPtr = ::std::shared_ptr<Locator>;

using LocatorFinderPtr = ::std::shared_ptr<LocatorFinder>;

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
