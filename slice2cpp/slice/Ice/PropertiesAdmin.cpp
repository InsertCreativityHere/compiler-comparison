//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `PropertiesAdmin.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ICE_API_EXPORTS
#   define ICE_API_EXPORTS
#endif
#define ICE_BUILDING_GENERATED_CODE
#include <PropertiesAdmin.h>
#include <Ice/OutgoingAsync.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::std::string iceC_Ice_PropertiesAdmin_ids[2] =
{
    "::Ice::Object",
    "::Ice::PropertiesAdmin"
};
const ::std::string iceC_Ice_PropertiesAdmin_ops[] =
{
    "getPropertiesForPrefix",
    "getProperty",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setProperties"
};
const ::std::string iceC_Ice_PropertiesAdmin_getProperty_name = "getProperty";
const ::std::string iceC_Ice_PropertiesAdmin_getPropertiesForPrefix_name = "getPropertiesForPrefix";
const ::std::string iceC_Ice_PropertiesAdmin_setProperties_name = "setProperties";

}

::std::string
Ice::PropertiesAdminPrx::getProperty(const ::std::string& iceP_key, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::string>(true, this, &PropertiesAdminPrx::_iceI_getProperty, iceP_key, context).get();
}

::std::future<::std::string>
Ice::PropertiesAdminPrx::getPropertyAsync(const ::std::string& iceP_key, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::string>(false, this, &PropertiesAdminPrx::_iceI_getProperty, iceP_key, context);
}

::std::function<void()>
Ice::PropertiesAdminPrx::getPropertyAsync(const ::std::string& iceP_key,
                                          ::std::function<void (::std::string)> response,
                                          ::std::function<void(::std::exception_ptr)> ex,
                                          ::std::function<void(bool)> sent,
                                          const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &Ice::PropertiesAdminPrx::_iceI_getProperty, iceP_key, context);
}

/// \cond INTERNAL
void
Ice::PropertiesAdminPrx::_iceI_getProperty(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::std::string& iceP_key, const Context& context) const
{
    _checkTwowayOnly(iceC_Ice_PropertiesAdmin_getProperty_name);
    outAsync->invoke(iceC_Ice_PropertiesAdmin_getProperty_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](OutputStream* ostr)
        {
            ostr->writeAll(iceP_key);
        },
        nullptr);
}
/// \endcond

::Ice::PropertyDict
Ice::PropertiesAdminPrx::getPropertiesForPrefix(const ::std::string& iceP_prefix, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<PropertyDict>(true, this, &PropertiesAdminPrx::_iceI_getPropertiesForPrefix, iceP_prefix, context).get();
}

::std::future<::Ice::PropertyDict>
Ice::PropertiesAdminPrx::getPropertiesForPrefixAsync(const ::std::string& iceP_prefix, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<PropertyDict>(false, this, &PropertiesAdminPrx::_iceI_getPropertiesForPrefix, iceP_prefix, context);
}

::std::function<void()>
Ice::PropertiesAdminPrx::getPropertiesForPrefixAsync(const ::std::string& iceP_prefix,
                                                     ::std::function<void (::Ice::PropertyDict)> response,
                                                     ::std::function<void(::std::exception_ptr)> ex,
                                                     ::std::function<void(bool)> sent,
                                                     const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<PropertyDict>(std::move(response), std::move(ex), std::move(sent), this, &Ice::PropertiesAdminPrx::_iceI_getPropertiesForPrefix, iceP_prefix, context);
}

/// \cond INTERNAL
void
Ice::PropertiesAdminPrx::_iceI_getPropertiesForPrefix(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<PropertyDict>>& outAsync, const ::std::string& iceP_prefix, const Context& context) const
{
    _checkTwowayOnly(iceC_Ice_PropertiesAdmin_getPropertiesForPrefix_name);
    outAsync->invoke(iceC_Ice_PropertiesAdmin_getPropertiesForPrefix_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](OutputStream* ostr)
        {
            ostr->writeAll(iceP_prefix);
        },
        nullptr);
}
/// \endcond

void
Ice::PropertiesAdminPrx::setProperties(const PropertyDict& iceP_newProperties, const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &PropertiesAdminPrx::_iceI_setProperties, iceP_newProperties, context).get();
}

::std::future<void>
Ice::PropertiesAdminPrx::setPropertiesAsync(const PropertyDict& iceP_newProperties, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &PropertiesAdminPrx::_iceI_setProperties, iceP_newProperties, context);
}

::std::function<void()>
Ice::PropertiesAdminPrx::setPropertiesAsync(const PropertyDict& iceP_newProperties,
                                            ::std::function<void ()> response,
                                            ::std::function<void(::std::exception_ptr)> ex,
                                            ::std::function<void(bool)> sent,
                                            const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Ice::PropertiesAdminPrx::_iceI_setProperties, iceP_newProperties, context);
}

/// \cond INTERNAL
void
Ice::PropertiesAdminPrx::_iceI_setProperties(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const PropertyDict& iceP_newProperties, const Context& context) const
{
    outAsync->invoke(iceC_Ice_PropertiesAdmin_setProperties_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](OutputStream* ostr)
        {
            ostr->writeAll(iceP_newProperties);
        },
        nullptr);
}
/// \endcond

const ::std::string&
Ice::PropertiesAdminPrx::ice_staticId()
{
    static const ::std::string typeId = "::Ice::PropertiesAdmin";
    return typeId;
}

bool
Ice::PropertiesAdmin::ice_isA(::std::string s, const Current&) const
{
    return ::std::binary_search(iceC_Ice_PropertiesAdmin_ids, iceC_Ice_PropertiesAdmin_ids + 2, s);
}

::std::vector<::std::string>
Ice::PropertiesAdmin::ice_ids(const Current&) const
{
    return ::std::vector<::std::string>(&iceC_Ice_PropertiesAdmin_ids[0], &iceC_Ice_PropertiesAdmin_ids[2]);
}

::std::string
Ice::PropertiesAdmin::ice_id(const Current&) const
{
    return ice_staticId();
}

const ::std::string&
Ice::PropertiesAdmin::ice_staticId()
{
    static const ::std::string typeId = "::Ice::PropertiesAdmin";
    return typeId;
}

/// \cond INTERNAL
bool
Ice::PropertiesAdmin::_iceD_getProperty(::IceInternal::Incoming& inS, const Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_key;
    istr->readAll(iceP_key);
    inS.endReadParams();
    ::std::string ret = this->getProperty(::std::move(iceP_key), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Ice::PropertiesAdmin::_iceD_getPropertiesForPrefix(::IceInternal::Incoming& inS, const Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_prefix;
    istr->readAll(iceP_prefix);
    inS.endReadParams();
    PropertyDict ret = this->getPropertiesForPrefix(::std::move(iceP_prefix), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Ice::PropertiesAdmin::_iceD_setProperties(::IceInternal::Incoming& inS, const Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    PropertyDict iceP_newProperties;
    istr->readAll(iceP_newProperties);
    inS.endReadParams();
    this->setProperties(::std::move(iceP_newProperties), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Ice::PropertiesAdmin::_iceDispatch(::IceInternal::Incoming& in, const Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Ice_PropertiesAdmin_ops, iceC_Ice_PropertiesAdmin_ops + 7, current.operation);
    if(r.first == r.second)
    {
        throw OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Ice_PropertiesAdmin_ops)
    {
        case 0:
        {
            return _iceD_getPropertiesForPrefix(in, current);
        }
        case 1:
        {
            return _iceD_getProperty(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_setProperties(in, current);
        }
        default:
        {
            assert(false);
            throw OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond
