//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `PropertiesAdmin.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ICE_API_EXPORTS
#   define ICE_API_EXPORTS
#endif
#define ICE_BUILDING_GENERATED_CODE
#include <PropertiesAdmin.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

}

::std::string
Ice::PropertiesAdminPrx::getProperty(::std::string_view iceP_key, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::string>(true, this, &PropertiesAdminPrx::_iceI_getProperty, iceP_key, context).get();
}

::std::future<::std::string>
Ice::PropertiesAdminPrx::getPropertyAsync(::std::string_view iceP_key, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::string>(false, this, &PropertiesAdminPrx::_iceI_getProperty, iceP_key, context);
}

::std::function<void()>
Ice::PropertiesAdminPrx::getPropertyAsync(::std::string_view iceP_key, ::std::function<void(::std::string)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &Ice::PropertiesAdminPrx::_iceI_getProperty, iceP_key, context);
}

void
Ice::PropertiesAdminPrx::_iceI_getProperty(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, ::std::string_view iceP_key, const Context& context) const
{
    static constexpr ::std::string_view operationName = "getProperty";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](OutputStream* ostr)
        {
            ostr->writeAll(iceP_key);
        },
        nullptr);
}

::Ice::PropertyDict
Ice::PropertiesAdminPrx::getPropertiesForPrefix(::std::string_view iceP_prefix, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<PropertyDict>(true, this, &PropertiesAdminPrx::_iceI_getPropertiesForPrefix, iceP_prefix, context).get();
}

::std::future<::Ice::PropertyDict>
Ice::PropertiesAdminPrx::getPropertiesForPrefixAsync(::std::string_view iceP_prefix, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<PropertyDict>(false, this, &PropertiesAdminPrx::_iceI_getPropertiesForPrefix, iceP_prefix, context);
}

::std::function<void()>
Ice::PropertiesAdminPrx::getPropertiesForPrefixAsync(::std::string_view iceP_prefix, ::std::function<void(::Ice::PropertyDict)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<PropertyDict>(std::move(response), std::move(ex), std::move(sent), this, &Ice::PropertiesAdminPrx::_iceI_getPropertiesForPrefix, iceP_prefix, context);
}

void
Ice::PropertiesAdminPrx::_iceI_getPropertiesForPrefix(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<PropertyDict>>& outAsync, ::std::string_view iceP_prefix, const Context& context) const
{
    static constexpr ::std::string_view operationName = "getPropertiesForPrefix";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](OutputStream* ostr)
        {
            ostr->writeAll(iceP_prefix);
        },
        nullptr);
}

void
Ice::PropertiesAdminPrx::setProperties(const PropertyDict& iceP_newProperties, const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &PropertiesAdminPrx::_iceI_setProperties, iceP_newProperties, context).get();
}

::std::future<void>
Ice::PropertiesAdminPrx::setPropertiesAsync(const PropertyDict& iceP_newProperties, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &PropertiesAdminPrx::_iceI_setProperties, iceP_newProperties, context);
}

::std::function<void()>
Ice::PropertiesAdminPrx::setPropertiesAsync(const PropertyDict& iceP_newProperties, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Ice::PropertiesAdminPrx::_iceI_setProperties, iceP_newProperties, context);
}

void
Ice::PropertiesAdminPrx::_iceI_setProperties(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const PropertyDict& iceP_newProperties, const Context& context) const
{
    static constexpr ::std::string_view operationName = "setProperties";

    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](OutputStream* ostr)
        {
            ostr->writeAll(iceP_newProperties);
        },
        nullptr);
}

::std::string_view
Ice::PropertiesAdminPrx::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Ice::PropertiesAdmin";
    return typeId;
}

::std::vector<::std::string>
Ice::PropertiesAdmin::ice_ids(const Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::Ice::PropertiesAdmin"};
    return allTypeIds;
}

::std::string
Ice::PropertiesAdmin::ice_id(const Current&) const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Ice::PropertiesAdmin::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Ice::PropertiesAdmin";
    return typeId;
}

/// \cond INTERNAL
bool
Ice::PropertiesAdmin::_iceD_getProperty(::IceInternal::Incoming& incoming)
{
    _iceCheckMode(::Ice::OperationMode::Normal, incoming.current().mode);
    auto istr = incoming.startReadParams();
    ::std::string iceP_key;
    istr->readAll(iceP_key);
    incoming.endReadParams();
    ::std::string ret = this->getProperty(::std::move(iceP_key), incoming.current());
    auto ostr = incoming.startWriteParams();
    ostr->writeAll(ret);
    incoming.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Ice::PropertiesAdmin::_iceD_getPropertiesForPrefix(::IceInternal::Incoming& incoming)
{
    _iceCheckMode(::Ice::OperationMode::Normal, incoming.current().mode);
    auto istr = incoming.startReadParams();
    ::std::string iceP_prefix;
    istr->readAll(iceP_prefix);
    incoming.endReadParams();
    PropertyDict ret = this->getPropertiesForPrefix(::std::move(iceP_prefix), incoming.current());
    auto ostr = incoming.startWriteParams();
    ostr->writeAll(ret);
    incoming.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Ice::PropertiesAdmin::_iceD_setProperties(::IceInternal::Incoming& incoming)
{
    _iceCheckMode(::Ice::OperationMode::Normal, incoming.current().mode);
    auto istr = incoming.startReadParams();
    PropertyDict iceP_newProperties;
    istr->readAll(iceP_newProperties);
    incoming.endReadParams();
    this->setProperties(::std::move(iceP_newProperties), incoming.current());
    incoming.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Ice::PropertiesAdmin::_iceDispatch(::IceInternal::Incoming& incoming)
{
    static constexpr ::std::string_view allOperations[] = {"getPropertiesForPrefix", "getProperty", "ice_id", "ice_ids", "ice_isA", "ice_ping", "setProperties"};

    const ::Ice::Current& current = incoming.current();
    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 7, current.operation);
    if(r.first == r.second)
    {
        throw OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            return _iceD_getPropertiesForPrefix(incoming);
        }
        case 1:
        {
            return _iceD_getProperty(incoming);
        }
        case 2:
        {
            return _iceD_ice_id(incoming);
        }
        case 3:
        {
            return _iceD_ice_ids(incoming);
        }
        case 4:
        {
            return _iceD_ice_isA(incoming);
        }
        case 5:
        {
            return _iceD_ice_ping(incoming);
        }
        case 6:
        {
            return _iceD_setProperties(incoming);
        }
        default:
        {
            assert(false);
            throw OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond
