//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Router.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Router_h__
#define __Router_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <BuiltinSequences.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

#ifndef ICE_API
#   if defined(ICE_STATIC_LIBS)
#       define ICE_API /**/
#   elif defined(ICE_API_EXPORTS)
#       define ICE_API ICE_DECLSPEC_EXPORT
#   else
#       define ICE_API ICE_DECLSPEC_IMPORT
#   endif
#endif

namespace Ice
{

class RouterPrx;

using RouterPrxPtr = ::std::optional<RouterPrx>;
class RouterFinderPrx;

using RouterFinderPrxPtr = ::std::optional<RouterFinderPrx>;

}

namespace Ice
{

/**
 * The Ice router interface. Routers can be set either globally though the <code>Communicator</code>, or with
 * <code>ice_router</code> on specific proxies.
 */
class ICE_API RouterPrx : public Proxy<RouterPrx, ObjectPrx>
{
public:

    /**
     * Get the router's client proxy, i.e., the proxy to use for forwarding requests from the client to the router.
     * If a null proxy is returned, the client will forward requests to the router's endpoints.
     * @param hasRoutingTable Indicates whether or not the router supports a routing table. If it is supported, the
     * Ice runtime will call addProxies to populate the routing table. This out parameter is only supported starting
     * with Ice 3.7.
     * The Ice runtime assumes the router has a routing table if the <code>hasRoutingTable</code> is not set.
     * @param context The Context map to send with the invocation.
     * @return The router's client proxy.
     */
    ::std::optional<::Ice::ObjectPrx> getClientProxy(std::optional<bool>& hasRoutingTable, const Context& context = noExplicitContext) const;

    /**
     * Get the router's client proxy, i.e., the proxy to use for forwarding requests from the client to the router.
     * If a null proxy is returned, the client will forward requests to the router's endpoints.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<::std::tuple<::std::optional<::Ice::ObjectPrx>, std::optional<bool>>> getClientProxyAsync(const Context& context = noExplicitContext) const;

    /**
     * Get the router's client proxy, i.e., the proxy to use for forwarding requests from the client to the router.
     * If a null proxy is returned, the client will forward requests to the router's endpoints.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    getClientProxyAsync(::std::function<void(::std::optional<::Ice::ObjectPrx>, std::optional<bool>)> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const Context& context = noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_getClientProxy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::std::optional<::Ice::ObjectPrx>, std::optional<bool>>>>&, const Context&) const;
    /// \endcond

    /**
     * Get the router's server proxy, i.e., the proxy to use for forwarding requests from the server to the router.
     * @param context The Context map to send with the invocation.
     * @return The router's server proxy.
     */
    ::std::optional<::Ice::ObjectPrx> getServerProxy(const Context& context = noExplicitContext) const;

    /**
     * Get the router's server proxy, i.e., the proxy to use for forwarding requests from the server to the router.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<::std::optional<::Ice::ObjectPrx>> getServerProxyAsync(const Context& context = noExplicitContext) const;

    /**
     * Get the router's server proxy, i.e., the proxy to use for forwarding requests from the server to the router.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    getServerProxyAsync(::std::function<void(::std::optional<::Ice::ObjectPrx>)> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const Context& context = noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_getServerProxy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<::Ice::ObjectPrx>>>&, const Context&) const;
    /// \endcond

    /**
     * Add new proxy information to the router's routing table.
     * @param proxies The proxies to add.
     * @param context The Context map to send with the invocation.
     * @return Proxies discarded by the router.
     */
    ObjectProxySeq addProxies(const ObjectProxySeq& proxies, const Context& context = noExplicitContext) const;

    /**
     * Add new proxy information to the router's routing table.
     * @param proxies The proxies to add.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<ObjectProxySeq> addProxiesAsync(const ObjectProxySeq& proxies, const Context& context = noExplicitContext) const;

    /**
     * Add new proxy information to the router's routing table.
     * @param proxies The proxies to add.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    addProxiesAsync(const ObjectProxySeq& proxies,
                    ::std::function<void(::Ice::ObjectProxySeq)> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const Context& context = noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_addProxies(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<ObjectProxySeq>>&, const ObjectProxySeq&, const Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit RouterPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    RouterPrx(const RouterPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    RouterPrx(RouterPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    RouterPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    RouterPrx& operator=(const RouterPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    RouterPrx& operator=(RouterPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static RouterPrx _fromReference(::IceInternal::ReferencePtr ref) { return RouterPrx(::std::move(ref)); }

protected:

    RouterPrx() = default;

    explicit RouterPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

/**
 * This interface should be implemented by services implementing the Ice::Router interface. It should be advertised
 * through an Ice object with the identity `Ice/RouterFinder'. This allows clients to retrieve the router proxy with
 * just the endpoint information of the service.
 */
class ICE_API RouterFinderPrx : public Proxy<RouterFinderPrx, ObjectPrx>
{
public:

    /**
     * Get the router proxy implemented by the process hosting this finder object. The proxy might point to several
     * replicas.
     * @param context The Context map to send with the invocation.
     * @return The router proxy.
     */
    ::std::optional<RouterPrx> getRouter(const Context& context = noExplicitContext) const;

    /**
     * Get the router proxy implemented by the process hosting this finder object. The proxy might point to several
     * replicas.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<::std::optional<RouterPrx>> getRouterAsync(const Context& context = noExplicitContext) const;

    /**
     * Get the router proxy implemented by the process hosting this finder object. The proxy might point to several
     * replicas.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    getRouterAsync(::std::function<void(::std::optional<::Ice::RouterPrx>)> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const Context& context = noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_getRouter(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<RouterPrx>>>&, const Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit RouterFinderPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    RouterFinderPrx(const RouterFinderPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    RouterFinderPrx(RouterFinderPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    RouterFinderPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    RouterFinderPrx& operator=(const RouterFinderPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    RouterFinderPrx& operator=(RouterFinderPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static RouterFinderPrx _fromReference(::IceInternal::ReferencePtr ref) { return RouterFinderPrx(::std::move(ref)); }

protected:

    RouterFinderPrx() = default;

    explicit RouterFinderPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

}

namespace Ice
{

/**
 * The Ice router interface. Routers can be set either globally though the <code>Communicator</code>, or with
 * <code>ice_router</code> on specific proxies.
 */
class ICE_API Router : public virtual Object
{
public:

    using ProxyType = RouterPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Get the router's client proxy, i.e., the proxy to use for forwarding requests from the client to the router.
     * If a null proxy is returned, the client will forward requests to the router's endpoints.
     * @param hasRoutingTable Indicates whether or not the router supports a routing table. If it is supported, the
     * Ice runtime will call addProxies to populate the routing table. This out parameter is only supported starting
     * with Ice 3.7.
     * The Ice runtime assumes the router has a routing table if the <code>hasRoutingTable</code> is not set.
     * @param current The Current object for the invocation.
     * @return The router's client proxy.
     */
    virtual ::std::optional<::Ice::ObjectPrx> getClientProxy(std::optional<bool>& hasRoutingTable, const Current& current) const = 0;
    /// \cond INTERNAL
    bool _iceD_getClientProxy(::IceInternal::Incoming&, const Current&) const;
    /// \endcond

    /**
     * Get the router's server proxy, i.e., the proxy to use for forwarding requests from the server to the router.
     * @param current The Current object for the invocation.
     * @return The router's server proxy.
     */
    virtual ::std::optional<::Ice::ObjectPrx> getServerProxy(const Current& current) const = 0;
    /// \cond INTERNAL
    bool _iceD_getServerProxy(::IceInternal::Incoming&, const Current&) const;
    /// \endcond

    /**
     * Add new proxy information to the router's routing table.
     * @param proxies The proxies to add.
     * @param current The Current object for the invocation.
     * @return Proxies discarded by the router.
     */
    virtual ObjectProxySeq addProxies(ObjectProxySeq proxies, const Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_addProxies(::IceInternal::Incoming&, const Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const Current&) override;
    /// \endcond
};

using RouterPtr = ::std::shared_ptr<Router>;

/**
 * This interface should be implemented by services implementing the Ice::Router interface. It should be advertised
 * through an Ice object with the identity `Ice/RouterFinder'. This allows clients to retrieve the router proxy with
 * just the endpoint information of the service.
 */
class ICE_API RouterFinder : public virtual Object
{
public:

    using ProxyType = RouterFinderPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Get the router proxy implemented by the process hosting this finder object. The proxy might point to several
     * replicas.
     * @param current The Current object for the invocation.
     * @return The router proxy.
     */
    virtual ::std::optional<RouterPrx> getRouter(const Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getRouter(::IceInternal::Incoming&, const Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const Current&) override;
    /// \endcond
};

using RouterFinderPtr = ::std::shared_ptr<RouterFinder>;

}

#include <IceUtil/PopDisableWarnings.h>
#endif
