//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Locator.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ICE_API_EXPORTS
#   define ICE_API_EXPORTS
#endif
#define ICE_BUILDING_GENERATED_CODE
#include <Locator.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>
#include <Ice/Process.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::Ice::AdapterNotFoundException> iceC_Ice_AdapterNotFoundException_init("::Ice::AdapterNotFoundException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Ice::InvalidReplicaGroupIdException> iceC_Ice_InvalidReplicaGroupIdException_init("::Ice::InvalidReplicaGroupIdException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Ice::AdapterAlreadyActiveException> iceC_Ice_AdapterAlreadyActiveException_init("::Ice::AdapterAlreadyActiveException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Ice::ObjectNotFoundException> iceC_Ice_ObjectNotFoundException_init("::Ice::ObjectNotFoundException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Ice::ServerNotFoundException> iceC_Ice_ServerNotFoundException_init("::Ice::ServerNotFoundException");

const ::std::string iceC_Ice_Locator_ids[2] =
{
    "::Ice::Locator",
    "::Ice::Object"
};
const ::std::string iceC_Ice_Locator_ops[] =
{
    "findAdapterById",
    "findObjectById",
    "getRegistry",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Ice_Locator_findObjectById_name = "findObjectById";
const ::std::string iceC_Ice_Locator_findAdapterById_name = "findAdapterById";
const ::std::string iceC_Ice_Locator_getRegistry_name = "getRegistry";

const ::std::string iceC_Ice_LocatorRegistry_ids[2] =
{
    "::Ice::LocatorRegistry",
    "::Ice::Object"
};
const ::std::string iceC_Ice_LocatorRegistry_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setAdapterDirectProxy",
    "setReplicatedAdapterDirectProxy",
    "setServerProcessProxy"
};
const ::std::string iceC_Ice_LocatorRegistry_setAdapterDirectProxy_name = "setAdapterDirectProxy";
const ::std::string iceC_Ice_LocatorRegistry_setReplicatedAdapterDirectProxy_name = "setReplicatedAdapterDirectProxy";
const ::std::string iceC_Ice_LocatorRegistry_setServerProcessProxy_name = "setServerProcessProxy";

const ::std::string iceC_Ice_LocatorFinder_ids[2] =
{
    "::Ice::LocatorFinder",
    "::Ice::Object"
};
const ::std::string iceC_Ice_LocatorFinder_ops[] =
{
    "getLocator",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Ice_LocatorFinder_getLocator_name = "getLocator";

}

Ice::AdapterNotFoundException::~AdapterNotFoundException()
{
}

const ::std::string&
Ice::AdapterNotFoundException::ice_staticId()
{
    static const ::std::string typeId = "::Ice::AdapterNotFoundException";
    return typeId;
}

Ice::InvalidReplicaGroupIdException::~InvalidReplicaGroupIdException()
{
}

const ::std::string&
Ice::InvalidReplicaGroupIdException::ice_staticId()
{
    static const ::std::string typeId = "::Ice::InvalidReplicaGroupIdException";
    return typeId;
}

Ice::AdapterAlreadyActiveException::~AdapterAlreadyActiveException()
{
}

const ::std::string&
Ice::AdapterAlreadyActiveException::ice_staticId()
{
    static const ::std::string typeId = "::Ice::AdapterAlreadyActiveException";
    return typeId;
}

Ice::ObjectNotFoundException::~ObjectNotFoundException()
{
}

const ::std::string&
Ice::ObjectNotFoundException::ice_staticId()
{
    static const ::std::string typeId = "::Ice::ObjectNotFoundException";
    return typeId;
}

Ice::ServerNotFoundException::~ServerNotFoundException()
{
}

const ::std::string&
Ice::ServerNotFoundException::ice_staticId()
{
    static const ::std::string typeId = "::Ice::ServerNotFoundException";
    return typeId;
}

bool
Ice::Locator::ice_isA(::std::string s, const Current&) const
{
    return ::std::binary_search(iceC_Ice_Locator_ids, iceC_Ice_Locator_ids + 2, s);
}

::std::vector<::std::string>
Ice::Locator::ice_ids(const Current&) const
{
    return ::std::vector<::std::string>(&iceC_Ice_Locator_ids[0], &iceC_Ice_Locator_ids[2]);
}

::std::string
Ice::Locator::ice_id(const Current&) const
{
    return ice_staticId();
}

const ::std::string&
Ice::Locator::ice_staticId()
{
    static const ::std::string typeId = "::Ice::Locator";
    return typeId;
}

/// \cond INTERNAL
bool
Ice::Locator::_iceD_findObjectById(::IceInternal::Incoming& inS, const Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    auto istr = inS.startReadParams();
    Identity iceP_id;
    istr->readAll(iceP_id);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ::std::shared_ptr<ObjectPrx>& ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->findObjectByIdAsync(::std::move(iceP_id), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Ice::Locator::_iceD_findAdapterById(::IceInternal::Incoming& inS, const Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_id;
    istr->readAll(iceP_id);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ::std::shared_ptr<ObjectPrx>& ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->findAdapterByIdAsync(::std::move(iceP_id), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Ice::Locator::_iceD_getRegistry(::IceInternal::Incoming& inS, const Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<LocatorRegistryPrx> ret = this->getRegistry(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Ice::Locator::_iceDispatch(::IceInternal::Incoming& in, const Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Ice_Locator_ops, iceC_Ice_Locator_ops + 7, current.operation);
    if(r.first == r.second)
    {
        throw OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Ice_Locator_ops)
    {
        case 0:
        {
            return _iceD_findAdapterById(in, current);
        }
        case 1:
        {
            return _iceD_findObjectById(in, current);
        }
        case 2:
        {
            return _iceD_getRegistry(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Ice::LocatorRegistry::ice_isA(::std::string s, const Current&) const
{
    return ::std::binary_search(iceC_Ice_LocatorRegistry_ids, iceC_Ice_LocatorRegistry_ids + 2, s);
}

::std::vector<::std::string>
Ice::LocatorRegistry::ice_ids(const Current&) const
{
    return ::std::vector<::std::string>(&iceC_Ice_LocatorRegistry_ids[0], &iceC_Ice_LocatorRegistry_ids[2]);
}

::std::string
Ice::LocatorRegistry::ice_id(const Current&) const
{
    return ice_staticId();
}

const ::std::string&
Ice::LocatorRegistry::ice_staticId()
{
    static const ::std::string typeId = "::Ice::LocatorRegistry";
    return typeId;
}

/// \cond INTERNAL
bool
Ice::LocatorRegistry::_iceD_setAdapterDirectProxy(::IceInternal::Incoming& inS, const Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_id;
    ::std::shared_ptr<ObjectPrx> iceP_proxy;
    istr->readAll(iceP_id, iceP_proxy);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->setAdapterDirectProxyAsync(::std::move(iceP_id), ::std::move(iceP_proxy), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Ice::LocatorRegistry::_iceD_setReplicatedAdapterDirectProxy(::IceInternal::Incoming& inS, const Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_adapterId;
    ::std::string iceP_replicaGroupId;
    ::std::shared_ptr<ObjectPrx> iceP_p;
    istr->readAll(iceP_adapterId, iceP_replicaGroupId, iceP_p);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->setReplicatedAdapterDirectProxyAsync(::std::move(iceP_adapterId), ::std::move(iceP_replicaGroupId), ::std::move(iceP_p), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Ice::LocatorRegistry::_iceD_setServerProcessProxy(::IceInternal::Incoming& inS, const Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_id;
    ::std::shared_ptr<ProcessPrx> iceP_proxy;
    istr->readAll(iceP_id, iceP_proxy);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->setServerProcessProxyAsync(::std::move(iceP_id), ::std::move(iceP_proxy), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Ice::LocatorRegistry::_iceDispatch(::IceInternal::Incoming& in, const Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Ice_LocatorRegistry_ops, iceC_Ice_LocatorRegistry_ops + 7, current.operation);
    if(r.first == r.second)
    {
        throw OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Ice_LocatorRegistry_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_setAdapterDirectProxy(in, current);
        }
        case 5:
        {
            return _iceD_setReplicatedAdapterDirectProxy(in, current);
        }
        case 6:
        {
            return _iceD_setServerProcessProxy(in, current);
        }
        default:
        {
            assert(false);
            throw OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Ice::LocatorFinder::ice_isA(::std::string s, const Current&) const
{
    return ::std::binary_search(iceC_Ice_LocatorFinder_ids, iceC_Ice_LocatorFinder_ids + 2, s);
}

::std::vector<::std::string>
Ice::LocatorFinder::ice_ids(const Current&) const
{
    return ::std::vector<::std::string>(&iceC_Ice_LocatorFinder_ids[0], &iceC_Ice_LocatorFinder_ids[2]);
}

::std::string
Ice::LocatorFinder::ice_id(const Current&) const
{
    return ice_staticId();
}

const ::std::string&
Ice::LocatorFinder::ice_staticId()
{
    static const ::std::string typeId = "::Ice::LocatorFinder";
    return typeId;
}

/// \cond INTERNAL
bool
Ice::LocatorFinder::_iceD_getLocator(::IceInternal::Incoming& inS, const Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<LocatorPrx> ret = this->getLocator(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Ice::LocatorFinder::_iceDispatch(::IceInternal::Incoming& in, const Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Ice_LocatorFinder_ops, iceC_Ice_LocatorFinder_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Ice_LocatorFinder_ops)
    {
        case 0:
        {
            return _iceD_getLocator(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
Ice::LocatorPrx::_iceI_findObjectById(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Ice::ObjectPrx>>>& outAsync, const Identity& iceP_id, const Context& context)
{
    _checkTwowayOnly(iceC_Ice_Locator_findObjectById_name);
    outAsync->invoke(iceC_Ice_Locator_findObjectById_name, ::Ice::OperationMode::Nonmutating, ::Ice::FormatType::DefaultFormat, context,
        [&](OutputStream* ostr)
        {
            ostr->writeAll(iceP_id);
        },
        [](const UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ObjectNotFoundException&)
            {
                throw;
            }
            catch(const UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Ice::LocatorPrx::_iceI_findAdapterById(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Ice::ObjectPrx>>>& outAsync, const ::std::string& iceP_id, const Context& context)
{
    _checkTwowayOnly(iceC_Ice_Locator_findAdapterById_name);
    outAsync->invoke(iceC_Ice_Locator_findAdapterById_name, ::Ice::OperationMode::Nonmutating, ::Ice::FormatType::DefaultFormat, context,
        [&](OutputStream* ostr)
        {
            ostr->writeAll(iceP_id);
        },
        [](const UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const AdapterNotFoundException&)
            {
                throw;
            }
            catch(const UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Ice::LocatorPrx::_iceI_getRegistry(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Ice::LocatorRegistryPrx>>>& outAsync, const Context& context)
{
    _checkTwowayOnly(iceC_Ice_Locator_getRegistry_name);
    outAsync->invoke(iceC_Ice_Locator_getRegistry_name, ::Ice::OperationMode::Nonmutating, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Ice::LocatorPrx::_newInstance() const
{
    return ::IceInternal::createProxy<LocatorPrx>();
}
/// \endcond

const ::std::string&
Ice::LocatorPrx::ice_staticId()
{
    return Locator::ice_staticId();
}

/// \cond INTERNAL
void
Ice::LocatorRegistryPrx::_iceI_setAdapterDirectProxy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_id, const ::std::shared_ptr<ObjectPrx>& iceP_proxy, const Context& context)
{
    _checkTwowayOnly(iceC_Ice_LocatorRegistry_setAdapterDirectProxy_name);
    outAsync->invoke(iceC_Ice_LocatorRegistry_setAdapterDirectProxy_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        [&](OutputStream* ostr)
        {
            ostr->writeAll(iceP_id, iceP_proxy);
        },
        [](const UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const AdapterNotFoundException&)
            {
                throw;
            }
            catch(const AdapterAlreadyActiveException&)
            {
                throw;
            }
            catch(const UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Ice::LocatorRegistryPrx::_iceI_setReplicatedAdapterDirectProxy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_adapterId, const ::std::string& iceP_replicaGroupId, const ::std::shared_ptr<ObjectPrx>& iceP_p, const Context& context)
{
    _checkTwowayOnly(iceC_Ice_LocatorRegistry_setReplicatedAdapterDirectProxy_name);
    outAsync->invoke(iceC_Ice_LocatorRegistry_setReplicatedAdapterDirectProxy_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        [&](OutputStream* ostr)
        {
            ostr->writeAll(iceP_adapterId, iceP_replicaGroupId, iceP_p);
        },
        [](const UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const AdapterNotFoundException&)
            {
                throw;
            }
            catch(const InvalidReplicaGroupIdException&)
            {
                throw;
            }
            catch(const AdapterAlreadyActiveException&)
            {
                throw;
            }
            catch(const UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Ice::LocatorRegistryPrx::_iceI_setServerProcessProxy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_id, const ::std::shared_ptr<ProcessPrx>& iceP_proxy, const Context& context)
{
    _checkTwowayOnly(iceC_Ice_LocatorRegistry_setServerProcessProxy_name);
    outAsync->invoke(iceC_Ice_LocatorRegistry_setServerProcessProxy_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        [&](OutputStream* ostr)
        {
            ostr->writeAll(iceP_id, iceP_proxy);
        },
        [](const UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ServerNotFoundException&)
            {
                throw;
            }
            catch(const UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Ice::LocatorRegistryPrx::_newInstance() const
{
    return ::IceInternal::createProxy<LocatorRegistryPrx>();
}
/// \endcond

const ::std::string&
Ice::LocatorRegistryPrx::ice_staticId()
{
    return LocatorRegistry::ice_staticId();
}

/// \cond INTERNAL
void
Ice::LocatorFinderPrx::_iceI_getLocator(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Ice::LocatorPrx>>>& outAsync, const Context& context)
{
    _checkTwowayOnly(iceC_Ice_LocatorFinder_getLocator_name);
    outAsync->invoke(iceC_Ice_LocatorFinder_getLocator_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Ice::LocatorFinderPrx::_newInstance() const
{
    return ::IceInternal::createProxy<LocatorFinderPrx>();
}
/// \endcond

const ::std::string&
Ice::LocatorFinderPrx::ice_staticId()
{
    return LocatorFinder::ice_staticId();
}
