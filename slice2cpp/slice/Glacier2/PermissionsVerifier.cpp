//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `PermissionsVerifier.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef GLACIER2_API_EXPORTS
#   define GLACIER2_API_EXPORTS
#endif
#define ICE_BUILDING_GENERATED_CODE
#include <PermissionsVerifier.h>
#include <Ice/OutgoingAsync.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::Glacier2::PermissionDeniedException> iceC_Glacier2_PermissionDeniedException_init("::Glacier2::PermissionDeniedException");

}

bool
Glacier2::PermissionsVerifierPrx::checkPermissions(::std::string_view iceP_userId, ::std::string_view iceP_password, ::std::string& iceP_reason, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<bool, ::std::string>>(true, this, &PermissionsVerifierPrx::_iceI_checkPermissions, iceP_userId, iceP_password, context).get();
    iceP_reason = ::std::move(::std::get<1>(_result));
    return ::std::get<0>(_result);
}

::std::future<::std::tuple<bool, ::std::string>>
Glacier2::PermissionsVerifierPrx::checkPermissionsAsync(::std::string_view iceP_userId, ::std::string_view iceP_password, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<bool, ::std::string>>(false, this, &PermissionsVerifierPrx::_iceI_checkPermissions, iceP_userId, iceP_password, context);
}

::std::function<void()>
Glacier2::PermissionsVerifierPrx::checkPermissionsAsync(::std::string_view iceP_userId, ::std::string_view iceP_password,
                                                        ::std::function<void (bool, ::std::string)> response,
                                                        ::std::function<void(::std::exception_ptr)> ex,
                                                        ::std::function<void(bool)> sent,
                                                        const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<bool, ::std::string>&& _result)
    {
        response(::std::get<0>(_result), ::std::move(::std::get<1>(_result)));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<bool, ::std::string>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Glacier2::PermissionsVerifierPrx::_iceI_checkPermissions, iceP_userId, iceP_password, context);
}

/// \cond INTERNAL
void
Glacier2::PermissionsVerifierPrx::_iceI_checkPermissions(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<bool, ::std::string>>>& outAsync, ::std::string_view iceP_userId, ::std::string_view iceP_password, const ::Ice::Context& context) const
{
    static const ::std::string operationName = "checkPermissions";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Nonmutating, ::Ice::FormatType::SlicedFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_userId, iceP_password);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const PermissionDeniedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        },
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<bool, ::std::string> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::std::string_view
Glacier2::PermissionsVerifierPrx::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Glacier2::PermissionsVerifier";
    return typeId;
}

bool
Glacier2::SSLPermissionsVerifierPrx::authorize(const SSLInfo& iceP_info, ::std::string& iceP_reason, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<bool, ::std::string>>(true, this, &SSLPermissionsVerifierPrx::_iceI_authorize, iceP_info, context).get();
    iceP_reason = ::std::move(::std::get<1>(_result));
    return ::std::get<0>(_result);
}

::std::future<::std::tuple<bool, ::std::string>>
Glacier2::SSLPermissionsVerifierPrx::authorizeAsync(const SSLInfo& iceP_info, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<bool, ::std::string>>(false, this, &SSLPermissionsVerifierPrx::_iceI_authorize, iceP_info, context);
}

::std::function<void()>
Glacier2::SSLPermissionsVerifierPrx::authorizeAsync(const SSLInfo& iceP_info,
                                                    ::std::function<void (bool, ::std::string)> response,
                                                    ::std::function<void(::std::exception_ptr)> ex,
                                                    ::std::function<void(bool)> sent,
                                                    const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<bool, ::std::string>&& _result)
    {
        response(::std::get<0>(_result), ::std::move(::std::get<1>(_result)));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<bool, ::std::string>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Glacier2::SSLPermissionsVerifierPrx::_iceI_authorize, iceP_info, context);
}

/// \cond INTERNAL
void
Glacier2::SSLPermissionsVerifierPrx::_iceI_authorize(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<bool, ::std::string>>>& outAsync, const SSLInfo& iceP_info, const ::Ice::Context& context) const
{
    static const ::std::string operationName = "authorize";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Nonmutating, ::Ice::FormatType::SlicedFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_info);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const PermissionDeniedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        },
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<bool, ::std::string> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::std::string_view
Glacier2::SSLPermissionsVerifierPrx::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Glacier2::SSLPermissionsVerifier";
    return typeId;
}

Glacier2::PermissionDeniedException::~PermissionDeniedException()
{
}

::std::string_view
Glacier2::PermissionDeniedException::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Glacier2::PermissionDeniedException";
    return typeId;
}

::std::shared_ptr<::Ice::SlicedData>
Glacier2::PermissionDeniedException::ice_getSlicedData() const
{
    return _slicedData;
}

/// \cond STREAM
void
Glacier2::PermissionDeniedException::_write(::Ice::OutputStream* ostr) const
{
    ostr->startException(_slicedData);
    _writeImpl(ostr);
    ostr->endException();
}

void
Glacier2::PermissionDeniedException::_read(::Ice::InputStream* istr)
{
    istr->startException();
    _readImpl(istr);
    _slicedData = istr->endException(true);
}
/// \endcond

::std::vector<::std::string>
Glacier2::PermissionsVerifier::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = { "::Glacier2::PermissionsVerifier", "::Ice::Object" };
    return allTypeIds;
}

::std::string
Glacier2::PermissionsVerifier::ice_id(const ::Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Glacier2::PermissionsVerifier::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Glacier2::PermissionsVerifier";
    return typeId;
}

/// \cond INTERNAL
bool
Glacier2::PermissionsVerifier::_iceD_checkPermissions(::IceInternal::Incoming& inS, const ::Ice::Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_userId;
    ::std::string iceP_password;
    istr->readAll(iceP_userId, iceP_password);
    inS.endReadParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    ::std::string iceP_reason;
    bool ret = this->checkPermissions(::std::move(iceP_userId), ::std::move(iceP_password), iceP_reason, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_reason, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Glacier2::PermissionsVerifier::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    static constexpr ::std::string_view allOperations[] = { "checkPermissions", "ice_id", "ice_ids", "ice_isA", "ice_ping" };

    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            return _iceD_checkPermissions(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

::std::vector<::std::string>
Glacier2::SSLPermissionsVerifier::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = { "::Glacier2::SSLPermissionsVerifier", "::Ice::Object" };
    return allTypeIds;
}

::std::string
Glacier2::SSLPermissionsVerifier::ice_id(const ::Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Glacier2::SSLPermissionsVerifier::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Glacier2::SSLPermissionsVerifier";
    return typeId;
}

/// \cond INTERNAL
bool
Glacier2::SSLPermissionsVerifier::_iceD_authorize(::IceInternal::Incoming& inS, const ::Ice::Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    auto istr = inS.startReadParams();
    SSLInfo iceP_info;
    istr->readAll(iceP_info);
    inS.endReadParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    ::std::string iceP_reason;
    bool ret = this->authorize(::std::move(iceP_info), iceP_reason, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_reason, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Glacier2::SSLPermissionsVerifier::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    static constexpr ::std::string_view allOperations[] = { "authorize", "ice_id", "ice_ids", "ice_isA", "ice_ping" };

    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            return _iceD_authorize(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond
