//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Metrics.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef GLACIER2_API_EXPORTS
#   define GLACIER2_API_EXPORTS
#endif
#define ICE_BUILDING_GENERATED_CODE
#include <Metrics.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::IceMX::SessionMetrics> iceC_IceMX_SessionMetrics_init("::IceMX::SessionMetrics");

}

IceMX::SessionMetrics::~SessionMetrics()
{
}

const ::std::string&
IceMX::SessionMetrics::ice_staticId()
{
    static const ::std::string typeId = "::IceMX::SessionMetrics";
    return typeId;
}

#else // C++98 mapping

namespace
{

}

IceMX::SessionMetrics::~SessionMetrics()
{
}

/// \cond INTERNAL
GLACIER2_API ::Ice::Object* IceMX::upCast(SessionMetrics* p) { return p; }

/// \endcond
::Ice::ObjectPtr
IceMX::SessionMetrics::ice_clone() const
{
    ::Ice::Object* p = new SessionMetrics(*this);
    return p;
}

namespace
{
const ::std::string iceC_IceMX_SessionMetrics_ids[3] =
{
    "::Ice::Object",
    "::IceMX::Metrics",
    "::IceMX::SessionMetrics"
};

}

bool
IceMX::SessionMetrics::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_IceMX_SessionMetrics_ids, iceC_IceMX_SessionMetrics_ids + 3, s);
}

::std::vector< ::std::string>
IceMX::SessionMetrics::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_IceMX_SessionMetrics_ids[0], &iceC_IceMX_SessionMetrics_ids[3]);
}

const ::std::string&
IceMX::SessionMetrics::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
IceMX::SessionMetrics::ice_staticId()
{
    static const ::std::string typeId = "::IceMX::SessionMetrics";
    return typeId;
}

/// \cond STREAM
void
IceMX::SessionMetrics::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< SessionMetrics, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    Metrics::_iceWriteImpl(ostr);
}

void
IceMX::SessionMetrics::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< SessionMetrics, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    Metrics::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::IceMX::SessionMetrics> iceC_IceMX_SessionMetrics_init("::IceMX::SessionMetrics");
}

::Ice::ValueFactoryPtr
IceMX::SessionMetrics::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::IceMX::SessionMetrics::ice_staticId());
}

/// \cond INTERNAL
void
IceMX::_icePatchObjectPtr(SessionMetricsPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = SessionMetricsPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(SessionMetrics::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
