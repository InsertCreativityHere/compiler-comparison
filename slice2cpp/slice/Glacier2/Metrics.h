//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Metrics.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Metrics_h__
#define __Metrics_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <Ice/Metrics.h>
#include <IceUtil/UndefSysMacros.h>
#include <Glacier2/Config.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifndef GLACIER2_API
#   if defined(ICE_STATIC_LIBS)
#       define GLACIER2_API /**/
#   elif defined(GLACIER2_API_EXPORTS)
#       define GLACIER2_API ICE_DECLSPEC_EXPORT
#   else
#       define GLACIER2_API ICE_DECLSPEC_IMPORT
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace IceMX
{

class SessionMetrics;

}

namespace IceMX
{

/**
 * Provides information on Glacier2 sessions.
 * \headerfile Glacier2/Glacier2.h
 */
class ICE_CLASS(GLACIER2_API) SessionMetrics : public ::Ice::ValueHelper<SessionMetrics, Metrics>
{
public:

    ICE_MEMBER(GLACIER2_API) virtual ~SessionMetrics();

    SessionMetrics() = default;

    SessionMetrics(const SessionMetrics&) = default;
    SessionMetrics(SessionMetrics&&) = default;
    SessionMetrics& operator=(const SessionMetrics&) = default;
    SessionMetrics& operator=(SessionMetrics&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     * @param id The metrics identifier.
     * @param total The total number of objects observed by this metrics.
     * @param current The number of objects currently observed by this metrics.
     * @param totalLifetime The sum of the lifetime of each observed objects.
     * @param failures The number of failures observed.
     * @param forwardedClient Number of client requests forwarded.
     * @param forwardedServer Number of server requests forwarded.
     * @param routingTableSize The size of the routing table.
     * @param queuedClient Number of client requests queued.
     * @param queuedServer Number of server requests queued.
     * @param overriddenClient Number of client requests overridden.
     * @param overriddenServer Number of server requests overridden.
     */
    SessionMetrics(const ::std::string& id, long long int total, int current, long long int totalLifetime, int failures, int forwardedClient, int forwardedServer, int routingTableSize, int queuedClient, int queuedServer, int overriddenClient, int overriddenServer) :
        Ice::ValueHelper<SessionMetrics, Metrics>(id, total, current, totalLifetime, failures),
        forwardedClient(forwardedClient),
        forwardedServer(forwardedServer),
        routingTableSize(routingTableSize),
        queuedClient(queuedClient),
        queuedServer(queuedServer),
        overriddenClient(overriddenClient),
        overriddenServer(overriddenServer)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const long long int&, const int&, const long long int&, const int&, const int&, const int&, const int&, const int&, const int&, const int&, const int&> ice_tuple() const
    {
        return std::tie(id, total, current, totalLifetime, failures, forwardedClient, forwardedServer, routingTableSize, queuedClient, queuedServer, overriddenClient, overriddenServer);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(GLACIER2_API) static const ::std::string& ice_staticId();

    /**
     * Number of client requests forwarded.
     */
    int forwardedClient = 0;
    /**
     * Number of server requests forwarded.
     */
    int forwardedServer = 0;
    /**
     * The size of the routing table.
     */
    int routingTableSize = 0;
    /**
     * Number of client requests queued.
     */
    int queuedClient = 0;
    /**
     * Number of server requests queued.
     */
    int queuedServer = 0;
    /**
     * Number of client requests overridden.
     */
    int overriddenClient = 0;
    /**
     * Number of server requests overridden.
     */
    int overriddenServer = 0;
};

/// \cond INTERNAL
static SessionMetrics _iceS_SessionMetrics_init;
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamWriter<::IceMX::SessionMetrics, S>
{
    static void write(S* ostr, const ::IceMX::SessionMetrics& v)
    {
        ostr->writeAll(v.forwardedClient, v.forwardedServer, v.routingTableSize, v.queuedClient, v.queuedServer, v.overriddenClient, v.overriddenServer);
    }
};

template<typename S>
struct StreamReader<::IceMX::SessionMetrics, S>
{
    static void read(S* istr, ::IceMX::SessionMetrics& v)
    {
        istr->readAll(v.forwardedClient, v.forwardedServer, v.routingTableSize, v.queuedClient, v.queuedServer, v.overriddenClient, v.overriddenServer);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace IceMX
{

using SessionMetricsPtr = ::std::shared_ptr<SessionMetrics>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

}

namespace IceMX
{

class SessionMetrics;
using SessionMetricsPtr = ::Ice::SharedPtr<SessionMetrics>;

}

namespace IceProxy
{

}

namespace IceMX
{

/**
 * Provides information on Glacier2 sessions.
 * \headerfile Glacier2/Glacier2.h
 */
class ICE_CLASS(GLACIER2_API) SessionMetrics : public ::Ice::ValueHelper<SessionMetrics, Metrics>
{
public:

    ICE_MEMBER(GLACIER2_API) virtual ~SessionMetrics();

    SessionMetrics() = default;

    SessionMetrics(const SessionMetrics&) = default;
    SessionMetrics(SessionMetrics&&) = default;
    SessionMetrics& operator=(const SessionMetrics&) = default;
    SessionMetrics& operator=(SessionMetrics&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     * @param id The metrics identifier.
     * @param total The total number of objects observed by this metrics.
     * @param current The number of objects currently observed by this metrics.
     * @param totalLifetime The sum of the lifetime of each observed objects.
     * @param failures The number of failures observed.
     * @param forwardedClient Number of client requests forwarded.
     * @param forwardedServer Number of server requests forwarded.
     * @param routingTableSize The size of the routing table.
     * @param queuedClient Number of client requests queued.
     * @param queuedServer Number of server requests queued.
     * @param overriddenClient Number of client requests overridden.
     * @param overriddenServer Number of server requests overridden.
     */
    SessionMetrics(const ::std::string& id, ::Ice::Long total, ::Ice::Int current, ::Ice::Long totalLifetime, ::Ice::Int failures, ::Ice::Int forwardedClient, ::Ice::Int forwardedServer, ::Ice::Int routingTableSize, ::Ice::Int queuedClient, ::Ice::Int queuedServer, ::Ice::Int overriddenClient, ::Ice::Int overriddenServer) :
        Ice::ValueHelper<SessionMetrics, Metrics>(id, total, current, totalLifetime, failures),
        forwardedClient(forwardedClient),
        forwardedServer(forwardedServer),
        routingTableSize(routingTableSize),
        queuedClient(queuedClient),
        queuedServer(queuedServer),
        overriddenClient(overriddenClient),
        overriddenServer(overriddenServer)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::Ice::Long&, const ::Ice::Int&, const ::Ice::Long&, const ::Ice::Int&, const ::Ice::Int&, const ::Ice::Int&, const ::Ice::Int&, const ::Ice::Int&, const ::Ice::Int&, const ::Ice::Int&, const ::Ice::Int&> ice_tuple() const
    {
        return std::tie(id, total, current, totalLifetime, failures, forwardedClient, forwardedServer, routingTableSize, queuedClient, queuedServer, overriddenClient, overriddenServer);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(GLACIER2_API) static const ::std::string& ice_staticId();

    /**
     * Number of client requests forwarded.
     */
    ::Ice::Int forwardedClient = 0;
    /**
     * Number of server requests forwarded.
     */
    ::Ice::Int forwardedServer = 0;
    /**
     * The size of the routing table.
     */
    ::Ice::Int routingTableSize = 0;
    /**
     * Number of client requests queued.
     */
    ::Ice::Int queuedClient = 0;
    /**
     * Number of server requests queued.
     */
    ::Ice::Int queuedServer = 0;
    /**
     * Number of client requests overridden.
     */
    ::Ice::Int overriddenClient = 0;
    /**
     * Number of server requests overridden.
     */
    ::Ice::Int overriddenServer = 0;
};

/// \cond INTERNAL
static SessionMetrics _iceS_SessionMetrics_init;
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamWriter< ::IceMX::SessionMetrics, S>
{
    static void write(S* ostr, const ::IceMX::SessionMetrics& v)
    {
        ostr->write(v.forwardedClient);
        ostr->write(v.forwardedServer);
        ostr->write(v.routingTableSize);
        ostr->write(v.queuedClient);
        ostr->write(v.queuedServer);
        ostr->write(v.overriddenClient);
        ostr->write(v.overriddenServer);
    }
};

template<typename S>
struct StreamReader< ::IceMX::SessionMetrics, S>
{
    static void read(S* istr, ::IceMX::SessionMetrics& v)
    {
        istr->read(v.forwardedClient);
        istr->read(v.forwardedServer);
        istr->read(v.routingTableSize);
        istr->read(v.queuedClient);
        istr->read(v.queuedServer);
        istr->read(v.overriddenClient);
        istr->read(v.overriddenServer);
    }
};

}
/// \endcond

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
