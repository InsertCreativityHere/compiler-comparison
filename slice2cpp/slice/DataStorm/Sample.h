// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Sample.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

// clang-format off

#ifndef Sample_h_
#define Sample_h_

#include <Ice/PushDisableWarnings.h>
#include <Ice/Ice.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

#ifndef DATASTORM_API
#   if defined(DATASTORM_API_EXPORTS)
#       define DATASTORM_API ICE_DECLSPEC_EXPORT
#   else
#       define DATASTORM_API ICE_DECLSPEC_IMPORT
#   endif
#endif

namespace DataStorm
{
    /// The sample event matches the operation used by the DataWriter to update the data element. It also provides
    /// information on what to expect from the sample. A sample with the Add or Update event always provide a value
    /// while a sample with the Remove type doesn't.
    enum class SampleEvent : std::uint8_t
    {
        /// The element has been added.
        Add,
        /// The element has been updated.
        Update,
        /// The element has been partially updated.
        PartialUpdate,
        /// The element has been removed.
        Remove
    };

    DATASTORM_API std::ostream& operator<<(std::ostream&, SampleEvent);

    /// A sequence of sample event.
    using SampleEventSeq = std::vector<SampleEvent>;
}

/// \cond STREAM
namespace Ice
{
    template<>
    struct StreamableTraits< ::DataStorm::SampleEvent>
    {
        static const StreamHelperCategory helper = StreamHelperCategoryEnum;
        static const int minValue = 0;
        static const int maxValue = 3;
        static const int minWireSize = 1;
        static const bool fixedLength = false;
    };
}
/// \endcond

#include <Ice/PopDisableWarnings.h>
#endif
