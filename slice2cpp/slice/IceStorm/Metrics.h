//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Metrics.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Metrics_h__
#define __Metrics_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <Ice/Metrics.h>
#include <IceUtil/UndefSysMacros.h>
#include <IceStorm/Config.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

#ifndef ICESTORM_API
#   if defined(ICE_STATIC_LIBS)
#       define ICESTORM_API /**/
#   elif defined(ICESTORM_API_EXPORTS)
#       define ICESTORM_API ICE_DECLSPEC_EXPORT
#   else
#       define ICESTORM_API ICE_DECLSPEC_IMPORT
#   endif
#endif

namespace IceMX
{
    class TopicMetrics;
    using TopicMetricsPtr = ::std::shared_ptr<TopicMetrics>;

    class SubscriberMetrics;
    using SubscriberMetricsPtr = ::std::shared_ptr<SubscriberMetrics>;

}

namespace IceMX
{

/**
 * Provides information on IceStorm topics.
 * \headerfile IceStorm/IceStorm.h
 */
class ICE_CLASS(ICESTORM_API) TopicMetrics : public Metrics
{
public:

    TopicMetrics() = default;

    /**
     * One-shot constructor to initialize all data members.
     * @param id The metrics identifier.
     * @param total The total number of objects observed by this metrics.
     * @param current The number of objects currently observed by this metrics.
     * @param totalLifetime The sum of the lifetime of each observed objects.
     * @param failures The number of failures observed.
     * @param published Number of events published on the topic by publishers.
     * @param forwarded Number of events forwarded on the topic by IceStorm topic links.
     */
    TopicMetrics(::std::string id, ::std::int64_t total, ::std::int32_t current, ::std::int64_t totalLifetime, ::std::int32_t failures, ::std::int64_t published, ::std::int64_t forwarded) :
        Metrics(::std::move(id), total, current, totalLifetime, failures),
        published(published),
        forwarded(forwarded)
    {
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(ICESTORM_API) static ::std::string_view ice_staticId() noexcept;

    ICE_MEMBER(ICESTORM_API) ::std::string ice_id() const override;

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::std::int64_t&, const ::std::int32_t&, const ::std::int64_t&, const ::std::int32_t&, const ::std::int64_t&, const ::std::int64_t&> ice_tuple() const
    {
        return std::tie(id, total, current, totalLifetime, failures, published, forwarded);
    }

    /**
     * Creates a shallow polymorphic copy of this instance.
     * @return The cloned value.
     */
    TopicMetricsPtr ice_clone() const { return ::std::static_pointer_cast <TopicMetrics>(_iceCloneImpl()); }

    /**
     * Number of events published on the topic by publishers.
     */
    ::std::int64_t published = INT64_C(0);
    /**
     * Number of events forwarded on the topic by IceStorm topic links.
     */
    ::std::int64_t forwarded = INT64_C(0);

protected:

    TopicMetrics(const TopicMetrics&) = default;

    ICE_MEMBER(ICESTORM_API) ::Ice::ValuePtr _iceCloneImpl() const override;
    ICE_MEMBER(ICESTORM_API) void _iceWriteImpl(::Ice::OutputStream*) const override;

    ICE_MEMBER(ICESTORM_API) void _iceReadImpl(::Ice::InputStream*) override;
};

/// \cond INTERNAL
static TopicMetrics _iceS_TopicMetrics_init;
/// \endcond

/**
 * Provides information on IceStorm subscribers.
 * \headerfile IceStorm/IceStorm.h
 */
class ICE_CLASS(ICESTORM_API) SubscriberMetrics : public Metrics
{
public:

    SubscriberMetrics() = default;

    /**
     * One-shot constructor to initialize all data members.
     * @param id The metrics identifier.
     * @param total The total number of objects observed by this metrics.
     * @param current The number of objects currently observed by this metrics.
     * @param totalLifetime The sum of the lifetime of each observed objects.
     * @param failures The number of failures observed.
     * @param queued Number of queued events.
     * @param outstanding Number of outstanding events.
     * @param delivered Number of forwarded events.
     */
    SubscriberMetrics(::std::string id, ::std::int64_t total, ::std::int32_t current, ::std::int64_t totalLifetime, ::std::int32_t failures, ::std::int32_t queued, ::std::int32_t outstanding, ::std::int64_t delivered) :
        Metrics(::std::move(id), total, current, totalLifetime, failures),
        queued(queued),
        outstanding(outstanding),
        delivered(delivered)
    {
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(ICESTORM_API) static ::std::string_view ice_staticId() noexcept;

    ICE_MEMBER(ICESTORM_API) ::std::string ice_id() const override;

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::std::int64_t&, const ::std::int32_t&, const ::std::int64_t&, const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&, const ::std::int64_t&> ice_tuple() const
    {
        return std::tie(id, total, current, totalLifetime, failures, queued, outstanding, delivered);
    }

    /**
     * Creates a shallow polymorphic copy of this instance.
     * @return The cloned value.
     */
    SubscriberMetricsPtr ice_clone() const { return ::std::static_pointer_cast <SubscriberMetrics>(_iceCloneImpl()); }

    /**
     * Number of queued events.
     */
    ::std::int32_t queued = 0;
    /**
     * Number of outstanding events.
     */
    ::std::int32_t outstanding = 0;
    /**
     * Number of forwarded events.
     */
    ::std::int64_t delivered = INT64_C(0);

protected:

    SubscriberMetrics(const SubscriberMetrics&) = default;

    ICE_MEMBER(ICESTORM_API) ::Ice::ValuePtr _iceCloneImpl() const override;
    ICE_MEMBER(ICESTORM_API) void _iceWriteImpl(::Ice::OutputStream*) const override;

    ICE_MEMBER(ICESTORM_API) void _iceReadImpl(::Ice::InputStream*) override;
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamWriter<::IceMX::TopicMetrics>
{
    static void write(OutputStream* ostr, const ::IceMX::TopicMetrics& v)
    {
        ostr->writeAll(v.published, v.forwarded);
    }
};

template<>
struct StreamReader<::IceMX::TopicMetrics>
{
    static void read(InputStream* istr, ::IceMX::TopicMetrics& v)
    {
        istr->readAll(v.published, v.forwarded);
    }
};

template<>
struct StreamWriter<::IceMX::SubscriberMetrics>
{
    static void write(OutputStream* ostr, const ::IceMX::SubscriberMetrics& v)
    {
        ostr->writeAll(v.queued, v.outstanding, v.delivered);
    }
};

template<>
struct StreamReader<::IceMX::SubscriberMetrics>
{
    static void read(InputStream* istr, ::IceMX::SubscriberMetrics& v)
    {
        istr->readAll(v.queued, v.outstanding, v.delivered);
    }
};

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
