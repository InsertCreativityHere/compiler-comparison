//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Metrics.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ICESTORM_API_EXPORTS
#   define ICESTORM_API_EXPORTS
#endif
#define ICE_BUILDING_GENERATED_CODE
#include "Metrics.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/FactoryTable.h>
#include <Ice/OutgoingAsync.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{
    const ::IceInternal::FactoryTableInit iceC_factoryTableInit;
    const ::IceInternal::DefaultValueFactoryInit<::IceMX::TopicMetrics> iceC_IceMX_TopicMetrics_init("::IceMX::TopicMetrics");
    const ::IceInternal::DefaultValueFactoryInit<::IceMX::SubscriberMetrics> iceC_IceMX_SubscriberMetrics_init("::IceMX::SubscriberMetrics");
}

::std::string
IceMX::TopicMetrics::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
IceMX::TopicMetrics::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::IceMX::TopicMetrics";
    return typeId;
}

::Ice::ValuePtr
IceMX::TopicMetrics::_iceCloneImpl() const
{
    return CloneEnabler<TopicMetrics>::clone(*this);
}

void
IceMX::TopicMetrics::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<TopicMetrics>::write(ostr, *this);
    ostr->endSlice();
    Metrics::_iceWriteImpl(ostr);
}

void
IceMX::TopicMetrics::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<TopicMetrics>::read(istr, *this);
    istr->endSlice();
    Metrics::_iceReadImpl(istr);
}

::std::string
IceMX::SubscriberMetrics::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
IceMX::SubscriberMetrics::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::IceMX::SubscriberMetrics";
    return typeId;
}

::Ice::ValuePtr
IceMX::SubscriberMetrics::_iceCloneImpl() const
{
    return CloneEnabler<SubscriberMetrics>::clone(*this);
}

void
IceMX::SubscriberMetrics::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<SubscriberMetrics>::write(ostr, *this);
    ostr->endSlice();
    Metrics::_iceWriteImpl(ostr);
}

void
IceMX::SubscriberMetrics::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<SubscriberMetrics>::read(istr, *this);
    istr->endSlice();
    Metrics::_iceReadImpl(istr);
}
