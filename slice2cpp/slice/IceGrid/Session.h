//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Session.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef Session_h_
#define Session_h_

#include <Ice/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <Glacier2/Session.h>
#include "Exception.h"
#include <IceGrid/Config.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

#ifndef ICEGRID_API
#   if defined(ICEGRID_API_EXPORTS)
#       define ICEGRID_API ICE_DECLSPEC_EXPORT
#   else
#       define ICEGRID_API ICE_DECLSPEC_IMPORT
#   endif
#endif

namespace IceGrid
{
    class SessionPrx;

}

namespace IceGrid
{

/// A session object is used by IceGrid clients to allocate and release objects. Client sessions are created either
/// via the {@link Registry} object or via the registry client <code>SessionManager</code> object.
/// @see Registry
class ICEGRID_API SessionPrx : public ::Ice::Proxy<SessionPrx, ::Glacier2::SessionPrx>
{
public:

    /// Keep the session alive.
    /// As of Ice 3.8, there is no need to call this operation, and its implementation does nothing.
    /// @param context The Context map to send with the invocation.
    [[deprecated]] void keepAlive(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// Keep the session alive.
    /// As of Ice 3.8, there is no need to call this operation, and its implementation does nothing.
    /// @param context The Context map to send with the invocation.
    /// @return The future object for the invocation.
    [[deprecated]] [[nodiscard]] ::std::future<void> keepAliveAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// Keep the session alive.
    /// As of Ice 3.8, there is no need to call this operation, and its implementation does nothing.
    /// @param response The response callback.
    /// @param ex The exception callback.
    /// @param sent The sent callback.
    /// @param context The Context map to send with the invocation.
    /// @return A function that can be called to cancel the invocation locally.
    [[deprecated]] ::std::function<void()> // NOLINT:modernize-use-nodiscard
    keepAliveAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_keepAlive(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    /// Allocate an object. Depending on the allocation timeout, this operation might hang until the object is
    /// available or until the timeout is reached.
    /// @param id The identity of the object to allocate.
    /// @param context The Context map to send with the invocation.
    /// @return The proxy of the allocated object. The returned proxy is never null.
    /// @throws IceGrid::AllocationException Raised if the object can't be allocated.
    /// @throws IceGrid::ObjectNotRegisteredException Raised if the object with the given identity is not registered with
    /// the registry.
    /// @see #setAllocationTimeout
    /// @see #releaseObject
    ::std::optional<::Ice::ObjectPrx> allocateObjectById(const ::Ice::Identity& id, const ::Ice::Context& context = ::Ice::noExplicitContext) const; // NOLINT:modernize-use-nodiscard

    /// Allocate an object. Depending on the allocation timeout, this operation might hang until the object is
    /// available or until the timeout is reached.
    /// @param id The identity of the object to allocate.
    /// @param context The Context map to send with the invocation.
    /// @return The future object for the invocation.
    /// @see #setAllocationTimeout
    /// @see #releaseObject
    [[nodiscard]] ::std::future<::std::optional<::Ice::ObjectPrx>> allocateObjectByIdAsync(const ::Ice::Identity& id, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// Allocate an object. Depending on the allocation timeout, this operation might hang until the object is
    /// available or until the timeout is reached.
    /// @param id The identity of the object to allocate.
    /// @param response The response callback.
    /// @param ex The exception callback.
    /// @param sent The sent callback.
    /// @param context The Context map to send with the invocation.
    /// @return A function that can be called to cancel the invocation locally.
    /// @see #setAllocationTimeout
    /// @see #releaseObject
    ::std::function<void()> // NOLINT:modernize-use-nodiscard
    allocateObjectByIdAsync(const ::Ice::Identity& id, ::std::function<void(::std::optional<::Ice::ObjectPrx>)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_allocateObjectById(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<::Ice::ObjectPrx>>>&, const ::Ice::Identity&, const ::Ice::Context&) const;
    /// \endcond

    /// Allocate an object with the given type. Depending on the allocation timeout, this operation can block until
    /// an object becomes available or until the timeout is reached.
    /// @param type The type of the object.
    /// @param context The Context map to send with the invocation.
    /// @return The proxy of the allocated object. The returned proxy is never null.
    /// @throws IceGrid::AllocationException Raised if the object could not be allocated.
    /// @see #setAllocationTimeout
    /// @see #releaseObject
    ::std::optional<::Ice::ObjectPrx> allocateObjectByType(::std::string_view type, const ::Ice::Context& context = ::Ice::noExplicitContext) const; // NOLINT:modernize-use-nodiscard

    /// Allocate an object with the given type. Depending on the allocation timeout, this operation can block until
    /// an object becomes available or until the timeout is reached.
    /// @param type The type of the object.
    /// @param context The Context map to send with the invocation.
    /// @return The future object for the invocation.
    /// @see #setAllocationTimeout
    /// @see #releaseObject
    [[nodiscard]] ::std::future<::std::optional<::Ice::ObjectPrx>> allocateObjectByTypeAsync(::std::string_view type, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// Allocate an object with the given type. Depending on the allocation timeout, this operation can block until
    /// an object becomes available or until the timeout is reached.
    /// @param type The type of the object.
    /// @param response The response callback.
    /// @param ex The exception callback.
    /// @param sent The sent callback.
    /// @param context The Context map to send with the invocation.
    /// @return A function that can be called to cancel the invocation locally.
    /// @see #setAllocationTimeout
    /// @see #releaseObject
    ::std::function<void()> // NOLINT:modernize-use-nodiscard
    allocateObjectByTypeAsync(::std::string_view type, ::std::function<void(::std::optional<::Ice::ObjectPrx>)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_allocateObjectByType(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<::Ice::ObjectPrx>>>&, ::std::string_view, const ::Ice::Context&) const;
    /// \endcond

    /// Release an object that was allocated using <code>allocateObjectById</code> or
    /// <code>allocateObjectByType</code>.
    /// @param id The identity of the object to release.
    /// @param context The Context map to send with the invocation.
    /// @throws IceGrid::AllocationException Raised if the given object can't be released. This might happen if the object
    /// isn't allocatable or isn't allocated by the session.
    /// @throws IceGrid::ObjectNotRegisteredException Raised if the object with the given identity is not registered with
    /// the registry.
    void releaseObject(const ::Ice::Identity& id, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// Release an object that was allocated using <code>allocateObjectById</code> or
    /// <code>allocateObjectByType</code>.
    /// @param id The identity of the object to release.
    /// @param context The Context map to send with the invocation.
    /// @return The future object for the invocation.
    [[nodiscard]] ::std::future<void> releaseObjectAsync(const ::Ice::Identity& id, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// Release an object that was allocated using <code>allocateObjectById</code> or
    /// <code>allocateObjectByType</code>.
    /// @param id The identity of the object to release.
    /// @param response The response callback.
    /// @param ex The exception callback.
    /// @param sent The sent callback.
    /// @param context The Context map to send with the invocation.
    /// @return A function that can be called to cancel the invocation locally.
    ::std::function<void()> // NOLINT:modernize-use-nodiscard
    releaseObjectAsync(const ::Ice::Identity& id, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_releaseObject(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Identity&, const ::Ice::Context&) const;
    /// \endcond

    /// Set the allocation timeout. If no objects are available for an allocation request, a call to
    /// <code>allocateObjectById</code> or <code>allocateObjectByType</code> will block for the duration of this
    /// timeout.
    /// @param timeout The timeout in milliseconds.
    /// @param context The Context map to send with the invocation.
    void setAllocationTimeout(::std::int32_t timeout, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// Set the allocation timeout. If no objects are available for an allocation request, a call to
    /// <code>allocateObjectById</code> or <code>allocateObjectByType</code> will block for the duration of this
    /// timeout.
    /// @param timeout The timeout in milliseconds.
    /// @param context The Context map to send with the invocation.
    /// @return The future object for the invocation.
    [[nodiscard]] ::std::future<void> setAllocationTimeoutAsync(::std::int32_t timeout, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// Set the allocation timeout. If no objects are available for an allocation request, a call to
    /// <code>allocateObjectById</code> or <code>allocateObjectByType</code> will block for the duration of this
    /// timeout.
    /// @param timeout The timeout in milliseconds.
    /// @param response The response callback.
    /// @param ex The exception callback.
    /// @param sent The sent callback.
    /// @param context The Context map to send with the invocation.
    /// @return A function that can be called to cancel the invocation locally.
    ::std::function<void()> // NOLINT:modernize-use-nodiscard
    setAllocationTimeoutAsync(::std::int32_t timeout, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_setAllocationTimeout(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, ::std::int32_t, const ::Ice::Context&) const;
    /// \endcond

    /// Obtains the Slice type ID of this interface.
    /// @return The fully-scoped type ID.
    static const char* ice_staticId() noexcept;

#if defined(__GNUC__)
#   pragma GCC diagnostic push
#   pragma GCC diagnostic ignored "-Wextra" // initialize all virtual bases in correct order
#endif

    SessionPrx(const SessionPrx& other) noexcept : ::Ice::ObjectPrx(other) {} // NOLINT:modernize-use-equals-default

    SessionPrx(SessionPrx&& other) noexcept : ::Ice::ObjectPrx(std::move(other)) {} // NOLINT:modernize-use-equals-default

    SessionPrx(const ::Ice::CommunicatorPtr& communicator, std::string_view proxyString) : ::Ice::ObjectPrx(communicator, proxyString) {} // NOLINT:modernize-use-equals-default

    SessionPrx& operator=(const SessionPrx& rhs) noexcept
    {
        if (this != &rhs)
        {
            ::Ice::ObjectPrx::operator=(rhs);
        }
        return *this;
    }

    SessionPrx& operator=(SessionPrx&& rhs) noexcept
    {
        if (this != &rhs)
        {
            ::Ice::ObjectPrx::operator=(std::move(rhs));
        }
        return *this;
    }

    /// \cond INTERNAL
    static SessionPrx _fromReference(::IceInternal::ReferencePtr ref) { return SessionPrx(std::move(ref)); }

protected:

    SessionPrx() = default;

    explicit SessionPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(std::move(ref))
    {
    }
    /// \endcond

#if defined(__GNUC__)
#   pragma GCC diagnostic pop
#endif
};

}

namespace IceGrid
{

/// A session object is used by IceGrid clients to allocate and release objects. Client sessions are created either
/// via the {@link Registry} object or via the registry client <code>SessionManager</code> object.
/// @see Registry
class ICEGRID_API Session : public virtual ::Glacier2::Session
{
public:

    using ProxyType = SessionPrx;

    /// Obtains a list of the Slice type IDs representing the interfaces supported by this object.
    /// @param current The Current object for the invocation.
    /// @return A list of fully-scoped type IDs.
    [[nodiscard]] ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /// Obtains a Slice type ID representing the most-derived interface supported by this object.
    /// @param current The Current object for the invocation.
    /// @return A fully-scoped type ID.
    [[nodiscard]] ::std::string ice_id(const ::Ice::Current& current) const override;

    /// Obtains the Slice type ID corresponding to this interface.
    /// @return A fully-scoped type ID.
    static const char* ice_staticId() noexcept;

    /// Keep the session alive.
    /// As of Ice 3.8, there is no need to call this operation, and its implementation does nothing.
    /// @param current The Current object for the invocation.
    virtual void keepAlive(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_keepAlive(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    /// Allocate an object. Depending on the allocation timeout, this operation might hang until the object is
    /// available or until the timeout is reached.
    /// @param id The identity of the object to allocate.
    /// @param response The response callback.
    /// @param exception The exception callback.
    /// @param current The Current object for the invocation.
    /// @throws IceGrid::AllocationException Raised if the object can't be allocated.
    /// @throws IceGrid::ObjectNotRegisteredException Raised if the object with the given identity is not registered with
    /// the registry.
    /// @see #setAllocationTimeout
    /// @see #releaseObject
    virtual void allocateObjectByIdAsync(::Ice::Identity id, ::std::function<void(const ::std::optional<::Ice::ObjectPrx>& returnValue)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_allocateObjectById(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    /// Allocate an object with the given type. Depending on the allocation timeout, this operation can block until
    /// an object becomes available or until the timeout is reached.
    /// @param type The type of the object.
    /// @param response The response callback.
    /// @param exception The exception callback.
    /// @param current The Current object for the invocation.
    /// @throws IceGrid::AllocationException Raised if the object could not be allocated.
    /// @see #setAllocationTimeout
    /// @see #releaseObject
    virtual void allocateObjectByTypeAsync(::std::string type, ::std::function<void(const ::std::optional<::Ice::ObjectPrx>& returnValue)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_allocateObjectByType(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    /// Release an object that was allocated using <code>allocateObjectById</code> or
    /// <code>allocateObjectByType</code>.
    /// @param id The identity of the object to release.
    /// @param current The Current object for the invocation.
    /// @throws IceGrid::AllocationException Raised if the given object can't be released. This might happen if the object
    /// isn't allocatable or isn't allocated by the session.
    /// @throws IceGrid::ObjectNotRegisteredException Raised if the object with the given identity is not registered with
    /// the registry.
    virtual void releaseObject(::Ice::Identity id, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_releaseObject(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    /// Set the allocation timeout. If no objects are available for an allocation request, a call to
    /// <code>allocateObjectById</code> or <code>allocateObjectByType</code> will block for the duration of this
    /// timeout.
    /// @param timeout The timeout in milliseconds.
    /// @param current The Current object for the invocation.
    virtual void setAllocationTimeout(::std::int32_t timeout, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_setAllocationTimeout(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    /// \cond INTERNAL
    void dispatch(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>) override;
    /// \endcond
};

using SessionPtr = ::std::shared_ptr<Session>;

}

#include <Ice/PopDisableWarnings.h>
#endif
