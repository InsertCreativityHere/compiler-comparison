//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Session.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Session_h__
#define __Session_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <Glacier2/Session.h>
#include <Exception.h>
#include <IceUtil/UndefSysMacros.h>
#include <IceGrid/Config.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

#ifndef ICEGRID_API
#   if defined(ICE_STATIC_LIBS)
#       define ICEGRID_API /**/
#   elif defined(ICEGRID_API_EXPORTS)
#       define ICEGRID_API ICE_DECLSPEC_EXPORT
#   else
#       define ICEGRID_API ICE_DECLSPEC_IMPORT
#   endif
#endif

namespace IceGrid
{

class SessionPrx;

using SessionPrxPtr = ::std::optional<SessionPrx>;

}

namespace IceGrid
{

/**
 * A session object is used by IceGrid clients to allocate and release objects. Client sessions are created either
 * via the {@link Registry} object or via the registry client <code>SessionManager</code> object.
 * @see Registry
 */
class ICEGRID_API SessionPrx : public ::Ice::Proxy<SessionPrx, ::Glacier2::SessionPrx>
{
public:

    /**
     * Keep the session alive. Clients should call this operation regularly to prevent the server from reaping the
     * session.
     * @param context The Context map to send with the invocation.
     * @see Registry#getSessionTimeout
     */
    void keepAlive(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Keep the session alive. Clients should call this operation regularly to prevent the server from reaping the
     * session.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     * @see Registry#getSessionTimeout
     */
    ::std::future<void> keepAliveAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Keep the session alive. Clients should call this operation regularly to prevent the server from reaping the
     * session.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     * @see Registry#getSessionTimeout
     */
    ::std::function<void()>
    keepAliveAsync(::std::function<void()> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_keepAlive(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Allocate an object. Depending on the allocation timeout, this operation might hang until the object is
     * available or until the timeout is reached.
     * @param id The identity of the object to allocate.
     * @param context The Context map to send with the invocation.
     * @return The proxy of the allocated object.
     * @throws IceGrid::AllocationException Raised if the object can't be allocated.
     * @throws IceGrid::ObjectNotRegisteredException Raised if the object with the given identity is not registered with
     * the registry.
     * @see #setAllocationTimeout
     * @see #releaseObject
     */
    ::std::optional<::Ice::ObjectPrx> allocateObjectById(const ::Ice::Identity& id, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Allocate an object. Depending on the allocation timeout, this operation might hang until the object is
     * available or until the timeout is reached.
     * @param id The identity of the object to allocate.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     * @see #setAllocationTimeout
     * @see #releaseObject
     */
    ::std::future<::std::optional<::Ice::ObjectPrx>> allocateObjectByIdAsync(const ::Ice::Identity& id, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Allocate an object. Depending on the allocation timeout, this operation might hang until the object is
     * available or until the timeout is reached.
     * @param id The identity of the object to allocate.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     * @see #setAllocationTimeout
     * @see #releaseObject
     */
    ::std::function<void()>
    allocateObjectByIdAsync(const ::Ice::Identity& id,
                            ::std::function<void(::std::optional<::Ice::ObjectPrx>)> response,
                            ::std::function<void(::std::exception_ptr)> ex = nullptr,
                            ::std::function<void(bool)> sent = nullptr,
                            const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_allocateObjectById(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<::Ice::ObjectPrx>>>&, const ::Ice::Identity&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Allocate an object with the given type. Depending on the allocation timeout, this operation can block until
     * an object becomes available or until the timeout is reached.
     * @param type The type of the object.
     * @param context The Context map to send with the invocation.
     * @return The proxy of the allocated object.
     * @throws IceGrid::AllocationException Raised if the object could not be allocated.
     * @see #setAllocationTimeout
     * @see #releaseObject
     */
    ::std::optional<::Ice::ObjectPrx> allocateObjectByType(::std::string_view type, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Allocate an object with the given type. Depending on the allocation timeout, this operation can block until
     * an object becomes available or until the timeout is reached.
     * @param type The type of the object.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     * @see #setAllocationTimeout
     * @see #releaseObject
     */
    ::std::future<::std::optional<::Ice::ObjectPrx>> allocateObjectByTypeAsync(::std::string_view type, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Allocate an object with the given type. Depending on the allocation timeout, this operation can block until
     * an object becomes available or until the timeout is reached.
     * @param type The type of the object.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     * @see #setAllocationTimeout
     * @see #releaseObject
     */
    ::std::function<void()>
    allocateObjectByTypeAsync(::std::string_view type,
                              ::std::function<void(::std::optional<::Ice::ObjectPrx>)> response,
                              ::std::function<void(::std::exception_ptr)> ex = nullptr,
                              ::std::function<void(bool)> sent = nullptr,
                              const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_allocateObjectByType(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<::Ice::ObjectPrx>>>&, ::std::string_view, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Release an object that was allocated using <code>allocateObjectById</code> or
     * <code>allocateObjectByType</code>.
     * @param id The identity of the object to release.
     * @param context The Context map to send with the invocation.
     * @throws IceGrid::AllocationException Raised if the given object can't be released. This might happen if the object
     * isn't allocatable or isn't allocated by the session.
     * @throws IceGrid::ObjectNotRegisteredException Raised if the object with the given identity is not registered with
     * the registry.
     */
    void releaseObject(const ::Ice::Identity& id, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Release an object that was allocated using <code>allocateObjectById</code> or
     * <code>allocateObjectByType</code>.
     * @param id The identity of the object to release.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<void> releaseObjectAsync(const ::Ice::Identity& id, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Release an object that was allocated using <code>allocateObjectById</code> or
     * <code>allocateObjectByType</code>.
     * @param id The identity of the object to release.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    releaseObjectAsync(const ::Ice::Identity& id,
                       ::std::function<void()> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_releaseObject(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Identity&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Set the allocation timeout. If no objects are available for an allocation request, a call to
     * <code>allocateObjectById</code> or <code>allocateObjectByType</code> will block for the duration of this
     * timeout.
     * @param timeout The timeout in milliseconds.
     * @param context The Context map to send with the invocation.
     */
    void setAllocationTimeout(::std::int32_t timeout, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Set the allocation timeout. If no objects are available for an allocation request, a call to
     * <code>allocateObjectById</code> or <code>allocateObjectByType</code> will block for the duration of this
     * timeout.
     * @param timeout The timeout in milliseconds.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<void> setAllocationTimeoutAsync(::std::int32_t timeout, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Set the allocation timeout. If no objects are available for an allocation request, a call to
     * <code>allocateObjectById</code> or <code>allocateObjectByType</code> will block for the duration of this
     * timeout.
     * @param timeout The timeout in milliseconds.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    setAllocationTimeoutAsync(::std::int32_t timeout,
                              ::std::function<void()> response,
                              ::std::function<void(::std::exception_ptr)> ex = nullptr,
                              ::std::function<void(bool)> sent = nullptr,
                              const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_setAllocationTimeout(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, ::std::int32_t, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

#if defined(__GNUC__)
#   pragma GCC diagnostic push
#   pragma GCC diagnostic ignored "-Wextra" // initialize all virtual bases in correct order
#endif

    explicit SessionPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    SessionPrx(const SessionPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    SessionPrx(SessionPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    SessionPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    SessionPrx& operator=(const SessionPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    SessionPrx& operator=(SessionPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static SessionPrx _fromReference(::IceInternal::ReferencePtr ref) { return SessionPrx(::std::move(ref)); }

protected:

    SessionPrx() = default;

    explicit SessionPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond

#if defined(__GNUC__)
#   pragma GCC diagnostic pop
#endif
};

}

namespace IceGrid
{

/**
 * A session object is used by IceGrid clients to allocate and release objects. Client sessions are created either
 * via the {@link Registry} object or via the registry client <code>SessionManager</code> object.
 * @see Registry
 */
class ICEGRID_API Session : public virtual ::Glacier2::Session
{
public:

    using ProxyType = SessionPrx;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Keep the session alive. Clients should call this operation regularly to prevent the server from reaping the
     * session.
     * @param current The Current object for the invocation.
     * @see Registry#getSessionTimeout
     */
    virtual void keepAlive(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_keepAlive(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Allocate an object. Depending on the allocation timeout, this operation might hang until the object is
     * available or until the timeout is reached.
     * @param id The identity of the object to allocate.
     * @param response The response callback.
     * @param exception The exception callback.
     * @param current The Current object for the invocation.
     * @throws IceGrid::AllocationException Raised if the object can't be allocated.
     * @throws IceGrid::ObjectNotRegisteredException Raised if the object with the given identity is not registered with
     * the registry.
     * @see #setAllocationTimeout
     * @see #releaseObject
     */
    virtual void allocateObjectByIdAsync(::Ice::Identity id, ::std::function<void(const ::std::optional<::Ice::ObjectPrx>& returnValue)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_allocateObjectById(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Allocate an object with the given type. Depending on the allocation timeout, this operation can block until
     * an object becomes available or until the timeout is reached.
     * @param type The type of the object.
     * @param response The response callback.
     * @param exception The exception callback.
     * @param current The Current object for the invocation.
     * @throws IceGrid::AllocationException Raised if the object could not be allocated.
     * @see #setAllocationTimeout
     * @see #releaseObject
     */
    virtual void allocateObjectByTypeAsync(::std::string type, ::std::function<void(const ::std::optional<::Ice::ObjectPrx>& returnValue)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_allocateObjectByType(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Release an object that was allocated using <code>allocateObjectById</code> or
     * <code>allocateObjectByType</code>.
     * @param id The identity of the object to release.
     * @param current The Current object for the invocation.
     * @throws IceGrid::AllocationException Raised if the given object can't be released. This might happen if the object
     * isn't allocatable or isn't allocated by the session.
     * @throws IceGrid::ObjectNotRegisteredException Raised if the object with the given identity is not registered with
     * the registry.
     */
    virtual void releaseObject(::Ice::Identity id, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_releaseObject(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Set the allocation timeout. If no objects are available for an allocation request, a call to
     * <code>allocateObjectById</code> or <code>allocateObjectByType</code> will block for the duration of this
     * timeout.
     * @param timeout The timeout in milliseconds.
     * @param current The Current object for the invocation.
     */
    virtual void setAllocationTimeout(::std::int32_t timeout, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_setAllocationTimeout(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

using SessionPtr = ::std::shared_ptr<Session>;

}

#include <IceUtil/PopDisableWarnings.h>
#endif
