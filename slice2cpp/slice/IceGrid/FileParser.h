//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `FileParser.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __FileParser_h__
#define __FileParser_h__

#include <Ice/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include "Admin.h"
#include <IceGrid/Config.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

#ifndef ICEGRID_API
#   if defined(ICEGRID_API_EXPORTS)
#       define ICEGRID_API ICE_DECLSPEC_EXPORT
#   else
#       define ICEGRID_API ICE_DECLSPEC_IMPORT
#   endif
#endif

namespace IceGrid
{
    class FileParserPrx;

}

namespace IceGrid
{

/**
 * <code>icegridadmin</code> provides a {@link FileParser} object to transform XML files into
 * {@link ApplicationDescriptor} objects.
 */
class ICEGRID_API FileParserPrx : public ::Ice::Proxy<FileParserPrx, ::Ice::ObjectPrx>
{
public:

    /**
     * Parse a file.
     * @param xmlFile Full pathname to the file.
     * @param adminProxy An Admin proxy, used only to retrieve default templates when needed. May be null.
     * @param context The Context map to send with the invocation.
     * @return The application descriptor.
     * @throws IceGrid::ParseException Raised if an error occurred during parsing.
     */
    ApplicationDescriptor parse(::std::string_view xmlFile, const ::std::optional<AdminPrx>& adminProxy, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Parse a file.
     * @param xmlFile Full pathname to the file.
     * @param adminProxy An Admin proxy, used only to retrieve default templates when needed. May be null.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    [[nodiscard]] ::std::future<ApplicationDescriptor> parseAsync(::std::string_view xmlFile, const ::std::optional<AdminPrx>& adminProxy, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Parse a file.
     * @param xmlFile Full pathname to the file.
     * @param adminProxy An Admin proxy, used only to retrieve default templates when needed. May be null.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    parseAsync(::std::string_view xmlFile, const ::std::optional<AdminPrx>& adminProxy, ::std::function<void(::IceGrid::ApplicationDescriptor)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_parse(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<ApplicationDescriptor>>&, ::std::string_view, const ::std::optional<AdminPrx>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const char* ice_staticId() noexcept;
    FileParserPrx(const FileParserPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    FileParserPrx(FileParserPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    FileParserPrx(const ::Ice::CommunicatorPtr& communicator, std::string_view proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    FileParserPrx& operator=(const FileParserPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    FileParserPrx& operator=(FileParserPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static FileParserPrx _fromReference(::IceInternal::ReferencePtr ref) { return FileParserPrx(::std::move(ref)); }

protected:

    FileParserPrx() = default;

    explicit FileParserPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

}

namespace IceGrid
{

/**
 * This exception is raised if an error occurs during parsing.
 * \headerfile IceGrid/IceGrid.h
 */
class ICE_CLASS(ICEGRID_API) ParseException : public ::Ice::UserException
{
public:
    /**
     * Default constructor.
     */
    ParseException() noexcept = default;

    /**
     * One-shot constructor to initialize all data members.
     * @param reason The reason for the failure.
     */
    ParseException(::std::string reason) noexcept :
        reason(::std::move(reason))
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(reason);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(ICEGRID_API) static const char* ice_staticId() noexcept;

    ICE_MEMBER(ICEGRID_API) const char* ice_id() const noexcept override;

    ICE_MEMBER(ICEGRID_API) void ice_throw() const override;

    /**
     * The reason for the failure.
     */
    ::std::string reason;

protected:
    ICE_MEMBER(ICEGRID_API) void _writeImpl(::Ice::OutputStream*) const override;

    ICE_MEMBER(ICEGRID_API) void _readImpl(::Ice::InputStream*) override;
};

}

namespace IceGrid
{

/**
 * <code>icegridadmin</code> provides a {@link FileParser} object to transform XML files into
 * {@link ApplicationDescriptor} objects.
 */
class ICEGRID_API FileParser : public virtual ::Ice::Object
{
public:

    using ProxyType = FileParserPrx;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const char* ice_staticId() noexcept;

    /**
     * Parse a file.
     * @param xmlFile Full pathname to the file.
     * @param adminProxy An Admin proxy, used only to retrieve default templates when needed. May be null.
     * @param current The Current object for the invocation.
     * @return The application descriptor.
     * @throws IceGrid::ParseException Raised if an error occurred during parsing.
     */
    virtual ApplicationDescriptor parse(::std::string xmlFile, ::std::optional<AdminPrx> adminProxy, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_parse(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    /// \cond INTERNAL
    void dispatch(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>) override;
    /// \endcond
};

using FileParserPtr = ::std::shared_ptr<FileParser>;

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamReader<::IceGrid::ParseException>
{
    static void read(InputStream* istr, ::IceGrid::ParseException& v)
    {
        istr->readAll(v.reason);
    }
};

}
/// \endcond

#include <Ice/PopDisableWarnings.h>
#endif
