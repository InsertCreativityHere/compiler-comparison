//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `UserAccountMapper.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __UserAccountMapper_h__
#define __UserAccountMapper_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>
#include <IceGrid/Config.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

#ifndef ICEGRID_API
#   if defined(ICE_STATIC_LIBS)
#       define ICEGRID_API /**/
#   elif defined(ICEGRID_API_EXPORTS)
#       define ICEGRID_API ICE_DECLSPEC_EXPORT
#   else
#       define ICEGRID_API ICE_DECLSPEC_IMPORT
#   endif
#endif

namespace IceGrid
{

class UserAccountMapperPrx;

using UserAccountMapperPrxPtr = ::std::optional<UserAccountMapperPrx>;

}

namespace IceGrid
{

/**
 * A user account mapper object is used by IceGrid nodes to map session identifiers to user accounts.
 */
class ICEGRID_API UserAccountMapperPrx : public ::Ice::Proxy<UserAccountMapperPrx, ::Ice::ObjectPrx>
{
public:

    /**
     * Get the name of the user account for the given user. This is used by IceGrid nodes to figure out the user
     * account to use to run servers.
     * @param user The value of the server descriptor's <code>user</code> attribute. If this attribute is not
     * defined, and the server's activation mode is <code>session</code>, the default value of <code>user</code>
     * is the session identifier.
     * @param context The Context map to send with the invocation.
     * @return The user account name.
     * @throws IceGrid::UserAccountNotFoundException Raised if no user account is found for the given user.
     */
    ::std::string getUserAccount(::std::string_view user, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Get the name of the user account for the given user. This is used by IceGrid nodes to figure out the user
     * account to use to run servers.
     * @param user The value of the server descriptor's <code>user</code> attribute. If this attribute is not
     * defined, and the server's activation mode is <code>session</code>, the default value of <code>user</code>
     * is the session identifier.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<::std::string> getUserAccountAsync(::std::string_view user, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Get the name of the user account for the given user. This is used by IceGrid nodes to figure out the user
     * account to use to run servers.
     * @param user The value of the server descriptor's <code>user</code> attribute. If this attribute is not
     * defined, and the server's activation mode is <code>session</code>, the default value of <code>user</code>
     * is the session identifier.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    getUserAccountAsync(::std::string_view user, ::std::function<void(::std::string)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_getUserAccount(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, ::std::string_view, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    explicit UserAccountMapperPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    UserAccountMapperPrx(const UserAccountMapperPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    UserAccountMapperPrx(UserAccountMapperPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    UserAccountMapperPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    UserAccountMapperPrx& operator=(const UserAccountMapperPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    UserAccountMapperPrx& operator=(UserAccountMapperPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static UserAccountMapperPrx _fromReference(::IceInternal::ReferencePtr ref) { return UserAccountMapperPrx(::std::move(ref)); }

protected:

    UserAccountMapperPrx() = default;

    explicit UserAccountMapperPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

}

namespace IceGrid
{

/**
 * This exception is raised if a user account for a given session identifier can't be found.
 * \headerfile IceGrid/IceGrid.h
 */
class ICE_CLASS(ICEGRID_API) UserAccountNotFoundException : public ::Ice::UserExceptionHelper<UserAccountNotFoundException, ::Ice::UserException>
{
public:

    ICE_MEMBER(ICEGRID_API) virtual ~UserAccountNotFoundException();

    UserAccountNotFoundException(const UserAccountNotFoundException&) = default;

    UserAccountNotFoundException() = default;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(ICEGRID_API) static ::std::string_view ice_staticId();
};

/// \cond INTERNAL
static UserAccountNotFoundException _iceS_UserAccountNotFoundException_init;
/// \endcond

}

namespace IceGrid
{

/**
 * A user account mapper object is used by IceGrid nodes to map session identifiers to user accounts.
 */
class ICEGRID_API UserAccountMapper : public virtual ::Ice::Object
{
public:

    using ProxyType = UserAccountMapperPrx;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    /**
     * Get the name of the user account for the given user. This is used by IceGrid nodes to figure out the user
     * account to use to run servers.
     * @param user The value of the server descriptor's <code>user</code> attribute. If this attribute is not
     * defined, and the server's activation mode is <code>session</code>, the default value of <code>user</code>
     * is the session identifier.
     * @param current The Current object for the invocation.
     * @return The user account name.
     * @throws IceGrid::UserAccountNotFoundException Raised if no user account is found for the given user.
     */
    virtual ::std::string getUserAccount(::std::string user, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getUserAccount(::IceInternal::Incoming&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&) override;
    /// \endcond
};

using UserAccountMapperPtr = ::std::shared_ptr<UserAccountMapper>;

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
