//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Exception.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Exception_h__
#define __Exception_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <Ice/Identity.h>
#include <Ice/BuiltinSequences.h>
#include <IceUtil/UndefSysMacros.h>
#include <IceGrid/Config.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

#ifndef ICEGRID_API
#   if defined(ICE_STATIC_LIBS)
#       define ICEGRID_API /**/
#   elif defined(ICEGRID_API_EXPORTS)
#       define ICEGRID_API ICE_DECLSPEC_EXPORT
#   else
#       define ICEGRID_API ICE_DECLSPEC_IMPORT
#   endif
#endif

namespace IceGrid
{


}

namespace IceGrid
{

/**
 * This exception is raised if an application does not exist.
 * \headerfile IceGrid/IceGrid.h
 */
class ICE_CLASS(ICEGRID_API) ApplicationNotExistException : public ::Ice::UserExceptionHelper<ApplicationNotExistException, ::Ice::UserException>
{
public:

    ICE_MEMBER(ICEGRID_API) virtual ~ApplicationNotExistException();

    ApplicationNotExistException(const ApplicationNotExistException&) = default;

    ApplicationNotExistException() = default;

    /**
     * One-shot constructor to initialize all data members.
     * @param name The name of the application.
     */
    ApplicationNotExistException(const ::std::string& name) :
        name(name)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(name);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(ICEGRID_API) static const ::std::string& ice_staticId();

    /**
     * The name of the application.
     */
    ::std::string name;
};

/// \cond INTERNAL
static ApplicationNotExistException _iceS_ApplicationNotExistException_init;
/// \endcond

/**
 * This exception is raised if a server does not exist.
 * \headerfile IceGrid/IceGrid.h
 */
class ICE_CLASS(ICEGRID_API) ServerNotExistException : public ::Ice::UserExceptionHelper<ServerNotExistException, ::Ice::UserException>
{
public:

    ICE_MEMBER(ICEGRID_API) virtual ~ServerNotExistException();

    ServerNotExistException(const ServerNotExistException&) = default;

    ServerNotExistException() = default;

    /**
     * One-shot constructor to initialize all data members.
     * @param id The identifier of the server.
     */
    ServerNotExistException(const ::std::string& id) :
        id(id)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(id);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(ICEGRID_API) static const ::std::string& ice_staticId();

    /**
     * The identifier of the server.
     */
    ::std::string id;
};

/**
 * This exception is raised if a server failed to start.
 * \headerfile IceGrid/IceGrid.h
 */
class ICE_CLASS(ICEGRID_API) ServerStartException : public ::Ice::UserExceptionHelper<ServerStartException, ::Ice::UserException>
{
public:

    ICE_MEMBER(ICEGRID_API) virtual ~ServerStartException();

    ServerStartException(const ServerStartException&) = default;

    ServerStartException() = default;

    /**
     * One-shot constructor to initialize all data members.
     * @param id The identifier of the server.
     * @param reason The reason for the failure.
     */
    ServerStartException(const ::std::string& id, const ::std::string& reason) :
        id(id),
        reason(reason)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(id, reason);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(ICEGRID_API) static const ::std::string& ice_staticId();

    /**
     * The identifier of the server.
     */
    ::std::string id;
    /**
     * The reason for the failure.
     */
    ::std::string reason;
};

/**
 * This exception is raised if a server failed to stop.
 * \headerfile IceGrid/IceGrid.h
 */
class ICE_CLASS(ICEGRID_API) ServerStopException : public ::Ice::UserExceptionHelper<ServerStopException, ::Ice::UserException>
{
public:

    ICE_MEMBER(ICEGRID_API) virtual ~ServerStopException();

    ServerStopException(const ServerStopException&) = default;

    ServerStopException() = default;

    /**
     * One-shot constructor to initialize all data members.
     * @param id The identifier of the server.
     * @param reason The reason for the failure.
     */
    ServerStopException(const ::std::string& id, const ::std::string& reason) :
        id(id),
        reason(reason)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(id, reason);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(ICEGRID_API) static const ::std::string& ice_staticId();

    /**
     * The identifier of the server.
     */
    ::std::string id;
    /**
     * The reason for the failure.
     */
    ::std::string reason;
};

/**
 * This exception is raised if an adapter does not exist.
 * \headerfile IceGrid/IceGrid.h
 */
class ICE_CLASS(ICEGRID_API) AdapterNotExistException : public ::Ice::UserExceptionHelper<AdapterNotExistException, ::Ice::UserException>
{
public:

    ICE_MEMBER(ICEGRID_API) virtual ~AdapterNotExistException();

    AdapterNotExistException(const AdapterNotExistException&) = default;

    AdapterNotExistException() = default;

    /**
     * One-shot constructor to initialize all data members.
     * @param id The id of the object adapter.
     */
    AdapterNotExistException(const ::std::string& id) :
        id(id)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(id);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(ICEGRID_API) static const ::std::string& ice_staticId();

    /**
     * The id of the object adapter.
     */
    ::std::string id;
};

/**
 * This exception is raised if an object already exists.
 * \headerfile IceGrid/IceGrid.h
 */
class ICE_CLASS(ICEGRID_API) ObjectExistsException : public ::Ice::UserExceptionHelper<ObjectExistsException, ::Ice::UserException>
{
public:

    ICE_MEMBER(ICEGRID_API) virtual ~ObjectExistsException();

    ObjectExistsException(const ObjectExistsException&) = default;

    ObjectExistsException() = default;

    /**
     * One-shot constructor to initialize all data members.
     * @param id The identity of the object.
     */
    ObjectExistsException(const ::Ice::Identity& id) :
        id(id)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Ice::Identity&> ice_tuple() const
    {
        return std::tie(id);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(ICEGRID_API) static const ::std::string& ice_staticId();

    /**
     * The identity of the object.
     */
    ::Ice::Identity id;
};

/**
 * This exception is raised if an object is not registered.
 * \headerfile IceGrid/IceGrid.h
 */
class ICE_CLASS(ICEGRID_API) ObjectNotRegisteredException : public ::Ice::UserExceptionHelper<ObjectNotRegisteredException, ::Ice::UserException>
{
public:

    ICE_MEMBER(ICEGRID_API) virtual ~ObjectNotRegisteredException();

    ObjectNotRegisteredException(const ObjectNotRegisteredException&) = default;

    ObjectNotRegisteredException() = default;

    /**
     * One-shot constructor to initialize all data members.
     * @param id The identity of the object.
     */
    ObjectNotRegisteredException(const ::Ice::Identity& id) :
        id(id)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Ice::Identity&> ice_tuple() const
    {
        return std::tie(id);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(ICEGRID_API) static const ::std::string& ice_staticId();

    /**
     * The identity of the object.
     */
    ::Ice::Identity id;
};

/**
 * This exception is raised if a node does not exist.
 * \headerfile IceGrid/IceGrid.h
 */
class ICE_CLASS(ICEGRID_API) NodeNotExistException : public ::Ice::UserExceptionHelper<NodeNotExistException, ::Ice::UserException>
{
public:

    ICE_MEMBER(ICEGRID_API) virtual ~NodeNotExistException();

    NodeNotExistException(const NodeNotExistException&) = default;

    NodeNotExistException() = default;

    /**
     * One-shot constructor to initialize all data members.
     * @param name The node name.
     */
    NodeNotExistException(const ::std::string& name) :
        name(name)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(name);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(ICEGRID_API) static const ::std::string& ice_staticId();

    /**
     * The node name.
     */
    ::std::string name;
};

/**
 * This exception is raised if a registry does not exist.
 * \headerfile IceGrid/IceGrid.h
 */
class ICE_CLASS(ICEGRID_API) RegistryNotExistException : public ::Ice::UserExceptionHelper<RegistryNotExistException, ::Ice::UserException>
{
public:

    ICE_MEMBER(ICEGRID_API) virtual ~RegistryNotExistException();

    RegistryNotExistException(const RegistryNotExistException&) = default;

    RegistryNotExistException() = default;

    /**
     * One-shot constructor to initialize all data members.
     * @param name The registry name.
     */
    RegistryNotExistException(const ::std::string& name) :
        name(name)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(name);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(ICEGRID_API) static const ::std::string& ice_staticId();

    /**
     * The registry name.
     */
    ::std::string name;
};

/**
 * An exception for deployment errors.
 * \headerfile IceGrid/IceGrid.h
 */
class ICE_CLASS(ICEGRID_API) DeploymentException : public ::Ice::UserExceptionHelper<DeploymentException, ::Ice::UserException>
{
public:

    ICE_MEMBER(ICEGRID_API) virtual ~DeploymentException();

    DeploymentException(const DeploymentException&) = default;

    DeploymentException() = default;

    /**
     * One-shot constructor to initialize all data members.
     * @param reason The reason for the failure.
     */
    DeploymentException(const ::std::string& reason) :
        reason(reason)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(reason);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(ICEGRID_API) static const ::std::string& ice_staticId();

    /**
     * The reason for the failure.
     */
    ::std::string reason;
};

/**
 * This exception is raised if a node could not be reached.
 * \headerfile IceGrid/IceGrid.h
 */
class ICE_CLASS(ICEGRID_API) NodeUnreachableException : public ::Ice::UserExceptionHelper<NodeUnreachableException, ::Ice::UserException>
{
public:

    ICE_MEMBER(ICEGRID_API) virtual ~NodeUnreachableException();

    NodeUnreachableException(const NodeUnreachableException&) = default;

    NodeUnreachableException() = default;

    /**
     * One-shot constructor to initialize all data members.
     * @param name The name of the node that is not reachable.
     * @param reason The reason why the node couldn't be reached.
     */
    NodeUnreachableException(const ::std::string& name, const ::std::string& reason) :
        name(name),
        reason(reason)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(name, reason);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(ICEGRID_API) static const ::std::string& ice_staticId();

    /**
     * The name of the node that is not reachable.
     */
    ::std::string name;
    /**
     * The reason why the node couldn't be reached.
     */
    ::std::string reason;
};

/**
 * This exception is raised if a server could not be reached.
 * \headerfile IceGrid/IceGrid.h
 */
class ICE_CLASS(ICEGRID_API) ServerUnreachableException : public ::Ice::UserExceptionHelper<ServerUnreachableException, ::Ice::UserException>
{
public:

    ICE_MEMBER(ICEGRID_API) virtual ~ServerUnreachableException();

    ServerUnreachableException(const ServerUnreachableException&) = default;

    ServerUnreachableException() = default;

    /**
     * One-shot constructor to initialize all data members.
     * @param name The id of the server that is not reachable.
     * @param reason The reason why the server couldn't be reached.
     */
    ServerUnreachableException(const ::std::string& name, const ::std::string& reason) :
        name(name),
        reason(reason)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(name, reason);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(ICEGRID_API) static const ::std::string& ice_staticId();

    /**
     * The id of the server that is not reachable.
     */
    ::std::string name;
    /**
     * The reason why the server couldn't be reached.
     */
    ::std::string reason;
};

/**
 * This exception is raised if a registry could not be reached.
 * \headerfile IceGrid/IceGrid.h
 */
class ICE_CLASS(ICEGRID_API) RegistryUnreachableException : public ::Ice::UserExceptionHelper<RegistryUnreachableException, ::Ice::UserException>
{
public:

    ICE_MEMBER(ICEGRID_API) virtual ~RegistryUnreachableException();

    RegistryUnreachableException(const RegistryUnreachableException&) = default;

    RegistryUnreachableException() = default;

    /**
     * One-shot constructor to initialize all data members.
     * @param name The name of the registry that is not reachable.
     * @param reason The reason why the registry couldn't be reached.
     */
    RegistryUnreachableException(const ::std::string& name, const ::std::string& reason) :
        name(name),
        reason(reason)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(name, reason);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(ICEGRID_API) static const ::std::string& ice_staticId();

    /**
     * The name of the registry that is not reachable.
     */
    ::std::string name;
    /**
     * The reason why the registry couldn't be reached.
     */
    ::std::string reason;
};

/**
 * This exception is raised if an unknown signal was sent to to a server.
 * \headerfile IceGrid/IceGrid.h
 */
class ICE_CLASS(ICEGRID_API) BadSignalException : public ::Ice::UserExceptionHelper<BadSignalException, ::Ice::UserException>
{
public:

    ICE_MEMBER(ICEGRID_API) virtual ~BadSignalException();

    BadSignalException(const BadSignalException&) = default;

    BadSignalException() = default;

    /**
     * One-shot constructor to initialize all data members.
     * @param reason The details of the unknown signal.
     */
    BadSignalException(const ::std::string& reason) :
        reason(reason)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(reason);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(ICEGRID_API) static const ::std::string& ice_staticId();

    /**
     * The details of the unknown signal.
     */
    ::std::string reason;
};

/**
 * This exception is raised if a patch failed.
 * \headerfile IceGrid/IceGrid.h
 */
class ICE_CLASS(ICEGRID_API) PatchException : public ::Ice::UserExceptionHelper<PatchException, ::Ice::UserException>
{
public:

    ICE_MEMBER(ICEGRID_API) virtual ~PatchException();

    PatchException(const PatchException&) = default;

    PatchException() = default;

    /**
     * One-shot constructor to initialize all data members.
     * @param reasons The reasons why the patch failed.
     */
    PatchException(const ::Ice::StringSeq& reasons) :
        reasons(reasons)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Ice::StringSeq&> ice_tuple() const
    {
        return std::tie(reasons);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(ICEGRID_API) static const ::std::string& ice_staticId();

    /**
     * The reasons why the patch failed.
     */
    ::Ice::StringSeq reasons;
};

/**
 * his exception is raised if a registry lock wasn't acquired or is already held by a session.
 * \headerfile IceGrid/IceGrid.h
 */
class ICE_CLASS(ICEGRID_API) AccessDeniedException : public ::Ice::UserExceptionHelper<AccessDeniedException, ::Ice::UserException>
{
public:

    ICE_MEMBER(ICEGRID_API) virtual ~AccessDeniedException();

    AccessDeniedException(const AccessDeniedException&) = default;

    AccessDeniedException() = default;

    /**
     * One-shot constructor to initialize all data members.
     * @param lockUserId The id of the user holding the lock (if any).
     */
    AccessDeniedException(const ::std::string& lockUserId) :
        lockUserId(lockUserId)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(lockUserId);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(ICEGRID_API) static const ::std::string& ice_staticId();

    /**
     * The id of the user holding the lock (if any).
     */
    ::std::string lockUserId;
};

/**
 * This exception is raised if the allocation of an object failed.
 * \headerfile IceGrid/IceGrid.h
 */
class ICE_CLASS(ICEGRID_API) AllocationException : public ::Ice::UserExceptionHelper<AllocationException, ::Ice::UserException>
{
public:

    ICE_MEMBER(ICEGRID_API) virtual ~AllocationException();

    AllocationException(const AllocationException&) = default;

    AllocationException() = default;

    /**
     * One-shot constructor to initialize all data members.
     * @param reason The reason why the object couldn't be allocated.
     */
    AllocationException(const ::std::string& reason) :
        reason(reason)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(reason);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(ICEGRID_API) static const ::std::string& ice_staticId();

    /**
     * The reason why the object couldn't be allocated.
     */
    ::std::string reason;
};

/**
 * This exception is raised if the request to allocate an object times out.
 * \headerfile IceGrid/IceGrid.h
 */
class ICE_CLASS(ICEGRID_API) AllocationTimeoutException : public ::Ice::UserExceptionHelper<AllocationTimeoutException, AllocationException>
{
public:

    ICE_MEMBER(ICEGRID_API) virtual ~AllocationTimeoutException();

    AllocationTimeoutException(const AllocationTimeoutException&) = default;

    AllocationTimeoutException() = default;

    /**
     * One-shot constructor to initialize all data members.
     * @param reason The reason why the object couldn't be allocated.
     */
    AllocationTimeoutException(const ::std::string& reason) :
        ::Ice::UserExceptionHelper<AllocationTimeoutException, AllocationException>(reason)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(reason);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(ICEGRID_API) static const ::std::string& ice_staticId();
};

/**
 * This exception is raised if a client is denied the ability to create a session with IceGrid.
 * \headerfile IceGrid/IceGrid.h
 */
class ICE_CLASS(ICEGRID_API) PermissionDeniedException : public ::Ice::UserExceptionHelper<PermissionDeniedException, ::Ice::UserException>
{
public:

    ICE_MEMBER(ICEGRID_API) virtual ~PermissionDeniedException();

    PermissionDeniedException(const PermissionDeniedException&) = default;

    PermissionDeniedException() = default;

    /**
     * One-shot constructor to initialize all data members.
     * @param reason The reason why permission was denied.
     */
    PermissionDeniedException(const ::std::string& reason) :
        reason(reason)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(reason);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(ICEGRID_API) static const ::std::string& ice_staticId();

    /**
     * The reason why permission was denied.
     */
    ::std::string reason;
};

/**
 * This exception is raised if an observer is already registered with the registry.
 * @see AdminSession#setObservers
 * @see AdminSession#setObserversByIdentity
 * \headerfile IceGrid/IceGrid.h
 */
class ICE_CLASS(ICEGRID_API) ObserverAlreadyRegisteredException : public ::Ice::UserExceptionHelper<ObserverAlreadyRegisteredException, ::Ice::UserException>
{
public:

    ICE_MEMBER(ICEGRID_API) virtual ~ObserverAlreadyRegisteredException();

    ObserverAlreadyRegisteredException(const ObserverAlreadyRegisteredException&) = default;

    ObserverAlreadyRegisteredException() = default;

    /**
     * One-shot constructor to initialize all data members.
     * @param id The identity of the observer.
     */
    ObserverAlreadyRegisteredException(const ::Ice::Identity& id) :
        id(id)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Ice::Identity&> ice_tuple() const
    {
        return std::tie(id);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(ICEGRID_API) static const ::std::string& ice_staticId();

    /**
     * The identity of the observer.
     */
    ::Ice::Identity id;
};

/**
 * This exception is raised if a file is not available.
 * @see AdminSession#openServerStdOut
 * @see AdminSession#openServerStdErr
 * @see AdminSession#openNodeStdOut
 * @see AdminSession#openNodeStdErr
 * @see AdminSession#openRegistryStdOut
 * @see AdminSession#openRegistryStdErr
 * \headerfile IceGrid/IceGrid.h
 */
class ICE_CLASS(ICEGRID_API) FileNotAvailableException : public ::Ice::UserExceptionHelper<FileNotAvailableException, ::Ice::UserException>
{
public:

    ICE_MEMBER(ICEGRID_API) virtual ~FileNotAvailableException();

    FileNotAvailableException(const FileNotAvailableException&) = default;

    FileNotAvailableException() = default;

    /**
     * One-shot constructor to initialize all data members.
     * @param reason The reason for the failure.
     */
    FileNotAvailableException(const ::std::string& reason) :
        reason(reason)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(reason);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    ICE_MEMBER(ICEGRID_API) static const ::std::string& ice_staticId();

    /**
     * The reason for the failure.
     */
    ::std::string reason;
};

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamReader<::IceGrid::ApplicationNotExistException, S>
{
    static void read(S* istr, ::IceGrid::ApplicationNotExistException& v)
    {
        istr->readAll(v.name);
    }
};

template<typename S>
struct StreamReader<::IceGrid::ServerNotExistException, S>
{
    static void read(S* istr, ::IceGrid::ServerNotExistException& v)
    {
        istr->readAll(v.id);
    }
};

template<typename S>
struct StreamReader<::IceGrid::ServerStartException, S>
{
    static void read(S* istr, ::IceGrid::ServerStartException& v)
    {
        istr->readAll(v.id, v.reason);
    }
};

template<typename S>
struct StreamReader<::IceGrid::ServerStopException, S>
{
    static void read(S* istr, ::IceGrid::ServerStopException& v)
    {
        istr->readAll(v.id, v.reason);
    }
};

template<typename S>
struct StreamReader<::IceGrid::AdapterNotExistException, S>
{
    static void read(S* istr, ::IceGrid::AdapterNotExistException& v)
    {
        istr->readAll(v.id);
    }
};

template<typename S>
struct StreamReader<::IceGrid::ObjectExistsException, S>
{
    static void read(S* istr, ::IceGrid::ObjectExistsException& v)
    {
        istr->readAll(v.id);
    }
};

template<typename S>
struct StreamReader<::IceGrid::ObjectNotRegisteredException, S>
{
    static void read(S* istr, ::IceGrid::ObjectNotRegisteredException& v)
    {
        istr->readAll(v.id);
    }
};

template<typename S>
struct StreamReader<::IceGrid::NodeNotExistException, S>
{
    static void read(S* istr, ::IceGrid::NodeNotExistException& v)
    {
        istr->readAll(v.name);
    }
};

template<typename S>
struct StreamReader<::IceGrid::RegistryNotExistException, S>
{
    static void read(S* istr, ::IceGrid::RegistryNotExistException& v)
    {
        istr->readAll(v.name);
    }
};

template<typename S>
struct StreamReader<::IceGrid::DeploymentException, S>
{
    static void read(S* istr, ::IceGrid::DeploymentException& v)
    {
        istr->readAll(v.reason);
    }
};

template<typename S>
struct StreamReader<::IceGrid::NodeUnreachableException, S>
{
    static void read(S* istr, ::IceGrid::NodeUnreachableException& v)
    {
        istr->readAll(v.name, v.reason);
    }
};

template<typename S>
struct StreamReader<::IceGrid::ServerUnreachableException, S>
{
    static void read(S* istr, ::IceGrid::ServerUnreachableException& v)
    {
        istr->readAll(v.name, v.reason);
    }
};

template<typename S>
struct StreamReader<::IceGrid::RegistryUnreachableException, S>
{
    static void read(S* istr, ::IceGrid::RegistryUnreachableException& v)
    {
        istr->readAll(v.name, v.reason);
    }
};

template<typename S>
struct StreamReader<::IceGrid::BadSignalException, S>
{
    static void read(S* istr, ::IceGrid::BadSignalException& v)
    {
        istr->readAll(v.reason);
    }
};

template<typename S>
struct StreamReader<::IceGrid::PatchException, S>
{
    static void read(S* istr, ::IceGrid::PatchException& v)
    {
        istr->readAll(v.reasons);
    }
};

template<typename S>
struct StreamReader<::IceGrid::AccessDeniedException, S>
{
    static void read(S* istr, ::IceGrid::AccessDeniedException& v)
    {
        istr->readAll(v.lockUserId);
    }
};

template<typename S>
struct StreamReader<::IceGrid::AllocationException, S>
{
    static void read(S* istr, ::IceGrid::AllocationException& v)
    {
        istr->readAll(v.reason);
    }
};

template<typename S>
struct StreamWriter<::IceGrid::AllocationTimeoutException, S>
{
    static void write(S*, const ::IceGrid::AllocationTimeoutException&)
    {
    }
};

template<typename S>
struct StreamReader<::IceGrid::AllocationTimeoutException, S>
{
    static void read(S*, ::IceGrid::AllocationTimeoutException&)
    {
    }
};

template<typename S>
struct StreamReader<::IceGrid::PermissionDeniedException, S>
{
    static void read(S* istr, ::IceGrid::PermissionDeniedException& v)
    {
        istr->readAll(v.reason);
    }
};

template<typename S>
struct StreamReader<::IceGrid::ObserverAlreadyRegisteredException, S>
{
    static void read(S* istr, ::IceGrid::ObserverAlreadyRegisteredException& v)
    {
        istr->readAll(v.id);
    }
};

template<typename S>
struct StreamReader<::IceGrid::FileNotAvailableException, S>
{
    static void read(S* istr, ::IceGrid::FileNotAvailableException& v)
    {
        istr->readAll(v.reason);
    }
};

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
