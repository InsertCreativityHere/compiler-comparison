//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Registry.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ICEGRID_API_EXPORTS
#   define ICEGRID_API_EXPORTS
#endif
#define ICE_BUILDING_GENERATED_CODE
#include <Registry.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::std::string iceC_IceGrid_Query_ids[2] =
{
    "::Ice::Object",
    "::IceGrid::Query"
};
const ::std::string iceC_IceGrid_Query_ops[] =
{
    "findAllObjectsByType",
    "findAllReplicas",
    "findObjectById",
    "findObjectByType",
    "findObjectByTypeOnLeastLoadedNode",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_IceGrid_Query_findObjectById_name = "findObjectById";
const ::std::string iceC_IceGrid_Query_findObjectByType_name = "findObjectByType";
const ::std::string iceC_IceGrid_Query_findObjectByTypeOnLeastLoadedNode_name = "findObjectByTypeOnLeastLoadedNode";
const ::std::string iceC_IceGrid_Query_findAllObjectsByType_name = "findAllObjectsByType";
const ::std::string iceC_IceGrid_Query_findAllReplicas_name = "findAllReplicas";

const ::std::string iceC_IceGrid_Registry_ids[2] =
{
    "::Ice::Object",
    "::IceGrid::Registry"
};
const ::std::string iceC_IceGrid_Registry_ops[] =
{
    "createAdminSession",
    "createAdminSessionFromSecureConnection",
    "createSession",
    "createSessionFromSecureConnection",
    "getACMTimeout",
    "getSessionTimeout",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_IceGrid_Registry_createSession_name = "createSession";
const ::std::string iceC_IceGrid_Registry_createAdminSession_name = "createAdminSession";
const ::std::string iceC_IceGrid_Registry_createSessionFromSecureConnection_name = "createSessionFromSecureConnection";
const ::std::string iceC_IceGrid_Registry_createAdminSessionFromSecureConnection_name = "createAdminSessionFromSecureConnection";
const ::std::string iceC_IceGrid_Registry_getSessionTimeout_name = "getSessionTimeout";
const ::std::string iceC_IceGrid_Registry_getACMTimeout_name = "getACMTimeout";

const ::std::string iceC_IceGrid_Locator_ids[3] =
{
    "::Ice::Locator",
    "::Ice::Object",
    "::IceGrid::Locator"
};
const ::std::string iceC_IceGrid_Locator_ops[] =
{
    "findAdapterById",
    "findObjectById",
    "getLocalQuery",
    "getLocalRegistry",
    "getRegistry",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_IceGrid_Locator_getLocalRegistry_name = "getLocalRegistry";
const ::std::string iceC_IceGrid_Locator_getLocalQuery_name = "getLocalQuery";

}

::std::optional<::Ice::ObjectPrx>
IceGrid::QueryPrx::findObjectById(const ::Ice::Identity& iceP_id, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::optional<::Ice::ObjectPrx>>(true, this, &QueryPrx::_iceI_findObjectById, iceP_id, context).get();
}

::std::future<::std::optional<::Ice::ObjectPrx>>
IceGrid::QueryPrx::findObjectByIdAsync(const ::Ice::Identity& iceP_id, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::optional<::Ice::ObjectPrx>, ::std::promise>(false, this, &QueryPrx::_iceI_findObjectById, iceP_id, context);
}

::std::function<void()>
IceGrid::QueryPrx::findObjectByIdAsync(const ::Ice::Identity& iceP_id,
                                       ::std::function<void (::std::optional<::Ice::ObjectPrx>)> response,
                                       ::std::function<void(::std::exception_ptr)> ex,
                                       ::std::function<void(bool)> sent,
                                       const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<::std::optional<::Ice::ObjectPrx>>(std::move(response), std::move(ex), std::move(sent), this, &IceGrid::QueryPrx::_iceI_findObjectById, iceP_id, context);
}

/// \cond INTERNAL
void
IceGrid::QueryPrx::_iceI_findObjectById(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<::Ice::ObjectPrx>>>& outAsync, const ::Ice::Identity& iceP_id, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_IceGrid_Query_findObjectById_name);
    outAsync->invoke(iceC_IceGrid_Query_findObjectById_name, ::Ice::OperationMode::Nonmutating, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_id);
        },
        nullptr);
}
/// \endcond

::std::optional<::Ice::ObjectPrx>
IceGrid::QueryPrx::findObjectByType(const ::std::string& iceP_type, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::optional<::Ice::ObjectPrx>>(true, this, &QueryPrx::_iceI_findObjectByType, iceP_type, context).get();
}

::std::future<::std::optional<::Ice::ObjectPrx>>
IceGrid::QueryPrx::findObjectByTypeAsync(const ::std::string& iceP_type, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::optional<::Ice::ObjectPrx>, ::std::promise>(false, this, &QueryPrx::_iceI_findObjectByType, iceP_type, context);
}

::std::function<void()>
IceGrid::QueryPrx::findObjectByTypeAsync(const ::std::string& iceP_type,
                                         ::std::function<void (::std::optional<::Ice::ObjectPrx>)> response,
                                         ::std::function<void(::std::exception_ptr)> ex,
                                         ::std::function<void(bool)> sent,
                                         const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<::std::optional<::Ice::ObjectPrx>>(std::move(response), std::move(ex), std::move(sent), this, &IceGrid::QueryPrx::_iceI_findObjectByType, iceP_type, context);
}

/// \cond INTERNAL
void
IceGrid::QueryPrx::_iceI_findObjectByType(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<::Ice::ObjectPrx>>>& outAsync, const ::std::string& iceP_type, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_IceGrid_Query_findObjectByType_name);
    outAsync->invoke(iceC_IceGrid_Query_findObjectByType_name, ::Ice::OperationMode::Nonmutating, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_type);
        },
        nullptr);
}
/// \endcond

::std::optional<::Ice::ObjectPrx>
IceGrid::QueryPrx::findObjectByTypeOnLeastLoadedNode(const ::std::string& iceP_type, LoadSample iceP_sample, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::optional<::Ice::ObjectPrx>>(true, this, &QueryPrx::_iceI_findObjectByTypeOnLeastLoadedNode, iceP_type, iceP_sample, context).get();
}

::std::future<::std::optional<::Ice::ObjectPrx>>
IceGrid::QueryPrx::findObjectByTypeOnLeastLoadedNodeAsync(const ::std::string& iceP_type, LoadSample iceP_sample, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::optional<::Ice::ObjectPrx>, ::std::promise>(false, this, &QueryPrx::_iceI_findObjectByTypeOnLeastLoadedNode, iceP_type, iceP_sample, context);
}

::std::function<void()>
IceGrid::QueryPrx::findObjectByTypeOnLeastLoadedNodeAsync(const ::std::string& iceP_type, LoadSample iceP_sample,
                                                          ::std::function<void (::std::optional<::Ice::ObjectPrx>)> response,
                                                          ::std::function<void(::std::exception_ptr)> ex,
                                                          ::std::function<void(bool)> sent,
                                                          const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<::std::optional<::Ice::ObjectPrx>>(std::move(response), std::move(ex), std::move(sent), this, &IceGrid::QueryPrx::_iceI_findObjectByTypeOnLeastLoadedNode, iceP_type, iceP_sample, context);
}

/// \cond INTERNAL
void
IceGrid::QueryPrx::_iceI_findObjectByTypeOnLeastLoadedNode(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<::Ice::ObjectPrx>>>& outAsync, const ::std::string& iceP_type, LoadSample iceP_sample, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_IceGrid_Query_findObjectByTypeOnLeastLoadedNode_name);
    outAsync->invoke(iceC_IceGrid_Query_findObjectByTypeOnLeastLoadedNode_name, ::Ice::OperationMode::Nonmutating, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_type, iceP_sample);
        },
        nullptr);
}
/// \endcond

::Ice::ObjectProxySeq
IceGrid::QueryPrx::findAllObjectsByType(const ::std::string& iceP_type, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::Ice::ObjectProxySeq>(true, this, &QueryPrx::_iceI_findAllObjectsByType, iceP_type, context).get();
}

::std::future<::Ice::ObjectProxySeq>
IceGrid::QueryPrx::findAllObjectsByTypeAsync(const ::std::string& iceP_type, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::Ice::ObjectProxySeq, ::std::promise>(false, this, &QueryPrx::_iceI_findAllObjectsByType, iceP_type, context);
}

::std::function<void()>
IceGrid::QueryPrx::findAllObjectsByTypeAsync(const ::std::string& iceP_type,
                                             ::std::function<void (::Ice::ObjectProxySeq)> response,
                                             ::std::function<void(::std::exception_ptr)> ex,
                                             ::std::function<void(bool)> sent,
                                             const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<::Ice::ObjectProxySeq>(std::move(response), std::move(ex), std::move(sent), this, &IceGrid::QueryPrx::_iceI_findAllObjectsByType, iceP_type, context);
}

/// \cond INTERNAL
void
IceGrid::QueryPrx::_iceI_findAllObjectsByType(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Ice::ObjectProxySeq>>& outAsync, const ::std::string& iceP_type, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_IceGrid_Query_findAllObjectsByType_name);
    outAsync->invoke(iceC_IceGrid_Query_findAllObjectsByType_name, ::Ice::OperationMode::Nonmutating, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_type);
        },
        nullptr);
}
/// \endcond

::Ice::ObjectProxySeq
IceGrid::QueryPrx::findAllReplicas(const ::std::optional<::Ice::ObjectPrx>& iceP_proxy, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::Ice::ObjectProxySeq>(true, this, &QueryPrx::_iceI_findAllReplicas, iceP_proxy, context).get();
}

::std::future<::Ice::ObjectProxySeq>
IceGrid::QueryPrx::findAllReplicasAsync(const ::std::optional<::Ice::ObjectPrx>& iceP_proxy, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::Ice::ObjectProxySeq, ::std::promise>(false, this, &QueryPrx::_iceI_findAllReplicas, iceP_proxy, context);
}

::std::function<void()>
IceGrid::QueryPrx::findAllReplicasAsync(const ::std::optional<::Ice::ObjectPrx>& iceP_proxy,
                                        ::std::function<void (::Ice::ObjectProxySeq)> response,
                                        ::std::function<void(::std::exception_ptr)> ex,
                                        ::std::function<void(bool)> sent,
                                        const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<::Ice::ObjectProxySeq>(std::move(response), std::move(ex), std::move(sent), this, &IceGrid::QueryPrx::_iceI_findAllReplicas, iceP_proxy, context);
}

/// \cond INTERNAL
void
IceGrid::QueryPrx::_iceI_findAllReplicas(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Ice::ObjectProxySeq>>& outAsync, const ::std::optional<::Ice::ObjectPrx>& iceP_proxy, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_IceGrid_Query_findAllReplicas_name);
    outAsync->invoke(iceC_IceGrid_Query_findAllReplicas_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_proxy);
        },
        nullptr);
}
/// \endcond

const ::std::string&
IceGrid::QueryPrx::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::Query";
    return typeId;
}

::std::optional<::IceGrid::SessionPrx>
IceGrid::RegistryPrx::createSession(const ::std::string& iceP_userId, const ::std::string& iceP_password, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::optional<SessionPrx>>(true, this, &RegistryPrx::_iceI_createSession, iceP_userId, iceP_password, context).get();
}

::std::future<::std::optional<::IceGrid::SessionPrx>>
IceGrid::RegistryPrx::createSessionAsync(const ::std::string& iceP_userId, const ::std::string& iceP_password, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::optional<SessionPrx>, ::std::promise>(false, this, &RegistryPrx::_iceI_createSession, iceP_userId, iceP_password, context);
}

::std::function<void()>
IceGrid::RegistryPrx::createSessionAsync(const ::std::string& iceP_userId, const ::std::string& iceP_password,
                                         ::std::function<void (::std::optional<::IceGrid::SessionPrx>)> response,
                                         ::std::function<void(::std::exception_ptr)> ex,
                                         ::std::function<void(bool)> sent,
                                         const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<::std::optional<SessionPrx>>(std::move(response), std::move(ex), std::move(sent), this, &IceGrid::RegistryPrx::_iceI_createSession, iceP_userId, iceP_password, context);
}

/// \cond INTERNAL
void
IceGrid::RegistryPrx::_iceI_createSession(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<SessionPrx>>>& outAsync, const ::std::string& iceP_userId, const ::std::string& iceP_password, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_IceGrid_Registry_createSession_name);
    outAsync->invoke(iceC_IceGrid_Registry_createSession_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_userId, iceP_password);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const PermissionDeniedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

::std::optional<::IceGrid::AdminSessionPrx>
IceGrid::RegistryPrx::createAdminSession(const ::std::string& iceP_userId, const ::std::string& iceP_password, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::optional<AdminSessionPrx>>(true, this, &RegistryPrx::_iceI_createAdminSession, iceP_userId, iceP_password, context).get();
}

::std::future<::std::optional<::IceGrid::AdminSessionPrx>>
IceGrid::RegistryPrx::createAdminSessionAsync(const ::std::string& iceP_userId, const ::std::string& iceP_password, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::optional<AdminSessionPrx>, ::std::promise>(false, this, &RegistryPrx::_iceI_createAdminSession, iceP_userId, iceP_password, context);
}

::std::function<void()>
IceGrid::RegistryPrx::createAdminSessionAsync(const ::std::string& iceP_userId, const ::std::string& iceP_password,
                                              ::std::function<void (::std::optional<::IceGrid::AdminSessionPrx>)> response,
                                              ::std::function<void(::std::exception_ptr)> ex,
                                              ::std::function<void(bool)> sent,
                                              const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<::std::optional<AdminSessionPrx>>(std::move(response), std::move(ex), std::move(sent), this, &IceGrid::RegistryPrx::_iceI_createAdminSession, iceP_userId, iceP_password, context);
}

/// \cond INTERNAL
void
IceGrid::RegistryPrx::_iceI_createAdminSession(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<AdminSessionPrx>>>& outAsync, const ::std::string& iceP_userId, const ::std::string& iceP_password, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_IceGrid_Registry_createAdminSession_name);
    outAsync->invoke(iceC_IceGrid_Registry_createAdminSession_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_userId, iceP_password);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const PermissionDeniedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

::std::optional<::IceGrid::SessionPrx>
IceGrid::RegistryPrx::createSessionFromSecureConnection(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::optional<SessionPrx>>(true, this, &RegistryPrx::_iceI_createSessionFromSecureConnection, context).get();
}

::std::future<::std::optional<::IceGrid::SessionPrx>>
IceGrid::RegistryPrx::createSessionFromSecureConnectionAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::optional<SessionPrx>, ::std::promise>(false, this, &RegistryPrx::_iceI_createSessionFromSecureConnection, context);
}

::std::function<void()>
IceGrid::RegistryPrx::createSessionFromSecureConnectionAsync(::std::function<void (::std::optional<::IceGrid::SessionPrx>)> response,
                                                             ::std::function<void(::std::exception_ptr)> ex,
                                                             ::std::function<void(bool)> sent,
                                                             const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<::std::optional<SessionPrx>>(std::move(response), std::move(ex), std::move(sent), this, &IceGrid::RegistryPrx::_iceI_createSessionFromSecureConnection, context);
}

/// \cond INTERNAL
void
IceGrid::RegistryPrx::_iceI_createSessionFromSecureConnection(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<SessionPrx>>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_IceGrid_Registry_createSessionFromSecureConnection_name);
    outAsync->invoke(iceC_IceGrid_Registry_createSessionFromSecureConnection_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const PermissionDeniedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

::std::optional<::IceGrid::AdminSessionPrx>
IceGrid::RegistryPrx::createAdminSessionFromSecureConnection(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::optional<AdminSessionPrx>>(true, this, &RegistryPrx::_iceI_createAdminSessionFromSecureConnection, context).get();
}

::std::future<::std::optional<::IceGrid::AdminSessionPrx>>
IceGrid::RegistryPrx::createAdminSessionFromSecureConnectionAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::optional<AdminSessionPrx>, ::std::promise>(false, this, &RegistryPrx::_iceI_createAdminSessionFromSecureConnection, context);
}

::std::function<void()>
IceGrid::RegistryPrx::createAdminSessionFromSecureConnectionAsync(::std::function<void (::std::optional<::IceGrid::AdminSessionPrx>)> response,
                                                                  ::std::function<void(::std::exception_ptr)> ex,
                                                                  ::std::function<void(bool)> sent,
                                                                  const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<::std::optional<AdminSessionPrx>>(std::move(response), std::move(ex), std::move(sent), this, &IceGrid::RegistryPrx::_iceI_createAdminSessionFromSecureConnection, context);
}

/// \cond INTERNAL
void
IceGrid::RegistryPrx::_iceI_createAdminSessionFromSecureConnection(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<AdminSessionPrx>>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_IceGrid_Registry_createAdminSessionFromSecureConnection_name);
    outAsync->invoke(iceC_IceGrid_Registry_createAdminSessionFromSecureConnection_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const PermissionDeniedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

::std::int32_t
IceGrid::RegistryPrx::getSessionTimeout(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::int32_t>(true, this, &RegistryPrx::_iceI_getSessionTimeout, context).get();
}

::std::future<::std::int32_t>
IceGrid::RegistryPrx::getSessionTimeoutAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::int32_t, ::std::promise>(false, this, &RegistryPrx::_iceI_getSessionTimeout, context);
}

::std::function<void()>
IceGrid::RegistryPrx::getSessionTimeoutAsync(::std::function<void (::std::int32_t)> response,
                                             ::std::function<void(::std::exception_ptr)> ex,
                                             ::std::function<void(bool)> sent,
                                             const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<::std::int32_t>(std::move(response), std::move(ex), std::move(sent), this, &IceGrid::RegistryPrx::_iceI_getSessionTimeout, context);
}

/// \cond INTERNAL
void
IceGrid::RegistryPrx::_iceI_getSessionTimeout(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::int32_t>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_IceGrid_Registry_getSessionTimeout_name);
    outAsync->invoke(iceC_IceGrid_Registry_getSessionTimeout_name, ::Ice::OperationMode::Nonmutating, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

::std::int32_t
IceGrid::RegistryPrx::getACMTimeout(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::int32_t>(true, this, &RegistryPrx::_iceI_getACMTimeout, context).get();
}

::std::future<::std::int32_t>
IceGrid::RegistryPrx::getACMTimeoutAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::int32_t, ::std::promise>(false, this, &RegistryPrx::_iceI_getACMTimeout, context);
}

::std::function<void()>
IceGrid::RegistryPrx::getACMTimeoutAsync(::std::function<void (::std::int32_t)> response,
                                         ::std::function<void(::std::exception_ptr)> ex,
                                         ::std::function<void(bool)> sent,
                                         const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<::std::int32_t>(std::move(response), std::move(ex), std::move(sent), this, &IceGrid::RegistryPrx::_iceI_getACMTimeout, context);
}

/// \cond INTERNAL
void
IceGrid::RegistryPrx::_iceI_getACMTimeout(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::int32_t>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_IceGrid_Registry_getACMTimeout_name);
    outAsync->invoke(iceC_IceGrid_Registry_getACMTimeout_name, ::Ice::OperationMode::Nonmutating, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
IceGrid::RegistryPrx::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::Registry";
    return typeId;
}

::std::optional<::IceGrid::RegistryPrx>
IceGrid::LocatorPrx::getLocalRegistry(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::optional<RegistryPrx>>(true, this, &LocatorPrx::_iceI_getLocalRegistry, context).get();
}

::std::future<::std::optional<::IceGrid::RegistryPrx>>
IceGrid::LocatorPrx::getLocalRegistryAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::optional<RegistryPrx>, ::std::promise>(false, this, &LocatorPrx::_iceI_getLocalRegistry, context);
}

::std::function<void()>
IceGrid::LocatorPrx::getLocalRegistryAsync(::std::function<void (::std::optional<::IceGrid::RegistryPrx>)> response,
                                           ::std::function<void(::std::exception_ptr)> ex,
                                           ::std::function<void(bool)> sent,
                                           const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<::std::optional<RegistryPrx>>(std::move(response), std::move(ex), std::move(sent), this, &IceGrid::LocatorPrx::_iceI_getLocalRegistry, context);
}

/// \cond INTERNAL
void
IceGrid::LocatorPrx::_iceI_getLocalRegistry(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<RegistryPrx>>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_IceGrid_Locator_getLocalRegistry_name);
    outAsync->invoke(iceC_IceGrid_Locator_getLocalRegistry_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

::std::optional<::IceGrid::QueryPrx>
IceGrid::LocatorPrx::getLocalQuery(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::optional<QueryPrx>>(true, this, &LocatorPrx::_iceI_getLocalQuery, context).get();
}

::std::future<::std::optional<::IceGrid::QueryPrx>>
IceGrid::LocatorPrx::getLocalQueryAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::optional<QueryPrx>, ::std::promise>(false, this, &LocatorPrx::_iceI_getLocalQuery, context);
}

::std::function<void()>
IceGrid::LocatorPrx::getLocalQueryAsync(::std::function<void (::std::optional<::IceGrid::QueryPrx>)> response,
                                        ::std::function<void(::std::exception_ptr)> ex,
                                        ::std::function<void(bool)> sent,
                                        const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<::std::optional<QueryPrx>>(std::move(response), std::move(ex), std::move(sent), this, &IceGrid::LocatorPrx::_iceI_getLocalQuery, context);
}

/// \cond INTERNAL
void
IceGrid::LocatorPrx::_iceI_getLocalQuery(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<QueryPrx>>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_IceGrid_Locator_getLocalQuery_name);
    outAsync->invoke(iceC_IceGrid_Locator_getLocalQuery_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
IceGrid::LocatorPrx::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::Locator";
    return typeId;
}

bool
IceGrid::Query::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_IceGrid_Query_ids, iceC_IceGrid_Query_ids + 2, s);
}

::std::vector<::std::string>
IceGrid::Query::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_IceGrid_Query_ids[0], &iceC_IceGrid_Query_ids[2]);
}

::std::string
IceGrid::Query::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
IceGrid::Query::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::Query";
    return typeId;
}

/// \cond INTERNAL
bool
IceGrid::Query::_iceD_findObjectById(::IceInternal::Incoming& inS, const ::Ice::Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    auto istr = inS.startReadParams();
    ::Ice::Identity iceP_id;
    istr->readAll(iceP_id);
    inS.endReadParams();
    ::std::optional<::Ice::ObjectPrx> ret = this->findObjectById(::std::move(iceP_id), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Query::_iceD_findObjectByType(::IceInternal::Incoming& inS, const ::Ice::Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_type;
    istr->readAll(iceP_type);
    inS.endReadParams();
    ::std::optional<::Ice::ObjectPrx> ret = this->findObjectByType(::std::move(iceP_type), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Query::_iceD_findObjectByTypeOnLeastLoadedNode(::IceInternal::Incoming& inS, const ::Ice::Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_type;
    LoadSample iceP_sample;
    istr->readAll(iceP_type, iceP_sample);
    inS.endReadParams();
    ::std::optional<::Ice::ObjectPrx> ret = this->findObjectByTypeOnLeastLoadedNode(::std::move(iceP_type), iceP_sample, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Query::_iceD_findAllObjectsByType(::IceInternal::Incoming& inS, const ::Ice::Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_type;
    istr->readAll(iceP_type);
    inS.endReadParams();
    ::Ice::ObjectProxySeq ret = this->findAllObjectsByType(::std::move(iceP_type), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Query::_iceD_findAllReplicas(::IceInternal::Incoming& inS, const ::Ice::Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    auto istr = inS.startReadParams();
    ::std::optional<::Ice::ObjectPrx> iceP_proxy;
    istr->readAll(iceP_proxy);
    inS.endReadParams();
    ::Ice::ObjectProxySeq ret = this->findAllReplicas(::std::move(iceP_proxy), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Query::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_IceGrid_Query_ops, iceC_IceGrid_Query_ops + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_IceGrid_Query_ops)
    {
        case 0:
        {
            return _iceD_findAllObjectsByType(in, current);
        }
        case 1:
        {
            return _iceD_findAllReplicas(in, current);
        }
        case 2:
        {
            return _iceD_findObjectById(in, current);
        }
        case 3:
        {
            return _iceD_findObjectByType(in, current);
        }
        case 4:
        {
            return _iceD_findObjectByTypeOnLeastLoadedNode(in, current);
        }
        case 5:
        {
            return _iceD_ice_id(in, current);
        }
        case 6:
        {
            return _iceD_ice_ids(in, current);
        }
        case 7:
        {
            return _iceD_ice_isA(in, current);
        }
        case 8:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
IceGrid::Registry::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_IceGrid_Registry_ids, iceC_IceGrid_Registry_ids + 2, s);
}

::std::vector<::std::string>
IceGrid::Registry::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_IceGrid_Registry_ids[0], &iceC_IceGrid_Registry_ids[2]);
}

::std::string
IceGrid::Registry::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
IceGrid::Registry::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::Registry";
    return typeId;
}

/// \cond INTERNAL
bool
IceGrid::Registry::_iceD_createSession(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_userId;
    ::std::string iceP_password;
    istr->readAll(iceP_userId, iceP_password);
    inS.endReadParams();
    ::std::optional<SessionPrx> ret = this->createSession(::std::move(iceP_userId), ::std::move(iceP_password), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Registry::_iceD_createAdminSession(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_userId;
    ::std::string iceP_password;
    istr->readAll(iceP_userId, iceP_password);
    inS.endReadParams();
    ::std::optional<AdminSessionPrx> ret = this->createAdminSession(::std::move(iceP_userId), ::std::move(iceP_password), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Registry::_iceD_createSessionFromSecureConnection(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::optional<SessionPrx> ret = this->createSessionFromSecureConnection(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Registry::_iceD_createAdminSessionFromSecureConnection(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::optional<AdminSessionPrx> ret = this->createAdminSessionFromSecureConnection(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Registry::_iceD_getSessionTimeout(::IceInternal::Incoming& inS, const ::Ice::Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    ::std::int32_t ret = this->getSessionTimeout(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Registry::_iceD_getACMTimeout(::IceInternal::Incoming& inS, const ::Ice::Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    ::std::int32_t ret = this->getACMTimeout(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Registry::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_IceGrid_Registry_ops, iceC_IceGrid_Registry_ops + 10, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_IceGrid_Registry_ops)
    {
        case 0:
        {
            return _iceD_createAdminSession(in, current);
        }
        case 1:
        {
            return _iceD_createAdminSessionFromSecureConnection(in, current);
        }
        case 2:
        {
            return _iceD_createSession(in, current);
        }
        case 3:
        {
            return _iceD_createSessionFromSecureConnection(in, current);
        }
        case 4:
        {
            return _iceD_getACMTimeout(in, current);
        }
        case 5:
        {
            return _iceD_getSessionTimeout(in, current);
        }
        case 6:
        {
            return _iceD_ice_id(in, current);
        }
        case 7:
        {
            return _iceD_ice_ids(in, current);
        }
        case 8:
        {
            return _iceD_ice_isA(in, current);
        }
        case 9:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
IceGrid::Locator::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_IceGrid_Locator_ids, iceC_IceGrid_Locator_ids + 3, s);
}

::std::vector<::std::string>
IceGrid::Locator::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_IceGrid_Locator_ids[0], &iceC_IceGrid_Locator_ids[3]);
}

::std::string
IceGrid::Locator::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
IceGrid::Locator::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::Locator";
    return typeId;
}

/// \cond INTERNAL
bool
IceGrid::Locator::_iceD_getLocalRegistry(::IceInternal::Incoming& inS, const ::Ice::Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    ::std::optional<RegistryPrx> ret = this->getLocalRegistry(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Locator::_iceD_getLocalQuery(::IceInternal::Incoming& inS, const ::Ice::Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    ::std::optional<QueryPrx> ret = this->getLocalQuery(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Locator::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_IceGrid_Locator_ops, iceC_IceGrid_Locator_ops + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_IceGrid_Locator_ops)
    {
        case 0:
        {
            return _iceD_findAdapterById(in, current);
        }
        case 1:
        {
            return _iceD_findObjectById(in, current);
        }
        case 2:
        {
            return _iceD_getLocalQuery(in, current);
        }
        case 3:
        {
            return _iceD_getLocalRegistry(in, current);
        }
        case 4:
        {
            return _iceD_getRegistry(in, current);
        }
        case 5:
        {
            return _iceD_ice_id(in, current);
        }
        case 6:
        {
            return _iceD_ice_ids(in, current);
        }
        case 7:
        {
            return _iceD_ice_isA(in, current);
        }
        case 8:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond
