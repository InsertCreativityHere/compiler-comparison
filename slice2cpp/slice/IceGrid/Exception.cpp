//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Exception.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ICEGRID_API_EXPORTS
#   define ICEGRID_API_EXPORTS
#endif
#define ICE_BUILDING_GENERATED_CODE
#include <Exception.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::IceGrid::ApplicationNotExistException> iceC_IceGrid_ApplicationNotExistException_init("::IceGrid::ApplicationNotExistException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::IceGrid::ServerNotExistException> iceC_IceGrid_ServerNotExistException_init("::IceGrid::ServerNotExistException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::IceGrid::ServerStartException> iceC_IceGrid_ServerStartException_init("::IceGrid::ServerStartException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::IceGrid::ServerStopException> iceC_IceGrid_ServerStopException_init("::IceGrid::ServerStopException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::IceGrid::AdapterNotExistException> iceC_IceGrid_AdapterNotExistException_init("::IceGrid::AdapterNotExistException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::IceGrid::ObjectExistsException> iceC_IceGrid_ObjectExistsException_init("::IceGrid::ObjectExistsException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::IceGrid::ObjectNotRegisteredException> iceC_IceGrid_ObjectNotRegisteredException_init("::IceGrid::ObjectNotRegisteredException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::IceGrid::NodeNotExistException> iceC_IceGrid_NodeNotExistException_init("::IceGrid::NodeNotExistException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::IceGrid::RegistryNotExistException> iceC_IceGrid_RegistryNotExistException_init("::IceGrid::RegistryNotExistException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::IceGrid::DeploymentException> iceC_IceGrid_DeploymentException_init("::IceGrid::DeploymentException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::IceGrid::NodeUnreachableException> iceC_IceGrid_NodeUnreachableException_init("::IceGrid::NodeUnreachableException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::IceGrid::ServerUnreachableException> iceC_IceGrid_ServerUnreachableException_init("::IceGrid::ServerUnreachableException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::IceGrid::RegistryUnreachableException> iceC_IceGrid_RegistryUnreachableException_init("::IceGrid::RegistryUnreachableException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::IceGrid::BadSignalException> iceC_IceGrid_BadSignalException_init("::IceGrid::BadSignalException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::IceGrid::PatchException> iceC_IceGrid_PatchException_init("::IceGrid::PatchException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::IceGrid::AccessDeniedException> iceC_IceGrid_AccessDeniedException_init("::IceGrid::AccessDeniedException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::IceGrid::AllocationException> iceC_IceGrid_AllocationException_init("::IceGrid::AllocationException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::IceGrid::AllocationTimeoutException> iceC_IceGrid_AllocationTimeoutException_init("::IceGrid::AllocationTimeoutException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::IceGrid::PermissionDeniedException> iceC_IceGrid_PermissionDeniedException_init("::IceGrid::PermissionDeniedException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::IceGrid::ObserverAlreadyRegisteredException> iceC_IceGrid_ObserverAlreadyRegisteredException_init("::IceGrid::ObserverAlreadyRegisteredException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::IceGrid::FileNotAvailableException> iceC_IceGrid_FileNotAvailableException_init("::IceGrid::FileNotAvailableException");

}

IceGrid::ApplicationNotExistException::~ApplicationNotExistException()
{
}

const ::std::string&
IceGrid::ApplicationNotExistException::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::ApplicationNotExistException";
    return typeId;
}

IceGrid::ServerNotExistException::~ServerNotExistException()
{
}

const ::std::string&
IceGrid::ServerNotExistException::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::ServerNotExistException";
    return typeId;
}

IceGrid::ServerStartException::~ServerStartException()
{
}

const ::std::string&
IceGrid::ServerStartException::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::ServerStartException";
    return typeId;
}

IceGrid::ServerStopException::~ServerStopException()
{
}

const ::std::string&
IceGrid::ServerStopException::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::ServerStopException";
    return typeId;
}

IceGrid::AdapterNotExistException::~AdapterNotExistException()
{
}

const ::std::string&
IceGrid::AdapterNotExistException::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::AdapterNotExistException";
    return typeId;
}

IceGrid::ObjectExistsException::~ObjectExistsException()
{
}

const ::std::string&
IceGrid::ObjectExistsException::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::ObjectExistsException";
    return typeId;
}

IceGrid::ObjectNotRegisteredException::~ObjectNotRegisteredException()
{
}

const ::std::string&
IceGrid::ObjectNotRegisteredException::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::ObjectNotRegisteredException";
    return typeId;
}

IceGrid::NodeNotExistException::~NodeNotExistException()
{
}

const ::std::string&
IceGrid::NodeNotExistException::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::NodeNotExistException";
    return typeId;
}

IceGrid::RegistryNotExistException::~RegistryNotExistException()
{
}

const ::std::string&
IceGrid::RegistryNotExistException::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::RegistryNotExistException";
    return typeId;
}

IceGrid::DeploymentException::~DeploymentException()
{
}

const ::std::string&
IceGrid::DeploymentException::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::DeploymentException";
    return typeId;
}

IceGrid::NodeUnreachableException::~NodeUnreachableException()
{
}

const ::std::string&
IceGrid::NodeUnreachableException::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::NodeUnreachableException";
    return typeId;
}

IceGrid::ServerUnreachableException::~ServerUnreachableException()
{
}

const ::std::string&
IceGrid::ServerUnreachableException::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::ServerUnreachableException";
    return typeId;
}

IceGrid::RegistryUnreachableException::~RegistryUnreachableException()
{
}

const ::std::string&
IceGrid::RegistryUnreachableException::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::RegistryUnreachableException";
    return typeId;
}

IceGrid::BadSignalException::~BadSignalException()
{
}

const ::std::string&
IceGrid::BadSignalException::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::BadSignalException";
    return typeId;
}

IceGrid::PatchException::~PatchException()
{
}

const ::std::string&
IceGrid::PatchException::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::PatchException";
    return typeId;
}

IceGrid::AccessDeniedException::~AccessDeniedException()
{
}

const ::std::string&
IceGrid::AccessDeniedException::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::AccessDeniedException";
    return typeId;
}

IceGrid::AllocationException::~AllocationException()
{
}

const ::std::string&
IceGrid::AllocationException::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::AllocationException";
    return typeId;
}

IceGrid::AllocationTimeoutException::~AllocationTimeoutException()
{
}

const ::std::string&
IceGrid::AllocationTimeoutException::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::AllocationTimeoutException";
    return typeId;
}

IceGrid::PermissionDeniedException::~PermissionDeniedException()
{
}

const ::std::string&
IceGrid::PermissionDeniedException::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::PermissionDeniedException";
    return typeId;
}

IceGrid::ObserverAlreadyRegisteredException::~ObserverAlreadyRegisteredException()
{
}

const ::std::string&
IceGrid::ObserverAlreadyRegisteredException::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::ObserverAlreadyRegisteredException";
    return typeId;
}

IceGrid::FileNotAvailableException::~FileNotAvailableException()
{
}

const ::std::string&
IceGrid::FileNotAvailableException::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::FileNotAvailableException";
    return typeId;
}
