//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Descriptor.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ICEGRID_API_EXPORTS
#   define ICEGRID_API_EXPORTS
#endif
#define ICE_BUILDING_GENERATED_CODE
#include "Descriptor.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/FactoryTable.h>
#include <Ice/OutgoingAsync.h>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{
    const ::IceInternal::FactoryTableInit iceC_factoryTableInit;
    const ::IceInternal::DefaultValueFactoryInit<::IceGrid::CommunicatorDescriptor> iceC_IceGrid_CommunicatorDescriptor_init("::IceGrid::CommunicatorDescriptor");
    const ::IceInternal::DefaultValueFactoryInit<::IceGrid::ServerDescriptor> iceC_IceGrid_ServerDescriptor_init("::IceGrid::ServerDescriptor");
    const ::IceInternal::DefaultValueFactoryInit<::IceGrid::ServiceDescriptor> iceC_IceGrid_ServiceDescriptor_init("::IceGrid::ServiceDescriptor");
    const ::IceInternal::DefaultValueFactoryInit<::IceGrid::IceBoxDescriptor> iceC_IceGrid_IceBoxDescriptor_init("::IceGrid::IceBoxDescriptor");
    const ::IceInternal::DefaultValueFactoryInit<::IceGrid::LoadBalancingPolicy> iceC_IceGrid_LoadBalancingPolicy_init("::IceGrid::LoadBalancingPolicy");
    const ::IceInternal::DefaultValueFactoryInit<::IceGrid::RandomLoadBalancingPolicy> iceC_IceGrid_RandomLoadBalancingPolicy_init("::IceGrid::RandomLoadBalancingPolicy");
    const ::IceInternal::DefaultValueFactoryInit<::IceGrid::OrderedLoadBalancingPolicy> iceC_IceGrid_OrderedLoadBalancingPolicy_init("::IceGrid::OrderedLoadBalancingPolicy");
    const ::IceInternal::DefaultValueFactoryInit<::IceGrid::RoundRobinLoadBalancingPolicy> iceC_IceGrid_RoundRobinLoadBalancingPolicy_init("::IceGrid::RoundRobinLoadBalancingPolicy");
    const ::IceInternal::DefaultValueFactoryInit<::IceGrid::AdaptiveLoadBalancingPolicy> iceC_IceGrid_AdaptiveLoadBalancingPolicy_init("::IceGrid::AdaptiveLoadBalancingPolicy");
    const ::IceInternal::DefaultValueFactoryInit<::IceGrid::BoxedString> iceC_IceGrid_BoxedString_init("::IceGrid::BoxedString");
    const ::IceInternal::DefaultValueFactoryInit<::IceGrid::BoxedDistributionDescriptor> iceC_IceGrid_BoxedDistributionDescriptor_init("::IceGrid::BoxedDistributionDescriptor");
}

::std::string
IceGrid::CommunicatorDescriptor::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
IceGrid::CommunicatorDescriptor::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::IceGrid::CommunicatorDescriptor";
    return typeId;
}

::Ice::ValuePtr
IceGrid::CommunicatorDescriptor::_iceCloneImpl() const
{
    return CloneEnabler<CommunicatorDescriptor>::clone(*this);
}

void
IceGrid::CommunicatorDescriptor::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter<CommunicatorDescriptor>::write(ostr, *this);
    ostr->endSlice();
}

void
IceGrid::CommunicatorDescriptor::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<CommunicatorDescriptor>::read(istr, *this);
    istr->endSlice();
}

::std::string
IceGrid::ServerDescriptor::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
IceGrid::ServerDescriptor::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::IceGrid::ServerDescriptor";
    return typeId;
}

::Ice::ValuePtr
IceGrid::ServerDescriptor::_iceCloneImpl() const
{
    return CloneEnabler<ServerDescriptor>::clone(*this);
}

void
IceGrid::ServerDescriptor::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<ServerDescriptor>::write(ostr, *this);
    ostr->endSlice();
    CommunicatorDescriptor::_iceWriteImpl(ostr);
}

void
IceGrid::ServerDescriptor::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<ServerDescriptor>::read(istr, *this);
    istr->endSlice();
    CommunicatorDescriptor::_iceReadImpl(istr);
}

::std::string
IceGrid::ServiceDescriptor::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
IceGrid::ServiceDescriptor::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::IceGrid::ServiceDescriptor";
    return typeId;
}

::Ice::ValuePtr
IceGrid::ServiceDescriptor::_iceCloneImpl() const
{
    return CloneEnabler<ServiceDescriptor>::clone(*this);
}

void
IceGrid::ServiceDescriptor::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<ServiceDescriptor>::write(ostr, *this);
    ostr->endSlice();
    CommunicatorDescriptor::_iceWriteImpl(ostr);
}

void
IceGrid::ServiceDescriptor::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<ServiceDescriptor>::read(istr, *this);
    istr->endSlice();
    CommunicatorDescriptor::_iceReadImpl(istr);
}

::std::string
IceGrid::IceBoxDescriptor::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
IceGrid::IceBoxDescriptor::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::IceGrid::IceBoxDescriptor";
    return typeId;
}

::Ice::ValuePtr
IceGrid::IceBoxDescriptor::_iceCloneImpl() const
{
    return CloneEnabler<IceBoxDescriptor>::clone(*this);
}

void
IceGrid::IceBoxDescriptor::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<IceBoxDescriptor>::write(ostr, *this);
    ostr->endSlice();
    ServerDescriptor::_iceWriteImpl(ostr);
}

void
IceGrid::IceBoxDescriptor::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<IceBoxDescriptor>::read(istr, *this);
    istr->endSlice();
    ServerDescriptor::_iceReadImpl(istr);
}

::std::string
IceGrid::LoadBalancingPolicy::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
IceGrid::LoadBalancingPolicy::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::IceGrid::LoadBalancingPolicy";
    return typeId;
}

::Ice::ValuePtr
IceGrid::LoadBalancingPolicy::_iceCloneImpl() const
{
    return CloneEnabler<LoadBalancingPolicy>::clone(*this);
}

void
IceGrid::LoadBalancingPolicy::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter<LoadBalancingPolicy>::write(ostr, *this);
    ostr->endSlice();
}

void
IceGrid::LoadBalancingPolicy::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<LoadBalancingPolicy>::read(istr, *this);
    istr->endSlice();
}

::std::string
IceGrid::RandomLoadBalancingPolicy::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
IceGrid::RandomLoadBalancingPolicy::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::IceGrid::RandomLoadBalancingPolicy";
    return typeId;
}

::Ice::ValuePtr
IceGrid::RandomLoadBalancingPolicy::_iceCloneImpl() const
{
    return CloneEnabler<RandomLoadBalancingPolicy>::clone(*this);
}

void
IceGrid::RandomLoadBalancingPolicy::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ostr->endSlice();
    LoadBalancingPolicy::_iceWriteImpl(ostr);
}

void
IceGrid::RandomLoadBalancingPolicy::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->endSlice();
    LoadBalancingPolicy::_iceReadImpl(istr);
}

::std::string
IceGrid::OrderedLoadBalancingPolicy::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
IceGrid::OrderedLoadBalancingPolicy::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::IceGrid::OrderedLoadBalancingPolicy";
    return typeId;
}

::Ice::ValuePtr
IceGrid::OrderedLoadBalancingPolicy::_iceCloneImpl() const
{
    return CloneEnabler<OrderedLoadBalancingPolicy>::clone(*this);
}

void
IceGrid::OrderedLoadBalancingPolicy::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ostr->endSlice();
    LoadBalancingPolicy::_iceWriteImpl(ostr);
}

void
IceGrid::OrderedLoadBalancingPolicy::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->endSlice();
    LoadBalancingPolicy::_iceReadImpl(istr);
}

::std::string
IceGrid::RoundRobinLoadBalancingPolicy::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
IceGrid::RoundRobinLoadBalancingPolicy::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::IceGrid::RoundRobinLoadBalancingPolicy";
    return typeId;
}

::Ice::ValuePtr
IceGrid::RoundRobinLoadBalancingPolicy::_iceCloneImpl() const
{
    return CloneEnabler<RoundRobinLoadBalancingPolicy>::clone(*this);
}

void
IceGrid::RoundRobinLoadBalancingPolicy::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ostr->endSlice();
    LoadBalancingPolicy::_iceWriteImpl(ostr);
}

void
IceGrid::RoundRobinLoadBalancingPolicy::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->endSlice();
    LoadBalancingPolicy::_iceReadImpl(istr);
}

::std::string
IceGrid::AdaptiveLoadBalancingPolicy::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
IceGrid::AdaptiveLoadBalancingPolicy::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::IceGrid::AdaptiveLoadBalancingPolicy";
    return typeId;
}

::Ice::ValuePtr
IceGrid::AdaptiveLoadBalancingPolicy::_iceCloneImpl() const
{
    return CloneEnabler<AdaptiveLoadBalancingPolicy>::clone(*this);
}

void
IceGrid::AdaptiveLoadBalancingPolicy::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<AdaptiveLoadBalancingPolicy>::write(ostr, *this);
    ostr->endSlice();
    LoadBalancingPolicy::_iceWriteImpl(ostr);
}

void
IceGrid::AdaptiveLoadBalancingPolicy::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<AdaptiveLoadBalancingPolicy>::read(istr, *this);
    istr->endSlice();
    LoadBalancingPolicy::_iceReadImpl(istr);
}

::std::string
IceGrid::BoxedString::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
IceGrid::BoxedString::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::IceGrid::BoxedString";
    return typeId;
}

::Ice::ValuePtr
IceGrid::BoxedString::_iceCloneImpl() const
{
    return CloneEnabler<BoxedString>::clone(*this);
}

void
IceGrid::BoxedString::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter<BoxedString>::write(ostr, *this);
    ostr->endSlice();
}

void
IceGrid::BoxedString::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<BoxedString>::read(istr, *this);
    istr->endSlice();
}

::std::string
IceGrid::BoxedDistributionDescriptor::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
IceGrid::BoxedDistributionDescriptor::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::IceGrid::BoxedDistributionDescriptor";
    return typeId;
}

::Ice::ValuePtr
IceGrid::BoxedDistributionDescriptor::_iceCloneImpl() const
{
    return CloneEnabler<BoxedDistributionDescriptor>::clone(*this);
}

void
IceGrid::BoxedDistributionDescriptor::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter<BoxedDistributionDescriptor>::write(ostr, *this);
    ostr->endSlice();
}

void
IceGrid::BoxedDistributionDescriptor::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<BoxedDistributionDescriptor>::read(istr, *this);
    istr->endSlice();
}
