//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Descriptor.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ICEGRID_API_EXPORTS
#   define ICEGRID_API_EXPORTS
#endif
#define ICE_BUILDING_GENERATED_CODE
#include <Descriptor.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/AsyncResponseHandler.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::IceGrid::CommunicatorDescriptor> iceC_IceGrid_CommunicatorDescriptor_init("::IceGrid::CommunicatorDescriptor");

const ::IceInternal::DefaultValueFactoryInit<::IceGrid::ServerDescriptor> iceC_IceGrid_ServerDescriptor_init("::IceGrid::ServerDescriptor");

const ::IceInternal::DefaultValueFactoryInit<::IceGrid::ServiceDescriptor> iceC_IceGrid_ServiceDescriptor_init("::IceGrid::ServiceDescriptor");

const ::IceInternal::DefaultValueFactoryInit<::IceGrid::IceBoxDescriptor> iceC_IceGrid_IceBoxDescriptor_init("::IceGrid::IceBoxDescriptor");

const ::IceInternal::DefaultValueFactoryInit<::IceGrid::LoadBalancingPolicy> iceC_IceGrid_LoadBalancingPolicy_init("::IceGrid::LoadBalancingPolicy");

const ::IceInternal::DefaultValueFactoryInit<::IceGrid::RandomLoadBalancingPolicy> iceC_IceGrid_RandomLoadBalancingPolicy_init("::IceGrid::RandomLoadBalancingPolicy");

const ::IceInternal::DefaultValueFactoryInit<::IceGrid::OrderedLoadBalancingPolicy> iceC_IceGrid_OrderedLoadBalancingPolicy_init("::IceGrid::OrderedLoadBalancingPolicy");

const ::IceInternal::DefaultValueFactoryInit<::IceGrid::RoundRobinLoadBalancingPolicy> iceC_IceGrid_RoundRobinLoadBalancingPolicy_init("::IceGrid::RoundRobinLoadBalancingPolicy");

const ::IceInternal::DefaultValueFactoryInit<::IceGrid::AdaptiveLoadBalancingPolicy> iceC_IceGrid_AdaptiveLoadBalancingPolicy_init("::IceGrid::AdaptiveLoadBalancingPolicy");

const ::IceInternal::DefaultValueFactoryInit<::IceGrid::BoxedString> iceC_IceGrid_BoxedString_init("::IceGrid::BoxedString");

const ::IceInternal::DefaultValueFactoryInit<::IceGrid::BoxedDistributionDescriptor> iceC_IceGrid_BoxedDistributionDescriptor_init("::IceGrid::BoxedDistributionDescriptor");

}

::std::string_view
IceGrid::CommunicatorDescriptor::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::IceGrid::CommunicatorDescriptor";
    return typeId;
}

::std::string_view
IceGrid::ServerDescriptor::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::IceGrid::ServerDescriptor";
    return typeId;
}

::std::string_view
IceGrid::ServiceDescriptor::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::IceGrid::ServiceDescriptor";
    return typeId;
}

::std::string_view
IceGrid::IceBoxDescriptor::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::IceGrid::IceBoxDescriptor";
    return typeId;
}

::std::string_view
IceGrid::LoadBalancingPolicy::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::IceGrid::LoadBalancingPolicy";
    return typeId;
}

::std::string_view
IceGrid::RandomLoadBalancingPolicy::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::IceGrid::RandomLoadBalancingPolicy";
    return typeId;
}

::std::string_view
IceGrid::OrderedLoadBalancingPolicy::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::IceGrid::OrderedLoadBalancingPolicy";
    return typeId;
}

::std::string_view
IceGrid::RoundRobinLoadBalancingPolicy::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::IceGrid::RoundRobinLoadBalancingPolicy";
    return typeId;
}

::std::string_view
IceGrid::AdaptiveLoadBalancingPolicy::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::IceGrid::AdaptiveLoadBalancingPolicy";
    return typeId;
}

::std::string_view
IceGrid::BoxedString::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::IceGrid::BoxedString";
    return typeId;
}

::std::string_view
IceGrid::BoxedDistributionDescriptor::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::IceGrid::BoxedDistributionDescriptor";
    return typeId;
}
