//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `IceDiscovery.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <IceDiscovery.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::std::string iceC_IceDiscovery_LookupReply_ids[2] =
{
    "::Ice::Object",
    "::IceDiscovery::LookupReply"
};
const ::std::string iceC_IceDiscovery_LookupReply_ops[] =
{
    "foundAdapterById",
    "foundObjectById",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_IceDiscovery_LookupReply_foundObjectById_name = "foundObjectById";
const ::std::string iceC_IceDiscovery_LookupReply_foundAdapterById_name = "foundAdapterById";

const ::std::string iceC_IceDiscovery_Lookup_ids[2] =
{
    "::Ice::Object",
    "::IceDiscovery::Lookup"
};
const ::std::string iceC_IceDiscovery_Lookup_ops[] =
{
    "findAdapterById",
    "findObjectById",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_IceDiscovery_Lookup_findObjectById_name = "findObjectById";
const ::std::string iceC_IceDiscovery_Lookup_findAdapterById_name = "findAdapterById";

}

void
IceDiscovery::LookupReplyPrx::foundObjectById(const ::Ice::Identity& iceP_id, const ::std::shared_ptr<::Ice::ObjectPrx>& iceP_prx, const ::Ice::Context& context)
{
    _makePromiseOutgoing<void>(true, this, &LookupReplyPrx::_iceI_foundObjectById, iceP_id, iceP_prx, context).get();
}

::std::future<void>
IceDiscovery::LookupReplyPrx::foundObjectByIdAsync(const ::Ice::Identity& iceP_id, const ::std::shared_ptr<::Ice::ObjectPrx>& iceP_prx, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &LookupReplyPrx::_iceI_foundObjectById, iceP_id, iceP_prx, context);
}

::std::function<void()>
IceDiscovery::LookupReplyPrx::foundObjectByIdAsync(const ::Ice::Identity& iceP_id, const ::std::shared_ptr<::Ice::ObjectPrx>& iceP_prx,
                                                   ::std::function<void ()> response,
                                                   ::std::function<void(::std::exception_ptr)> ex,
                                                   ::std::function<void(bool)> sent,
                                                   const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &IceDiscovery::LookupReplyPrx::_iceI_foundObjectById, iceP_id, iceP_prx, context);
}

/// \cond INTERNAL
void
IceDiscovery::LookupReplyPrx::_iceI_foundObjectById(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Identity& iceP_id, const ::std::shared_ptr<::Ice::ObjectPrx>& iceP_prx, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_IceDiscovery_LookupReply_foundObjectById_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_id, iceP_prx);
        },
        nullptr);
}
/// \endcond

void
IceDiscovery::LookupReplyPrx::foundAdapterById(const ::std::string& iceP_id, const ::std::shared_ptr<::Ice::ObjectPrx>& iceP_prx, bool iceP_isReplicaGroup, const ::Ice::Context& context)
{
    _makePromiseOutgoing<void>(true, this, &LookupReplyPrx::_iceI_foundAdapterById, iceP_id, iceP_prx, iceP_isReplicaGroup, context).get();
}

::std::future<void>
IceDiscovery::LookupReplyPrx::foundAdapterByIdAsync(const ::std::string& iceP_id, const ::std::shared_ptr<::Ice::ObjectPrx>& iceP_prx, bool iceP_isReplicaGroup, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &LookupReplyPrx::_iceI_foundAdapterById, iceP_id, iceP_prx, iceP_isReplicaGroup, context);
}

::std::function<void()>
IceDiscovery::LookupReplyPrx::foundAdapterByIdAsync(const ::std::string& iceP_id, const ::std::shared_ptr<::Ice::ObjectPrx>& iceP_prx, bool iceP_isReplicaGroup,
                                                    ::std::function<void ()> response,
                                                    ::std::function<void(::std::exception_ptr)> ex,
                                                    ::std::function<void(bool)> sent,
                                                    const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &IceDiscovery::LookupReplyPrx::_iceI_foundAdapterById, iceP_id, iceP_prx, iceP_isReplicaGroup, context);
}

/// \cond INTERNAL
void
IceDiscovery::LookupReplyPrx::_iceI_foundAdapterById(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_id, const ::std::shared_ptr<::Ice::ObjectPrx>& iceP_prx, bool iceP_isReplicaGroup, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_IceDiscovery_LookupReply_foundAdapterById_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_id, iceP_prx, iceP_isReplicaGroup);
        },
        nullptr);
}
/// \endcond

const ::std::string&
IceDiscovery::LookupReplyPrx::ice_staticId()
{
    return LookupReply::ice_staticId();
}

void
IceDiscovery::LookupPrx::findObjectById(const ::std::string& iceP_domainId, const ::Ice::Identity& iceP_id, const ::std::shared_ptr<LookupReplyPrx>& iceP_reply, const ::Ice::Context& context)
{
    _makePromiseOutgoing<void>(true, this, &LookupPrx::_iceI_findObjectById, iceP_domainId, iceP_id, iceP_reply, context).get();
}

::std::future<void>
IceDiscovery::LookupPrx::findObjectByIdAsync(const ::std::string& iceP_domainId, const ::Ice::Identity& iceP_id, const ::std::shared_ptr<LookupReplyPrx>& iceP_reply, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &LookupPrx::_iceI_findObjectById, iceP_domainId, iceP_id, iceP_reply, context);
}

::std::function<void()>
IceDiscovery::LookupPrx::findObjectByIdAsync(const ::std::string& iceP_domainId, const ::Ice::Identity& iceP_id, const ::std::shared_ptr<LookupReplyPrx>& iceP_reply,
                                             ::std::function<void ()> response,
                                             ::std::function<void(::std::exception_ptr)> ex,
                                             ::std::function<void(bool)> sent,
                                             const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &IceDiscovery::LookupPrx::_iceI_findObjectById, iceP_domainId, iceP_id, iceP_reply, context);
}

/// \cond INTERNAL
void
IceDiscovery::LookupPrx::_iceI_findObjectById(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_domainId, const ::Ice::Identity& iceP_id, const ::std::shared_ptr<LookupReplyPrx>& iceP_reply, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_IceDiscovery_Lookup_findObjectById_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_domainId, iceP_id, iceP_reply);
        },
        nullptr);
}
/// \endcond

void
IceDiscovery::LookupPrx::findAdapterById(const ::std::string& iceP_domainId, const ::std::string& iceP_id, const ::std::shared_ptr<LookupReplyPrx>& iceP_reply, const ::Ice::Context& context)
{
    _makePromiseOutgoing<void>(true, this, &LookupPrx::_iceI_findAdapterById, iceP_domainId, iceP_id, iceP_reply, context).get();
}

::std::future<void>
IceDiscovery::LookupPrx::findAdapterByIdAsync(const ::std::string& iceP_domainId, const ::std::string& iceP_id, const ::std::shared_ptr<LookupReplyPrx>& iceP_reply, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &LookupPrx::_iceI_findAdapterById, iceP_domainId, iceP_id, iceP_reply, context);
}

::std::function<void()>
IceDiscovery::LookupPrx::findAdapterByIdAsync(const ::std::string& iceP_domainId, const ::std::string& iceP_id, const ::std::shared_ptr<LookupReplyPrx>& iceP_reply,
                                              ::std::function<void ()> response,
                                              ::std::function<void(::std::exception_ptr)> ex,
                                              ::std::function<void(bool)> sent,
                                              const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &IceDiscovery::LookupPrx::_iceI_findAdapterById, iceP_domainId, iceP_id, iceP_reply, context);
}

/// \cond INTERNAL
void
IceDiscovery::LookupPrx::_iceI_findAdapterById(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_domainId, const ::std::string& iceP_id, const ::std::shared_ptr<LookupReplyPrx>& iceP_reply, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_IceDiscovery_Lookup_findAdapterById_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_domainId, iceP_id, iceP_reply);
        },
        nullptr);
}
/// \endcond

const ::std::string&
IceDiscovery::LookupPrx::ice_staticId()
{
    return Lookup::ice_staticId();
}

bool
IceDiscovery::LookupReply::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_IceDiscovery_LookupReply_ids, iceC_IceDiscovery_LookupReply_ids + 2, s);
}

::std::vector<::std::string>
IceDiscovery::LookupReply::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_IceDiscovery_LookupReply_ids[0], &iceC_IceDiscovery_LookupReply_ids[2]);
}

::std::string
IceDiscovery::LookupReply::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
IceDiscovery::LookupReply::ice_staticId()
{
    static const ::std::string typeId = "::IceDiscovery::LookupReply";
    return typeId;
}

/// \cond INTERNAL
bool
IceDiscovery::LookupReply::_iceD_foundObjectById(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Ice::Identity iceP_id;
    ::std::shared_ptr<::Ice::ObjectPrx> iceP_prx;
    istr->readAll(iceP_id, iceP_prx);
    inS.endReadParams();
    this->foundObjectById(::std::move(iceP_id), ::std::move(iceP_prx), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceDiscovery::LookupReply::_iceD_foundAdapterById(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_id;
    ::std::shared_ptr<::Ice::ObjectPrx> iceP_prx;
    bool iceP_isReplicaGroup;
    istr->readAll(iceP_id, iceP_prx, iceP_isReplicaGroup);
    inS.endReadParams();
    this->foundAdapterById(::std::move(iceP_id), ::std::move(iceP_prx), iceP_isReplicaGroup, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceDiscovery::LookupReply::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_IceDiscovery_LookupReply_ops, iceC_IceDiscovery_LookupReply_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_IceDiscovery_LookupReply_ops)
    {
        case 0:
        {
            return _iceD_foundAdapterById(in, current);
        }
        case 1:
        {
            return _iceD_foundObjectById(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
IceDiscovery::Lookup::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_IceDiscovery_Lookup_ids, iceC_IceDiscovery_Lookup_ids + 2, s);
}

::std::vector<::std::string>
IceDiscovery::Lookup::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_IceDiscovery_Lookup_ids[0], &iceC_IceDiscovery_Lookup_ids[2]);
}

::std::string
IceDiscovery::Lookup::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
IceDiscovery::Lookup::ice_staticId()
{
    static const ::std::string typeId = "::IceDiscovery::Lookup";
    return typeId;
}

/// \cond INTERNAL
bool
IceDiscovery::Lookup::_iceD_findObjectById(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_domainId;
    ::Ice::Identity iceP_id;
    ::std::shared_ptr<LookupReplyPrx> iceP_reply;
    istr->readAll(iceP_domainId, iceP_id, iceP_reply);
    inS.endReadParams();
    this->findObjectById(::std::move(iceP_domainId), ::std::move(iceP_id), ::std::move(iceP_reply), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceDiscovery::Lookup::_iceD_findAdapterById(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_domainId;
    ::std::string iceP_id;
    ::std::shared_ptr<LookupReplyPrx> iceP_reply;
    istr->readAll(iceP_domainId, iceP_id, iceP_reply);
    inS.endReadParams();
    this->findAdapterById(::std::move(iceP_domainId), ::std::move(iceP_id), ::std::move(iceP_reply), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceDiscovery::Lookup::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_IceDiscovery_Lookup_ops, iceC_IceDiscovery_Lookup_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_IceDiscovery_Lookup_ops)
    {
        case 0:
        {
            return _iceD_findAdapterById(in, current);
        }
        case 1:
        {
            return _iceD_findObjectById(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond
