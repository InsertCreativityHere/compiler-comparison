<?php
//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


namespace
{
    require_once 'Ice/BuiltinSequences.php';
}

namespace Test
{
    global $Test__t_MyEnum;
    class MyEnum
    {
        const enum1 = 0;
        const enum2 = 1;
        const enum3 = 2;
    }

    $Test__t_MyEnum = IcePHP_defineEnum('::Test::MyEnum', array('enum1', 0, 'enum2', 1, 'enum3', 2));
}

namespace Test
{
    global $Test__t_MyClass;
    if(!isset($Test__t_MyClass))
    {
        $Test__t_MyClass = IcePHP_declareClass('::Test::MyClass');
    }
}

namespace Test
{
    global $Test__t_ValStruct;
    class ValStruct
    {
        public function __construct($bo=false, $by=0, $sh=0, $i=0, $l=0, $e=\Test\MyEnum::enum1)
        {
            $this->bo = $bo;
            $this->by = $by;
            $this->sh = $sh;
            $this->i = $i;
            $this->l = $l;
            $this->e = $e;
        }

        public function __toString(): string
        {
            global $Test__t_ValStruct;
            return IcePHP_stringify($this, $Test__t_ValStruct);
        }

        public $bo;
        public $by;
        public $sh;
        public $i;
        public $l;
        public $e;
    }

    global $IcePHP__t_bool;
    global $IcePHP__t_byte;
    global $IcePHP__t_short;
    global $IcePHP__t_int;
    global $IcePHP__t_long;
    global $Test__t_MyEnum;
    $Test__t_ValStruct = IcePHP_defineStruct('::Test::ValStruct', '\\Test\\ValStruct', array(
        array('bo', $IcePHP__t_bool),
        array('by', $IcePHP__t_byte),
        array('sh', $IcePHP__t_short),
        array('i', $IcePHP__t_int),
        array('l', $IcePHP__t_long),
        array('e', $Test__t_MyEnum)));
}

namespace Test
{
    global $Test__t_MyInterface;
    global $Test__t_MyInterfacePrx;

    class MyInterfacePrxHelper
    {
        public static function checkedCast($proxy, $facetOrContext=null, $context=null)
        {
            return $proxy->ice_checkedCast('::Test::MyInterface', $facetOrContext, $context);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Test::MyInterface', $facet);
        }

        public static function ice_staticId()
        {
            return '::Test::MyInterface';
        }
    }
    $Test__t_MyInterface = IcePHP_defineClass('::Test::MyInterface', '\\Test\\MyInterface', -1, false, true, null, null);

    global $Ice__t_ObjectPrx;
    $Test__t_MyInterfacePrx = IcePHP_defineProxy('::Test::MyInterface', $Ice__t_ObjectPrx, null);

    IcePHP_defineOperation($Test__t_MyInterfacePrx, 'op', 0, 0, 0, null, null, null, null);
}

namespace Test
{
    global $Test__t_ProxySeq;

    if(!isset($Test__t_ProxySeq))
    {
        global $Test__t_MyInterfacePrx;
        $Test__t_ProxySeq = IcePHP_defineSequence('::Test::ProxySeq', $Test__t_MyInterfacePrx);
    }
}

namespace Test
{
    global $Test__t_RefStruct;
    class RefStruct
    {
        public function __construct($s='', $sp='', $c=null, $p=null, $seq=null)
        {
            $this->s = $s;
            $this->sp = $sp;
            $this->c = $c;
            $this->p = $p;
            $this->seq = $seq;
        }

        public function __toString(): string
        {
            global $Test__t_RefStruct;
            return IcePHP_stringify($this, $Test__t_RefStruct);
        }

        public $s;
        public $sp;
        public $c;
        public $p;
        public $seq;
    }

    global $IcePHP__t_string;
    global $Test__t_MyClass;
    global $Test__t_MyInterfacePrx;
    global $Test__t_ProxySeq;
    $Test__t_RefStruct = IcePHP_defineStruct('::Test::RefStruct', '\\Test\\RefStruct', array(
        array('s', $IcePHP__t_string),
        array('sp', $IcePHP__t_string),
        array('c', $Test__t_MyClass),
        array('p', $Test__t_MyInterfacePrx),
        array('seq', $Test__t_ProxySeq)));
}

namespace Test
{
    global $Test__t_ValStructS;

    if(!isset($Test__t_ValStructS))
    {
        global $Test__t_ValStruct;
        $Test__t_ValStructS = IcePHP_defineSequence('::Test::ValStructS', $Test__t_ValStruct);
    }
}

namespace Test
{
    global $Test__t_ValStructList;

    if(!isset($Test__t_ValStructList))
    {
        global $Test__t_ValStruct;
        $Test__t_ValStructList = IcePHP_defineSequence('::Test::ValStructList', $Test__t_ValStruct);
    }
}

namespace Test
{
    global $Test__t_ValStructLinkedList;

    if(!isset($Test__t_ValStructLinkedList))
    {
        global $Test__t_ValStruct;
        $Test__t_ValStructLinkedList = IcePHP_defineSequence('::Test::ValStructLinkedList', $Test__t_ValStruct);
    }
}

namespace Test
{
    global $Test__t_ValStructStack;

    if(!isset($Test__t_ValStructStack))
    {
        global $Test__t_ValStruct;
        $Test__t_ValStructStack = IcePHP_defineSequence('::Test::ValStructStack', $Test__t_ValStruct);
    }
}

namespace Test
{
    global $Test__t_ValStructQueue;

    if(!isset($Test__t_ValStructQueue))
    {
        global $Test__t_ValStruct;
        $Test__t_ValStructQueue = IcePHP_defineSequence('::Test::ValStructQueue', $Test__t_ValStruct);
    }
}

namespace Test
{
    global $Test__t_IntStringD;

    if(!isset($Test__t_IntStringD))
    {
        global $IcePHP__t_int;
        global $IcePHP__t_string;
        $Test__t_IntStringD = IcePHP_defineDictionary('::Test::IntStringD', $IcePHP__t_int, $IcePHP__t_string);
    }
}

namespace Test
{
    global $Test__t_IntValStructD;

    if(!isset($Test__t_IntValStructD))
    {
        global $IcePHP__t_int;
        global $Test__t_ValStruct;
        $Test__t_IntValStructD = IcePHP_defineDictionary('::Test::IntValStructD', $IcePHP__t_int, $Test__t_ValStruct);
    }
}

namespace Test
{
    global $Test__t_IntProxyD;

    if(!isset($Test__t_IntProxyD))
    {
        global $IcePHP__t_int;
        global $Test__t_MyInterfacePrx;
        $Test__t_IntProxyD = IcePHP_defineDictionary('::Test::IntProxyD', $IcePHP__t_int, $Test__t_MyInterfacePrx);
    }
}

namespace Test
{
    global $Test__t_IntStringSD;

    if(!isset($Test__t_IntStringSD))
    {
        global $IcePHP__t_int;
        global $IcePHP__t_string;
        $Test__t_IntStringSD = IcePHP_defineDictionary('::Test::IntStringSD', $IcePHP__t_int, $IcePHP__t_string);
    }
}

namespace Test
{
    global $Test__t_Base;
    class Base extends \Ice\Value
    {
        public function __construct($bo=false, $by=0, $sh=0, $i=0, $l=0, $e=\Test\MyEnum::enum1)
        {
            $this->bo = $bo;
            $this->by = $by;
            $this->sh = $sh;
            $this->i = $i;
            $this->l = $l;
            $this->e = $e;
        }

        public function ice_id()
        {
            return '::Test::Base';
        }

        public static function ice_staticId()
        {
            return '::Test::Base';
        }

        public function __toString(): string
        {
            global $Test__t_Base;
            return IcePHP_stringify($this, $Test__t_Base);
        }

        public $bo;
        public $by;
        public $sh;
        public $i;
        public $l;
        public $e;
    }

    global $Ice__t_Value;
    global $IcePHP__t_bool;
    global $IcePHP__t_byte;
    global $IcePHP__t_short;
    global $IcePHP__t_int;
    global $IcePHP__t_long;
    global $Test__t_MyEnum;
    $Test__t_Base = IcePHP_defineClass('::Test::Base', '\\Test\\Base', -1, false, false, $Ice__t_Value, array(
        array('bo', $IcePHP__t_bool, false, 0),
        array('by', $IcePHP__t_byte, false, 0),
        array('sh', $IcePHP__t_short, false, 0),
        array('i', $IcePHP__t_int, false, 0),
        array('l', $IcePHP__t_long, false, 0),
        array('e', $Test__t_MyEnum, false, 0)));
}

namespace Test
{
    global $Test__t_MyClass;
    class MyClass extends \Test\Base
    {
        public function __construct($bo=false, $by=0, $sh=0, $i=0, $l=0, $e=\Test\MyEnum::enum1, $c=null, $o=null, $s=null)
        {
            parent::__construct($bo, $by, $sh, $i, $l, $e);
            $this->c = $c;
            $this->o = $o;
            $this->s = is_null($s) ? new \Test\ValStruct : $s;
        }

        public function ice_id()
        {
            return '::Test::MyClass';
        }

        public static function ice_staticId()
        {
            return '::Test::MyClass';
        }

        public function __toString(): string
        {
            global $Test__t_MyClass;
            return IcePHP_stringify($this, $Test__t_MyClass);
        }

        public $c;
        public $o;
        public $s;
    }

    global $Test__t_Base;
    global $Test__t_MyClass;
    global $Ice__t_Value;
    global $Test__t_ValStruct;
    $Test__t_MyClass = IcePHP_defineClass('::Test::MyClass', '\\Test\\MyClass', -1, false, false, $Test__t_Base, array(
        array('c', $Test__t_MyClass, false, 0),
        array('o', $Ice__t_Value, false, 0),
        array('s', $Test__t_ValStruct, false, 0)));
}

namespace Test
{
    global $Test__t_MyException;
    class MyException extends \Ice\UserException
    {
        public function __construct($name='', $b=0, $s=0, $i=0, $l=0, $vs=null, $rs=null, $c=null, $p=null, $vss=null, $vsl=null, $vsll=null, $vssk=null, $vsq=null, $isd=null, $ivd=null, $ipd=null, $issd=null, $optName=\Ice\None, $optInt=\Ice\None, $optValStruct=\Ice\None, $optRefStruct=\Ice\None, $optEnum=\Ice\None, $optClass=\Ice\None, $optProxy=\Ice\None)
        {
            $this->name = $name;
            $this->b = $b;
            $this->s = $s;
            $this->i = $i;
            $this->l = $l;
            $this->vs = is_null($vs) ? new \Test\ValStruct : $vs;
            $this->rs = is_null($rs) ? new \Test\RefStruct : $rs;
            $this->c = $c;
            $this->p = $p;
            $this->vss = $vss;
            $this->vsl = $vsl;
            $this->vsll = $vsll;
            $this->vssk = $vssk;
            $this->vsq = $vsq;
            $this->isd = $isd;
            $this->ivd = $ivd;
            $this->ipd = $ipd;
            $this->issd = $issd;
            $this->optName = $optName;
            $this->optInt = $optInt;
            $this->optValStruct = is_null($optValStruct) ? new \Test\ValStruct : $optValStruct;
            $this->optRefStruct = is_null($optRefStruct) ? new \Test\RefStruct : $optRefStruct;
            $this->optEnum = $optEnum;
            $this->optClass = $optClass;
            $this->optProxy = $optProxy;
        }

        public function ice_id()
        {
            return '::Test::MyException';
        }

        public function __toString(): string
        {
            global $Test__t_MyException;
            return IcePHP_stringifyException($this, $Test__t_MyException);
        }

        public $name;
        public $b;
        public $s;
        public $i;
        public $l;
        public $vs;
        public $rs;
        public $c;
        public $p;
        public $vss;
        public $vsl;
        public $vsll;
        public $vssk;
        public $vsq;
        public $isd;
        public $ivd;
        public $ipd;
        public $issd;
        public $optName;
        public $optInt;
        public $optValStruct;
        public $optRefStruct;
        public $optEnum;
        public $optClass;
        public $optProxy;
    }
    global $IcePHP__t_string;
    global $IcePHP__t_byte;
    global $IcePHP__t_short;
    global $IcePHP__t_int;
    global $IcePHP__t_long;
    global $Test__t_ValStruct;
    global $Test__t_RefStruct;
    global $Test__t_MyClass;
    global $Test__t_MyInterfacePrx;
    global $Test__t_ValStructS;
    global $Test__t_ValStructList;
    global $Test__t_ValStructLinkedList;
    global $Test__t_ValStructStack;
    global $Test__t_ValStructQueue;
    global $Test__t_IntStringD;
    global $Test__t_IntValStructD;
    global $Test__t_IntProxyD;
    global $Test__t_IntStringSD;
    global $Test__t_MyEnum;

    $Test__t_MyException = IcePHP_defineException('::Test::MyException', '\\Test\\MyException', false, null, array(
        array('name', $IcePHP__t_string, false, 0),
        array('b', $IcePHP__t_byte, false, 0),
        array('s', $IcePHP__t_short, false, 0),
        array('i', $IcePHP__t_int, false, 0),
        array('l', $IcePHP__t_long, false, 0),
        array('vs', $Test__t_ValStruct, false, 0),
        array('rs', $Test__t_RefStruct, false, 0),
        array('c', $Test__t_MyClass, false, 0),
        array('p', $Test__t_MyInterfacePrx, false, 0),
        array('vss', $Test__t_ValStructS, false, 0),
        array('vsl', $Test__t_ValStructList, false, 0),
        array('vsll', $Test__t_ValStructLinkedList, false, 0),
        array('vssk', $Test__t_ValStructStack, false, 0),
        array('vsq', $Test__t_ValStructQueue, false, 0),
        array('isd', $Test__t_IntStringD, false, 0),
        array('ivd', $Test__t_IntValStructD, false, 0),
        array('ipd', $Test__t_IntProxyD, false, 0),
        array('issd', $Test__t_IntStringSD, false, 0),
        array('optName', $IcePHP__t_string, true, 1),
        array('optInt', $IcePHP__t_int, true, 2),
        array('optValStruct', $Test__t_ValStruct, true, 3),
        array('optRefStruct', $Test__t_RefStruct, true, 4),
        array('optEnum', $Test__t_MyEnum, true, 5),
        array('optClass', $Test__t_MyClass, true, 6),
        array('optProxy', $Test__t_MyInterfacePrx, true, 7)));
}
?>
