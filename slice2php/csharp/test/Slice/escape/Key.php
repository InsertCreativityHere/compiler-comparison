<?php
// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>


namespace cs_abstract
{
    global $cs_abstract__t_as;
    class _as
    {
        const base = 0;
    }

    $cs_abstract__t_as = IcePHP_defineEnum('::cs_abstract::as', array('base', 0));
}

namespace cs_abstract
{
    global $cs_abstract__t_break;
    class _break
    {
        public function __construct($_readonly=0)
        {
            $this->_readonly = $_readonly;
        }

        public function __toString(): string
        {
            global $cs_abstract__t_break;
            return IcePHP_stringify($this, $cs_abstract__t_break);
        }

        public $_readonly;
    }

    global $IcePHP__t_int;
    $cs_abstract__t_break = IcePHP_defineStruct('::cs_abstract::break', '\\cs_abstract\\_break', array(
        array('_readonly', $IcePHP__t_int)));
}

namespace cs_abstract
{
    global $cs_abstract__t_fixed;
    class fixed extends \Ice\UserException
    {
        public function ice_id()
        {
            return '::cs_abstract::fixed';
        }

        public function __toString(): string
        {
            global $cs_abstract__t_fixed;
            return IcePHP_stringifyException($this, $cs_abstract__t_fixed);
        }

        public $_for;
    }
    global $IcePHP__t_int;

    $cs_abstract__t_fixed = IcePHP_defineException('::cs_abstract::fixed', '\\cs_abstract\\fixed', null, array(
        array('_for', $IcePHP__t_int, false, 0)));
}

namespace cs_abstract
{
    global $cs_abstract__t_foreach;
    class _foreach extends \cs_abstract\fixed
    {
        public function ice_id()
        {
            return '::cs_abstract::foreach';
        }

        public function __toString(): string
        {
            global $cs_abstract__t_foreach;
            return IcePHP_stringifyException($this, $cs_abstract__t_foreach);
        }

        public $_goto;
        public $Message;
    }
    global $IcePHP__t_int;

    $cs_abstract__t_foreach = IcePHP_defineException('::cs_abstract::foreach', '\\cs_abstract\\_foreach', $cs_abstract__t_fixed, array(
        array('_goto', $IcePHP__t_int, false, 0),
        array('Message', $IcePHP__t_int, false, 0)));
}

namespace cs_abstract
{
    global $cs_abstract__t_case;
    global $cs_abstract__t_casePrx;
    $cs_abstract__t_casePrx = IcePHP_declareProxy('::cs_abstract::case');
}

namespace cs_abstract
{
    global $cs_abstract__t_case;
    global $cs_abstract__t_casePrx;

    class casePrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::cs_abstract::case');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::cs_abstract::case', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::cs_abstract::case', $facet);
        }

        public static function ice_staticId()
        {
            return '::cs_abstract::case';
        }
    }

    global $Ice__t_ObjectPrx;
    $cs_abstract__t_casePrx = IcePHP_defineProxy('::cs_abstract::case', $Ice__t_ObjectPrx, null);

    global $IcePHP__t_int;
    IcePHP_defineOperation($cs_abstract__t_casePrx, 'catch', 0, -1, array(array($IcePHP__t_int)), array(array($IcePHP__t_int)), null, null);
}

namespace cs_abstract
{
    global $cs_abstract__t_decimal;
    global $cs_abstract__t_decimalPrx;
    $cs_abstract__t_decimalPrx = IcePHP_declareProxy('::cs_abstract::decimal');
}

namespace cs_abstract
{
    global $cs_abstract__t_decimal;
    global $cs_abstract__t_decimalPrx;

    class decimalPrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::cs_abstract::decimal');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::cs_abstract::decimal', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::cs_abstract::decimal', $facet);
        }

        public static function ice_staticId()
        {
            return '::cs_abstract::decimal';
        }
    }

    global $Ice__t_ObjectPrx;
    $cs_abstract__t_decimalPrx = IcePHP_defineProxy('::cs_abstract::decimal', $Ice__t_ObjectPrx, null);

    IcePHP_defineOperation($cs_abstract__t_decimalPrx, 'default', 0, -1, null, null, null, array($cs_abstract__t_foreach));
}

namespace cs_abstract
{
    global $cs_abstract__t_delegate;
    $cs_abstract__t_delegate = IcePHP_declareClass('::cs_abstract::delegate');
}

namespace cs_abstract
{
    global $cs_abstract__t_delegate;
    class delegate extends \Ice\Value
    {
        public function __construct($_if=0, $_else=null)
        {
            $this->_if = $_if;
            $this->_else = $_else;
        }

        public function ice_id()
        {
            return '::cs_abstract::delegate';
        }

        public static function ice_staticId()
        {
            return '::cs_abstract::delegate';
        }

        public function __toString(): string
        {
            global $cs_abstract__t_delegate;
            return IcePHP_stringify($this, $cs_abstract__t_delegate);
        }

        public $_if;
        public $_else;
    }

    global $Ice__t_Value;
    global $IcePHP__t_int;
    global $cs_abstract__t_casePrx;
    $cs_abstract__t_delegate = IcePHP_defineClass('::cs_abstract::delegate', '\\cs_abstract\\delegate', -1, false, $Ice__t_Value, array(
        array('_if', $IcePHP__t_int, false, 0),
        array('_else', $cs_abstract__t_casePrx, false, 0)));
}

namespace cs_abstract
{
    global $cs_abstract__t_explicit;
    global $cs_abstract__t_explicitPrx;
    $cs_abstract__t_explicitPrx = IcePHP_declareProxy('::cs_abstract::explicit');
}

namespace cs_abstract
{
    global $cs_abstract__t_explicit;
    global $cs_abstract__t_explicitPrx;

    class explicitPrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::cs_abstract::explicit');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::cs_abstract::explicit', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::cs_abstract::explicit', $facet);
        }

        public static function ice_staticId()
        {
            return '::cs_abstract::explicit';
        }
    }

    global $Ice__t_ObjectPrx;
    $cs_abstract__t_explicitPrx = IcePHP_defineProxy('::cs_abstract::explicit', $Ice__t_ObjectPrx, array($cs_abstract__t_decimalPrx, $cs_abstract__t_casePrx));
}

namespace cs_abstract
{
    global $cs_abstract__t_while;

    if(!isset($cs_abstract__t_while))
    {
        global $IcePHP__t_string;
        global $cs_abstract__t_break;
        $cs_abstract__t_while = IcePHP_defineDictionary('::cs_abstract::while', $IcePHP__t_string, $cs_abstract__t_break);
    }
}

namespace cs_abstract
{
    global $cs_abstract__t_optionalMembers;
    $cs_abstract__t_optionalMembers = IcePHP_declareClass('::cs_abstract::optionalMembers');
}

namespace cs_abstract
{
    global $cs_abstract__t_optionalMembers;
    class optionalMembers extends \Ice\Value
    {
        public function __construct($_for=\Ice\None, $_goto=\Ice\None, $_if=\Ice\None, $internal=\Ice\None, $_namespace=\Ice\None)
        {
            $this->_for = is_null($_for) ? new \cs_abstract\_break : $_for;
            $this->_goto = $_goto;
            $this->_if = $_if;
            $this->internal = $internal;
            $this->_namespace = $_namespace;
        }

        public function ice_id()
        {
            return '::cs_abstract::optionalMembers';
        }

        public static function ice_staticId()
        {
            return '::cs_abstract::optionalMembers';
        }

        public function __toString(): string
        {
            global $cs_abstract__t_optionalMembers;
            return IcePHP_stringify($this, $cs_abstract__t_optionalMembers);
        }

        public $_for;
        public $_goto;
        public $_if;
        public $internal;
        public $_namespace;
    }

    global $Ice__t_Value;
    global $cs_abstract__t_break;
    global $cs_abstract__t_as;
    global $cs_abstract__t_explicitPrx;
    global $cs_abstract__t_while;
    global $IcePHP__t_string;
    $cs_abstract__t_optionalMembers = IcePHP_defineClass('::cs_abstract::optionalMembers', '\\cs_abstract\\optionalMembers', -1, false, $Ice__t_Value, array(
        array('_for', $cs_abstract__t_break, true, 1),
        array('_goto', $cs_abstract__t_as, true, 2),
        array('_if', $cs_abstract__t_explicitPrx, true, 3),
        array('internal', $cs_abstract__t_while, true, 5),
        array('_namespace', $IcePHP__t_string, true, 7)));
}

namespace cs_abstract
{
    global $cs_abstract__t_optionalParams;
    global $cs_abstract__t_optionalParamsPrx;
    $cs_abstract__t_optionalParamsPrx = IcePHP_declareProxy('::cs_abstract::optionalParams');
}

namespace cs_abstract
{
    global $cs_abstract__t_optionalParams;
    global $cs_abstract__t_optionalParamsPrx;

    class optionalParamsPrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::cs_abstract::optionalParams');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::cs_abstract::optionalParams', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::cs_abstract::optionalParams', $facet);
        }

        public static function ice_staticId()
        {
            return '::cs_abstract::optionalParams';
        }
    }

    global $Ice__t_ObjectPrx;
    $cs_abstract__t_optionalParamsPrx = IcePHP_defineProxy('::cs_abstract::optionalParams', $Ice__t_ObjectPrx, null);

    global $cs_abstract__t_as;
    global $cs_abstract__t_explicitPrx;
    global $cs_abstract__t_while;
    global $IcePHP__t_string;
    global $cs_abstract__t_break;
    IcePHP_defineOperation($cs_abstract__t_optionalParamsPrx, 'for', 0, -1, array(array($cs_abstract__t_as, 2), array($cs_abstract__t_explicitPrx, 3), array($cs_abstract__t_while, 5), array($IcePHP__t_string, 7)), null, array($cs_abstract__t_break, 1), null);
    IcePHP_defineOperation($cs_abstract__t_optionalParamsPrx, 'continue', 0, -1, array(array($cs_abstract__t_as, 2), array($cs_abstract__t_explicitPrx, 3), array($cs_abstract__t_while, 5), array($IcePHP__t_string, 7)), null, array($cs_abstract__t_break, 1), null);
    IcePHP_defineOperation($cs_abstract__t_optionalParamsPrx, 'in', 0, -1, null, array(array($cs_abstract__t_as, 2), array($cs_abstract__t_explicitPrx, 3), array($cs_abstract__t_while, 5), array($IcePHP__t_string, 7)), array($cs_abstract__t_break, 1), null);
    IcePHP_defineOperation($cs_abstract__t_optionalParamsPrx, 'foreach', 0, -1, null, array(array($cs_abstract__t_as, 2), array($cs_abstract__t_explicitPrx, 3), array($cs_abstract__t_while, 5), array($IcePHP__t_string, 7)), array($cs_abstract__t_break, 1), null);
}

namespace cs_abstract
{
    if(!defined('\\cs_abstract\\_protected'))
    {
        define(__NAMESPACE__ . '\\_protected', 0);
    }
}

namespace cs_abstract
{
    if(!defined('\\cs_abstract\\struct'))
    {
        define(__NAMESPACE__ . '\\struct', 1);
    }
}

namespace cs_abstract\System
{
    global $cs_abstract_System__t_Test;
    global $cs_abstract_System__t_TestPrx;
    $cs_abstract_System__t_TestPrx = IcePHP_declareProxy('::cs_abstract::System::Test');
}

namespace cs_abstract\System
{
    global $cs_abstract_System__t_Test;
    global $cs_abstract_System__t_TestPrx;

    class TestPrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::cs_abstract::System::Test');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::cs_abstract::System::Test', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::cs_abstract::System::Test', $facet);
        }

        public static function ice_staticId()
        {
            return '::cs_abstract::System::Test';
        }
    }

    global $Ice__t_ObjectPrx;
    $cs_abstract_System__t_TestPrx = IcePHP_defineProxy('::cs_abstract::System::Test', $Ice__t_ObjectPrx, null);

    IcePHP_defineOperation($cs_abstract_System__t_TestPrx, 'op', 0, -1, null, null, null, null);
}

namespace System
{
    global $System__t_Test;
    global $System__t_TestPrx;
    $System__t_TestPrx = IcePHP_declareProxy('::System::Test');
}

namespace System
{
    global $System__t_Test;
    global $System__t_TestPrx;

    class TestPrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::System::Test');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::System::Test', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::System::Test', $facet);
        }

        public static function ice_staticId()
        {
            return '::System::Test';
        }
    }

    global $Ice__t_ObjectPrx;
    $System__t_TestPrx = IcePHP_defineProxy('::System::Test', $Ice__t_ObjectPrx, null);

    IcePHP_defineOperation($System__t_TestPrx, 'op', 0, -1, null, null, null, null);
}
?>
