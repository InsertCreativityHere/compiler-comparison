<?php
//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


namespace _and
{
    global $and__t_assert;
    class assert
    {
        const _break = 0;
    }

    $and__t_assert = IcePHP_defineEnum('::and::assert', array('break', 0));
}

namespace _and
{
    global $and__t_continue;
    class _continue
    {
        public function __construct($def=0)
        {
            $this->def = $def;
        }

        public function __toString(): string
        {
            global $and__t_continue;
            return IcePHP_stringify($this, $and__t_continue);
        }

        public $def;
    }

    global $IcePHP__t_int;
    $and__t_continue = IcePHP_defineStruct('::and::continue', '\\_and\\_continue', array(
        array('def', $IcePHP__t_int)));
}

namespace _and
{
    global $and__t_del;
    global $and__t_delPrx;

    class delPrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::and::del');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::and::del', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::and::del', $facet);
        }

        public static function ice_staticId()
        {
            return '::and::del';
        }
    }

    global $Ice__t_ObjectPrx;
    $and__t_delPrx = IcePHP_defineProxy('::and::del', $Ice__t_ObjectPrx, null);

    global $IcePHP__t_int;
    IcePHP_defineOperation($and__t_delPrx, 'elif', 0, -1, array(array($IcePHP__t_int)), array(array($IcePHP__t_int)), null, null);
}

namespace _and
{
    global $and__t_exec;
    global $and__t_execPrx;

    class execPrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::and::exec');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::and::exec', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::and::exec', $facet);
        }

        public static function ice_staticId()
        {
            return '::and::exec';
        }
    }

    global $Ice__t_ObjectPrx;
    $and__t_execPrx = IcePHP_defineProxy('::and::exec', $Ice__t_ObjectPrx, null);

    IcePHP_defineOperation($and__t_execPrx, 'finally', 0, -1, null, null, null, null);
}

namespace _and
{
    global $and__t_for;
    class _for extends \Ice\Value
    {
        public function __construct($lambda=0, $from=null, $_global=0)
        {
            $this->lambda = $lambda;
            $this->from = $from;
            $this->_global = $_global;
        }

        public function ice_id()
        {
            return '::and::for';
        }

        public static function ice_staticId()
        {
            return '::and::for';
        }

        public function __toString(): string
        {
            global $and__t_for;
            return IcePHP_stringify($this, $and__t_for);
        }

        public $lambda;
        public $from;
        public $_global;
    }

    global $Ice__t_Value;
    global $IcePHP__t_int;
    global $and__t_execPrx;
    $and__t_for = IcePHP_defineClass('::and::for', '\\_and\\_for', -1, false, $Ice__t_Value, array(
        array('lambda', $IcePHP__t_int, false, 0),
        array('from', $and__t_execPrx, false, 0),
        array('_global', $IcePHP__t_int, false, 0)));
}

namespace _and
{
    global $and__t_if;
    global $and__t_ifPrx;

    class ifPrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::and::if');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::and::if', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::and::if', $facet);
        }

        public static function ice_staticId()
        {
            return '::and::if';
        }
    }

    global $Ice__t_ObjectPrx;
    $and__t_ifPrx = IcePHP_defineProxy('::and::if', $Ice__t_ObjectPrx, array($and__t_execPrx, $and__t_delPrx));
}

namespace _and
{
    global $and__t_import;

    if(!isset($and__t_import))
    {
        global $and__t_assert;
        $and__t_import = IcePHP_defineSequence('::and::import', $and__t_assert);
    }
}

namespace _and
{
    global $and__t_in;

    if(!isset($and__t_in))
    {
        global $IcePHP__t_string;
        global $and__t_assert;
        $and__t_in = IcePHP_defineDictionary('::and::in', $IcePHP__t_string, $and__t_assert);
    }
}

namespace _and
{
    global $and__t_is;
    class is extends \Ice\UserException
    {
        public function ice_id()
        {
            return '::and::is';
        }

        public function __toString(): string
        {
            global $and__t_is;
            return IcePHP_stringifyException($this, $and__t_is);
        }

        public $lambda;
    }
    global $IcePHP__t_int;

    $and__t_is = IcePHP_defineException('::and::is', '\\_and\\is', null, array(
        array('lambda', $IcePHP__t_int, false, 0)));
}

namespace _and
{
    global $and__t_not;
    class not extends \_and\is
    {
        public function ice_id()
        {
            return '::and::not';
        }

        public function __toString(): string
        {
            global $and__t_not;
            return IcePHP_stringifyException($this, $and__t_not);
        }

        public $_or;
        public $pass;
    }
    global $IcePHP__t_int;

    $and__t_not = IcePHP_defineException('::and::not', '\\_and\\not', $and__t_is, array(
        array('_or', $IcePHP__t_int, false, 0),
        array('pass', $IcePHP__t_int, false, 0)));
}

namespace _and
{
    global $and__t_print;
    global $and__t_printPrx;

    class printPrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::and::print');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::and::print', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::and::print', $facet);
        }

        public static function ice_staticId()
        {
            return '::and::print';
        }
    }

    global $Ice__t_ObjectPrx;
    $and__t_printPrx = IcePHP_defineProxy('::and::print', $Ice__t_ObjectPrx, null);

    global $and__t_continue;
    global $and__t_for;
    global $and__t_delPrx;
    global $and__t_execPrx;
    global $and__t_ifPrx;
    global $IcePHP__t_int;
    global $and__t_assert;
    IcePHP_defineOperation($and__t_printPrx, 'raise', 0, -1, array(array($and__t_continue), array($and__t_for), array($and__t_delPrx), array($and__t_execPrx), array($and__t_ifPrx), array($IcePHP__t_int)), null, array($and__t_assert), array($and__t_is));
}

namespace _and
{
    if(!defined('\\_and\\lambda'))
    {
        define(__NAMESPACE__ . '\\lambda', 0);
    }
}

namespace _and
{
    global $and__t_EnumNone;
    class EnumNone
    {
        const None = 0;
    }

    $and__t_EnumNone = IcePHP_defineEnum('::and::EnumNone', array('None', 0));
}
?>
