<?php
// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>


namespace
{
    require_once 'Ice/PropertyDict.php';
}

namespace Test
{
    global $Test__t_RemoteCommunicator;
    global $Test__t_RemoteCommunicatorPrx;
    $Test__t_RemoteCommunicatorPrx = IcePHP_declareProxy('::Test::RemoteCommunicator');
}

namespace Test
{
    global $Test__t_RemoteCommunicator;
    global $Test__t_RemoteCommunicatorPrx;

    class RemoteCommunicatorPrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::Test::RemoteCommunicator');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::Test::RemoteCommunicator', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Test::RemoteCommunicator', $facet);
        }

        public static function ice_staticId()
        {
            return '::Test::RemoteCommunicator';
        }
    }

    global $Ice__t_ObjectPrx;
    $Test__t_RemoteCommunicatorPrx = IcePHP_defineProxy('::Test::RemoteCommunicator', $Ice__t_ObjectPrx, null);

    global $Ice__t_ObjectPrx;
    global $Ice__t_PropertyDict;
    IcePHP_defineOperation($Test__t_RemoteCommunicatorPrx, 'getAdmin', 0, -1, null, null, array($Ice__t_ObjectPrx), null);
    IcePHP_defineOperation($Test__t_RemoteCommunicatorPrx, 'getChanges', 0, -1, null, null, array($Ice__t_PropertyDict), null);
    IcePHP_defineOperation($Test__t_RemoteCommunicatorPrx, 'shutdown', 0, -1, null, null, null, null);
    IcePHP_defineOperation($Test__t_RemoteCommunicatorPrx, 'waitForShutdown', 0, -1, null, null, null, null);
    IcePHP_defineOperation($Test__t_RemoteCommunicatorPrx, 'destroy', 0, -1, null, null, null, null);
}

namespace Test
{
    global $Test__t_RemoteCommunicatorFactory;
    global $Test__t_RemoteCommunicatorFactoryPrx;
    $Test__t_RemoteCommunicatorFactoryPrx = IcePHP_declareProxy('::Test::RemoteCommunicatorFactory');
}

namespace Test
{
    global $Test__t_RemoteCommunicatorFactory;
    global $Test__t_RemoteCommunicatorFactoryPrx;

    class RemoteCommunicatorFactoryPrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::Test::RemoteCommunicatorFactory');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::Test::RemoteCommunicatorFactory', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Test::RemoteCommunicatorFactory', $facet);
        }

        public static function ice_staticId()
        {
            return '::Test::RemoteCommunicatorFactory';
        }
    }

    global $Ice__t_ObjectPrx;
    $Test__t_RemoteCommunicatorFactoryPrx = IcePHP_defineProxy('::Test::RemoteCommunicatorFactory', $Ice__t_ObjectPrx, null);

    global $Ice__t_PropertyDict;
    global $Test__t_RemoteCommunicatorPrx;
    IcePHP_defineOperation($Test__t_RemoteCommunicatorFactoryPrx, 'createCommunicator', 0, -1, array(array($Ice__t_PropertyDict)), null, array($Test__t_RemoteCommunicatorPrx), null);
    IcePHP_defineOperation($Test__t_RemoteCommunicatorFactoryPrx, 'shutdown', 0, -1, null, null, null, null);
}

namespace Test
{
    global $Test__t_TestFacet;
    global $Test__t_TestFacetPrx;
    $Test__t_TestFacetPrx = IcePHP_declareProxy('::Test::TestFacet');
}

namespace Test
{
    global $Test__t_TestFacet;
    global $Test__t_TestFacetPrx;

    class TestFacetPrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::Test::TestFacet');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::Test::TestFacet', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Test::TestFacet', $facet);
        }

        public static function ice_staticId()
        {
            return '::Test::TestFacet';
        }
    }

    global $Ice__t_ObjectPrx;
    $Test__t_TestFacetPrx = IcePHP_defineProxy('::Test::TestFacet', $Ice__t_ObjectPrx, null);

    IcePHP_defineOperation($Test__t_TestFacetPrx, 'op', 0, -1, null, null, null, null);
}
?>
