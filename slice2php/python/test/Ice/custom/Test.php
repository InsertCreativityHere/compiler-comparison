<?php
//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


namespace Test
{
    global $Test__t_ByteString;

    if(!isset($Test__t_ByteString))
    {
        global $IcePHP__t_byte;
        $Test__t_ByteString = IcePHP_defineSequence('::Test::ByteString', $IcePHP__t_byte);
    }
}

namespace Test
{
    global $Test__t_ByteList;

    if(!isset($Test__t_ByteList))
    {
        global $IcePHP__t_byte;
        $Test__t_ByteList = IcePHP_defineSequence('::Test::ByteList', $IcePHP__t_byte);
    }
}

namespace Test
{
    global $Test__t_StringList;

    if(!isset($Test__t_StringList))
    {
        global $IcePHP__t_string;
        $Test__t_StringList = IcePHP_defineSequence('::Test::StringList', $IcePHP__t_string);
    }
}

namespace Test
{
    global $Test__t_StringTuple;

    if(!isset($Test__t_StringTuple))
    {
        global $IcePHP__t_string;
        $Test__t_StringTuple = IcePHP_defineSequence('::Test::StringTuple', $IcePHP__t_string);
    }
}

namespace Test
{
    global $Test__t_BoolSeq1;

    if(!isset($Test__t_BoolSeq1))
    {
        global $IcePHP__t_bool;
        $Test__t_BoolSeq1 = IcePHP_defineSequence('::Test::BoolSeq1', $IcePHP__t_bool);
    }
}

namespace Test
{
    global $Test__t_BoolSeq2;

    if(!isset($Test__t_BoolSeq2))
    {
        global $IcePHP__t_bool;
        $Test__t_BoolSeq2 = IcePHP_defineSequence('::Test::BoolSeq2', $IcePHP__t_bool);
    }
}

namespace Test
{
    global $Test__t_ByteSeq1;

    if(!isset($Test__t_ByteSeq1))
    {
        global $IcePHP__t_byte;
        $Test__t_ByteSeq1 = IcePHP_defineSequence('::Test::ByteSeq1', $IcePHP__t_byte);
    }
}

namespace Test
{
    global $Test__t_ByteSeq2;

    if(!isset($Test__t_ByteSeq2))
    {
        global $IcePHP__t_byte;
        $Test__t_ByteSeq2 = IcePHP_defineSequence('::Test::ByteSeq2', $IcePHP__t_byte);
    }
}

namespace Test
{
    global $Test__t_ShortSeq1;

    if(!isset($Test__t_ShortSeq1))
    {
        global $IcePHP__t_short;
        $Test__t_ShortSeq1 = IcePHP_defineSequence('::Test::ShortSeq1', $IcePHP__t_short);
    }
}

namespace Test
{
    global $Test__t_ShortSeq2;

    if(!isset($Test__t_ShortSeq2))
    {
        global $IcePHP__t_short;
        $Test__t_ShortSeq2 = IcePHP_defineSequence('::Test::ShortSeq2', $IcePHP__t_short);
    }
}

namespace Test
{
    global $Test__t_IntSeq1;

    if(!isset($Test__t_IntSeq1))
    {
        global $IcePHP__t_int;
        $Test__t_IntSeq1 = IcePHP_defineSequence('::Test::IntSeq1', $IcePHP__t_int);
    }
}

namespace Test
{
    global $Test__t_IntSeq2;

    if(!isset($Test__t_IntSeq2))
    {
        global $IcePHP__t_int;
        $Test__t_IntSeq2 = IcePHP_defineSequence('::Test::IntSeq2', $IcePHP__t_int);
    }
}

namespace Test
{
    global $Test__t_LongSeq1;

    if(!isset($Test__t_LongSeq1))
    {
        global $IcePHP__t_long;
        $Test__t_LongSeq1 = IcePHP_defineSequence('::Test::LongSeq1', $IcePHP__t_long);
    }
}

namespace Test
{
    global $Test__t_LongSeq2;

    if(!isset($Test__t_LongSeq2))
    {
        global $IcePHP__t_long;
        $Test__t_LongSeq2 = IcePHP_defineSequence('::Test::LongSeq2', $IcePHP__t_long);
    }
}

namespace Test
{
    global $Test__t_FloatSeq1;

    if(!isset($Test__t_FloatSeq1))
    {
        global $IcePHP__t_float;
        $Test__t_FloatSeq1 = IcePHP_defineSequence('::Test::FloatSeq1', $IcePHP__t_float);
    }
}

namespace Test
{
    global $Test__t_FloatSeq2;

    if(!isset($Test__t_FloatSeq2))
    {
        global $IcePHP__t_float;
        $Test__t_FloatSeq2 = IcePHP_defineSequence('::Test::FloatSeq2', $IcePHP__t_float);
    }
}

namespace Test
{
    global $Test__t_DoubleSeq1;

    if(!isset($Test__t_DoubleSeq1))
    {
        global $IcePHP__t_double;
        $Test__t_DoubleSeq1 = IcePHP_defineSequence('::Test::DoubleSeq1', $IcePHP__t_double);
    }
}

namespace Test
{
    global $Test__t_DoubleSeq2;

    if(!isset($Test__t_DoubleSeq2))
    {
        global $IcePHP__t_double;
        $Test__t_DoubleSeq2 = IcePHP_defineSequence('::Test::DoubleSeq2', $IcePHP__t_double);
    }
}

namespace Test
{
    global $Test__t_S;
    class S
    {
        public function __construct($b1=null, $b2=null, $b3=null, $b4=null, $s1=null, $s2=null, $s3=null, $s4=null)
        {
            $this->b1 = $b1;
            $this->b2 = $b2;
            $this->b3 = $b3;
            $this->b4 = $b4;
            $this->s1 = $s1;
            $this->s2 = $s2;
            $this->s3 = $s3;
            $this->s4 = $s4;
        }

        public function __toString(): string
        {
            global $Test__t_S;
            return IcePHP_stringify($this, $Test__t_S);
        }

        public $b1;
        public $b2;
        public $b3;
        public $b4;
        public $s1;
        public $s2;
        public $s3;
        public $s4;
    }

    global $Test__t_ByteString;
    global $Test__t_ByteList;
    global $Test__t_StringList;
    global $Test__t_StringTuple;
    $Test__t_S = IcePHP_defineStruct('::Test::S', '\\Test\\S', array(
        array('b1', $Test__t_ByteString),
        array('b2', $Test__t_ByteString),
        array('b3', $Test__t_ByteList),
        array('b4', $Test__t_ByteList),
        array('s1', $Test__t_StringList),
        array('s2', $Test__t_StringList),
        array('s3', $Test__t_StringTuple),
        array('s4', $Test__t_StringTuple)));
}

namespace Test
{
    global $Test__t_C;
    class C extends \Ice\Value
    {
        public function __construct($b1=null, $b2=null, $b3=null, $b4=null, $s1=null, $s2=null, $s3=null, $s4=null)
        {
            $this->b1 = $b1;
            $this->b2 = $b2;
            $this->b3 = $b3;
            $this->b4 = $b4;
            $this->s1 = $s1;
            $this->s2 = $s2;
            $this->s3 = $s3;
            $this->s4 = $s4;
        }

        public function ice_id()
        {
            return '::Test::C';
        }

        public static function ice_staticId()
        {
            return '::Test::C';
        }

        public function __toString(): string
        {
            global $Test__t_C;
            return IcePHP_stringify($this, $Test__t_C);
        }

        public $b1;
        public $b2;
        public $b3;
        public $b4;
        public $s1;
        public $s2;
        public $s3;
        public $s4;
    }

    global $Ice__t_Value;
    global $Test__t_ByteString;
    global $Test__t_ByteList;
    global $Test__t_StringList;
    global $Test__t_StringTuple;
    $Test__t_C = IcePHP_defineClass('::Test::C', '\\Test\\C', -1, false, false, $Ice__t_Value, array(
        array('b1', $Test__t_ByteString, false, 0),
        array('b2', $Test__t_ByteString, false, 0),
        array('b3', $Test__t_ByteList, false, 0),
        array('b4', $Test__t_ByteList, false, 0),
        array('s1', $Test__t_StringList, false, 0),
        array('s2', $Test__t_StringList, false, 0),
        array('s3', $Test__t_StringTuple, false, 0),
        array('s4', $Test__t_StringTuple, false, 0)));
}

namespace Test
{
    global $Test__t_D;
    class D extends \Ice\Value
    {
        public function __construct($boolSeq=\Ice\None, $byteSeq=\Ice\None, $shortSeq=\Ice\None, $intSeq=\Ice\None, $longSeq=\Ice\None, $floatSeq=\Ice\None, $doubleSeq=\Ice\None)
        {
            $this->boolSeq = $boolSeq;
            $this->byteSeq = $byteSeq;
            $this->shortSeq = $shortSeq;
            $this->intSeq = $intSeq;
            $this->longSeq = $longSeq;
            $this->floatSeq = $floatSeq;
            $this->doubleSeq = $doubleSeq;
        }

        public function ice_id()
        {
            return '::Test::D';
        }

        public static function ice_staticId()
        {
            return '::Test::D';
        }

        public function __toString(): string
        {
            global $Test__t_D;
            return IcePHP_stringify($this, $Test__t_D);
        }

        public $boolSeq;
        public $byteSeq;
        public $shortSeq;
        public $intSeq;
        public $longSeq;
        public $floatSeq;
        public $doubleSeq;
    }

    global $Ice__t_Value;
    global $Test__t_BoolSeq1;
    global $Test__t_ByteSeq1;
    global $Test__t_ShortSeq1;
    global $Test__t_IntSeq1;
    global $Test__t_LongSeq1;
    global $Test__t_FloatSeq1;
    global $Test__t_DoubleSeq1;
    $Test__t_D = IcePHP_defineClass('::Test::D', '\\Test\\D', -1, false, false, $Ice__t_Value, array(
        array('boolSeq', $Test__t_BoolSeq1, true, 1),
        array('byteSeq', $Test__t_ByteSeq1, true, 2),
        array('shortSeq', $Test__t_ShortSeq1, true, 3),
        array('intSeq', $Test__t_IntSeq1, true, 4),
        array('longSeq', $Test__t_LongSeq1, true, 5),
        array('floatSeq', $Test__t_FloatSeq1, true, 6),
        array('doubleSeq', $Test__t_DoubleSeq1, true, 7)));
}

namespace Test
{
    global $Test__t_Custom;
    global $Test__t_CustomPrx;

    class CustomPrxHelper
    {
        public static function checkedCast($proxy, $facetOrContext=null, $context=null)
        {
            return $proxy->ice_checkedCast('::Test::Custom', $facetOrContext, $context);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Test::Custom', $facet);
        }

        public static function ice_staticId()
        {
            return '::Test::Custom';
        }
    }
    $Test__t_Custom = IcePHP_defineClass('::Test::Custom', '\\Test\\Custom', -1, false, true, null, null);

    global $Ice__t_ObjectPrx;
    $Test__t_CustomPrx = IcePHP_defineProxy('::Test::Custom', $Ice__t_ObjectPrx, null);

    global $Test__t_ByteString;
    global $Test__t_ByteList;
    global $Test__t_StringList;
    global $Test__t_StringTuple;
    global $Test__t_S;
    global $Test__t_C;
    global $Test__t_BoolSeq1;
    global $Test__t_BoolSeq2;
    global $Test__t_ByteSeq1;
    global $Test__t_ByteSeq2;
    global $Test__t_ShortSeq1;
    global $Test__t_ShortSeq2;
    global $Test__t_IntSeq1;
    global $Test__t_IntSeq2;
    global $Test__t_LongSeq1;
    global $Test__t_LongSeq2;
    global $Test__t_FloatSeq1;
    global $Test__t_FloatSeq2;
    global $Test__t_DoubleSeq1;
    global $Test__t_DoubleSeq2;
    global $Test__t_D;
    IcePHP_defineOperation($Test__t_CustomPrx, 'opByteString1', 0, 0, 0, array(array($Test__t_ByteString)), array(array($Test__t_ByteString)), array($Test__t_ByteString), null);
    IcePHP_defineOperation($Test__t_CustomPrx, 'opByteString2', 0, 0, 0, array(array($Test__t_ByteString)), array(array($Test__t_ByteString)), array($Test__t_ByteString), null);
    IcePHP_defineOperation($Test__t_CustomPrx, 'opByteList1', 0, 0, 0, array(array($Test__t_ByteList)), array(array($Test__t_ByteList)), array($Test__t_ByteList), null);
    IcePHP_defineOperation($Test__t_CustomPrx, 'opByteList2', 0, 0, 0, array(array($Test__t_ByteList)), array(array($Test__t_ByteList)), array($Test__t_ByteList), null);
    IcePHP_defineOperation($Test__t_CustomPrx, 'opStringList1', 0, 0, 0, array(array($Test__t_StringList)), array(array($Test__t_StringList)), array($Test__t_StringList), null);
    IcePHP_defineOperation($Test__t_CustomPrx, 'opStringList2', 0, 0, 0, array(array($Test__t_StringList)), array(array($Test__t_StringList)), array($Test__t_StringList), null);
    IcePHP_defineOperation($Test__t_CustomPrx, 'opStringTuple1', 0, 0, 0, array(array($Test__t_StringTuple)), array(array($Test__t_StringTuple)), array($Test__t_StringTuple), null);
    IcePHP_defineOperation($Test__t_CustomPrx, 'opStringTuple2', 0, 0, 0, array(array($Test__t_StringTuple)), array(array($Test__t_StringTuple)), array($Test__t_StringTuple), null);
    IcePHP_defineOperation($Test__t_CustomPrx, 'sendS', 0, 0, 0, array(array($Test__t_S)), null, null, null);
    IcePHP_defineOperation($Test__t_CustomPrx, 'sendC', 0, 0, 0, array(array($Test__t_C)), null, null, null);
    IcePHP_defineOperation($Test__t_CustomPrx, 'opBoolSeq', 0, 0, 0, array(array($Test__t_BoolSeq1)), array(array($Test__t_BoolSeq2)), array($Test__t_BoolSeq1), null);
    IcePHP_defineOperation($Test__t_CustomPrx, 'opByteSeq', 0, 0, 0, array(array($Test__t_ByteSeq1)), array(array($Test__t_ByteSeq2)), array($Test__t_ByteSeq1), null);
    IcePHP_defineOperation($Test__t_CustomPrx, 'opShortSeq', 0, 0, 0, array(array($Test__t_ShortSeq1)), array(array($Test__t_ShortSeq2)), array($Test__t_ShortSeq1), null);
    IcePHP_defineOperation($Test__t_CustomPrx, 'opIntSeq', 0, 0, 0, array(array($Test__t_IntSeq1)), array(array($Test__t_IntSeq2)), array($Test__t_IntSeq1), null);
    IcePHP_defineOperation($Test__t_CustomPrx, 'opLongSeq', 0, 0, 0, array(array($Test__t_LongSeq1)), array(array($Test__t_LongSeq2)), array($Test__t_LongSeq1), null);
    IcePHP_defineOperation($Test__t_CustomPrx, 'opFloatSeq', 0, 0, 0, array(array($Test__t_FloatSeq1)), array(array($Test__t_FloatSeq2)), array($Test__t_FloatSeq1), null);
    IcePHP_defineOperation($Test__t_CustomPrx, 'opDoubleSeq', 0, 0, 0, array(array($Test__t_DoubleSeq1)), array(array($Test__t_DoubleSeq2)), array($Test__t_DoubleSeq1), null);
    IcePHP_defineOperation($Test__t_CustomPrx, 'opBogusArrayNotExistsFactory', 0, 0, 0, null, null, array($Test__t_BoolSeq1), null);
    IcePHP_defineOperation($Test__t_CustomPrx, 'opBogusArrayThrowFactory', 0, 0, 0, null, null, array($Test__t_BoolSeq1), null);
    IcePHP_defineOperation($Test__t_CustomPrx, 'opBogusArrayType', 0, 0, 0, null, null, array($Test__t_BoolSeq1), null);
    IcePHP_defineOperation($Test__t_CustomPrx, 'opBogusArrayNoneFactory', 0, 0, 0, null, null, array($Test__t_BoolSeq1), null);
    IcePHP_defineOperation($Test__t_CustomPrx, 'opBogusArraySignatureFactory', 0, 0, 0, null, null, array($Test__t_BoolSeq1), null);
    IcePHP_defineOperation($Test__t_CustomPrx, 'opBogusArrayNoCallableFactory', 0, 0, 0, null, null, array($Test__t_BoolSeq1), null);
    IcePHP_defineOperation($Test__t_CustomPrx, 'opD', 0, 0, 0, array(array($Test__t_D)), null, array($Test__t_D), null);
    IcePHP_defineOperation($Test__t_CustomPrx, 'shutdown', 0, 0, 0, null, null, null, null);
}
?>
