<?php
//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


namespace
{
    require_once 'Glacier2/Session.php';
}

namespace Test
{
    global $Test__t_Backend;
    global $Test__t_BackendPrx;

    class BackendPrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::Test::Backend');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::Test::Backend', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Test::Backend', $facet);
        }

        public static function ice_staticId()
        {
            return '::Test::Backend';
        }
    }

    global $Ice__t_ObjectPrx;
    $Test__t_BackendPrx = IcePHP_defineProxy('::Test::Backend', $Ice__t_ObjectPrx, null);

    IcePHP_defineOperation($Test__t_BackendPrx, 'check', 0, -1, null, null, null, null);
    IcePHP_defineOperation($Test__t_BackendPrx, 'shutdown', 0, -1, null, null, null, null);
}

namespace Test
{
    global $Test__t_StateCode;
    class StateCode
    {
        const Initial = 0;
        const Running = 1;
        const Finished = 2;
    }

    $Test__t_StateCode = IcePHP_defineEnum('::Test::StateCode', array('Initial', 0, 'Running', 1, 'Finished', 2));
}

namespace Test
{
    global $Test__t_TestToken;
    class TestToken
    {
        public function __construct($expectedResult=false, $description='', $code=\Test\StateCode::Initial, $config=0, $caseIndex=0, $testReference='')
        {
            $this->expectedResult = $expectedResult;
            $this->description = $description;
            $this->code = $code;
            $this->config = $config;
            $this->caseIndex = $caseIndex;
            $this->testReference = $testReference;
        }

        public function __toString(): string
        {
            global $Test__t_TestToken;
            return IcePHP_stringify($this, $Test__t_TestToken);
        }

        public $expectedResult;
        public $description;
        public $code;
        public $config;
        public $caseIndex;
        public $testReference;
    }

    global $IcePHP__t_bool;
    global $IcePHP__t_string;
    global $Test__t_StateCode;
    global $IcePHP__t_short;
    $Test__t_TestToken = IcePHP_defineStruct('::Test::TestToken', '\\Test\\TestToken', array(
        array('expectedResult', $IcePHP__t_bool),
        array('description', $IcePHP__t_string),
        array('code', $Test__t_StateCode),
        array('config', $IcePHP__t_short),
        array('caseIndex', $IcePHP__t_short),
        array('testReference', $IcePHP__t_string)));
}

namespace Test
{
    global $Test__t_TestController;
    global $Test__t_TestControllerPrx;

    class TestControllerPrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::Test::TestController');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::Test::TestController', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Test::TestController', $facet);
        }

        public static function ice_staticId()
        {
            return '::Test::TestController';
        }
    }

    global $Ice__t_ObjectPrx;
    $Test__t_TestControllerPrx = IcePHP_defineProxy('::Test::TestController', $Ice__t_ObjectPrx, null);

    global $Glacier2__t_SessionPrx;
    global $Test__t_TestToken;
    IcePHP_defineOperation($Test__t_TestControllerPrx, 'step', 0, -1, array(array($Glacier2__t_SessionPrx), array($Test__t_TestToken)), array(array($Test__t_TestToken)), null, null);
    IcePHP_defineOperation($Test__t_TestControllerPrx, 'shutdown', 0, -1, null, null, null, null);
}

namespace Test
{
    global $Test__t_TestSession;
    global $Test__t_TestSessionPrx;

    class TestSessionPrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::Test::TestSession');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::Test::TestSession', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Test::TestSession', $facet);
        }

        public static function ice_staticId()
        {
            return '::Test::TestSession';
        }
    }

    global $Ice__t_ObjectPrx;
    $Test__t_TestSessionPrx = IcePHP_defineProxy('::Test::TestSession', $Ice__t_ObjectPrx, array($Glacier2__t_SessionPrx));

    IcePHP_defineOperation($Test__t_TestSessionPrx, 'shutdown', 0, -1, null, null, null, null);
}
?>
