<?php
// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>


namespace Test
{
    global $Test__t_Retry;
    global $Test__t_RetryPrx;
    $Test__t_RetryPrx = IcePHP_declareProxy('::Test::Retry');
}

namespace Test
{
    global $Test__t_Retry;
    global $Test__t_RetryPrx;

    class RetryPrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::Test::Retry');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::Test::Retry', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Test::Retry', $facet);
        }

        public static function ice_staticId()
        {
            return '::Test::Retry';
        }
    }

    global $Ice__t_ObjectPrx;
    $Test__t_RetryPrx = IcePHP_defineProxy('::Test::Retry', $Ice__t_ObjectPrx, null);

    global $IcePHP__t_bool;
    global $IcePHP__t_int;
    IcePHP_defineOperation($Test__t_RetryPrx, 'op', 0, -1, array(array($IcePHP__t_bool)), null, null, null);
    IcePHP_defineOperation($Test__t_RetryPrx, 'opIdempotent', 2, -1, array(array($IcePHP__t_int)), null, array($IcePHP__t_int), null);
    IcePHP_defineOperation($Test__t_RetryPrx, 'opNotIdempotent', 0, -1, null, null, null, null);
    IcePHP_defineOperation($Test__t_RetryPrx, 'sleep', 2, -1, array(array($IcePHP__t_int)), null, null, null);
    IcePHP_defineOperation($Test__t_RetryPrx, 'shutdown', 2, -1, null, null, null, null);
}
?>
