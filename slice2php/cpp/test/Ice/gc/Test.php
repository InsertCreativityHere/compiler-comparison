<?php
//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


namespace Test
{
    global $Test__t_C;
    class C extends \Ice\Value
    {
        public function __construct($left=null, $right=null)
        {
            $this->left = $left;
            $this->right = $right;
        }

        public function ice_id()
        {
            return '::Test::C';
        }

        public static function ice_staticId()
        {
            return '::Test::C';
        }

        public function __toString(): string
        {
            global $Test__t_C;
            return IcePHP_stringify($this, $Test__t_C);
        }

        public $left;
        public $right;
    }

    $Test__t_C = IcePHP_declareClass('::Test::C');

    global $Ice__t_Value;
    global $Test__t_C;
    $Test__t_C = IcePHP_defineClass('::Test::C', '\\Test\\C', -1, false, false, $Ice__t_Value, array(
        array('left', $Test__t_C, false, 0),
        array('right', $Test__t_C, false, 0)));
}

namespace Test
{
    global $Test__t_CSeq;

    if(!isset($Test__t_CSeq))
    {
        global $Test__t_C;
        $Test__t_CSeq = IcePHP_defineSequence('::Test::CSeq', $Test__t_C);
    }
}

namespace Test
{
    global $Test__t_CDict;

    if(!isset($Test__t_CDict))
    {
        global $IcePHP__t_int;
        global $Test__t_C;
        $Test__t_CDict = IcePHP_defineDictionary('::Test::CDict', $IcePHP__t_int, $Test__t_C);
    }
}

namespace Test
{
    global $Test__t_S;
    class S
    {
        public function __construct($theC=null)
        {
            $this->theC = $theC;
        }

        public function __toString(): string
        {
            global $Test__t_S;
            return IcePHP_stringify($this, $Test__t_S);
        }

        public $theC;
    }

    global $Test__t_C;
    $Test__t_S = IcePHP_defineStruct('::Test::S', '\\Test\\S', array(
        array('theC', $Test__t_C)));
}

namespace Test
{
    global $Test__t_SSeq;

    if(!isset($Test__t_SSeq))
    {
        global $Test__t_S;
        $Test__t_SSeq = IcePHP_defineSequence('::Test::SSeq', $Test__t_S);
    }
}

namespace Test
{
    global $Test__t_C2;
    if(!isset($Test__t_C2))
    {
        $Test__t_C2 = IcePHP_declareClass('::Test::C2');
    }
}

namespace Test
{
    global $Test__t_C2Dict;

    if(!isset($Test__t_C2Dict))
    {
        global $IcePHP__t_int;
        global $Test__t_C2;
        $Test__t_C2Dict = IcePHP_defineDictionary('::Test::C2Dict', $IcePHP__t_int, $Test__t_C2);
    }
}

namespace Test
{
    global $Test__t_S2;
    class S2
    {
        public function __construct($theC2Dict=null)
        {
            $this->theC2Dict = $theC2Dict;
        }

        public function __toString(): string
        {
            global $Test__t_S2;
            return IcePHP_stringify($this, $Test__t_S2);
        }

        public $theC2Dict;
    }

    global $Test__t_C2Dict;
    $Test__t_S2 = IcePHP_defineStruct('::Test::S2', '\\Test\\S2', array(
        array('theC2Dict', $Test__t_C2Dict)));
}

namespace Test
{
    global $Test__t_S2Seq;

    if(!isset($Test__t_S2Seq))
    {
        global $Test__t_S2;
        $Test__t_S2Seq = IcePHP_defineSequence('::Test::S2Seq', $Test__t_S2);
    }
}

namespace Test
{
    global $Test__t_C2;
    class C2 extends \Ice\Value
    {
        public function __construct($theS2Seq=null)
        {
            $this->theS2Seq = $theS2Seq;
        }

        public function ice_id()
        {
            return '::Test::C2';
        }

        public static function ice_staticId()
        {
            return '::Test::C2';
        }

        public function __toString(): string
        {
            global $Test__t_C2;
            return IcePHP_stringify($this, $Test__t_C2);
        }

        public $theS2Seq;
    }

    global $Ice__t_Value;
    global $Test__t_S2Seq;
    $Test__t_C2 = IcePHP_defineClass('::Test::C2', '\\Test\\C2', -1, false, false, $Ice__t_Value, array(
        array('theS2Seq', $Test__t_S2Seq, false, 0)));
}

namespace Test
{
    global $Test__t_Leaf;
    class Leaf extends \Ice\Value
    {
        public function __construct($i=0)
        {
            $this->i = $i;
        }

        public function ice_id()
        {
            return '::Test::Leaf';
        }

        public static function ice_staticId()
        {
            return '::Test::Leaf';
        }

        public function __toString(): string
        {
            global $Test__t_Leaf;
            return IcePHP_stringify($this, $Test__t_Leaf);
        }

        public $i;
    }

    global $Ice__t_Value;
    global $IcePHP__t_int;
    $Test__t_Leaf = IcePHP_defineClass('::Test::Leaf', '\\Test\\Leaf', -1, false, false, $Ice__t_Value, array(
        array('i', $IcePHP__t_int, false, 0)));
}

namespace Test
{
    global $Test__t_Node;
    class Node extends \Ice\Value
    {
        public function __construct($l=null, $n=null)
        {
            $this->l = $l;
            $this->n = $n;
        }

        public function ice_id()
        {
            return '::Test::Node';
        }

        public static function ice_staticId()
        {
            return '::Test::Node';
        }

        public function __toString(): string
        {
            global $Test__t_Node;
            return IcePHP_stringify($this, $Test__t_Node);
        }

        public $l;
        public $n;
    }

    $Test__t_Node = IcePHP_declareClass('::Test::Node');

    global $Ice__t_Value;
    global $Test__t_Leaf;
    global $Test__t_Node;
    $Test__t_Node = IcePHP_defineClass('::Test::Node', '\\Test\\Node', -1, false, false, $Ice__t_Value, array(
        array('l', $Test__t_Leaf, false, 0),
        array('n', $Test__t_Node, false, 0)));
}

namespace Test
{
    global $Test__t_C2DictSeq;

    if(!isset($Test__t_C2DictSeq))
    {
        global $Test__t_C2Dict;
        $Test__t_C2DictSeq = IcePHP_defineSequence('::Test::C2DictSeq', $Test__t_C2Dict);
    }
}

namespace Test
{
    global $Test__t_CSeqSeq;

    if(!isset($Test__t_CSeqSeq))
    {
        global $Test__t_CSeq;
        $Test__t_CSeqSeq = IcePHP_defineSequence('::Test::CSeqSeq', $Test__t_CSeq);
    }
}

namespace Test
{
    global $Test__t_A;
    class A
    {
        public function __construct($theSSeq=null)
        {
            $this->theSSeq = $theSSeq;
        }

        public function __toString(): string
        {
            global $Test__t_A;
            return IcePHP_stringify($this, $Test__t_A);
        }

        public $theSSeq;
    }

    global $Test__t_SSeq;
    $Test__t_A = IcePHP_defineStruct('::Test::A', '\\Test\\A', array(
        array('theSSeq', $Test__t_SSeq)));
}

namespace Test
{
    global $Test__t_B;
    class B
    {
        public function __construct($theS=null)
        {
            $this->theS = is_null($theS) ? new \Test\S : $theS;
        }

        public function __toString(): string
        {
            global $Test__t_B;
            return IcePHP_stringify($this, $Test__t_B);
        }

        public $theS;
    }

    global $Test__t_S;
    $Test__t_B = IcePHP_defineStruct('::Test::B', '\\Test\\B', array(
        array('theS', $Test__t_S)));
}

namespace Test
{
    global $Test__t_CSeqDict;

    if(!isset($Test__t_CSeqDict))
    {
        global $IcePHP__t_int;
        global $Test__t_CSeq;
        $Test__t_CSeqDict = IcePHP_defineDictionary('::Test::CSeqDict', $IcePHP__t_int, $Test__t_CSeq);
    }
}

namespace Test
{
    global $Test__t_SDict;

    if(!isset($Test__t_SDict))
    {
        global $IcePHP__t_int;
        global $Test__t_S;
        $Test__t_SDict = IcePHP_defineDictionary('::Test::SDict', $IcePHP__t_int, $Test__t_S);
    }
}

namespace Test
{
    global $Test__t_CDictDict;

    if(!isset($Test__t_CDictDict))
    {
        global $IcePHP__t_int;
        global $Test__t_CDict;
        $Test__t_CDictDict = IcePHP_defineDictionary('::Test::CDictDict', $IcePHP__t_int, $Test__t_CDict);
    }
}

namespace Test
{
    global $Test__t_CTest;
    class CTest extends \Ice\Value
    {
        public function __construct($theCSeq=null, $theSSeq=null, $theC2DictSeq=null, $theCSeqSeq=null, $theS=null, $theA=null, $theS2=null, $theB=null, $theCDict=null, $theCSeqDict=null, $theSDict=null, $theCDictDict=null)
        {
            $this->theCSeq = $theCSeq;
            $this->theSSeq = $theSSeq;
            $this->theC2DictSeq = $theC2DictSeq;
            $this->theCSeqSeq = $theCSeqSeq;
            $this->theS = is_null($theS) ? new \Test\S : $theS;
            $this->theA = is_null($theA) ? new \Test\A : $theA;
            $this->theS2 = is_null($theS2) ? new \Test\S2 : $theS2;
            $this->theB = is_null($theB) ? new \Test\B : $theB;
            $this->theCDict = $theCDict;
            $this->theCSeqDict = $theCSeqDict;
            $this->theSDict = $theSDict;
            $this->theCDictDict = $theCDictDict;
        }

        public function ice_id()
        {
            return '::Test::CTest';
        }

        public static function ice_staticId()
        {
            return '::Test::CTest';
        }

        public function __toString(): string
        {
            global $Test__t_CTest;
            return IcePHP_stringify($this, $Test__t_CTest);
        }

        public $theCSeq;
        public $theSSeq;
        public $theC2DictSeq;
        public $theCSeqSeq;
        public $theS;
        public $theA;
        public $theS2;
        public $theB;
        public $theCDict;
        public $theCSeqDict;
        public $theSDict;
        public $theCDictDict;
    }

    $Test__t_CTest = IcePHP_declareClass('::Test::CTest');

    global $Ice__t_Value;
    global $Test__t_CSeq;
    global $Test__t_SSeq;
    global $Test__t_C2DictSeq;
    global $Test__t_CSeqSeq;
    global $Test__t_S;
    global $Test__t_A;
    global $Test__t_S2;
    global $Test__t_B;
    global $Test__t_CDict;
    global $Test__t_CSeqDict;
    global $Test__t_SDict;
    global $Test__t_CDictDict;
    $Test__t_CTest = IcePHP_defineClass('::Test::CTest', '\\Test\\CTest', -1, false, false, $Ice__t_Value, array(
        array('theCSeq', $Test__t_CSeq, false, 0),
        array('theSSeq', $Test__t_SSeq, false, 0),
        array('theC2DictSeq', $Test__t_C2DictSeq, false, 0),
        array('theCSeqSeq', $Test__t_CSeqSeq, false, 0),
        array('theS', $Test__t_S, false, 0),
        array('theA', $Test__t_A, false, 0),
        array('theS2', $Test__t_S2, false, 0),
        array('theB', $Test__t_B, false, 0),
        array('theCDict', $Test__t_CDict, false, 0),
        array('theCSeqDict', $Test__t_CSeqDict, false, 0),
        array('theSDict', $Test__t_SDict, false, 0),
        array('theCDictDict', $Test__t_CDictDict, false, 0)));
}

namespace Test\AAA
{
    global $Test_AAA__t_B;
    if(!isset($Test_AAA__t_B))
    {
        $Test_AAA__t_B = IcePHP_declareClass('::Test::AAA::B');
    }
}

namespace Test\AAA
{
    global $Test_AAA__t_BSeq;

    if(!isset($Test_AAA__t_BSeq))
    {
        global $Test_AAA__t_B;
        $Test_AAA__t_BSeq = IcePHP_defineSequence('::Test::AAA::BSeq', $Test_AAA__t_B);
    }
}

namespace Test\AAA
{
    global $Test_AAA__t_BDict;

    if(!isset($Test_AAA__t_BDict))
    {
        global $IcePHP__t_int;
        global $Test_AAA__t_B;
        $Test_AAA__t_BDict = IcePHP_defineDictionary('::Test::AAA::BDict', $IcePHP__t_int, $Test_AAA__t_B);
    }
}

namespace Test\AAA
{
    global $Test_AAA__t_BStruct;
    class BStruct
    {
        public function __construct($bMem=null)
        {
            $this->bMem = $bMem;
        }

        public function __toString(): string
        {
            global $Test_AAA__t_BStruct;
            return IcePHP_stringify($this, $Test_AAA__t_BStruct);
        }

        public $bMem;
    }

    global $Test_AAA__t_B;
    $Test_AAA__t_BStruct = IcePHP_defineStruct('::Test::AAA::BStruct', '\\Test\\AAA\\BStruct', array(
        array('bMem', $Test_AAA__t_B)));
}

namespace Test\AAA
{
    global $Test_AAA__t_C;
    class C extends \Ice\Value
    {
        public function __construct($obj1=null, $obj2=null, $b1=null, $b2=null, $x=null, $y=null, $z=null)
        {
            $this->obj1 = $obj1;
            $this->obj2 = $obj2;
            $this->b1 = $b1;
            $this->b2 = $b2;
            $this->x = $x;
            $this->y = $y;
            $this->z = is_null($z) ? new \Test\AAA\BStruct : $z;
        }

        public function ice_id()
        {
            return '::Test::AAA::C';
        }

        public static function ice_staticId()
        {
            return '::Test::AAA::C';
        }

        public function __toString(): string
        {
            global $Test_AAA__t_C;
            return IcePHP_stringify($this, $Test_AAA__t_C);
        }

        public $obj1;
        public $obj2;
        public $b1;
        public $b2;
        public $x;
        public $y;
        public $z;
    }

    $Test_AAA__t_C = IcePHP_declareClass('::Test::AAA::C');

    global $Ice__t_Value;
    global $Test_AAA__t_B;
    global $Test_AAA__t_BSeq;
    global $Test_AAA__t_BDict;
    global $Test_AAA__t_BStruct;
    $Test_AAA__t_C = IcePHP_defineClass('::Test::AAA::C', '\\Test\\AAA\\C', -1, false, false, $Ice__t_Value, array(
        array('obj1', $Ice__t_Value, false, 0),
        array('obj2', $Ice__t_Value, false, 0),
        array('b1', $Test_AAA__t_B, false, 0),
        array('b2', $Test_AAA__t_B, false, 0),
        array('x', $Test_AAA__t_BSeq, false, 0),
        array('y', $Test_AAA__t_BDict, false, 0),
        array('z', $Test_AAA__t_BStruct, false, 0)));
}

namespace Test\AAA
{
    global $Test_AAA__t_CSeq;

    if(!isset($Test_AAA__t_CSeq))
    {
        global $Test_AAA__t_C;
        $Test_AAA__t_CSeq = IcePHP_defineSequence('::Test::AAA::CSeq', $Test_AAA__t_C);
    }
}

namespace Test\AAA
{
    global $Test_AAA__t_CDict;

    if(!isset($Test_AAA__t_CDict))
    {
        global $IcePHP__t_int;
        global $Test_AAA__t_C;
        $Test_AAA__t_CDict = IcePHP_defineDictionary('::Test::AAA::CDict', $IcePHP__t_int, $Test_AAA__t_C);
    }
}

namespace Test\AAA
{
    global $Test_AAA__t_CStruct;
    class CStruct
    {
        public function __construct($cMem=null)
        {
            $this->cMem = $cMem;
        }

        public function __toString(): string
        {
            global $Test_AAA__t_CStruct;
            return IcePHP_stringify($this, $Test_AAA__t_CStruct);
        }

        public $cMem;
    }

    global $Test_AAA__t_C;
    $Test_AAA__t_CStruct = IcePHP_defineStruct('::Test::AAA::CStruct', '\\Test\\AAA\\CStruct', array(
        array('cMem', $Test_AAA__t_C)));
}

namespace Test\AAA
{
    global $Test_AAA__t_B;
    class B extends \Ice\Value
    {
        public function __construct($obj1=null, $obj2=null, $c1=null, $c2=null, $x=null, $y=null, $z=null)
        {
            $this->obj1 = $obj1;
            $this->obj2 = $obj2;
            $this->c1 = $c1;
            $this->c2 = $c2;
            $this->x = $x;
            $this->y = $y;
            $this->z = is_null($z) ? new \Test\AAA\CStruct : $z;
        }

        public function ice_id()
        {
            return '::Test::AAA::B';
        }

        public static function ice_staticId()
        {
            return '::Test::AAA::B';
        }

        public function __toString(): string
        {
            global $Test_AAA__t_B;
            return IcePHP_stringify($this, $Test_AAA__t_B);
        }

        public $obj1;
        public $obj2;
        public $c1;
        public $c2;
        public $x;
        public $y;
        public $z;
    }

    global $Ice__t_Value;
    global $Test_AAA__t_C;
    global $Test_AAA__t_CSeq;
    global $Test_AAA__t_CDict;
    global $Test_AAA__t_CStruct;
    $Test_AAA__t_B = IcePHP_defineClass('::Test::AAA::B', '\\Test\\AAA\\B', -1, false, false, $Ice__t_Value, array(
        array('obj1', $Ice__t_Value, false, 0),
        array('obj2', $Ice__t_Value, false, 0),
        array('c1', $Test_AAA__t_C, false, 0),
        array('c2', $Test_AAA__t_C, false, 0),
        array('x', $Test_AAA__t_CSeq, false, 0),
        array('y', $Test_AAA__t_CDict, false, 0),
        array('z', $Test_AAA__t_CStruct, false, 0)));
}

namespace Test\CCC
{
    global $Test_CCC__t_Forward;
    if(!isset($Test_CCC__t_Forward))
    {
        $Test_CCC__t_Forward = IcePHP_declareClass('::Test::CCC::Forward');
    }
}

namespace Test\CCC
{
    global $Test_CCC__t_ForwardProxySeq;

    if(!isset($Test_CCC__t_ForwardProxySeq))
    {
        global $Ice__t_ObjectPrx;
        $Test_CCC__t_ForwardProxySeq = IcePHP_defineSequence('::Test::CCC::ForwardProxySeq', $Ice__t_ObjectPrx);
    }
}

namespace Test\CCC
{
    global $Test_CCC__t_Forward;
    class Forward extends \Ice\Value
    {
        public function __construct()
        {
        }

        public function ice_id()
        {
            return '::Test::CCC::Forward';
        }

        public static function ice_staticId()
        {
            return '::Test::CCC::Forward';
        }

        public function __toString(): string
        {
            global $Test_CCC__t_Forward;
            return IcePHP_stringify($this, $Test_CCC__t_Forward);
        }
    }

    global $Ice__t_Value;
    $Test_CCC__t_Forward = IcePHP_defineClass('::Test::CCC::Forward', '\\Test\\CCC\\Forward', -1, false, false, $Ice__t_Value, null);
}

namespace Test\DDD
{
    global $Test_DDD__t_I;
    global $Test_DDD__t_IPrx;

    class IPrxHelper
    {
        public static function checkedCast($proxy, $facetOrContext=null, $context=null)
        {
            return $proxy->ice_checkedCast('::Test::DDD::I', $facetOrContext, $context);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Test::DDD::I', $facet);
        }

        public static function ice_staticId()
        {
            return '::Test::DDD::I';
        }
    }
    $Test_DDD__t_I = IcePHP_defineClass('::Test::DDD::I', '\\Test\\DDD\\I', -1, false, true, null, null);

    global $Ice__t_ObjectPrx;
    $Test_DDD__t_IPrx = IcePHP_defineProxy('::Test::DDD::I', $Ice__t_ObjectPrx, null);

    IcePHP_defineOperation($Test_DDD__t_IPrx, 'op', 0, 0, 0, null, null, null, null);
}

namespace Test\DDD
{
    global $Test_DDD__t_C;
    class C extends \Ice\Value
    {
        public function __construct()
        {
        }

        public function ice_id()
        {
            return '::Test::DDD::C';
        }

        public static function ice_staticId()
        {
            return '::Test::DDD::C';
        }

        public function __toString(): string
        {
            global $Test_DDD__t_C;
            return IcePHP_stringify($this, $Test_DDD__t_C);
        }
    }

    global $Ice__t_Value;
    $Test_DDD__t_C = IcePHP_defineClass('::Test::DDD::C', '\\Test\\DDD\\C', -1, false, false, $Ice__t_Value, null);
}

namespace Test\DDD
{
    global $Test_DDD__t_C2;
    if(!isset($Test_DDD__t_C2))
    {
        $Test_DDD__t_C2 = IcePHP_declareClass('::Test::DDD::C2');
    }
}

namespace Test\DDD
{
    global $Test_DDD__t_U;
    class U extends \Ice\Value
    {
        public function __construct($myI=null, $myIstar=null, $myC=null, $myCstar=null, $myC2=null, $myC2star=null)
        {
            $this->myI = $myI;
            $this->myIstar = $myIstar;
            $this->myC = $myC;
            $this->myCstar = $myCstar;
            $this->myC2 = $myC2;
            $this->myC2star = $myC2star;
        }

        public function ice_id()
        {
            return '::Test::DDD::U';
        }

        public static function ice_staticId()
        {
            return '::Test::DDD::U';
        }

        public function __toString(): string
        {
            global $Test_DDD__t_U;
            return IcePHP_stringify($this, $Test_DDD__t_U);
        }

        public $myI;
        public $myIstar;
        public $myC;
        public $myCstar;
        public $myC2;
        public $myC2star;
    }

    $Test_DDD__t_U = IcePHP_declareClass('::Test::DDD::U');

    global $Ice__t_Value;
    global $Test_DDD__t_I;
    global $Test_DDD__t_IPrx;
    global $Test_DDD__t_C;
    global $Ice__t_ObjectPrx;
    global $Test_DDD__t_C2;
    $Test_DDD__t_U = IcePHP_defineClass('::Test::DDD::U', '\\Test\\DDD\\U', -1, false, false, $Ice__t_Value, array(
        array('myI', $Test_DDD__t_I, false, 0),
        array('myIstar', $Test_DDD__t_IPrx, false, 0),
        array('myC', $Test_DDD__t_C, false, 0),
        array('myCstar', $Ice__t_ObjectPrx, false, 0),
        array('myC2', $Test_DDD__t_C2, false, 0),
        array('myC2star', $Ice__t_ObjectPrx, false, 0)));
}

namespace Test\DDD
{
    global $Test_DDD__t_C2;
    class C2 extends \Ice\Value
    {
        public function __construct()
        {
        }

        public function ice_id()
        {
            return '::Test::DDD::C2';
        }

        public static function ice_staticId()
        {
            return '::Test::DDD::C2';
        }

        public function __toString(): string
        {
            global $Test_DDD__t_C2;
            return IcePHP_stringify($this, $Test_DDD__t_C2);
        }
    }

    global $Ice__t_Value;
    $Test_DDD__t_C2 = IcePHP_defineClass('::Test::DDD::C2', '\\Test\\DDD\\C2', -1, false, false, $Ice__t_Value, null);
}
?>
