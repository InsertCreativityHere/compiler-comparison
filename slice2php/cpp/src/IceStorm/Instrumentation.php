<?php
//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Instrumentation.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


namespace
{
    require_once 'Ice/Instrumentation.php';
    require_once 'IceStorm/IceStorm.php';
}

namespace IceStorm\Instrumentation
{
    global $IceStorm_Instrumentation__t_TopicObserver;
    interface TopicObserver extends \Ice\Instrumentation\Observer
    {
        public function published();
        public function forwarded();
    }
    $IceStorm_Instrumentation__t_TopicObserver = IcePHP_defineClass('::IceStorm::Instrumentation::TopicObserver', '\\IceStorm\\Instrumentation\\TopicObserver', -1, false, true, null, null);
}

namespace IceStorm\Instrumentation
{
    global $IceStorm_Instrumentation__t_SubscriberObserver;
    interface SubscriberObserver extends \Ice\Instrumentation\Observer
    {
        public function queued($count);
        public function outstanding($count);
        public function delivered($count);
    }
    $IceStorm_Instrumentation__t_SubscriberObserver = IcePHP_defineClass('::IceStorm::Instrumentation::SubscriberObserver', '\\IceStorm\\Instrumentation\\SubscriberObserver', -1, false, true, null, null);
}

namespace IceStorm\Instrumentation
{
    global $IceStorm_Instrumentation__t_ObserverUpdater;
    interface ObserverUpdater
    {
        public function updateTopicObservers();
        public function updateSubscriberObservers();
    }
    $IceStorm_Instrumentation__t_ObserverUpdater = IcePHP_defineClass('::IceStorm::Instrumentation::ObserverUpdater', '\\IceStorm\\Instrumentation\\ObserverUpdater', -1, false, true, null, null);
}

namespace IceStorm\Instrumentation
{
    global $IceStorm_Instrumentation__t_SubscriberState;
    class SubscriberState
    {
        const SubscriberStateOnline = 0;
        const SubscriberStateOffline = 1;
        const SubscriberStateError = 2;
    }

    $IceStorm_Instrumentation__t_SubscriberState = IcePHP_defineEnum('::IceStorm::Instrumentation::SubscriberState', array('SubscriberStateOnline', 0, 'SubscriberStateOffline', 1, 'SubscriberStateError', 2));
}

namespace IceStorm\Instrumentation
{
    global $IceStorm_Instrumentation__t_TopicManagerObserver;
    interface TopicManagerObserver
    {
        public function getTopicObserver($svc, $name, $old);
        public function getSubscriberObserver($svc, $topic, $prx, $q, $link, $s, $old);
        public function setObserverUpdater($updater);
    }
    $IceStorm_Instrumentation__t_TopicManagerObserver = IcePHP_defineClass('::IceStorm::Instrumentation::TopicManagerObserver', '\\IceStorm\\Instrumentation\\TopicManagerObserver', -1, false, true, null, null);
}
?>
