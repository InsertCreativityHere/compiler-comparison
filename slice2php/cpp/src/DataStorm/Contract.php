<?php
// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Contract.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>


namespace
{
    require_once 'Ice/Identity.php';
    require_once 'Ice/BuiltinSequences.php';
    require_once 'DataStorm/Sample.php';
}

namespace DataStormContract
{
    global $DataStormContract__t_ClearHistoryPolicy;
    class ClearHistoryPolicy
    {
        const OnAdd = 0;
        const OnRemove = 1;
        const OnAll = 2;
        const OnAllExceptPartialUpdate = 3;
        const Never = 4;
    }

    $DataStormContract__t_ClearHistoryPolicy = IcePHP_defineEnum('::DataStormContract::ClearHistoryPolicy', array('OnAdd', 0, 'OnRemove', 1, 'OnAll', 2, 'OnAllExceptPartialUpdate', 3, 'Never', 4));
}

namespace DataStormContract
{
    global $DataStormContract__t_LongLongDict;

    if(!isset($DataStormContract__t_LongLongDict))
    {
        global $IcePHP__t_long;
        global $IcePHP__t_long;
        $DataStormContract__t_LongLongDict = IcePHP_defineDictionary('::DataStormContract::LongLongDict', $IcePHP__t_long, $IcePHP__t_long);
    }
}

namespace DataStormContract
{
    global $DataStormContract__t_DataSample;
    class DataSample
    {
        public function __construct($id=0, $keyId=0, $keyValue=null, $timestamp=0, $tag=0, $event=\DataStorm\SampleEvent::Add, $value=null)
        {
            $this->id = $id;
            $this->keyId = $keyId;
            $this->keyValue = $keyValue;
            $this->timestamp = $timestamp;
            $this->tag = $tag;
            $this->event = $event;
            $this->value = $value;
        }

        public function __toString(): string
        {
            global $DataStormContract__t_DataSample;
            return IcePHP_stringify($this, $DataStormContract__t_DataSample);
        }

        public $id;
        public $keyId;
        public $keyValue;
        public $timestamp;
        public $tag;
        public $event;
        public $value;
    }

    global $IcePHP__t_long;
    global $Ice__t_ByteSeq;
    global $DataStorm__t_SampleEvent;
    $DataStormContract__t_DataSample = IcePHP_defineStruct('::DataStormContract::DataSample', '\\DataStormContract\\DataSample', array(
        array('id', $IcePHP__t_long),
        array('keyId', $IcePHP__t_long),
        array('keyValue', $Ice__t_ByteSeq),
        array('timestamp', $IcePHP__t_long),
        array('tag', $IcePHP__t_long),
        array('event', $DataStorm__t_SampleEvent),
        array('value', $Ice__t_ByteSeq)));
}

namespace DataStormContract
{
    global $DataStormContract__t_DataSampleSeq;

    if(!isset($DataStormContract__t_DataSampleSeq))
    {
        global $DataStormContract__t_DataSample;
        $DataStormContract__t_DataSampleSeq = IcePHP_defineSequence('::DataStormContract::DataSampleSeq', $DataStormContract__t_DataSample);
    }
}

namespace DataStormContract
{
    global $DataStormContract__t_DataSamples;
    class DataSamples
    {
        public function __construct($id=0, $samples=null)
        {
            $this->id = $id;
            $this->samples = $samples;
        }

        public function __toString(): string
        {
            global $DataStormContract__t_DataSamples;
            return IcePHP_stringify($this, $DataStormContract__t_DataSamples);
        }

        public $id;
        public $samples;
    }

    global $IcePHP__t_long;
    global $DataStormContract__t_DataSampleSeq;
    $DataStormContract__t_DataSamples = IcePHP_defineStruct('::DataStormContract::DataSamples', '\\DataStormContract\\DataSamples', array(
        array('id', $IcePHP__t_long),
        array('samples', $DataStormContract__t_DataSampleSeq)));
}

namespace DataStormContract
{
    global $DataStormContract__t_DataSamplesSeq;

    if(!isset($DataStormContract__t_DataSamplesSeq))
    {
        global $DataStormContract__t_DataSamples;
        $DataStormContract__t_DataSamplesSeq = IcePHP_defineSequence('::DataStormContract::DataSamplesSeq', $DataStormContract__t_DataSamples);
    }
}

namespace DataStormContract
{
    global $DataStormContract__t_ElementInfo;
    class ElementInfo
    {
        public function __construct($id=0, $name='', $value=null)
        {
            $this->id = $id;
            $this->name = $name;
            $this->value = $value;
        }

        public function __toString(): string
        {
            global $DataStormContract__t_ElementInfo;
            return IcePHP_stringify($this, $DataStormContract__t_ElementInfo);
        }

        public $id;
        public $name;
        public $value;
    }

    global $IcePHP__t_long;
    global $IcePHP__t_string;
    global $Ice__t_ByteSeq;
    $DataStormContract__t_ElementInfo = IcePHP_defineStruct('::DataStormContract::ElementInfo', '\\DataStormContract\\ElementInfo', array(
        array('id', $IcePHP__t_long),
        array('name', $IcePHP__t_string),
        array('value', $Ice__t_ByteSeq)));
}

namespace DataStormContract
{
    global $DataStormContract__t_ElementInfoSeq;

    if(!isset($DataStormContract__t_ElementInfoSeq))
    {
        global $DataStormContract__t_ElementInfo;
        $DataStormContract__t_ElementInfoSeq = IcePHP_defineSequence('::DataStormContract::ElementInfoSeq', $DataStormContract__t_ElementInfo);
    }
}

namespace DataStormContract
{
    global $DataStormContract__t_TopicInfo;
    class TopicInfo
    {
        public function __construct($name='', $ids=null)
        {
            $this->name = $name;
            $this->ids = $ids;
        }

        public function __toString(): string
        {
            global $DataStormContract__t_TopicInfo;
            return IcePHP_stringify($this, $DataStormContract__t_TopicInfo);
        }

        public $name;
        public $ids;
    }

    global $IcePHP__t_string;
    global $Ice__t_LongSeq;
    $DataStormContract__t_TopicInfo = IcePHP_defineStruct('::DataStormContract::TopicInfo', '\\DataStormContract\\TopicInfo', array(
        array('name', $IcePHP__t_string),
        array('ids', $Ice__t_LongSeq)));
}

namespace DataStormContract
{
    global $DataStormContract__t_TopicInfoSeq;

    if(!isset($DataStormContract__t_TopicInfoSeq))
    {
        global $DataStormContract__t_TopicInfo;
        $DataStormContract__t_TopicInfoSeq = IcePHP_defineSequence('::DataStormContract::TopicInfoSeq', $DataStormContract__t_TopicInfo);
    }
}

namespace DataStormContract
{
    global $DataStormContract__t_TopicSpec;
    class TopicSpec
    {
        public function __construct($id=0, $name='', $elements=null, $tags=null)
        {
            $this->id = $id;
            $this->name = $name;
            $this->elements = $elements;
            $this->tags = $tags;
        }

        public function __toString(): string
        {
            global $DataStormContract__t_TopicSpec;
            return IcePHP_stringify($this, $DataStormContract__t_TopicSpec);
        }

        public $id;
        public $name;
        public $elements;
        public $tags;
    }

    global $IcePHP__t_long;
    global $IcePHP__t_string;
    global $DataStormContract__t_ElementInfoSeq;
    $DataStormContract__t_TopicSpec = IcePHP_defineStruct('::DataStormContract::TopicSpec', '\\DataStormContract\\TopicSpec', array(
        array('id', $IcePHP__t_long),
        array('name', $IcePHP__t_string),
        array('elements', $DataStormContract__t_ElementInfoSeq),
        array('tags', $DataStormContract__t_ElementInfoSeq)));
}

namespace DataStormContract
{
    global $DataStormContract__t_FilterInfo;
    class FilterInfo
    {
        public function __construct($name='', $criteria=null)
        {
            $this->name = $name;
            $this->criteria = $criteria;
        }

        public function __toString(): string
        {
            global $DataStormContract__t_FilterInfo;
            return IcePHP_stringify($this, $DataStormContract__t_FilterInfo);
        }

        public $name;
        public $criteria;
    }

    global $IcePHP__t_string;
    global $Ice__t_ByteSeq;
    $DataStormContract__t_FilterInfo = IcePHP_defineStruct('::DataStormContract::FilterInfo', '\\DataStormContract\\FilterInfo', array(
        array('name', $IcePHP__t_string),
        array('criteria', $Ice__t_ByteSeq)));
}

namespace DataStormContract
{
    global $DataStormContract__t_ElementConfig;
    $DataStormContract__t_ElementConfig = IcePHP_declareClass('::DataStormContract::ElementConfig');
}

namespace DataStormContract
{
    global $DataStormContract__t_ElementConfig;
    class ElementConfig extends \Ice\Value
    {
        public function __construct($facet=\Ice\None, $sampleFilter=\Ice\None, $name=\Ice\None, $priority=\Ice\None, $sampleCount=\Ice\None, $sampleLifetime=\Ice\None, $clearHistory=\Ice\None)
        {
            $this->facet = $facet;
            $this->sampleFilter = is_null($sampleFilter) ? new \DataStormContract\FilterInfo : $sampleFilter;
            $this->name = $name;
            $this->priority = $priority;
            $this->sampleCount = $sampleCount;
            $this->sampleLifetime = $sampleLifetime;
            $this->clearHistory = $clearHistory;
        }

        public function ice_id()
        {
            return '::DataStormContract::ElementConfig';
        }

        public static function ice_staticId()
        {
            return '::DataStormContract::ElementConfig';
        }

        public function __toString(): string
        {
            global $DataStormContract__t_ElementConfig;
            return IcePHP_stringify($this, $DataStormContract__t_ElementConfig);
        }

        public $facet;
        public $sampleFilter;
        public $name;
        public $priority;
        public $sampleCount;
        public $sampleLifetime;
        public $clearHistory;
    }

    global $Ice__t_Value;
    global $IcePHP__t_string;
    global $DataStormContract__t_FilterInfo;
    global $IcePHP__t_int;
    global $DataStormContract__t_ClearHistoryPolicy;
    $DataStormContract__t_ElementConfig = IcePHP_defineClass('::DataStormContract::ElementConfig', '\\DataStormContract\\ElementConfig', 1, false, $Ice__t_Value, array(
        array('facet', $IcePHP__t_string, true, 1),
        array('sampleFilter', $DataStormContract__t_FilterInfo, true, 2),
        array('name', $IcePHP__t_string, true, 3),
        array('priority', $IcePHP__t_int, true, 4),
        array('sampleCount', $IcePHP__t_int, true, 10),
        array('sampleLifetime', $IcePHP__t_int, true, 11),
        array('clearHistory', $DataStormContract__t_ClearHistoryPolicy, true, 12)));
}

namespace DataStormContract
{
    global $DataStormContract__t_ElementData;
    class ElementData
    {
        public function __construct($id=0, $config=null, $lastIds=null)
        {
            $this->id = $id;
            $this->config = $config;
            $this->lastIds = $lastIds;
        }

        public function __toString(): string
        {
            global $DataStormContract__t_ElementData;
            return IcePHP_stringify($this, $DataStormContract__t_ElementData);
        }

        public $id;
        public $config;
        public $lastIds;
    }

    global $IcePHP__t_long;
    global $DataStormContract__t_ElementConfig;
    global $DataStormContract__t_LongLongDict;
    $DataStormContract__t_ElementData = IcePHP_defineStruct('::DataStormContract::ElementData', '\\DataStormContract\\ElementData', array(
        array('id', $IcePHP__t_long),
        array('config', $DataStormContract__t_ElementConfig),
        array('lastIds', $DataStormContract__t_LongLongDict)));
}

namespace DataStormContract
{
    global $DataStormContract__t_ElementDataSeq;

    if(!isset($DataStormContract__t_ElementDataSeq))
    {
        global $DataStormContract__t_ElementData;
        $DataStormContract__t_ElementDataSeq = IcePHP_defineSequence('::DataStormContract::ElementDataSeq', $DataStormContract__t_ElementData);
    }
}

namespace DataStormContract
{
    global $DataStormContract__t_ElementSpec;
    class ElementSpec
    {
        public function __construct($elements=null, $id=0, $name='', $value=null, $peerId=0, $peerName='')
        {
            $this->elements = $elements;
            $this->id = $id;
            $this->name = $name;
            $this->value = $value;
            $this->peerId = $peerId;
            $this->peerName = $peerName;
        }

        public function __toString(): string
        {
            global $DataStormContract__t_ElementSpec;
            return IcePHP_stringify($this, $DataStormContract__t_ElementSpec);
        }

        public $elements;
        public $id;
        public $name;
        public $value;
        public $peerId;
        public $peerName;
    }

    global $DataStormContract__t_ElementDataSeq;
    global $IcePHP__t_long;
    global $IcePHP__t_string;
    global $Ice__t_ByteSeq;
    $DataStormContract__t_ElementSpec = IcePHP_defineStruct('::DataStormContract::ElementSpec', '\\DataStormContract\\ElementSpec', array(
        array('elements', $DataStormContract__t_ElementDataSeq),
        array('id', $IcePHP__t_long),
        array('name', $IcePHP__t_string),
        array('value', $Ice__t_ByteSeq),
        array('peerId', $IcePHP__t_long),
        array('peerName', $IcePHP__t_string)));
}

namespace DataStormContract
{
    global $DataStormContract__t_ElementSpecSeq;

    if(!isset($DataStormContract__t_ElementSpecSeq))
    {
        global $DataStormContract__t_ElementSpec;
        $DataStormContract__t_ElementSpecSeq = IcePHP_defineSequence('::DataStormContract::ElementSpecSeq', $DataStormContract__t_ElementSpec);
    }
}

namespace DataStormContract
{
    global $DataStormContract__t_ElementDataAck;
    class ElementDataAck
    {
        public function __construct($id=0, $config=null, $lastIds=null, $samples=null, $peerId=0)
        {
            $this->id = $id;
            $this->config = $config;
            $this->lastIds = $lastIds;
            $this->samples = $samples;
            $this->peerId = $peerId;
        }

        public function __toString(): string
        {
            global $DataStormContract__t_ElementDataAck;
            return IcePHP_stringify($this, $DataStormContract__t_ElementDataAck);
        }

        public $id;
        public $config;
        public $lastIds;
        public $samples;
        public $peerId;
    }

    global $IcePHP__t_long;
    global $DataStormContract__t_ElementConfig;
    global $DataStormContract__t_LongLongDict;
    global $DataStormContract__t_DataSampleSeq;
    $DataStormContract__t_ElementDataAck = IcePHP_defineStruct('::DataStormContract::ElementDataAck', '\\DataStormContract\\ElementDataAck', array(
        array('id', $IcePHP__t_long),
        array('config', $DataStormContract__t_ElementConfig),
        array('lastIds', $DataStormContract__t_LongLongDict),
        array('samples', $DataStormContract__t_DataSampleSeq),
        array('peerId', $IcePHP__t_long)));
}

namespace DataStormContract
{
    global $DataStormContract__t_ElementDataAckSeq;

    if(!isset($DataStormContract__t_ElementDataAckSeq))
    {
        global $DataStormContract__t_ElementDataAck;
        $DataStormContract__t_ElementDataAckSeq = IcePHP_defineSequence('::DataStormContract::ElementDataAckSeq', $DataStormContract__t_ElementDataAck);
    }
}

namespace DataStormContract
{
    global $DataStormContract__t_ElementSpecAck;
    class ElementSpecAck
    {
        public function __construct($elements=null, $id=0, $name='', $value=null, $peerId=0, $peerName='')
        {
            $this->elements = $elements;
            $this->id = $id;
            $this->name = $name;
            $this->value = $value;
            $this->peerId = $peerId;
            $this->peerName = $peerName;
        }

        public function __toString(): string
        {
            global $DataStormContract__t_ElementSpecAck;
            return IcePHP_stringify($this, $DataStormContract__t_ElementSpecAck);
        }

        public $elements;
        public $id;
        public $name;
        public $value;
        public $peerId;
        public $peerName;
    }

    global $DataStormContract__t_ElementDataAckSeq;
    global $IcePHP__t_long;
    global $IcePHP__t_string;
    global $Ice__t_ByteSeq;
    $DataStormContract__t_ElementSpecAck = IcePHP_defineStruct('::DataStormContract::ElementSpecAck', '\\DataStormContract\\ElementSpecAck', array(
        array('elements', $DataStormContract__t_ElementDataAckSeq),
        array('id', $IcePHP__t_long),
        array('name', $IcePHP__t_string),
        array('value', $Ice__t_ByteSeq),
        array('peerId', $IcePHP__t_long),
        array('peerName', $IcePHP__t_string)));
}

namespace DataStormContract
{
    global $DataStormContract__t_ElementSpecAckSeq;

    if(!isset($DataStormContract__t_ElementSpecAckSeq))
    {
        global $DataStormContract__t_ElementSpecAck;
        $DataStormContract__t_ElementSpecAckSeq = IcePHP_defineSequence('::DataStormContract::ElementSpecAckSeq', $DataStormContract__t_ElementSpecAck);
    }
}

namespace DataStormContract
{
    global $DataStormContract__t_Session;
    global $DataStormContract__t_SessionPrx;
    $DataStormContract__t_SessionPrx = IcePHP_declareProxy('::DataStormContract::Session');
}

namespace DataStormContract
{
    global $DataStormContract__t_Session;
    global $DataStormContract__t_SessionPrx;

    class SessionPrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::DataStormContract::Session');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::DataStormContract::Session', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::DataStormContract::Session', $facet);
        }

        public static function ice_staticId()
        {
            return '::DataStormContract::Session';
        }
    }

    global $Ice__t_ObjectPrx;
    $DataStormContract__t_SessionPrx = IcePHP_defineProxy('::DataStormContract::Session', $Ice__t_ObjectPrx, null);

    global $DataStormContract__t_TopicInfoSeq;
    global $IcePHP__t_bool;
    global $DataStormContract__t_TopicSpec;
    global $IcePHP__t_long;
    global $DataStormContract__t_ElementInfoSeq;
    global $Ice__t_LongSeq;
    global $DataStormContract__t_ElementSpecSeq;
    global $DataStormContract__t_ElementSpecAckSeq;
    global $DataStormContract__t_DataSamplesSeq;
    IcePHP_defineOperation($DataStormContract__t_SessionPrx, 'announceTopics', 0, -1, array(array($DataStormContract__t_TopicInfoSeq), array($IcePHP__t_bool)), null, null, null);
    IcePHP_defineOperation($DataStormContract__t_SessionPrx, 'attachTopic', 0, -1, array(array($DataStormContract__t_TopicSpec)), null, null, null);
    IcePHP_defineOperation($DataStormContract__t_SessionPrx, 'detachTopic', 0, -1, array(array($IcePHP__t_long)), null, null, null);
    IcePHP_defineOperation($DataStormContract__t_SessionPrx, 'attachTags', 0, -1, array(array($IcePHP__t_long), array($DataStormContract__t_ElementInfoSeq), array($IcePHP__t_bool)), null, null, null);
    IcePHP_defineOperation($DataStormContract__t_SessionPrx, 'detachTags', 0, -1, array(array($IcePHP__t_long), array($Ice__t_LongSeq)), null, null, null);
    IcePHP_defineOperation($DataStormContract__t_SessionPrx, 'announceElements', 0, -1, array(array($IcePHP__t_long), array($DataStormContract__t_ElementInfoSeq)), null, null, null);
    IcePHP_defineOperation($DataStormContract__t_SessionPrx, 'attachElements', 0, -1, array(array($IcePHP__t_long), array($DataStormContract__t_ElementSpecSeq), array($IcePHP__t_bool)), null, null, null);
    IcePHP_defineOperation($DataStormContract__t_SessionPrx, 'attachElementsAck', 0, -1, array(array($IcePHP__t_long), array($DataStormContract__t_ElementSpecAckSeq)), null, null, null);
    IcePHP_defineOperation($DataStormContract__t_SessionPrx, 'detachElements', 0, -1, array(array($IcePHP__t_long), array($Ice__t_LongSeq)), null, null, null);
    IcePHP_defineOperation($DataStormContract__t_SessionPrx, 'initSamples', 0, -1, array(array($IcePHP__t_long), array($DataStormContract__t_DataSamplesSeq)), null, null, null);
    IcePHP_defineOperation($DataStormContract__t_SessionPrx, 'disconnected', 0, -1, null, null, null, null);
}

namespace DataStormContract
{
    global $DataStormContract__t_PublisherSession;
    global $DataStormContract__t_PublisherSessionPrx;
    $DataStormContract__t_PublisherSessionPrx = IcePHP_declareProxy('::DataStormContract::PublisherSession');
}

namespace DataStormContract
{
    global $DataStormContract__t_PublisherSession;
    global $DataStormContract__t_PublisherSessionPrx;

    class PublisherSessionPrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::DataStormContract::PublisherSession');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::DataStormContract::PublisherSession', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::DataStormContract::PublisherSession', $facet);
        }

        public static function ice_staticId()
        {
            return '::DataStormContract::PublisherSession';
        }
    }

    global $Ice__t_ObjectPrx;
    $DataStormContract__t_PublisherSessionPrx = IcePHP_defineProxy('::DataStormContract::PublisherSession', $Ice__t_ObjectPrx, array($DataStormContract__t_SessionPrx));
}

namespace DataStormContract
{
    global $DataStormContract__t_SubscriberSession;
    global $DataStormContract__t_SubscriberSessionPrx;
    $DataStormContract__t_SubscriberSessionPrx = IcePHP_declareProxy('::DataStormContract::SubscriberSession');
}

namespace DataStormContract
{
    global $DataStormContract__t_SubscriberSession;
    global $DataStormContract__t_SubscriberSessionPrx;

    class SubscriberSessionPrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::DataStormContract::SubscriberSession');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::DataStormContract::SubscriberSession', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::DataStormContract::SubscriberSession', $facet);
        }

        public static function ice_staticId()
        {
            return '::DataStormContract::SubscriberSession';
        }
    }

    global $Ice__t_ObjectPrx;
    $DataStormContract__t_SubscriberSessionPrx = IcePHP_defineProxy('::DataStormContract::SubscriberSession', $Ice__t_ObjectPrx, array($DataStormContract__t_SessionPrx));

    global $IcePHP__t_long;
    global $DataStormContract__t_DataSample;
    IcePHP_defineOperation($DataStormContract__t_SubscriberSessionPrx, 's', 0, -1, array(array($IcePHP__t_long), array($IcePHP__t_long), array($DataStormContract__t_DataSample)), null, null, null);
}

namespace DataStormContract
{
    global $DataStormContract__t_Node;
    global $DataStormContract__t_NodePrx;
    $DataStormContract__t_NodePrx = IcePHP_declareProxy('::DataStormContract::Node');
}

namespace DataStormContract
{
    global $DataStormContract__t_Node;
    global $DataStormContract__t_NodePrx;

    class NodePrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::DataStormContract::Node');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::DataStormContract::Node', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::DataStormContract::Node', $facet);
        }

        public static function ice_staticId()
        {
            return '::DataStormContract::Node';
        }
    }

    global $Ice__t_ObjectPrx;
    $DataStormContract__t_NodePrx = IcePHP_defineProxy('::DataStormContract::Node', $Ice__t_ObjectPrx, null);

    global $DataStormContract__t_NodePrx;
    global $DataStormContract__t_SubscriberSessionPrx;
    global $IcePHP__t_bool;
    global $DataStormContract__t_PublisherSessionPrx;
    IcePHP_defineOperation($DataStormContract__t_NodePrx, 'initiateCreateSession', 0, -1, array(array($DataStormContract__t_NodePrx)), null, null, null);
    IcePHP_defineOperation($DataStormContract__t_NodePrx, 'createSession', 0, -1, array(array($DataStormContract__t_NodePrx), array($DataStormContract__t_SubscriberSessionPrx), array($IcePHP__t_bool)), null, null, null);
    IcePHP_defineOperation($DataStormContract__t_NodePrx, 'confirmCreateSession', 0, -1, array(array($DataStormContract__t_NodePrx), array($DataStormContract__t_PublisherSessionPrx)), null, null, null);
}

namespace DataStormContract
{
    global $DataStormContract__t_Lookup;
    global $DataStormContract__t_LookupPrx;
    $DataStormContract__t_LookupPrx = IcePHP_declareProxy('::DataStormContract::Lookup');
}

namespace DataStormContract
{
    global $DataStormContract__t_Lookup;
    global $DataStormContract__t_LookupPrx;

    class LookupPrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::DataStormContract::Lookup');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::DataStormContract::Lookup', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::DataStormContract::Lookup', $facet);
        }

        public static function ice_staticId()
        {
            return '::DataStormContract::Lookup';
        }
    }

    global $Ice__t_ObjectPrx;
    $DataStormContract__t_LookupPrx = IcePHP_defineProxy('::DataStormContract::Lookup', $Ice__t_ObjectPrx, null);

    global $IcePHP__t_string;
    global $DataStormContract__t_NodePrx;
    global $Ice__t_StringSeq;
    IcePHP_defineOperation($DataStormContract__t_LookupPrx, 'announceTopicReader', 2, -1, array(array($IcePHP__t_string), array($DataStormContract__t_NodePrx)), null, null, null);
    IcePHP_defineOperation($DataStormContract__t_LookupPrx, 'announceTopicWriter', 2, -1, array(array($IcePHP__t_string), array($DataStormContract__t_NodePrx)), null, null, null);
    IcePHP_defineOperation($DataStormContract__t_LookupPrx, 'announceTopics', 2, -1, array(array($Ice__t_StringSeq), array($Ice__t_StringSeq), array($DataStormContract__t_NodePrx)), null, null, null);
    IcePHP_defineOperation($DataStormContract__t_LookupPrx, 'createSession', 0, -1, array(array($DataStormContract__t_NodePrx)), null, array($DataStormContract__t_NodePrx), null);
}
?>
