<?php
//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Internal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


namespace
{
    require_once 'Ice/Identity.php';
    require_once 'Ice/BuiltinSequences.php';
    require_once 'Ice/Process.php';
    require_once 'Glacier2/Session.php';
    require_once 'IceGrid/Admin.php';
    require_once 'IceGrid/Registry.php';
}

namespace IceGrid
{
    global $IceGrid__t_InternalDbEnvDescriptor;
    class InternalDbEnvDescriptor extends \Ice\Value
    {
        public function __construct($name='', $properties=null)
        {
            $this->name = $name;
            $this->properties = $properties;
        }

        public function ice_id()
        {
            return '::IceGrid::InternalDbEnvDescriptor';
        }

        public static function ice_staticId()
        {
            return '::IceGrid::InternalDbEnvDescriptor';
        }

        public function __toString(): string
        {
            global $IceGrid__t_InternalDbEnvDescriptor;
            return IcePHP_stringify($this, $IceGrid__t_InternalDbEnvDescriptor);
        }

        public $name;
        public $properties;
    }

    global $Ice__t_Value;
    global $IcePHP__t_string;
    global $IceGrid__t_PropertyDescriptorSeq;
    $IceGrid__t_InternalDbEnvDescriptor = IcePHP_defineClass('::IceGrid::InternalDbEnvDescriptor', '\\IceGrid\\InternalDbEnvDescriptor', -1, false, $Ice__t_Value, array(
        array('name', $IcePHP__t_string, false, 0),
        array('properties', $IceGrid__t_PropertyDescriptorSeq, false, 0)));
}

namespace IceGrid
{
    global $IceGrid__t_InternalDbEnvDescriptorSeq;

    if(!isset($IceGrid__t_InternalDbEnvDescriptorSeq))
    {
        global $IceGrid__t_InternalDbEnvDescriptor;
        $IceGrid__t_InternalDbEnvDescriptorSeq = IcePHP_defineSequence('::IceGrid::InternalDbEnvDescriptorSeq', $IceGrid__t_InternalDbEnvDescriptor);
    }
}

namespace IceGrid
{
    global $IceGrid__t_InternalAdapterDescriptor;
    class InternalAdapterDescriptor extends \Ice\Value
    {
        public function __construct($id='', $serverLifetime=false)
        {
            $this->id = $id;
            $this->serverLifetime = $serverLifetime;
        }

        public function ice_id()
        {
            return '::IceGrid::InternalAdapterDescriptor';
        }

        public static function ice_staticId()
        {
            return '::IceGrid::InternalAdapterDescriptor';
        }

        public function __toString(): string
        {
            global $IceGrid__t_InternalAdapterDescriptor;
            return IcePHP_stringify($this, $IceGrid__t_InternalAdapterDescriptor);
        }

        public $id;
        public $serverLifetime;
    }

    global $Ice__t_Value;
    global $IcePHP__t_string;
    global $IcePHP__t_bool;
    $IceGrid__t_InternalAdapterDescriptor = IcePHP_defineClass('::IceGrid::InternalAdapterDescriptor', '\\IceGrid\\InternalAdapterDescriptor', -1, false, $Ice__t_Value, array(
        array('id', $IcePHP__t_string, false, 0),
        array('serverLifetime', $IcePHP__t_bool, false, 0)));
}

namespace IceGrid
{
    global $IceGrid__t_InternalAdapterDescriptorSeq;

    if(!isset($IceGrid__t_InternalAdapterDescriptorSeq))
    {
        global $IceGrid__t_InternalAdapterDescriptor;
        $IceGrid__t_InternalAdapterDescriptorSeq = IcePHP_defineSequence('::IceGrid::InternalAdapterDescriptorSeq', $IceGrid__t_InternalAdapterDescriptor);
    }
}

namespace IceGrid
{
    global $IceGrid__t_PropertyDescriptorSeqDict;

    if(!isset($IceGrid__t_PropertyDescriptorSeqDict))
    {
        global $IcePHP__t_string;
        global $IceGrid__t_PropertyDescriptorSeq;
        $IceGrid__t_PropertyDescriptorSeqDict = IcePHP_defineDictionary('::IceGrid::PropertyDescriptorSeqDict', $IcePHP__t_string, $IceGrid__t_PropertyDescriptorSeq);
    }
}

namespace IceGrid
{
    global $IceGrid__t_InternalServerDescriptor;
    class InternalServerDescriptor extends \Ice\Value
    {
        public function __construct($id='', $application='', $uuid='', $revision=0, $sessionId='', $exe='', $pwd='', $user='', $activation='', $activationTimeout='', $deactivationTimeout='', $processRegistered=false, $options=null, $envs=null, $logs=null, $adapters=null, $dbEnvs=null, $properties=null, $services=\Ice\None)
        {
            $this->id = $id;
            $this->application = $application;
            $this->uuid = $uuid;
            $this->revision = $revision;
            $this->sessionId = $sessionId;
            $this->exe = $exe;
            $this->pwd = $pwd;
            $this->user = $user;
            $this->activation = $activation;
            $this->activationTimeout = $activationTimeout;
            $this->deactivationTimeout = $deactivationTimeout;
            $this->processRegistered = $processRegistered;
            $this->options = $options;
            $this->envs = $envs;
            $this->logs = $logs;
            $this->adapters = $adapters;
            $this->dbEnvs = $dbEnvs;
            $this->properties = $properties;
            $this->services = $services;
        }

        public function ice_id()
        {
            return '::IceGrid::InternalServerDescriptor';
        }

        public static function ice_staticId()
        {
            return '::IceGrid::InternalServerDescriptor';
        }

        public function __toString(): string
        {
            global $IceGrid__t_InternalServerDescriptor;
            return IcePHP_stringify($this, $IceGrid__t_InternalServerDescriptor);
        }

        public $id;
        public $application;
        public $uuid;
        public $revision;
        public $sessionId;
        public $exe;
        public $pwd;
        public $user;
        public $activation;
        public $activationTimeout;
        public $deactivationTimeout;
        public $processRegistered;
        public $options;
        public $envs;
        public $logs;
        public $adapters;
        public $dbEnvs;
        public $properties;
        public $services;
    }

    $IceGrid__t_InternalServerDescriptor = IcePHP_declareClass('::IceGrid::InternalServerDescriptor');

    global $Ice__t_Value;
    global $IcePHP__t_string;
    global $IcePHP__t_int;
    global $IcePHP__t_bool;
    global $Ice__t_StringSeq;
    global $IceGrid__t_InternalAdapterDescriptorSeq;
    global $IceGrid__t_InternalDbEnvDescriptorSeq;
    global $IceGrid__t_PropertyDescriptorSeqDict;
    $IceGrid__t_InternalServerDescriptor = IcePHP_defineClass('::IceGrid::InternalServerDescriptor', '\\IceGrid\\InternalServerDescriptor', -1, false, $Ice__t_Value, array(
        array('id', $IcePHP__t_string, false, 0),
        array('application', $IcePHP__t_string, false, 0),
        array('uuid', $IcePHP__t_string, false, 0),
        array('revision', $IcePHP__t_int, false, 0),
        array('sessionId', $IcePHP__t_string, false, 0),
        array('exe', $IcePHP__t_string, false, 0),
        array('pwd', $IcePHP__t_string, false, 0),
        array('user', $IcePHP__t_string, false, 0),
        array('activation', $IcePHP__t_string, false, 0),
        array('activationTimeout', $IcePHP__t_string, false, 0),
        array('deactivationTimeout', $IcePHP__t_string, false, 0),
        array('processRegistered', $IcePHP__t_bool, false, 0),
        array('options', $Ice__t_StringSeq, false, 0),
        array('envs', $Ice__t_StringSeq, false, 0),
        array('logs', $Ice__t_StringSeq, false, 0),
        array('adapters', $IceGrid__t_InternalAdapterDescriptorSeq, false, 0),
        array('dbEnvs', $IceGrid__t_InternalDbEnvDescriptorSeq, false, 0),
        array('properties', $IceGrid__t_PropertyDescriptorSeqDict, false, 0),
        array('services', $Ice__t_StringSeq, true, 1)));
}

namespace IceGrid
{
    global $IceGrid__t_AdapterActiveException;
    class AdapterActiveException extends \Ice\UserException
    {
        public function ice_id()
        {
            return '::IceGrid::AdapterActiveException';
        }

        public function __toString(): string
        {
            global $IceGrid__t_AdapterActiveException;
            return IcePHP_stringifyException($this, $IceGrid__t_AdapterActiveException);
        }
    }

    $IceGrid__t_AdapterActiveException = IcePHP_defineException('::IceGrid::AdapterActiveException', '\\IceGrid\\AdapterActiveException', null, null);
}

namespace IceGrid
{
    global $IceGrid__t_AdapterNotActiveException;
    class AdapterNotActiveException extends \Ice\UserException
    {
        public function ice_id()
        {
            return '::IceGrid::AdapterNotActiveException';
        }

        public function __toString(): string
        {
            global $IceGrid__t_AdapterNotActiveException;
            return IcePHP_stringifyException($this, $IceGrid__t_AdapterNotActiveException);
        }

        public $activatable;
    }
    global $IcePHP__t_bool;

    $IceGrid__t_AdapterNotActiveException = IcePHP_defineException('::IceGrid::AdapterNotActiveException', '\\IceGrid\\AdapterNotActiveException', null, array(
        array('activatable', $IcePHP__t_bool, false, 0)));
}

namespace IceGrid
{
    global $IceGrid__t_Adapter;
    global $IceGrid__t_AdapterPrx;

    class AdapterPrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::IceGrid::Adapter');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::IceGrid::Adapter', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::IceGrid::Adapter', $facet);
        }

        public static function ice_staticId()
        {
            return '::IceGrid::Adapter';
        }
    }

    global $Ice__t_ObjectPrx;
    $IceGrid__t_AdapterPrx = IcePHP_defineProxy('::IceGrid::Adapter', $Ice__t_ObjectPrx, null);

    global $Ice__t_ObjectPrx;
    IcePHP_defineOperation($IceGrid__t_AdapterPrx, 'activate', 0, -1, null, null, array($Ice__t_ObjectPrx), null);
    IcePHP_defineOperation($IceGrid__t_AdapterPrx, 'getDirectProxy', 2, -1, null, null, array($Ice__t_ObjectPrx), array($IceGrid__t_AdapterNotActiveException));
    IcePHP_defineOperation($IceGrid__t_AdapterPrx, 'setDirectProxy', 0, -1, array(array($Ice__t_ObjectPrx)), null, null, array($IceGrid__t_AdapterActiveException));
}

namespace IceGrid
{
    global $IceGrid__t_AdapterExistsException;
    class AdapterExistsException extends \Ice\UserException
    {
        public function ice_id()
        {
            return '::IceGrid::AdapterExistsException';
        }

        public function __toString(): string
        {
            global $IceGrid__t_AdapterExistsException;
            return IcePHP_stringifyException($this, $IceGrid__t_AdapterExistsException);
        }

        public $id;
    }
    global $IcePHP__t_string;

    $IceGrid__t_AdapterExistsException = IcePHP_defineException('::IceGrid::AdapterExistsException', '\\IceGrid\\AdapterExistsException', null, array(
        array('id', $IcePHP__t_string, false, 0)));
}

namespace IceGrid
{
    global $IceGrid__t_AdapterPrxDict;

    if(!isset($IceGrid__t_AdapterPrxDict))
    {
        global $IcePHP__t_string;
        global $IceGrid__t_AdapterPrx;
        $IceGrid__t_AdapterPrxDict = IcePHP_defineDictionary('::IceGrid::AdapterPrxDict', $IcePHP__t_string, $IceGrid__t_AdapterPrx);
    }
}

namespace IceGrid
{
    global $IceGrid__t_FileReader;
    global $IceGrid__t_FileReaderPrx;

    class FileReaderPrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::IceGrid::FileReader');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::IceGrid::FileReader', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::IceGrid::FileReader', $facet);
        }

        public static function ice_staticId()
        {
            return '::IceGrid::FileReader';
        }
    }

    global $Ice__t_ObjectPrx;
    $IceGrid__t_FileReaderPrx = IcePHP_defineProxy('::IceGrid::FileReader', $Ice__t_ObjectPrx, null);

    global $IcePHP__t_string;
    global $IcePHP__t_int;
    global $IcePHP__t_long;
    global $Ice__t_StringSeq;
    global $IcePHP__t_bool;
    IcePHP_defineOperation($IceGrid__t_FileReaderPrx, 'getOffsetFromEnd', 2, -1, array(array($IcePHP__t_string), array($IcePHP__t_int)), null, array($IcePHP__t_long), array($IceGrid__t_FileNotAvailableException));
    IcePHP_defineOperation($IceGrid__t_FileReaderPrx, 'read', 2, -1, array(array($IcePHP__t_string), array($IcePHP__t_long), array($IcePHP__t_int)), array(array($IcePHP__t_long), array($Ice__t_StringSeq)), array($IcePHP__t_bool), array($IceGrid__t_FileNotAvailableException));
}

namespace IceGrid
{
    global $IceGrid__t_Server;
    global $IceGrid__t_ServerPrx;

    class ServerPrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::IceGrid::Server');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::IceGrid::Server', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::IceGrid::Server', $facet);
        }

        public static function ice_staticId()
        {
            return '::IceGrid::Server';
        }
    }

    global $Ice__t_ObjectPrx;
    $IceGrid__t_ServerPrx = IcePHP_defineProxy('::IceGrid::Server', $Ice__t_ObjectPrx, array($IceGrid__t_FileReaderPrx));

    global $IceGrid__t_InternalServerDescriptor;
    global $IcePHP__t_bool;
    global $IcePHP__t_string;
    global $IcePHP__t_int;
    global $IceGrid__t_ServerState;
    global $Ice__t_ProcessPrx;
    IcePHP_defineOperation($IceGrid__t_ServerPrx, 'start', 0, -1, null, null, null, array($IceGrid__t_ServerStartException));
    IcePHP_defineOperation($IceGrid__t_ServerPrx, 'stop', 0, -1, null, null, null, array($IceGrid__t_ServerStopException));
    IcePHP_defineOperation($IceGrid__t_ServerPrx, 'checkUpdate', 0, -1, array(array($IceGrid__t_InternalServerDescriptor), array($IcePHP__t_bool)), null, array($IcePHP__t_bool), array($IceGrid__t_DeploymentException));
    IcePHP_defineOperation($IceGrid__t_ServerPrx, 'setEnabled', 0, -1, array(array($IcePHP__t_bool)), null, null, null);
    IcePHP_defineOperation($IceGrid__t_ServerPrx, 'isEnabled', 2, -1, null, null, array($IcePHP__t_bool), null);
    IcePHP_defineOperation($IceGrid__t_ServerPrx, 'sendSignal', 0, -1, array(array($IcePHP__t_string)), null, null, array($IceGrid__t_BadSignalException));
    IcePHP_defineOperation($IceGrid__t_ServerPrx, 'writeMessage', 0, -1, array(array($IcePHP__t_string), array($IcePHP__t_int)), null, null, null);
    IcePHP_defineOperation($IceGrid__t_ServerPrx, 'getState', 2, -1, null, null, array($IceGrid__t_ServerState), null);
    IcePHP_defineOperation($IceGrid__t_ServerPrx, 'getPid', 2, -1, null, null, array($IcePHP__t_int), null);
    IcePHP_defineOperation($IceGrid__t_ServerPrx, 'setProcess', 0, -1, array(array($Ice__t_ProcessPrx)), null, null, null);
}

namespace IceGrid
{
    global $IceGrid__t_InternalRegistry;
    global $IceGrid__t_InternalRegistryPrx;
    if(!isset($IceGrid__t_InternalRegistry))
    {
        $IceGrid__t_InternalRegistryPrx = IcePHP_declareProxy('::IceGrid::InternalRegistry');
    }
}

namespace IceGrid
{
    global $IceGrid__t_InternalRegistryPrxSeq;

    if(!isset($IceGrid__t_InternalRegistryPrxSeq))
    {
        global $IceGrid__t_InternalRegistryPrx;
        $IceGrid__t_InternalRegistryPrxSeq = IcePHP_defineSequence('::IceGrid::InternalRegistryPrxSeq', $IceGrid__t_InternalRegistryPrx);
    }
}

namespace IceGrid
{
    global $IceGrid__t_ReplicaObserver;
    global $IceGrid__t_ReplicaObserverPrx;

    class ReplicaObserverPrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::IceGrid::ReplicaObserver');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::IceGrid::ReplicaObserver', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::IceGrid::ReplicaObserver', $facet);
        }

        public static function ice_staticId()
        {
            return '::IceGrid::ReplicaObserver';
        }
    }

    global $Ice__t_ObjectPrx;
    $IceGrid__t_ReplicaObserverPrx = IcePHP_defineProxy('::IceGrid::ReplicaObserver', $Ice__t_ObjectPrx, null);

    global $IceGrid__t_InternalRegistryPrxSeq;
    global $IceGrid__t_InternalRegistryPrx;
    IcePHP_defineOperation($IceGrid__t_ReplicaObserverPrx, 'replicaInit', 0, -1, array(array($IceGrid__t_InternalRegistryPrxSeq)), null, null, null);
    IcePHP_defineOperation($IceGrid__t_ReplicaObserverPrx, 'replicaAdded', 0, -1, array(array($IceGrid__t_InternalRegistryPrx)), null, null, null);
    IcePHP_defineOperation($IceGrid__t_ReplicaObserverPrx, 'replicaRemoved', 0, -1, array(array($IceGrid__t_InternalRegistryPrx)), null, null, null);
}

namespace IceGrid
{
    global $IceGrid__t_Node;
    global $IceGrid__t_NodePrx;

    class NodePrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::IceGrid::Node');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::IceGrid::Node', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::IceGrid::Node', $facet);
        }

        public static function ice_staticId()
        {
            return '::IceGrid::Node';
        }
    }

    global $Ice__t_ObjectPrx;
    $IceGrid__t_NodePrx = IcePHP_defineProxy('::IceGrid::Node', $Ice__t_ObjectPrx, array($IceGrid__t_FileReaderPrx, $IceGrid__t_ReplicaObserverPrx));

    global $IceGrid__t_InternalServerDescriptor;
    global $IcePHP__t_string;
    global $IceGrid__t_AdapterPrxDict;
    global $IcePHP__t_int;
    global $IceGrid__t_ServerPrx;
    global $IceGrid__t_InternalRegistryPrx;
    global $IceGrid__t_LoadInfo;
    IcePHP_defineOperation($IceGrid__t_NodePrx, 'loadServer', 2, -1, array(array($IceGrid__t_InternalServerDescriptor), array($IcePHP__t_string)), array(array($IceGrid__t_AdapterPrxDict), array($IcePHP__t_int), array($IcePHP__t_int)), array($IceGrid__t_ServerPrx), array($IceGrid__t_DeploymentException));
    IcePHP_defineOperation($IceGrid__t_NodePrx, 'loadServerWithoutRestart', 2, -1, array(array($IceGrid__t_InternalServerDescriptor), array($IcePHP__t_string)), array(array($IceGrid__t_AdapterPrxDict), array($IcePHP__t_int), array($IcePHP__t_int)), array($IceGrid__t_ServerPrx), array($IceGrid__t_DeploymentException));
    IcePHP_defineOperation($IceGrid__t_NodePrx, 'destroyServer', 2, -1, array(array($IcePHP__t_string), array($IcePHP__t_string), array($IcePHP__t_int), array($IcePHP__t_string)), null, null, array($IceGrid__t_DeploymentException));
    IcePHP_defineOperation($IceGrid__t_NodePrx, 'destroyServerWithoutRestart', 2, -1, array(array($IcePHP__t_string), array($IcePHP__t_string), array($IcePHP__t_int), array($IcePHP__t_string)), null, null, array($IceGrid__t_DeploymentException));
    IcePHP_defineOperation($IceGrid__t_NodePrx, 'registerWithReplica', 0, -1, array(array($IceGrid__t_InternalRegistryPrx)), null, null, null);
    IcePHP_defineOperation($IceGrid__t_NodePrx, 'getName', 2, -1, null, null, array($IcePHP__t_string), null);
    IcePHP_defineOperation($IceGrid__t_NodePrx, 'getHostname', 2, -1, null, null, array($IcePHP__t_string), null);
    IcePHP_defineOperation($IceGrid__t_NodePrx, 'getLoad', 2, -1, null, null, array($IceGrid__t_LoadInfo), null);
    IcePHP_defineOperation($IceGrid__t_NodePrx, 'getProcessorSocketCount', 2, -1, null, null, array($IcePHP__t_int), null);
    IcePHP_defineOperation($IceGrid__t_NodePrx, 'shutdown', 2, -1, null, null, null, null);
}

namespace IceGrid
{
    global $IceGrid__t_NodePrxSeq;

    if(!isset($IceGrid__t_NodePrxSeq))
    {
        global $IceGrid__t_NodePrx;
        $IceGrid__t_NodePrxSeq = IcePHP_defineSequence('::IceGrid::NodePrxSeq', $IceGrid__t_NodePrx);
    }
}

namespace IceGrid
{
    global $IceGrid__t_NodeActiveException;
    class NodeActiveException extends \Ice\UserException
    {
        public function ice_id()
        {
            return '::IceGrid::NodeActiveException';
        }

        public function __toString(): string
        {
            global $IceGrid__t_NodeActiveException;
            return IcePHP_stringifyException($this, $IceGrid__t_NodeActiveException);
        }
    }

    $IceGrid__t_NodeActiveException = IcePHP_defineException('::IceGrid::NodeActiveException', '\\IceGrid\\NodeActiveException', null, null);
}

namespace IceGrid
{
    global $IceGrid__t_NodeSession;
    global $IceGrid__t_NodeSessionPrx;

    class NodeSessionPrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::IceGrid::NodeSession');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::IceGrid::NodeSession', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::IceGrid::NodeSession', $facet);
        }

        public static function ice_staticId()
        {
            return '::IceGrid::NodeSession';
        }
    }

    global $Ice__t_ObjectPrx;
    $IceGrid__t_NodeSessionPrx = IcePHP_defineProxy('::IceGrid::NodeSession', $Ice__t_ObjectPrx, null);

    global $IceGrid__t_LoadInfo;
    global $IceGrid__t_ReplicaObserverPrx;
    global $IcePHP__t_int;
    global $IceGrid__t_NodeObserverPrx;
    global $Ice__t_StringSeq;
    global $IcePHP__t_string;
    IcePHP_defineOperation($IceGrid__t_NodeSessionPrx, 'keepAlive', 0, -1, array(array($IceGrid__t_LoadInfo)), null, null, null);
    IcePHP_defineOperation($IceGrid__t_NodeSessionPrx, 'setReplicaObserver', 0, -1, array(array($IceGrid__t_ReplicaObserverPrx)), null, null, null);
    IcePHP_defineOperation($IceGrid__t_NodeSessionPrx, 'getTimeout', 2, -1, null, null, array($IcePHP__t_int), null);
    IcePHP_defineOperation($IceGrid__t_NodeSessionPrx, 'getObserver', 2, -1, null, null, array($IceGrid__t_NodeObserverPrx), null);
    IcePHP_defineOperation($IceGrid__t_NodeSessionPrx, 'loadServers', 2, -1, null, null, null, null);
    IcePHP_defineOperation($IceGrid__t_NodeSessionPrx, 'getServers', 2, -1, null, null, array($Ice__t_StringSeq), null);
    IcePHP_defineOperation($IceGrid__t_NodeSessionPrx, 'waitForApplicationUpdate', 0, -1, array(array($IcePHP__t_string), array($IcePHP__t_int)), null, null, null);
    IcePHP_defineOperation($IceGrid__t_NodeSessionPrx, 'destroy', 0, -1, null, null, null, null);
}

namespace IceGrid
{
    global $IceGrid__t_ReplicaActiveException;
    class ReplicaActiveException extends \Ice\UserException
    {
        public function ice_id()
        {
            return '::IceGrid::ReplicaActiveException';
        }

        public function __toString(): string
        {
            global $IceGrid__t_ReplicaActiveException;
            return IcePHP_stringifyException($this, $IceGrid__t_ReplicaActiveException);
        }
    }

    $IceGrid__t_ReplicaActiveException = IcePHP_defineException('::IceGrid::ReplicaActiveException', '\\IceGrid\\ReplicaActiveException', null, null);
}

namespace IceGrid
{
    global $IceGrid__t_TopicName;
    class TopicName
    {
        const RegistryObserver = 0;
        const NodeObserver = 1;
        const ApplicationObserver = 2;
        const AdapterObserver = 3;
        const ObjectObserver = 4;
    }

    $IceGrid__t_TopicName = IcePHP_defineEnum('::IceGrid::TopicName', array('RegistryObserver', 0, 'NodeObserver', 1, 'ApplicationObserver', 2, 'AdapterObserver', 3, 'ObjectObserver', 4));
}

namespace IceGrid
{
    global $IceGrid__t_DatabaseObserver;
    global $IceGrid__t_DatabaseObserverPrx;

    class DatabaseObserverPrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::IceGrid::DatabaseObserver');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::IceGrid::DatabaseObserver', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::IceGrid::DatabaseObserver', $facet);
        }

        public static function ice_staticId()
        {
            return '::IceGrid::DatabaseObserver';
        }
    }

    global $Ice__t_ObjectPrx;
    $IceGrid__t_DatabaseObserverPrx = IcePHP_defineProxy('::IceGrid::DatabaseObserver', $Ice__t_ObjectPrx, array($IceGrid__t_ApplicationObserverPrx, $IceGrid__t_ObjectObserverPrx, $IceGrid__t_AdapterObserverPrx));
}

namespace IceGrid
{
    global $IceGrid__t_StringLongDict;

    if(!isset($IceGrid__t_StringLongDict))
    {
        global $IcePHP__t_string;
        global $IcePHP__t_long;
        $IceGrid__t_StringLongDict = IcePHP_defineDictionary('::IceGrid::StringLongDict', $IcePHP__t_string, $IcePHP__t_long);
    }
}

namespace IceGrid
{
    global $IceGrid__t_ReplicaSession;
    global $IceGrid__t_ReplicaSessionPrx;

    class ReplicaSessionPrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::IceGrid::ReplicaSession');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::IceGrid::ReplicaSession', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::IceGrid::ReplicaSession', $facet);
        }

        public static function ice_staticId()
        {
            return '::IceGrid::ReplicaSession';
        }
    }

    global $Ice__t_ObjectPrx;
    $IceGrid__t_ReplicaSessionPrx = IcePHP_defineProxy('::IceGrid::ReplicaSession', $Ice__t_ObjectPrx, null);

    global $IcePHP__t_int;
    global $IceGrid__t_DatabaseObserverPrx;
    global $IceGrid__t_StringLongDict;
    global $IceGrid__t_StringObjectProxyDict;
    global $IceGrid__t_ObjectInfoSeq;
    global $IcePHP__t_string;
    global $Ice__t_ObjectPrx;
    global $IceGrid__t_TopicName;
    IcePHP_defineOperation($IceGrid__t_ReplicaSessionPrx, 'keepAlive', 0, -1, null, null, null, null);
    IcePHP_defineOperation($IceGrid__t_ReplicaSessionPrx, 'getTimeout', 2, -1, null, null, array($IcePHP__t_int), null);
    IcePHP_defineOperation($IceGrid__t_ReplicaSessionPrx, 'setDatabaseObserver', 2, -1, array(array($IceGrid__t_DatabaseObserverPrx), array($IceGrid__t_StringLongDict, 1)), null, null, array($IceGrid__t_ObserverAlreadyRegisteredException, $IceGrid__t_DeploymentException));
    IcePHP_defineOperation($IceGrid__t_ReplicaSessionPrx, 'setEndpoints', 2, -1, array(array($IceGrid__t_StringObjectProxyDict)), null, null, null);
    IcePHP_defineOperation($IceGrid__t_ReplicaSessionPrx, 'registerWellKnownObjects', 2, -1, array(array($IceGrid__t_ObjectInfoSeq)), null, null, null);
    IcePHP_defineOperation($IceGrid__t_ReplicaSessionPrx, 'setAdapterDirectProxy', 2, -1, array(array($IcePHP__t_string), array($IcePHP__t_string), array($Ice__t_ObjectPrx)), null, null, array($IceGrid__t_AdapterNotExistException, $IceGrid__t_AdapterExistsException));
    IcePHP_defineOperation($IceGrid__t_ReplicaSessionPrx, 'receivedUpdate', 0, -1, array(array($IceGrid__t_TopicName), array($IcePHP__t_int), array($IcePHP__t_string)), null, null, null);
    IcePHP_defineOperation($IceGrid__t_ReplicaSessionPrx, 'destroy', 0, -1, null, null, null, null);
}

namespace IceGrid
{
    global $IceGrid__t_InternalNodeInfo;
    class InternalNodeInfo extends \Ice\Value
    {
        public function __construct($name='', $os='', $hostname='', $release='', $version='', $machine='', $nProcessors=0, $dataDir='', $iceSoVersion=\Ice\None)
        {
            $this->name = $name;
            $this->os = $os;
            $this->hostname = $hostname;
            $this->release = $release;
            $this->version = $version;
            $this->machine = $machine;
            $this->nProcessors = $nProcessors;
            $this->dataDir = $dataDir;
            $this->iceSoVersion = $iceSoVersion;
        }

        public function ice_id()
        {
            return '::IceGrid::InternalNodeInfo';
        }

        public static function ice_staticId()
        {
            return '::IceGrid::InternalNodeInfo';
        }

        public function __toString(): string
        {
            global $IceGrid__t_InternalNodeInfo;
            return IcePHP_stringify($this, $IceGrid__t_InternalNodeInfo);
        }

        public $name;
        public $os;
        public $hostname;
        public $release;
        public $version;
        public $machine;
        public $nProcessors;
        public $dataDir;
        public $iceSoVersion;
    }

    global $Ice__t_Value;
    global $IcePHP__t_string;
    global $IcePHP__t_int;
    $IceGrid__t_InternalNodeInfo = IcePHP_defineClass('::IceGrid::InternalNodeInfo', '\\IceGrid\\InternalNodeInfo', -1, false, $Ice__t_Value, array(
        array('name', $IcePHP__t_string, false, 0),
        array('os', $IcePHP__t_string, false, 0),
        array('hostname', $IcePHP__t_string, false, 0),
        array('release', $IcePHP__t_string, false, 0),
        array('version', $IcePHP__t_string, false, 0),
        array('machine', $IcePHP__t_string, false, 0),
        array('nProcessors', $IcePHP__t_int, false, 0),
        array('dataDir', $IcePHP__t_string, false, 0),
        array('iceSoVersion', $IcePHP__t_string, true, 1)));
}

namespace IceGrid
{
    global $IceGrid__t_InternalReplicaInfo;
    class InternalReplicaInfo extends \Ice\Value
    {
        public function __construct($name='', $hostname='')
        {
            $this->name = $name;
            $this->hostname = $hostname;
        }

        public function ice_id()
        {
            return '::IceGrid::InternalReplicaInfo';
        }

        public static function ice_staticId()
        {
            return '::IceGrid::InternalReplicaInfo';
        }

        public function __toString(): string
        {
            global $IceGrid__t_InternalReplicaInfo;
            return IcePHP_stringify($this, $IceGrid__t_InternalReplicaInfo);
        }

        public $name;
        public $hostname;
    }

    global $Ice__t_Value;
    global $IcePHP__t_string;
    $IceGrid__t_InternalReplicaInfo = IcePHP_defineClass('::IceGrid::InternalReplicaInfo', '\\IceGrid\\InternalReplicaInfo', -1, false, $Ice__t_Value, array(
        array('name', $IcePHP__t_string, false, 0),
        array('hostname', $IcePHP__t_string, false, 0)));
}

namespace IceGrid
{
    global $IceGrid__t_InternalRegistry;
    global $IceGrid__t_InternalRegistryPrx;

    class InternalRegistryPrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::IceGrid::InternalRegistry');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::IceGrid::InternalRegistry', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::IceGrid::InternalRegistry', $facet);
        }

        public static function ice_staticId()
        {
            return '::IceGrid::InternalRegistry';
        }
    }

    global $Ice__t_ObjectPrx;
    $IceGrid__t_InternalRegistryPrx = IcePHP_defineProxy('::IceGrid::InternalRegistry', $Ice__t_ObjectPrx, array($IceGrid__t_FileReaderPrx));

    global $IceGrid__t_InternalNodeInfo;
    global $IceGrid__t_NodePrx;
    global $IceGrid__t_LoadInfo;
    global $IceGrid__t_NodeSessionPrx;
    global $IceGrid__t_InternalReplicaInfo;
    global $IceGrid__t_InternalRegistryPrx;
    global $IceGrid__t_ReplicaSessionPrx;
    global $IceGrid__t_NodePrxSeq;
    global $IceGrid__t_InternalRegistryPrxSeq;
    global $IcePHP__t_long;
    global $IceGrid__t_ApplicationInfoSeq;
    global $IceGrid__t_AdapterInfoSeq;
    global $IceGrid__t_ObjectInfoSeq;
    IcePHP_defineOperation($IceGrid__t_InternalRegistryPrx, 'registerNode', 0, -1, array(array($IceGrid__t_InternalNodeInfo), array($IceGrid__t_NodePrx), array($IceGrid__t_LoadInfo)), null, array($IceGrid__t_NodeSessionPrx), array($IceGrid__t_NodeActiveException, $IceGrid__t_PermissionDeniedException));
    IcePHP_defineOperation($IceGrid__t_InternalRegistryPrx, 'registerReplica', 0, -1, array(array($IceGrid__t_InternalReplicaInfo), array($IceGrid__t_InternalRegistryPrx)), null, array($IceGrid__t_ReplicaSessionPrx), array($IceGrid__t_ReplicaActiveException, $IceGrid__t_PermissionDeniedException));
    IcePHP_defineOperation($IceGrid__t_InternalRegistryPrx, 'registerWithReplica', 0, -1, array(array($IceGrid__t_InternalRegistryPrx)), null, null, null);
    IcePHP_defineOperation($IceGrid__t_InternalRegistryPrx, 'getNodes', 2, -1, null, null, array($IceGrid__t_NodePrxSeq), null);
    IcePHP_defineOperation($IceGrid__t_InternalRegistryPrx, 'getReplicas', 2, -1, null, null, array($IceGrid__t_InternalRegistryPrxSeq), null);
    IcePHP_defineOperation($IceGrid__t_InternalRegistryPrx, 'getApplications', 2, -1, null, array(array($IcePHP__t_long)), array($IceGrid__t_ApplicationInfoSeq), null);
    IcePHP_defineOperation($IceGrid__t_InternalRegistryPrx, 'getAdapters', 2, -1, null, array(array($IcePHP__t_long)), array($IceGrid__t_AdapterInfoSeq), null);
    IcePHP_defineOperation($IceGrid__t_InternalRegistryPrx, 'getObjects', 2, -1, null, array(array($IcePHP__t_long)), array($IceGrid__t_ObjectInfoSeq), null);
    IcePHP_defineOperation($IceGrid__t_InternalRegistryPrx, 'shutdown', 2, -1, null, null, null, null);
}
?>
