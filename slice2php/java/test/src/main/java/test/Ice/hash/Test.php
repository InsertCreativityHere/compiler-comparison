<?php
// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>


namespace Test
{
    global $Test__t_PointF;
    class PointF
    {
        public function __construct($x=0.0, $y=0.0, $z=0.0)
        {
            $this->x = $x;
            $this->y = $y;
            $this->z = $z;
        }

        public function __toString(): string
        {
            global $Test__t_PointF;
            return IcePHP_stringify($this, $Test__t_PointF);
        }

        public $x;
        public $y;
        public $z;
    }

    global $IcePHP__t_float;
    $Test__t_PointF = IcePHP_defineStruct('::Test::PointF', '\\Test\\PointF', array(
        array('x', $IcePHP__t_float),
        array('y', $IcePHP__t_float),
        array('z', $IcePHP__t_float)));
}

namespace Test
{
    global $Test__t_PointD;
    class PointD
    {
        public function __construct($x=0.0, $y=0.0, $z=0.0)
        {
            $this->x = $x;
            $this->y = $y;
            $this->z = $z;
        }

        public function __toString(): string
        {
            global $Test__t_PointD;
            return IcePHP_stringify($this, $Test__t_PointD);
        }

        public $x;
        public $y;
        public $z;
    }

    global $IcePHP__t_double;
    $Test__t_PointD = IcePHP_defineStruct('::Test::PointD', '\\Test\\PointD', array(
        array('x', $IcePHP__t_double),
        array('y', $IcePHP__t_double),
        array('z', $IcePHP__t_double)));
}

namespace Test
{
    global $Test__t_Point;
    class Point
    {
        public function __construct($x=0, $y=0)
        {
            $this->x = $x;
            $this->y = $y;
        }

        public function __toString(): string
        {
            global $Test__t_Point;
            return IcePHP_stringify($this, $Test__t_Point);
        }

        public $x;
        public $y;
    }

    global $IcePHP__t_int;
    $Test__t_Point = IcePHP_defineStruct('::Test::Point', '\\Test\\Point', array(
        array('x', $IcePHP__t_int),
        array('y', $IcePHP__t_int)));
}

namespace Test
{
    global $Test__t_Points;

    if(!isset($Test__t_Points))
    {
        global $Test__t_Point;
        $Test__t_Points = IcePHP_defineSequence('::Test::Points', $Test__t_Point);
    }
}

namespace Test
{
    global $Test__t_Polyline;
    class Polyline
    {
        public function __construct($vertices=null)
        {
            $this->vertices = $vertices;
        }

        public function __toString(): string
        {
            global $Test__t_Polyline;
            return IcePHP_stringify($this, $Test__t_Polyline);
        }

        public $vertices;
    }

    global $Test__t_Points;
    $Test__t_Polyline = IcePHP_defineStruct('::Test::Polyline', '\\Test\\Polyline', array(
        array('vertices', $Test__t_Points)));
}

namespace Test
{
    global $Test__t_Color;
    class Color
    {
        public function __construct($r=0, $g=0, $b=0, $a=0)
        {
            $this->r = $r;
            $this->g = $g;
            $this->b = $b;
            $this->a = $a;
        }

        public function __toString(): string
        {
            global $Test__t_Color;
            return IcePHP_stringify($this, $Test__t_Color);
        }

        public $r;
        public $g;
        public $b;
        public $a;
    }

    global $IcePHP__t_int;
    $Test__t_Color = IcePHP_defineStruct('::Test::Color', '\\Test\\Color', array(
        array('r', $IcePHP__t_int),
        array('g', $IcePHP__t_int),
        array('b', $IcePHP__t_int),
        array('a', $IcePHP__t_int)));
}

namespace Test
{
    global $Test__t_StringColorMap;

    if(!isset($Test__t_StringColorMap))
    {
        global $IcePHP__t_int;
        global $Test__t_Color;
        $Test__t_StringColorMap = IcePHP_defineDictionary('::Test::StringColorMap', $IcePHP__t_int, $Test__t_Color);
    }
}

namespace Test
{
    global $Test__t_ColorPalette;
    class ColorPalette
    {
        public function __construct($colors=null)
        {
            $this->colors = $colors;
        }

        public function __toString(): string
        {
            global $Test__t_ColorPalette;
            return IcePHP_stringify($this, $Test__t_ColorPalette);
        }

        public $colors;
    }

    global $Test__t_StringColorMap;
    $Test__t_ColorPalette = IcePHP_defineStruct('::Test::ColorPalette', '\\Test\\ColorPalette', array(
        array('colors', $Test__t_StringColorMap)));
}

namespace Test
{
    global $Test__t_Pen;
    $Test__t_Pen = IcePHP_declareClass('::Test::Pen');
}

namespace Test
{
    global $Test__t_Pen;
    class Pen extends \Ice\Value
    {
        public function __construct($thickness=0, $color=null)
        {
            $this->thickness = $thickness;
            $this->color = is_null($color) ? new \Test\Color : $color;
        }

        public function ice_id()
        {
            return '::Test::Pen';
        }

        public static function ice_staticId()
        {
            return '::Test::Pen';
        }

        public function __toString(): string
        {
            global $Test__t_Pen;
            return IcePHP_stringify($this, $Test__t_Pen);
        }

        public $thickness;
        public $color;
    }

    global $Ice__t_Value;
    global $IcePHP__t_int;
    global $Test__t_Color;
    $Test__t_Pen = IcePHP_defineClass('::Test::Pen', '\\Test\\Pen', -1, false, $Ice__t_Value, array(
        array('thickness', $IcePHP__t_int, false, 0),
        array('color', $Test__t_Color, false, 0)));
}

namespace Test
{
    global $Test__t_Draw;
    class Draw
    {
        public function __construct($backgroundColor=null, $pen=null, $shared=false)
        {
            $this->backgroundColor = is_null($backgroundColor) ? new \Test\Color : $backgroundColor;
            $this->pen = $pen;
            $this->shared = $shared;
        }

        public function __toString(): string
        {
            global $Test__t_Draw;
            return IcePHP_stringify($this, $Test__t_Draw);
        }

        public $backgroundColor;
        public $pen;
        public $shared;
    }

    global $Test__t_Color;
    global $Test__t_Pen;
    global $IcePHP__t_bool;
    $Test__t_Draw = IcePHP_defineStruct('::Test::Draw', '\\Test\\Draw', array(
        array('backgroundColor', $Test__t_Color),
        array('pen', $Test__t_Pen),
        array('shared', $IcePHP__t_bool)));
}
?>
