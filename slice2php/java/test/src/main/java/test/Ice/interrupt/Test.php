<?php
//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


namespace
{
    require_once 'Ice/BuiltinSequences.php';
}

namespace Test
{
    global $Test__t_InterruptedException;
    class InterruptedException extends \Ice\UserException
    {
        public function ice_id()
        {
            return '::Test::InterruptedException';
        }

        public function __toString(): string
        {
            global $Test__t_InterruptedException;
            return IcePHP_stringifyException($this, $Test__t_InterruptedException);
        }
    }

    $Test__t_InterruptedException = IcePHP_defineException('::Test::InterruptedException', '\\Test\\InterruptedException', null, null);
}

namespace Test
{
    global $Test__t_TestIntf;
    global $Test__t_TestIntfPrx;

    class TestIntfPrxHelper
    {
        public static function checkedCast($proxy, $facetOrContext=null, $context=null)
        {
            return $proxy->ice_checkedCast('::Test::TestIntf', $facetOrContext, $context);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Test::TestIntf', $facet);
        }

        public static function ice_staticId()
        {
            return '::Test::TestIntf';
        }
    }

    global $Ice__t_ObjectPrx;
    $Test__t_TestIntfPrx = IcePHP_defineProxy('::Test::TestIntf', $Ice__t_ObjectPrx, null);

    global $IcePHP__t_int;
    global $Ice__t_ByteSeq;
    IcePHP_defineOperation($Test__t_TestIntfPrx, 'op', 0, 0, null, null, null, null);
    IcePHP_defineOperation($Test__t_TestIntfPrx, 'opIdempotent', 2, 0, null, null, null, null);
    IcePHP_defineOperation($Test__t_TestIntfPrx, 'sleep', 0, 0, array(array($IcePHP__t_int)), null, null, array($Test__t_InterruptedException));
    IcePHP_defineOperation($Test__t_TestIntfPrx, 'opWithPayload', 0, 0, array(array($Ice__t_ByteSeq)), null, null, null);
    IcePHP_defineOperation($Test__t_TestIntfPrx, 'shutdown', 0, 0, null, null, null, null);
}

namespace Test
{
    global $Test__t_CannotInterruptException;
    class CannotInterruptException extends \Ice\UserException
    {
        public function ice_id()
        {
            return '::Test::CannotInterruptException';
        }

        public function __toString(): string
        {
            global $Test__t_CannotInterruptException;
            return IcePHP_stringifyException($this, $Test__t_CannotInterruptException);
        }
    }

    $Test__t_CannotInterruptException = IcePHP_defineException('::Test::CannotInterruptException', '\\Test\\CannotInterruptException', null, null);
}

namespace Test
{
    global $Test__t_TestIntfController;
    global $Test__t_TestIntfControllerPrx;

    class TestIntfControllerPrxHelper
    {
        public static function checkedCast($proxy, $facetOrContext=null, $context=null)
        {
            return $proxy->ice_checkedCast('::Test::TestIntfController', $facetOrContext, $context);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Test::TestIntfController', $facet);
        }

        public static function ice_staticId()
        {
            return '::Test::TestIntfController';
        }
    }

    global $Ice__t_ObjectPrx;
    $Test__t_TestIntfControllerPrx = IcePHP_defineProxy('::Test::TestIntfController', $Ice__t_ObjectPrx, null);

    IcePHP_defineOperation($Test__t_TestIntfControllerPrx, 'holdAdapter', 0, 0, null, null, null, null);
    IcePHP_defineOperation($Test__t_TestIntfControllerPrx, 'resumeAdapter', 0, 0, null, null, null, null);
    IcePHP_defineOperation($Test__t_TestIntfControllerPrx, 'interrupt', 0, 0, null, null, null, array($Test__t_CannotInterruptException));
}
?>
