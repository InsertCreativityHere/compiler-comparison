<?php
//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Controller.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


namespace Test\Common
{
    global $Test_Common__t_BoolSeq;

    if(!isset($Test_Common__t_BoolSeq))
    {
        global $IcePHP__t_bool;
        $Test_Common__t_BoolSeq = IcePHP_defineSequence('::Test::Common::BoolSeq', $IcePHP__t_bool);
    }
}

namespace Test\Common
{
    global $Test_Common__t_StringSeq;

    if(!isset($Test_Common__t_StringSeq))
    {
        global $IcePHP__t_string;
        $Test_Common__t_StringSeq = IcePHP_defineSequence('::Test::Common::StringSeq', $IcePHP__t_string);
    }
}

namespace Test\Common
{
    global $Test_Common__t_Config;
    class Config extends \Ice\Value
    {
        public function __construct($protocol=\Ice\None, $mx=\Ice\None, $serialize=\Ice\None, $compress=\Ice\None, $ipv6=\Ice\None, $cprops=\Ice\None, $sprops=\Ice\None)
        {
            $this->protocol = $protocol;
            $this->mx = $mx;
            $this->serialize = $serialize;
            $this->compress = $compress;
            $this->ipv6 = $ipv6;
            $this->cprops = $cprops;
            $this->sprops = $sprops;
        }

        public function ice_id()
        {
            return '::Test::Common::Config';
        }

        public static function ice_staticId()
        {
            return '::Test::Common::Config';
        }

        public function __toString(): string
        {
            global $Test_Common__t_Config;
            return IcePHP_stringify($this, $Test_Common__t_Config);
        }

        public $protocol;
        public $mx;
        public $serialize;
        public $compress;
        public $ipv6;
        public $cprops;
        public $sprops;
    }

    global $Ice__t_Value;
    global $IcePHP__t_string;
    global $IcePHP__t_bool;
    global $Test_Common__t_StringSeq;
    $Test_Common__t_Config = IcePHP_defineClass('::Test::Common::Config', '\\Test\\Common\\Config', -1, false, $Ice__t_Value, array(
        array('protocol', $IcePHP__t_string, true, 1),
        array('mx', $IcePHP__t_bool, true, 2),
        array('serialize', $IcePHP__t_bool, true, 3),
        array('compress', $IcePHP__t_bool, true, 4),
        array('ipv6', $IcePHP__t_bool, true, 5),
        array('cprops', $Test_Common__t_StringSeq, true, 6),
        array('sprops', $Test_Common__t_StringSeq, true, 7)));
}

namespace Test\Common
{
    global $Test_Common__t_OptionOverrides;
    class OptionOverrides extends \Ice\Value
    {
        public function __construct($protocol=\Ice\None, $mx=\Ice\None, $serialize=\Ice\None, $compress=\Ice\None, $ipv6=\Ice\None)
        {
            $this->protocol = $protocol;
            $this->mx = $mx;
            $this->serialize = $serialize;
            $this->compress = $compress;
            $this->ipv6 = $ipv6;
        }

        public function ice_id()
        {
            return '::Test::Common::OptionOverrides';
        }

        public static function ice_staticId()
        {
            return '::Test::Common::OptionOverrides';
        }

        public function __toString(): string
        {
            global $Test_Common__t_OptionOverrides;
            return IcePHP_stringify($this, $Test_Common__t_OptionOverrides);
        }

        public $protocol;
        public $mx;
        public $serialize;
        public $compress;
        public $ipv6;
    }

    global $Ice__t_Value;
    global $Test_Common__t_StringSeq;
    global $Test_Common__t_BoolSeq;
    $Test_Common__t_OptionOverrides = IcePHP_defineClass('::Test::Common::OptionOverrides', '\\Test\\Common\\OptionOverrides', -1, false, $Ice__t_Value, array(
        array('protocol', $Test_Common__t_StringSeq, true, 1),
        array('mx', $Test_Common__t_BoolSeq, true, 2),
        array('serialize', $Test_Common__t_BoolSeq, true, 3),
        array('compress', $Test_Common__t_BoolSeq, true, 4),
        array('ipv6', $Test_Common__t_BoolSeq, true, 5)));
}

namespace Test\Common
{
    global $Test_Common__t_TestCaseNotExistException;
    class TestCaseNotExistException extends \Ice\UserException
    {
        public function ice_id()
        {
            return '::Test::Common::TestCaseNotExistException';
        }

        public function __toString(): string
        {
            global $Test_Common__t_TestCaseNotExistException;
            return IcePHP_stringifyException($this, $Test_Common__t_TestCaseNotExistException);
        }

        public $reason;
    }
    global $IcePHP__t_string;

    $Test_Common__t_TestCaseNotExistException = IcePHP_defineException('::Test::Common::TestCaseNotExistException', '\\Test\\Common\\TestCaseNotExistException', null, array(
        array('reason', $IcePHP__t_string, false, 0)));
}

namespace Test\Common
{
    global $Test_Common__t_TestCaseFailedException;
    class TestCaseFailedException extends \Ice\UserException
    {
        public function ice_id()
        {
            return '::Test::Common::TestCaseFailedException';
        }

        public function __toString(): string
        {
            global $Test_Common__t_TestCaseFailedException;
            return IcePHP_stringifyException($this, $Test_Common__t_TestCaseFailedException);
        }

        public $output;
    }
    global $IcePHP__t_string;

    $Test_Common__t_TestCaseFailedException = IcePHP_defineException('::Test::Common::TestCaseFailedException', '\\Test\\Common\\TestCaseFailedException', null, array(
        array('output', $IcePHP__t_string, false, 0)));
}

namespace Test\Common
{
    global $Test_Common__t_TestCase;
    global $Test_Common__t_TestCasePrx;

    class TestCasePrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::Test::Common::TestCase');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::Test::Common::TestCase', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Test::Common::TestCase', $facet);
        }

        public static function ice_staticId()
        {
            return '::Test::Common::TestCase';
        }
    }

    global $Ice__t_ObjectPrx;
    $Test_Common__t_TestCasePrx = IcePHP_defineProxy('::Test::Common::TestCase', $Ice__t_ObjectPrx, null);

    global $Test_Common__t_Config;
    global $IcePHP__t_string;
    global $IcePHP__t_bool;
    IcePHP_defineOperation($Test_Common__t_TestCasePrx, 'startServerSide', 0, -1, array(array($Test_Common__t_Config)), null, array($IcePHP__t_string), array($Test_Common__t_TestCaseFailedException));
    IcePHP_defineOperation($Test_Common__t_TestCasePrx, 'stopServerSide', 0, -1, array(array($IcePHP__t_bool)), null, array($IcePHP__t_string), array($Test_Common__t_TestCaseFailedException));
    IcePHP_defineOperation($Test_Common__t_TestCasePrx, 'runClientSide', 0, -1, array(array($IcePHP__t_string), array($Test_Common__t_Config)), null, array($IcePHP__t_string), array($Test_Common__t_TestCaseFailedException));
    IcePHP_defineOperation($Test_Common__t_TestCasePrx, 'destroy', 0, -1, null, null, null, null);
}

namespace Test\Common
{
    global $Test_Common__t_Controller;
    global $Test_Common__t_ControllerPrx;

    class ControllerPrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::Test::Common::Controller');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::Test::Common::Controller', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Test::Common::Controller', $facet);
        }

        public static function ice_staticId()
        {
            return '::Test::Common::Controller';
        }
    }

    global $Ice__t_ObjectPrx;
    $Test_Common__t_ControllerPrx = IcePHP_defineProxy('::Test::Common::Controller', $Ice__t_ObjectPrx, null);

    global $IcePHP__t_string;
    global $Test_Common__t_TestCasePrx;
    global $Test_Common__t_OptionOverrides;
    global $Test_Common__t_StringSeq;
    global $IcePHP__t_bool;
    IcePHP_defineOperation($Test_Common__t_ControllerPrx, 'runTestCase', 0, -1, array(array($IcePHP__t_string), array($IcePHP__t_string), array($IcePHP__t_string), array($IcePHP__t_string)), null, array($Test_Common__t_TestCasePrx), array($Test_Common__t_TestCaseNotExistException));
    IcePHP_defineOperation($Test_Common__t_ControllerPrx, 'getOptionOverrides', 0, -1, null, null, array($Test_Common__t_OptionOverrides), null);
    IcePHP_defineOperation($Test_Common__t_ControllerPrx, 'getTestSuites', 0, -1, array(array($IcePHP__t_string)), null, array($Test_Common__t_StringSeq), null);
    IcePHP_defineOperation($Test_Common__t_ControllerPrx, 'getHost', 0, -1, array(array($IcePHP__t_string), array($IcePHP__t_bool)), null, array($IcePHP__t_string), null);
}

namespace Test\Common
{
    global $Test_Common__t_ProcessFailedException;
    class ProcessFailedException extends \Ice\UserException
    {
        public function ice_id()
        {
            return '::Test::Common::ProcessFailedException';
        }

        public function __toString(): string
        {
            global $Test_Common__t_ProcessFailedException;
            return IcePHP_stringifyException($this, $Test_Common__t_ProcessFailedException);
        }

        public $reason;
    }
    global $IcePHP__t_string;

    $Test_Common__t_ProcessFailedException = IcePHP_defineException('::Test::Common::ProcessFailedException', '\\Test\\Common\\ProcessFailedException', null, array(
        array('reason', $IcePHP__t_string, false, 0)));
}

namespace Test\Common
{
    global $Test_Common__t_Process;
    global $Test_Common__t_ProcessPrx;

    class ProcessPrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::Test::Common::Process');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::Test::Common::Process', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Test::Common::Process', $facet);
        }

        public static function ice_staticId()
        {
            return '::Test::Common::Process';
        }
    }

    global $Ice__t_ObjectPrx;
    $Test_Common__t_ProcessPrx = IcePHP_defineProxy('::Test::Common::Process', $Ice__t_ObjectPrx, null);

    global $IcePHP__t_int;
    global $IcePHP__t_string;
    IcePHP_defineOperation($Test_Common__t_ProcessPrx, 'waitReady', 0, -1, array(array($IcePHP__t_int)), null, null, array($Test_Common__t_ProcessFailedException));
    IcePHP_defineOperation($Test_Common__t_ProcessPrx, 'waitSuccess', 0, -1, array(array($IcePHP__t_int)), null, array($IcePHP__t_int), array($Test_Common__t_ProcessFailedException));
    IcePHP_defineOperation($Test_Common__t_ProcessPrx, 'terminate', 0, -1, null, null, array($IcePHP__t_string), null);
}

namespace Test\Common
{
    global $Test_Common__t_ProcessController;
    global $Test_Common__t_ProcessControllerPrx;

    class ProcessControllerPrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::Test::Common::ProcessController');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::Test::Common::ProcessController', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Test::Common::ProcessController', $facet);
        }

        public static function ice_staticId()
        {
            return '::Test::Common::ProcessController';
        }
    }

    global $Ice__t_ObjectPrx;
    $Test_Common__t_ProcessControllerPrx = IcePHP_defineProxy('::Test::Common::ProcessController', $Ice__t_ObjectPrx, null);

    global $IcePHP__t_string;
    global $Test_Common__t_StringSeq;
    global $Test_Common__t_ProcessPrx;
    global $IcePHP__t_bool;
    IcePHP_defineOperation($Test_Common__t_ProcessControllerPrx, 'start', 0, -1, array(array($IcePHP__t_string), array($IcePHP__t_string), array($Test_Common__t_StringSeq)), null, array($Test_Common__t_ProcessPrx), array($Test_Common__t_ProcessFailedException));
    IcePHP_defineOperation($Test_Common__t_ProcessControllerPrx, 'getHost', 0, -1, array(array($IcePHP__t_string), array($IcePHP__t_bool)), null, array($IcePHP__t_string), null);
}

namespace Test\Common
{
    global $Test_Common__t_BrowserProcessController;
    global $Test_Common__t_BrowserProcessControllerPrx;

    class BrowserProcessControllerPrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::Test::Common::BrowserProcessController');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::Test::Common::BrowserProcessController', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Test::Common::BrowserProcessController', $facet);
        }

        public static function ice_staticId()
        {
            return '::Test::Common::BrowserProcessController';
        }
    }

    global $Ice__t_ObjectPrx;
    $Test_Common__t_BrowserProcessControllerPrx = IcePHP_defineProxy('::Test::Common::BrowserProcessController', $Ice__t_ObjectPrx, array($Test_Common__t_ProcessControllerPrx));

    global $IcePHP__t_string;
    IcePHP_defineOperation($Test_Common__t_BrowserProcessControllerPrx, 'redirect', 0, -1, array(array($IcePHP__t_string)), null, null, null);
}

namespace Test\Common
{
    global $Test_Common__t_ProcessControllerRegistry;
    global $Test_Common__t_ProcessControllerRegistryPrx;

    class ProcessControllerRegistryPrxHelper
    {
        public static function createProxy($communicator, $proxyString)
        {
            return  $communicator->stringToProxy($proxyString, '::Test::Common::ProcessControllerRegistry');
        }

        public static function checkedCast($proxy, ...$args)
        {
            return $proxy->ice_checkedCast('::Test::Common::ProcessControllerRegistry', ...$args);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Test::Common::ProcessControllerRegistry', $facet);
        }

        public static function ice_staticId()
        {
            return '::Test::Common::ProcessControllerRegistry';
        }
    }

    global $Ice__t_ObjectPrx;
    $Test_Common__t_ProcessControllerRegistryPrx = IcePHP_defineProxy('::Test::Common::ProcessControllerRegistry', $Ice__t_ObjectPrx, null);

    global $Test_Common__t_ProcessControllerPrx;
    IcePHP_defineOperation($Test_Common__t_ProcessControllerRegistryPrx, 'setProcessController', 0, -1, array(array($Test_Common__t_ProcessControllerPrx)), null, null, null);
}
?>
