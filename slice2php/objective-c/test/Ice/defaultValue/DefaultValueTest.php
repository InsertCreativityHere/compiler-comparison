<?php
//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `DefaultValueTest.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


namespace Test
{
    global $Test__t_Color;
    class Color
    {
        const red = 0;
        const green = 1;
        const blue = 2;
    }

    $Test__t_Color = IcePHP_defineEnum('::Test::Color', array('red', 0, 'green', 1, 'blue', 2));
}

namespace Test
{
    global $Test__t_Struct1;
    class Struct1
    {
        public function __construct($boolFalse=false, $boolTrue=true, $b=254, $s=16000, $i=3, $l=4, $f=5, $d=6, $str="foo bar", $c=\Test\Color::red, $noDefault='')
        {
            $this->boolFalse = $boolFalse;
            $this->boolTrue = $boolTrue;
            $this->b = $b;
            $this->s = $s;
            $this->i = $i;
            $this->l = $l;
            $this->f = $f;
            $this->d = $d;
            $this->str = $str;
            $this->c = $c;
            $this->noDefault = $noDefault;
        }

        public function __toString(): string
        {
            global $Test__t_Struct1;
            return IcePHP_stringify($this, $Test__t_Struct1);
        }

        public $boolFalse;
        public $boolTrue;
        public $b;
        public $s;
        public $i;
        public $l;
        public $f;
        public $d;
        public $str;
        public $c;
        public $noDefault;
    }

    global $IcePHP__t_bool;
    global $IcePHP__t_byte;
    global $IcePHP__t_short;
    global $IcePHP__t_int;
    global $IcePHP__t_long;
    global $IcePHP__t_float;
    global $IcePHP__t_double;
    global $IcePHP__t_string;
    global $Test__t_Color;
    $Test__t_Struct1 = IcePHP_defineStruct('::Test::Struct1', '\\Test\\Struct1', array(
        array('boolFalse', $IcePHP__t_bool),
        array('boolTrue', $IcePHP__t_bool),
        array('b', $IcePHP__t_byte),
        array('s', $IcePHP__t_short),
        array('i', $IcePHP__t_int),
        array('l', $IcePHP__t_long),
        array('f', $IcePHP__t_float),
        array('d', $IcePHP__t_double),
        array('str', $IcePHP__t_string),
        array('c', $Test__t_Color),
        array('noDefault', $IcePHP__t_string)));
}

namespace Test
{
    global $Test__t_Struct2;
    class Struct2
    {
        public function __construct($boolFalse=false, $boolTrue=true, $b=1, $s=2, $i=3, $l=4, $f=5, $d=6, $str="foo bar", $c=\Test\Color::blue, $noDefault='')
        {
            $this->boolFalse = $boolFalse;
            $this->boolTrue = $boolTrue;
            $this->b = $b;
            $this->s = $s;
            $this->i = $i;
            $this->l = $l;
            $this->f = $f;
            $this->d = $d;
            $this->str = $str;
            $this->c = $c;
            $this->noDefault = $noDefault;
        }

        public function __toString(): string
        {
            global $Test__t_Struct2;
            return IcePHP_stringify($this, $Test__t_Struct2);
        }

        public $boolFalse;
        public $boolTrue;
        public $b;
        public $s;
        public $i;
        public $l;
        public $f;
        public $d;
        public $str;
        public $c;
        public $noDefault;
    }

    global $IcePHP__t_bool;
    global $IcePHP__t_byte;
    global $IcePHP__t_short;
    global $IcePHP__t_int;
    global $IcePHP__t_long;
    global $IcePHP__t_float;
    global $IcePHP__t_double;
    global $IcePHP__t_string;
    global $Test__t_Color;
    $Test__t_Struct2 = IcePHP_defineStruct('::Test::Struct2', '\\Test\\Struct2', array(
        array('boolFalse', $IcePHP__t_bool),
        array('boolTrue', $IcePHP__t_bool),
        array('b', $IcePHP__t_byte),
        array('s', $IcePHP__t_short),
        array('i', $IcePHP__t_int),
        array('l', $IcePHP__t_long),
        array('f', $IcePHP__t_float),
        array('d', $IcePHP__t_double),
        array('str', $IcePHP__t_string),
        array('c', $Test__t_Color),
        array('noDefault', $IcePHP__t_string)));
}

namespace Test
{
    global $Test__t_Base;
    class Base extends \Ice\Value
    {
        public function __construct($boolFalse=false, $boolTrue=true, $b=1, $s=2, $i=3, $l=4, $f=5, $d=6, $str="foo bar", $noDefault='')
        {
            $this->boolFalse = $boolFalse;
            $this->boolTrue = $boolTrue;
            $this->b = $b;
            $this->s = $s;
            $this->i = $i;
            $this->l = $l;
            $this->f = $f;
            $this->d = $d;
            $this->str = $str;
            $this->noDefault = $noDefault;
        }

        public function ice_id()
        {
            return '::Test::Base';
        }

        public static function ice_staticId()
        {
            return '::Test::Base';
        }

        public function __toString(): string
        {
            global $Test__t_Base;
            return IcePHP_stringify($this, $Test__t_Base);
        }

        public $boolFalse;
        public $boolTrue;
        public $b;
        public $s;
        public $i;
        public $l;
        public $f;
        public $d;
        public $str;
        public $noDefault;
    }

    global $Ice__t_Value;
    global $IcePHP__t_bool;
    global $IcePHP__t_byte;
    global $IcePHP__t_short;
    global $IcePHP__t_int;
    global $IcePHP__t_long;
    global $IcePHP__t_float;
    global $IcePHP__t_double;
    global $IcePHP__t_string;
    $Test__t_Base = IcePHP_defineClass('::Test::Base', '\\Test\\Base', -1, false, false, $Ice__t_Value, array(
        array('boolFalse', $IcePHP__t_bool, false, 0),
        array('boolTrue', $IcePHP__t_bool, false, 0),
        array('b', $IcePHP__t_byte, false, 0),
        array('s', $IcePHP__t_short, false, 0),
        array('i', $IcePHP__t_int, false, 0),
        array('l', $IcePHP__t_long, false, 0),
        array('f', $IcePHP__t_float, false, 0),
        array('d', $IcePHP__t_double, false, 0),
        array('str', $IcePHP__t_string, false, 0),
        array('noDefault', $IcePHP__t_string, false, 0)));
}

namespace Test
{
    global $Test__t_Derived;
    class Derived extends \Test\Base
    {
        public function __construct($boolFalse=false, $boolTrue=true, $b=1, $s=2, $i=3, $l=4, $f=5, $d=6, $str="foo bar", $noDefault='', $c=\Test\Color::green)
        {
            parent::__construct($boolFalse, $boolTrue, $b, $s, $i, $l, $f, $d, $str, $noDefault);
            $this->c = $c;
        }

        public function ice_id()
        {
            return '::Test::Derived';
        }

        public static function ice_staticId()
        {
            return '::Test::Derived';
        }

        public function __toString(): string
        {
            global $Test__t_Derived;
            return IcePHP_stringify($this, $Test__t_Derived);
        }

        public $c;
    }

    global $Test__t_Base;
    global $Test__t_Color;
    $Test__t_Derived = IcePHP_defineClass('::Test::Derived', '\\Test\\Derived', -1, false, false, $Test__t_Base, array(
        array('c', $Test__t_Color, false, 0)));
}

namespace Test
{
    global $Test__t_BaseEx;
    class BaseEx extends \Ice\UserException
    {
        public function __construct($boolFalse=false, $boolTrue=true, $b=1, $s=2, $i=3, $l=4, $f=5, $d=6, $str="foo bar", $noDefault='')
        {
            $this->boolFalse = $boolFalse;
            $this->boolTrue = $boolTrue;
            $this->b = $b;
            $this->s = $s;
            $this->i = $i;
            $this->l = $l;
            $this->f = $f;
            $this->d = $d;
            $this->str = $str;
            $this->noDefault = $noDefault;
        }

        public function ice_id()
        {
            return '::Test::BaseEx';
        }

        public function __toString(): string
        {
            global $Test__t_BaseEx;
            return IcePHP_stringifyException($this, $Test__t_BaseEx);
        }

        public $boolFalse;
        public $boolTrue;
        public $b;
        public $s;
        public $i;
        public $l;
        public $f;
        public $d;
        public $str;
        public $noDefault;
    }
    global $IcePHP__t_bool;
    global $IcePHP__t_byte;
    global $IcePHP__t_short;
    global $IcePHP__t_int;
    global $IcePHP__t_long;
    global $IcePHP__t_float;
    global $IcePHP__t_double;
    global $IcePHP__t_string;

    $Test__t_BaseEx = IcePHP_defineException('::Test::BaseEx', '\\Test\\BaseEx', false, null, array(
        array('boolFalse', $IcePHP__t_bool, false, 0),
        array('boolTrue', $IcePHP__t_bool, false, 0),
        array('b', $IcePHP__t_byte, false, 0),
        array('s', $IcePHP__t_short, false, 0),
        array('i', $IcePHP__t_int, false, 0),
        array('l', $IcePHP__t_long, false, 0),
        array('f', $IcePHP__t_float, false, 0),
        array('d', $IcePHP__t_double, false, 0),
        array('str', $IcePHP__t_string, false, 0),
        array('noDefault', $IcePHP__t_string, false, 0)));
}

namespace Test
{
    global $Test__t_DerivedEx;
    class DerivedEx extends \Test\BaseEx
    {
        public function __construct($boolFalse=false, $boolTrue=true, $b=1, $s=2, $i=3, $l=4, $f=5, $d=6, $str="foo bar", $noDefault='', $c=\Test\Color::green)
        {
            parent::__construct($boolFalse, $boolTrue, $b, $s, $i, $l, $f, $d, $str, $noDefault);
            $this->c = $c;
        }

        public function ice_id()
        {
            return '::Test::DerivedEx';
        }

        public function __toString(): string
        {
            global $Test__t_DerivedEx;
            return IcePHP_stringifyException($this, $Test__t_DerivedEx);
        }

        public $c;
    }
    global $Test__t_Color;

    $Test__t_DerivedEx = IcePHP_defineException('::Test::DerivedEx', '\\Test\\DerivedEx', false, $Test__t_BaseEx, array(
        array('c', $Test__t_Color, false, 0)));
}

namespace Test
{
    global $Test__t_ByteSeq;

    if(!isset($Test__t_ByteSeq))
    {
        global $IcePHP__t_byte;
        $Test__t_ByteSeq = IcePHP_defineSequence('::Test::ByteSeq', $IcePHP__t_byte);
    }
}

namespace Test
{
    global $Test__t_IntSeq;

    if(!isset($Test__t_IntSeq))
    {
        global $IcePHP__t_int;
        $Test__t_IntSeq = IcePHP_defineSequence('::Test::IntSeq', $IcePHP__t_int);
    }
}

namespace Test
{
    global $Test__t_IntStringDict;

    if(!isset($Test__t_IntStringDict))
    {
        global $IcePHP__t_int;
        global $IcePHP__t_string;
        $Test__t_IntStringDict = IcePHP_defineDictionary('::Test::IntStringDict', $IcePHP__t_int, $IcePHP__t_string);
    }
}

namespace Test
{
    global $Test__t_InnerStruct;
    class InnerStruct
    {
        public function __construct($a=0)
        {
            $this->a = $a;
        }

        public function __toString(): string
        {
            global $Test__t_InnerStruct;
            return IcePHP_stringify($this, $Test__t_InnerStruct);
        }

        public $a;
    }

    global $IcePHP__t_int;
    $Test__t_InnerStruct = IcePHP_defineStruct('::Test::InnerStruct', '\\Test\\InnerStruct', array(
        array('a', $IcePHP__t_int)));
}

namespace Test
{
    global $Test__t_StructNoDefaults;
    class StructNoDefaults
    {
        public function __construct($bo=false, $b=0, $s=0, $i=0, $l=0, $f=0.0, $d=0.0, $str='', $c1=\Test\Color::red, $bs=null, $is=null, $st=null, $dict=null)
        {
            $this->bo = $bo;
            $this->b = $b;
            $this->s = $s;
            $this->i = $i;
            $this->l = $l;
            $this->f = $f;
            $this->d = $d;
            $this->str = $str;
            $this->c1 = $c1;
            $this->bs = $bs;
            $this->is = $is;
            $this->st = is_null($st) ? new \Test\InnerStruct : $st;
            $this->dict = $dict;
        }

        public function __toString(): string
        {
            global $Test__t_StructNoDefaults;
            return IcePHP_stringify($this, $Test__t_StructNoDefaults);
        }

        public $bo;
        public $b;
        public $s;
        public $i;
        public $l;
        public $f;
        public $d;
        public $str;
        public $c1;
        public $bs;
        public $is;
        public $st;
        public $dict;
    }

    global $IcePHP__t_bool;
    global $IcePHP__t_byte;
    global $IcePHP__t_short;
    global $IcePHP__t_int;
    global $IcePHP__t_long;
    global $IcePHP__t_float;
    global $IcePHP__t_double;
    global $IcePHP__t_string;
    global $Test__t_Color;
    global $Test__t_ByteSeq;
    global $Test__t_IntSeq;
    global $Test__t_InnerStruct;
    global $Test__t_IntStringDict;
    $Test__t_StructNoDefaults = IcePHP_defineStruct('::Test::StructNoDefaults', '\\Test\\StructNoDefaults', array(
        array('bo', $IcePHP__t_bool),
        array('b', $IcePHP__t_byte),
        array('s', $IcePHP__t_short),
        array('i', $IcePHP__t_int),
        array('l', $IcePHP__t_long),
        array('f', $IcePHP__t_float),
        array('d', $IcePHP__t_double),
        array('str', $IcePHP__t_string),
        array('c1', $Test__t_Color),
        array('bs', $Test__t_ByteSeq),
        array('is', $Test__t_IntSeq),
        array('st', $Test__t_InnerStruct),
        array('dict', $Test__t_IntStringDict)));
}

namespace Test
{
    global $Test__t_ExceptionNoDefaultsBase;
    class ExceptionNoDefaultsBase extends \Ice\UserException
    {
        public function __construct($str='', $c1=\Test\Color::red, $bs=null)
        {
            $this->str = $str;
            $this->c1 = $c1;
            $this->bs = $bs;
        }

        public function ice_id()
        {
            return '::Test::ExceptionNoDefaultsBase';
        }

        public function __toString(): string
        {
            global $Test__t_ExceptionNoDefaultsBase;
            return IcePHP_stringifyException($this, $Test__t_ExceptionNoDefaultsBase);
        }

        public $str;
        public $c1;
        public $bs;
    }
    global $IcePHP__t_string;
    global $Test__t_Color;
    global $Test__t_ByteSeq;

    $Test__t_ExceptionNoDefaultsBase = IcePHP_defineException('::Test::ExceptionNoDefaultsBase', '\\Test\\ExceptionNoDefaultsBase', false, null, array(
        array('str', $IcePHP__t_string, false, 0),
        array('c1', $Test__t_Color, false, 0),
        array('bs', $Test__t_ByteSeq, false, 0)));
}

namespace Test
{
    global $Test__t_ExceptionNoDefaults;
    class ExceptionNoDefaults extends \Test\ExceptionNoDefaultsBase
    {
        public function __construct($str='', $c1=\Test\Color::red, $bs=null, $st=null, $dict=null)
        {
            parent::__construct($str, $c1, $bs);
            $this->st = is_null($st) ? new \Test\InnerStruct : $st;
            $this->dict = $dict;
        }

        public function ice_id()
        {
            return '::Test::ExceptionNoDefaults';
        }

        public function __toString(): string
        {
            global $Test__t_ExceptionNoDefaults;
            return IcePHP_stringifyException($this, $Test__t_ExceptionNoDefaults);
        }

        public $st;
        public $dict;
    }
    global $Test__t_InnerStruct;
    global $Test__t_IntStringDict;

    $Test__t_ExceptionNoDefaults = IcePHP_defineException('::Test::ExceptionNoDefaults', '\\Test\\ExceptionNoDefaults', false, $Test__t_ExceptionNoDefaultsBase, array(
        array('st', $Test__t_InnerStruct, false, 0),
        array('dict', $Test__t_IntStringDict, false, 0)));
}

namespace Test
{
    global $Test__t_ClassNoDefaultsBase;
    class ClassNoDefaultsBase extends \Ice\Value
    {
        public function __construct($str='', $c1=\Test\Color::red, $bs=null)
        {
            $this->str = $str;
            $this->c1 = $c1;
            $this->bs = $bs;
        }

        public function ice_id()
        {
            return '::Test::ClassNoDefaultsBase';
        }

        public static function ice_staticId()
        {
            return '::Test::ClassNoDefaultsBase';
        }

        public function __toString(): string
        {
            global $Test__t_ClassNoDefaultsBase;
            return IcePHP_stringify($this, $Test__t_ClassNoDefaultsBase);
        }

        public $str;
        public $c1;
        public $bs;
    }

    global $Ice__t_Value;
    global $IcePHP__t_string;
    global $Test__t_Color;
    global $Test__t_ByteSeq;
    $Test__t_ClassNoDefaultsBase = IcePHP_defineClass('::Test::ClassNoDefaultsBase', '\\Test\\ClassNoDefaultsBase', -1, false, false, $Ice__t_Value, array(
        array('str', $IcePHP__t_string, false, 0),
        array('c1', $Test__t_Color, false, 0),
        array('bs', $Test__t_ByteSeq, false, 0)));
}

namespace Test
{
    global $Test__t_ClassNoDefaults;
    class ClassNoDefaults extends \Test\ClassNoDefaultsBase
    {
        public function __construct($str='', $c1=\Test\Color::red, $bs=null, $st=null, $dict=null)
        {
            parent::__construct($str, $c1, $bs);
            $this->st = is_null($st) ? new \Test\InnerStruct : $st;
            $this->dict = $dict;
        }

        public function ice_id()
        {
            return '::Test::ClassNoDefaults';
        }

        public static function ice_staticId()
        {
            return '::Test::ClassNoDefaults';
        }

        public function __toString(): string
        {
            global $Test__t_ClassNoDefaults;
            return IcePHP_stringify($this, $Test__t_ClassNoDefaults);
        }

        public $st;
        public $dict;
    }

    global $Test__t_ClassNoDefaultsBase;
    global $Test__t_InnerStruct;
    global $Test__t_IntStringDict;
    $Test__t_ClassNoDefaults = IcePHP_defineClass('::Test::ClassNoDefaults', '\\Test\\ClassNoDefaults', -1, false, false, $Test__t_ClassNoDefaultsBase, array(
        array('st', $Test__t_InnerStruct, false, 0),
        array('dict', $Test__t_IntStringDict, false, 0)));
}
?>
