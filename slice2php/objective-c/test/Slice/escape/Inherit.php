<?php
//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Inherit.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


namespace Test
{
    global $Test__t_Struct1;
    class Struct1
    {
        public function __construct($isa=0, $retainCount=0)
        {
            $this->isa = $isa;
            $this->retainCount = $retainCount;
        }

        public function __toString(): string
        {
            global $Test__t_Struct1;
            return IcePHP_stringify($this, $Test__t_Struct1);
        }

        public $isa;
        public $retainCount;
    }

    global $IcePHP__t_int;
    $Test__t_Struct1 = IcePHP_defineStruct('::Test::Struct1', '\\Test\\Struct1', array(
        array('isa', $IcePHP__t_int),
        array('retainCount', $IcePHP__t_int)));
}

namespace Test
{
    global $Test__t_Exception1;
    class Exception1 extends \Ice\UserException
    {
        public function __construct($isa=0, $reason=0, $raise=0, $name=0, $callStackReturnAddresses=0, $userInfo=0, $reserved=0)
        {
            $this->isa = $isa;
            $this->reason = $reason;
            $this->raise = $raise;
            $this->name = $name;
            $this->callStackReturnAddresses = $callStackReturnAddresses;
            $this->userInfo = $userInfo;
            $this->reserved = $reserved;
        }

        public function ice_id()
        {
            return '::Test::Exception1';
        }

        public function __toString(): string
        {
            global $Test__t_Exception1;
            return IcePHP_stringifyException($this, $Test__t_Exception1);
        }

        public $isa;
        public $reason;
        public $raise;
        public $name;
        public $callStackReturnAddresses;
        public $userInfo;
        public $reserved;
    }
    global $IcePHP__t_int;

    $Test__t_Exception1 = IcePHP_defineException('::Test::Exception1', '\\Test\\Exception1', false, null, array(
        array('isa', $IcePHP__t_int, false, 0),
        array('reason', $IcePHP__t_int, false, 0),
        array('raise', $IcePHP__t_int, false, 0),
        array('name', $IcePHP__t_int, false, 0),
        array('callStackReturnAddresses', $IcePHP__t_int, false, 0),
        array('userInfo', $IcePHP__t_int, false, 0),
        array('reserved', $IcePHP__t_int, false, 0)));
}

namespace Test
{
    global $Test__t_Class1;
    class Class1 extends \Ice\Value
    {
        public function __construct($reason=0, $isa=0, $autorelease=0, $classForCoder=0, $copy=0, $dealloc=0, $description=0, $hash=0, $init=0, $isProxy=0, $mutableCopy=0, $release=0, $retain=0, $retainCount=0, $self=0, $superclass=0, $zone=0)
        {
            $this->reason = $reason;
            $this->isa = $isa;
            $this->autorelease = $autorelease;
            $this->classForCoder = $classForCoder;
            $this->copy = $copy;
            $this->dealloc = $dealloc;
            $this->description = $description;
            $this->hash = $hash;
            $this->init = $init;
            $this->isProxy = $isProxy;
            $this->mutableCopy = $mutableCopy;
            $this->release = $release;
            $this->retain = $retain;
            $this->retainCount = $retainCount;
            $this->self = $self;
            $this->superclass = $superclass;
            $this->zone = $zone;
        }

        public function ice_id()
        {
            return '::Test::Class1';
        }

        public static function ice_staticId()
        {
            return '::Test::Class1';
        }

        public function __toString(): string
        {
            global $Test__t_Class1;
            return IcePHP_stringify($this, $Test__t_Class1);
        }

        public $reason;
        public $isa;
        public $autorelease;
        public $classForCoder;
        public $copy;
        public $dealloc;
        public $description;
        public $hash;
        public $init;
        public $isProxy;
        public $mutableCopy;
        public $release;
        public $retain;
        public $retainCount;
        public $self;
        public $superclass;
        public $zone;
    }

    global $Ice__t_Value;
    global $IcePHP__t_int;
    $Test__t_Class1 = IcePHP_defineClass('::Test::Class1', '\\Test\\Class1', -1, false, false, $Ice__t_Value, array(
        array('reason', $IcePHP__t_int, false, 0),
        array('isa', $IcePHP__t_int, false, 0),
        array('autorelease', $IcePHP__t_int, false, 0),
        array('classForCoder', $IcePHP__t_int, false, 0),
        array('copy', $IcePHP__t_int, false, 0),
        array('dealloc', $IcePHP__t_int, false, 0),
        array('description', $IcePHP__t_int, false, 0),
        array('hash', $IcePHP__t_int, false, 0),
        array('init', $IcePHP__t_int, false, 0),
        array('isProxy', $IcePHP__t_int, false, 0),
        array('mutableCopy', $IcePHP__t_int, false, 0),
        array('release', $IcePHP__t_int, false, 0),
        array('retain', $IcePHP__t_int, false, 0),
        array('retainCount', $IcePHP__t_int, false, 0),
        array('self', $IcePHP__t_int, false, 0),
        array('superclass', $IcePHP__t_int, false, 0),
        array('zone', $IcePHP__t_int, false, 0)));
}

namespace Test
{
    global $Test__t_Intf1;
    global $Test__t_Intf1Prx;

    class Intf1PrxHelper
    {
        public static function checkedCast($proxy, $facetOrContext=null, $context=null)
        {
            return $proxy->ice_checkedCast('::Test::Intf1', $facetOrContext, $context);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Test::Intf1', $facet);
        }

        public static function ice_staticId()
        {
            return '::Test::Intf1';
        }
    }

    global $Ice__t_ObjectPrx;
    $Test__t_Intf1Prx = IcePHP_defineProxy('::Test::Intf1', $Ice__t_ObjectPrx, null);

    IcePHP_defineOperation($Test__t_Intf1Prx, 'isa', 0, 0, 0, null, null, null, null);
    IcePHP_defineOperation($Test__t_Intf1Prx, 'reason', 0, 0, 0, null, null, null, null);
    IcePHP_defineOperation($Test__t_Intf1Prx, 'autorelease', 0, 0, 0, null, null, null, null);
    IcePHP_defineOperation($Test__t_Intf1Prx, 'classForCoder', 0, 0, 0, null, null, null, null);
    IcePHP_defineOperation($Test__t_Intf1Prx, 'copy', 0, 0, 0, null, null, null, null);
    IcePHP_defineOperation($Test__t_Intf1Prx, 'dealloc', 0, 0, 0, null, null, null, null);
    IcePHP_defineOperation($Test__t_Intf1Prx, 'description', 0, 0, 0, null, null, null, null);
    IcePHP_defineOperation($Test__t_Intf1Prx, 'hash', 0, 0, 0, null, null, null, null);
    IcePHP_defineOperation($Test__t_Intf1Prx, 'init', 0, 0, 0, null, null, null, null);
    IcePHP_defineOperation($Test__t_Intf1Prx, 'isProxy', 0, 0, 0, null, null, null, null);
    IcePHP_defineOperation($Test__t_Intf1Prx, 'mutableCopy', 0, 0, 0, null, null, null, null);
    IcePHP_defineOperation($Test__t_Intf1Prx, 'release', 0, 0, 0, null, null, null, null);
    IcePHP_defineOperation($Test__t_Intf1Prx, 'retain', 0, 0, 0, null, null, null, null);
    IcePHP_defineOperation($Test__t_Intf1Prx, 'retainCount', 0, 0, 0, null, null, null, null);
    IcePHP_defineOperation($Test__t_Intf1Prx, 'self', 0, 0, 0, null, null, null, null);
    IcePHP_defineOperation($Test__t_Intf1Prx, 'superclass', 0, 0, 0, null, null, null, null);
    IcePHP_defineOperation($Test__t_Intf1Prx, 'zone', 0, 0, 0, null, null, null, null);
}

namespace Test
{
    global $Test__t_Intf2;
    global $Test__t_Intf2Prx;

    class Intf2PrxHelper
    {
        public static function checkedCast($proxy, $facetOrContext=null, $context=null)
        {
            return $proxy->ice_checkedCast('::Test::Intf2', $facetOrContext, $context);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Test::Intf2', $facet);
        }

        public static function ice_staticId()
        {
            return '::Test::Intf2';
        }
    }

    global $Ice__t_ObjectPrx;
    $Test__t_Intf2Prx = IcePHP_defineProxy('::Test::Intf2', $Ice__t_ObjectPrx, null);

    global $IcePHP__t_int;
    IcePHP_defineOperation($Test__t_Intf2Prx, 'isa', 0, 0, 0, array(array($IcePHP__t_int)), null, null, null);
    IcePHP_defineOperation($Test__t_Intf2Prx, 'reason', 0, 0, 0, array(array($IcePHP__t_int)), null, null, null);
    IcePHP_defineOperation($Test__t_Intf2Prx, 'autorelease', 0, 0, 0, array(array($IcePHP__t_int)), null, null, null);
    IcePHP_defineOperation($Test__t_Intf2Prx, 'classForCoder', 0, 0, 0, array(array($IcePHP__t_int)), null, null, null);
    IcePHP_defineOperation($Test__t_Intf2Prx, 'copy', 0, 0, 0, array(array($IcePHP__t_int)), null, null, null);
    IcePHP_defineOperation($Test__t_Intf2Prx, 'dealloc', 0, 0, 0, array(array($IcePHP__t_int)), null, null, null);
    IcePHP_defineOperation($Test__t_Intf2Prx, 'description', 0, 0, 0, array(array($IcePHP__t_int)), null, null, null);
    IcePHP_defineOperation($Test__t_Intf2Prx, 'hash', 0, 0, 0, array(array($IcePHP__t_int)), null, null, null);
    IcePHP_defineOperation($Test__t_Intf2Prx, 'init', 0, 0, 0, array(array($IcePHP__t_int)), null, null, null);
    IcePHP_defineOperation($Test__t_Intf2Prx, 'isProxy', 0, 0, 0, array(array($IcePHP__t_int)), null, null, null);
    IcePHP_defineOperation($Test__t_Intf2Prx, 'mutableCopy', 0, 0, 0, array(array($IcePHP__t_int)), null, null, null);
    IcePHP_defineOperation($Test__t_Intf2Prx, 'release', 0, 0, 0, array(array($IcePHP__t_int)), null, null, null);
    IcePHP_defineOperation($Test__t_Intf2Prx, 'retain', 0, 0, 0, array(array($IcePHP__t_int)), null, null, null);
    IcePHP_defineOperation($Test__t_Intf2Prx, 'retainCount', 0, 0, 0, array(array($IcePHP__t_int)), null, null, null);
    IcePHP_defineOperation($Test__t_Intf2Prx, 'self', 0, 0, 0, array(array($IcePHP__t_int)), null, null, null);
    IcePHP_defineOperation($Test__t_Intf2Prx, 'superclass', 0, 0, 0, array(array($IcePHP__t_int)), null, null, null);
    IcePHP_defineOperation($Test__t_Intf2Prx, 'zone', 0, 0, 0, array(array($IcePHP__t_int)), null, null, null);
}
?>
