<?php
//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


namespace _and
{
    global $and__t_continue;
    class _continue
    {
        const asm = 0;
    }

    $and__t_continue = IcePHP_defineEnum('::and::continue', array('asm', 0));
}

namespace _and
{
    global $and__t_auto;
    class auto
    {
        public function __construct($_default=0)
        {
            $this->_default = $_default;
        }

        public function __toString(): string
        {
            global $and__t_auto;
            return IcePHP_stringify($this, $and__t_auto);
        }

        public $_default;
    }

    global $IcePHP__t_int;
    $and__t_auto = IcePHP_defineStruct('::and::auto', '\\_and\\auto', array(
        array('_default', $IcePHP__t_int)));
}

namespace _and
{
    global $and__t_delete;
    class delete
    {
        public function __construct($_else='')
        {
            $this->_else = $_else;
        }

        public function __toString(): string
        {
            global $and__t_delete;
            return IcePHP_stringify($this, $and__t_delete);
        }

        public $_else;
    }

    global $IcePHP__t_string;
    $and__t_delete = IcePHP_defineStruct('::and::delete', '\\_and\\delete', array(
        array('_else', $IcePHP__t_string)));
}

namespace _and
{
    global $and__t_break;
    global $and__t_breakPrx;

    class breakPrxHelper
    {
        public static function checkedCast($proxy, $facetOrContext=null, $context=null)
        {
            return $proxy->ice_checkedCast('::and::break', $facetOrContext, $context);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::and::break', $facet);
        }

        public static function ice_staticId()
        {
            return '::and::break';
        }
    }
    $and__t_break = IcePHP_defineClass('::and::break', '\\_and\\_break', -1, false, true, null, null);

    global $Ice__t_ObjectPrx;
    $and__t_breakPrx = IcePHP_defineProxy('::and::break', $Ice__t_ObjectPrx, null);

    global $IcePHP__t_int;
    IcePHP_defineOperation($and__t_breakPrx, 'case', 0, 0, 0, array(array($IcePHP__t_int)), array(array($IcePHP__t_int)), null, null);
}

namespace _and
{
    global $and__t_char;
    global $and__t_charPrx;

    class charPrxHelper
    {
        public static function checkedCast($proxy, $facetOrContext=null, $context=null)
        {
            return $proxy->ice_checkedCast('::and::char', $facetOrContext, $context);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::and::char', $facet);
        }

        public static function ice_staticId()
        {
            return '::and::char';
        }
    }
    $and__t_char = IcePHP_defineClass('::and::char', '\\_and\\char', -1, false, true, null, null);

    global $Ice__t_ObjectPrx;
    $and__t_charPrx = IcePHP_defineProxy('::and::char', $Ice__t_ObjectPrx, null);

    IcePHP_defineOperation($and__t_charPrx, 'explicit', 0, 0, 0, null, null, null, null);
}

namespace _and
{
    global $and__t_switch;
    global $and__t_switchPrx;

    class switchPrxHelper
    {
        public static function checkedCast($proxy, $facetOrContext=null, $context=null)
        {
            return $proxy->ice_checkedCast('::and::switch', $facetOrContext, $context);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::and::switch', $facet);
        }

        public static function ice_staticId()
        {
            return '::and::switch';
        }
    }
    $and__t_switch = IcePHP_defineClass('::and::switch', '\\_and\\_switch', -1, false, true, null, null);

    global $Ice__t_ObjectPrx;
    $and__t_switchPrx = IcePHP_defineProxy('::and::switch', $Ice__t_ObjectPrx, null);

    global $and__t_charPrx;
    global $IcePHP__t_int;
    IcePHP_defineOperation($and__t_switchPrx, 'foo', 0, 0, 0, array(array($and__t_charPrx)), array(array($IcePHP__t_int)), null, null);
    IcePHP_defineOperation($and__t_switchPrx, 'foo2', 0, 0, 0, array(array($and__t_charPrx), array($IcePHP__t_int)), array(array($IcePHP__t_int)), null, null);
    IcePHP_defineOperation($and__t_switchPrx, 'foo3', 0, 0, 0, array(array($and__t_charPrx)), array(array($IcePHP__t_int)), null, null);
}

namespace _and
{
    global $and__t_do;
    global $and__t_doPrx;
    class _do extends \Ice\Value
    {
        public function __construct($_if=0)
        {
            $this->_if = $_if;
        }

        public function ice_id()
        {
            return '::and::do';
        }

        public static function ice_staticId()
        {
            return '::and::do';
        }

        public function __toString(): string
        {
            global $and__t_do;
            return IcePHP_stringify($this, $and__t_do);
        }

        public $_if;
    }

    class doPrxHelper
    {
        public static function checkedCast($proxy, $facetOrContext=null, $context=null)
        {
            return $proxy->ice_checkedCast('::and::do', $facetOrContext, $context);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::and::do', $facet);
        }

        public static function ice_staticId()
        {
            return '::and::do';
        }
    }

    global $Ice__t_Value;
    global $IcePHP__t_int;
    $and__t_do = IcePHP_defineClass('::and::do', '\\_and\\_do', -1, false, false, $Ice__t_Value, array(
        array('_if', $IcePHP__t_int, false, 0)));

    global $Ice__t_ObjectPrx;
    $and__t_doPrx = IcePHP_defineProxy('::and::do', $Ice__t_ObjectPrx, array($and__t_charPrx, $and__t_breakPrx, $and__t_switchPrx));
}

namespace _and
{
    global $and__t_extern;

    if(!isset($and__t_extern))
    {
        global $and__t_auto;
        $and__t_extern = IcePHP_defineSequence('::and::extern', $and__t_auto);
    }
}

namespace _and
{
    global $and__t_for;

    if(!isset($and__t_for))
    {
        global $IcePHP__t_string;
        global $and__t_auto;
        $and__t_for = IcePHP_defineDictionary('::and::for', $IcePHP__t_string, $and__t_auto);
    }
}

namespace _and
{
    global $and__t_return;
    class _return extends \Ice\UserException
    {
        public function __construct($signed=0)
        {
            $this->signed = $signed;
        }

        public function ice_id()
        {
            return '::and::return';
        }

        public function __toString(): string
        {
            global $and__t_return;
            return IcePHP_stringifyException($this, $and__t_return);
        }

        public $signed;
    }
    global $IcePHP__t_int;

    $and__t_return = IcePHP_defineException('::and::return', '\\_and\\_return', false, null, array(
        array('signed', $IcePHP__t_int, false, 0)));
}

namespace _and
{
    global $and__t_sizeof;
    class sizeof extends \_and\_return
    {
        public function __construct($signed=0, $_static=0, $_switch=0)
        {
            parent::__construct($signed);
            $this->_static = $_static;
            $this->_switch = $_switch;
        }

        public function ice_id()
        {
            return '::and::sizeof';
        }

        public function __toString(): string
        {
            global $and__t_sizeof;
            return IcePHP_stringifyException($this, $and__t_sizeof);
        }

        public $_static;
        public $_switch;
    }
    global $IcePHP__t_int;

    $and__t_sizeof = IcePHP_defineException('::and::sizeof', '\\_and\\sizeof', false, $and__t_return, array(
        array('_static', $IcePHP__t_int, false, 0),
        array('_switch', $IcePHP__t_int, false, 0)));
}

namespace _and
{
    global $and__t_friend;
    interface friend
    {
        public function _goto($_if, $d, $inline, $_private, $mutable, $_namespace, $_new, $not, $operator, $_or, $_protected, $_public, $register);
        public function objc($bycopy, $byref, $id, $IMP, $in, $inout, $nil, $NO, $oneway, $SEL, $super, $YES);
    }
    $and__t_friend = IcePHP_defineClass('::and::friend', '\\_and\\friend', -1, false, true, null, null);
}

namespace _and
{
    if(!defined('\\_and\\template'))
    {
        define(__NAMESPACE__ . '\\template', 0);
    }
}

namespace _and
{
    if(!defined('\\_and\\_this'))
    {
        define(__NAMESPACE__ . '\\_this', 0);
    }
}

namespace _and
{
    if(!defined('\\_and\\_throw'))
    {
        define(__NAMESPACE__ . '\\_throw', 0);
    }
}

namespace _and
{
    if(!defined('\\_and\\typedef'))
    {
        define(__NAMESPACE__ . '\\typedef', 0);
    }
}

namespace _and
{
    if(!defined('\\_and\\typeid'))
    {
        define(__NAMESPACE__ . '\\typeid', 0);
    }
}

namespace _and
{
    if(!defined('\\_and\\typename'))
    {
        define(__NAMESPACE__ . '\\typename', 0);
    }
}

namespace _and
{
    if(!defined('\\_and\\union'))
    {
        define(__NAMESPACE__ . '\\union', 0);
    }
}

namespace _and
{
    if(!defined('\\_and\\unsigned'))
    {
        define(__NAMESPACE__ . '\\unsigned', 0);
    }
}

namespace _and
{
    if(!defined('\\_and\\using'))
    {
        define(__NAMESPACE__ . '\\using', 0);
    }
}

namespace _and
{
    if(!defined('\\_and\\virtual'))
    {
        define(__NAMESPACE__ . '\\virtual', 0);
    }
}

namespace _and
{
    if(!defined('\\_and\\_while'))
    {
        define(__NAMESPACE__ . '\\_while', 0);
    }
}

namespace _and
{
    if(!defined('\\_and\\_xor'))
    {
        define(__NAMESPACE__ . '\\_xor', 0);
    }
}
?>
