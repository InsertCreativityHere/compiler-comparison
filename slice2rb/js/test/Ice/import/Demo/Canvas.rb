# encoding: utf-8
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.9
#
# <auto-generated>
#
# Generated from file `Canvas.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

require 'Ice'
require 'Square.rb'
require 'Circle.rb'
require 'Glacier2/Session.rb'

module ::Demo

    module Gx

        if not defined?(::Demo::Gx::Canvas_Mixin)

            module ::Demo::Gx::Canvas_Mixin
            end
            module CanvasPrx_mixin

                def paintSquare(square, context=nil)
                    CanvasPrx_mixin::OP_paintSquare.invoke(self, [square], context)
                end

                def paintCircle(circle, context=nil)
                    CanvasPrx_mixin::OP_paintCircle.invoke(self, [circle], context)
                end
            end

            class CanvasPrx < ::Ice::ObjectPrx
                include ::Ice::Proxy_mixin
                include CanvasPrx_mixin
            end

            if not defined?(::Demo::Gx::T_CanvasPrx)
                T_Canvas = ::Ice::__declareClass('::Demo::gx::Canvas')
                T_CanvasPrx = ::Ice::__declareProxy('::Demo::gx::Canvas')
            end

            T_Canvas.defineClass(::Ice::Value, -1, false, true, nil, [])

            T_CanvasPrx.defineProxy(CanvasPrx, nil, [])

            CanvasPrx_mixin::OP_paintSquare = ::Ice::__defineOperation('paintSquare', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Demo::Gx::T_Square, false, 0]], [], nil, [])
            CanvasPrx_mixin::OP_paintCircle = ::Ice::__defineOperation('paintCircle', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Demo::Gx::T_Circle, false, 0]], [], nil, [])
        end

        if not defined?(::Demo::Gx::Session_Mixin)

            module ::Demo::Gx::Session_Mixin
            end
            module SessionPrx_mixin
                include ::Glacier2::SessionPrx_mixin

                def destroySession(context=nil)
                    SessionPrx_mixin::OP_destroySession.invoke(self, [], context)
                end
            end

            class SessionPrx < ::Ice::ObjectPrx
                include ::Ice::Proxy_mixin
                include SessionPrx_mixin
            end

            if not defined?(::Demo::Gx::T_SessionPrx)
                T_Session = ::Ice::__declareClass('::Demo::gx::Session')
                T_SessionPrx = ::Ice::__declareProxy('::Demo::gx::Session')
            end

            T_Session.defineClass(::Ice::Value, -1, false, true, nil, [])

            T_SessionPrx.defineProxy(SessionPrx, nil, [::Glacier2::T_SessionPrx])

            SessionPrx_mixin::OP_destroySession = ::Ice::__defineOperation('destroySession', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        end
    end
end
