# encoding: utf-8
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `Test.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

require 'Ice'

module ::Test

    if not defined?(::Test::ConcreteClass_Mixin)

        module ::Test::ConcreteClass_Mixin
        end
        class ConcreteClass < ::Ice::Value

            def initialize(i=0)
                @i = i
            end

            attr_accessor :i
        end

        if not defined?(::Test::T_ConcreteClass)
            T_ConcreteClass = ::Ice::__declareClass('::Test::ConcreteClass')
        end

        T_ConcreteClass.defineClass(ConcreteClass, -1, false, false, nil, [['i', ::Ice::T_int, false, 0]])
    end

    if not defined?(::Test::AbstractClass_Mixin)

        module ::Test::AbstractClass_Mixin
        end
        class AbstractClass < ::Ice::Value
        end
        module AbstractClassPrx_mixin

            def op(context=nil)
                AbstractClassPrx_mixin::OP_op.invoke(self, [], context)
            end
        end

        class AbstractClassPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include AbstractClassPrx_mixin
        end

        if not defined?(::Test::T_AbstractClass)
            T_AbstractClass = ::Ice::__declareClass('::Test::AbstractClass')
            T_AbstractClassPrx = ::Ice::__declareProxy('::Test::AbstractClass')
        end

        T_AbstractClass.defineClass(AbstractClass, -1, false, false, nil, [])

        T_AbstractClassPrx.defineProxy(AbstractClassPrx, nil, [])

        AbstractClassPrx_mixin::OP_op = ::Ice::__defineOperation('op', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
    end

    if not defined?(::Test::E)
        class E < Ice::UserException
            def initialize
            end

            def to_s
                '::Test::E'
            end
        end

        T_E = ::Ice::__defineException('::Test::E', E, false, nil, [])
    end

    if not defined?(::Test::Initial_Mixin)

        module ::Test::Initial_Mixin
        end
        module InitialPrx_mixin

            def getConcreteClass(context=nil)
                InitialPrx_mixin::OP_getConcreteClass.invoke(self, [], context)
            end

            def getAbstractClass(context=nil)
                InitialPrx_mixin::OP_getAbstractClass.invoke(self, [], context)
            end

            def throwException(context=nil)
                InitialPrx_mixin::OP_throwException.invoke(self, [], context)
            end

            def shutdown(context=nil)
                InitialPrx_mixin::OP_shutdown.invoke(self, [], context)
            end
        end

        class InitialPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include InitialPrx_mixin
        end

        if not defined?(::Test::T_InitialPrx)
            T_Initial = ::Ice::__declareClass('::Test::Initial')
            T_InitialPrx = ::Ice::__declareProxy('::Test::Initial')
        end

        T_Initial.defineClass(::Ice::Value, -1, false, true, nil, [])

        T_InitialPrx.defineProxy(InitialPrx, nil, [])

        InitialPrx_mixin::OP_getConcreteClass = ::Ice::__defineOperation('getConcreteClass', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], [::Test::T_ConcreteClass, false, 0], [])
        InitialPrx_mixin::OP_getAbstractClass = ::Ice::__defineOperation('getAbstractClass', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], [::Test::T_AbstractClass, false, 0], [])
        InitialPrx_mixin::OP_throwException = ::Ice::__defineOperation('throwException', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [::Test::T_E])
        InitialPrx_mixin::OP_shutdown = ::Ice::__defineOperation('shutdown', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
    end
end
