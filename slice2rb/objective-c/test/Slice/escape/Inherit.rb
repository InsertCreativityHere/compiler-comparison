# encoding: utf-8
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.9
#
# <auto-generated>
#
# Generated from file `Inherit.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

require 'Ice'

module ::Test

    if not defined?(::Test::Struct1)
        class Struct1
            include ::Ice::Inspect_mixin
            def initialize(isa=0, retainCount=0)
                @isa = isa
                @retainCount = retainCount
            end

            def hash
                _h = 0
                _h = 5 * _h + @isa.hash
                _h = 5 * _h + @retainCount.hash
                _h % 0x7fffffff
            end

            def ==(other)
                return false if !other.is_a? ::Test::Struct1 or
                    @isa != other.isa or
                    @retainCount != other.retainCount
                true
            end

            def eql?(other)
                return other.class == self.class && other == self
            end

            attr_accessor :isa, :retainCount
        end

        T_Struct1 = ::Ice::__defineStruct('::Test::Struct1', Struct1, [
            ["isa", ::Ice::T_int],
            ["retainCount", ::Ice::T_int]
        ])
    end

    if not defined?(::Test::Exception1)
        class Exception1 < Ice::UserException
            def initialize(isa=0, reason=0, raise=0, name=0, callStackReturnAddresses=0, userInfo=0, reserved=0)
                @isa = isa
                @reason = reason
                @raise = raise
                @name = name
                @callStackReturnAddresses = callStackReturnAddresses
                @userInfo = userInfo
                @reserved = reserved
            end

            def to_s
                '::Test::Exception1'
            end

            attr_accessor :isa, :reason, :raise, :name, :callStackReturnAddresses, :userInfo, :reserved
        end

        T_Exception1 = ::Ice::__defineException('::Test::Exception1', Exception1, false, nil, [
            ["isa", ::Ice::T_int, false, 0],
            ["reason", ::Ice::T_int, false, 0],
            ["raise", ::Ice::T_int, false, 0],
            ["name", ::Ice::T_int, false, 0],
            ["callStackReturnAddresses", ::Ice::T_int, false, 0],
            ["userInfo", ::Ice::T_int, false, 0],
            ["reserved", ::Ice::T_int, false, 0]
        ])
    end

    if not defined?(::Test::Class1_Mixin)

        module ::Test::Class1_Mixin
        end
        class Class1 < ::Ice::Value

            def initialize(reason=0, isa=0, autorelease=0, classForCoder=0, copy=0, dealloc=0, description=0, _hash=0, init=0, isProxy=0, mutableCopy=0, release=0, retain=0, retainCount=0, _self=0, superclass=0, zone=0)
                @reason = reason
                @isa = isa
                @autorelease = autorelease
                @classForCoder = classForCoder
                @copy = copy
                @dealloc = dealloc
                @description = description
                @_hash = _hash
                @init = init
                @isProxy = isProxy
                @mutableCopy = mutableCopy
                @release = release
                @retain = retain
                @retainCount = retainCount
                @_self = _self
                @superclass = superclass
                @zone = zone
            end

            attr_accessor :reason, :isa, :autorelease, :classForCoder, :copy, :dealloc, :description, :_hash, :init, :isProxy, :mutableCopy, :release, :retain, :retainCount, :_self, :superclass, :zone
        end

        if not defined?(::Test::T_Class1)
            T_Class1 = ::Ice::__declareClass('::Test::Class1')
        end

        T_Class1.defineClass(Class1, -1, false, false, nil, [
            ['reason', ::Ice::T_int, false, 0],
            ['isa', ::Ice::T_int, false, 0],
            ['autorelease', ::Ice::T_int, false, 0],
            ['classForCoder', ::Ice::T_int, false, 0],
            ['copy', ::Ice::T_int, false, 0],
            ['dealloc', ::Ice::T_int, false, 0],
            ['description', ::Ice::T_int, false, 0],
            ['_hash', ::Ice::T_int, false, 0],
            ['init', ::Ice::T_int, false, 0],
            ['isProxy', ::Ice::T_int, false, 0],
            ['mutableCopy', ::Ice::T_int, false, 0],
            ['release', ::Ice::T_int, false, 0],
            ['retain', ::Ice::T_int, false, 0],
            ['retainCount', ::Ice::T_int, false, 0],
            ['_self', ::Ice::T_int, false, 0],
            ['superclass', ::Ice::T_int, false, 0],
            ['zone', ::Ice::T_int, false, 0]
        ])
    end

    if not defined?(::Test::Intf1_Mixin)

        module ::Test::Intf1_Mixin
        end
        module Intf1Prx_mixin

            def isa(context=nil)
                Intf1Prx_mixin::OP_isa.invoke(self, [], context)
            end

            def reason(context=nil)
                Intf1Prx_mixin::OP_reason.invoke(self, [], context)
            end

            def autorelease(context=nil)
                Intf1Prx_mixin::OP_autorelease.invoke(self, [], context)
            end

            def classForCoder(context=nil)
                Intf1Prx_mixin::OP_classForCoder.invoke(self, [], context)
            end

            def copy(context=nil)
                Intf1Prx_mixin::OP_copy.invoke(self, [], context)
            end

            def dealloc(context=nil)
                Intf1Prx_mixin::OP_dealloc.invoke(self, [], context)
            end

            def description(context=nil)
                Intf1Prx_mixin::OP_description.invoke(self, [], context)
            end

            def _hash(context=nil)
                Intf1Prx_mixin::OP_hash.invoke(self, [], context)
            end

            def init(context=nil)
                Intf1Prx_mixin::OP_init.invoke(self, [], context)
            end

            def isProxy(context=nil)
                Intf1Prx_mixin::OP_isProxy.invoke(self, [], context)
            end

            def mutableCopy(context=nil)
                Intf1Prx_mixin::OP_mutableCopy.invoke(self, [], context)
            end

            def release(context=nil)
                Intf1Prx_mixin::OP_release.invoke(self, [], context)
            end

            def retain(context=nil)
                Intf1Prx_mixin::OP_retain.invoke(self, [], context)
            end

            def retainCount(context=nil)
                Intf1Prx_mixin::OP_retainCount.invoke(self, [], context)
            end

            def _self(context=nil)
                Intf1Prx_mixin::OP_self.invoke(self, [], context)
            end

            def superclass(context=nil)
                Intf1Prx_mixin::OP_superclass.invoke(self, [], context)
            end

            def zone(context=nil)
                Intf1Prx_mixin::OP_zone.invoke(self, [], context)
            end
        end

        class Intf1Prx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include Intf1Prx_mixin
        end

        if not defined?(::Test::T_Intf1Prx)
            T_Intf1 = ::Ice::__declareClass('::Test::Intf1')
            T_Intf1Prx = ::Ice::__declareProxy('::Test::Intf1')
        end

        T_Intf1.defineClass(::Ice::Value, -1, false, true, nil, [])

        T_Intf1Prx.defineProxy(Intf1Prx, nil, [])

        Intf1Prx_mixin::OP_isa = ::Ice::__defineOperation('isa', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        Intf1Prx_mixin::OP_reason = ::Ice::__defineOperation('reason', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        Intf1Prx_mixin::OP_autorelease = ::Ice::__defineOperation('autorelease', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        Intf1Prx_mixin::OP_classForCoder = ::Ice::__defineOperation('classForCoder', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        Intf1Prx_mixin::OP_copy = ::Ice::__defineOperation('copy', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        Intf1Prx_mixin::OP_dealloc = ::Ice::__defineOperation('dealloc', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        Intf1Prx_mixin::OP_description = ::Ice::__defineOperation('description', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        Intf1Prx_mixin::OP_hash = ::Ice::__defineOperation('hash', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        Intf1Prx_mixin::OP_init = ::Ice::__defineOperation('init', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        Intf1Prx_mixin::OP_isProxy = ::Ice::__defineOperation('isProxy', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        Intf1Prx_mixin::OP_mutableCopy = ::Ice::__defineOperation('mutableCopy', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        Intf1Prx_mixin::OP_release = ::Ice::__defineOperation('release', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        Intf1Prx_mixin::OP_retain = ::Ice::__defineOperation('retain', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        Intf1Prx_mixin::OP_retainCount = ::Ice::__defineOperation('retainCount', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        Intf1Prx_mixin::OP_self = ::Ice::__defineOperation('self', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        Intf1Prx_mixin::OP_superclass = ::Ice::__defineOperation('superclass', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        Intf1Prx_mixin::OP_zone = ::Ice::__defineOperation('zone', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
    end

    if not defined?(::Test::Intf2_Mixin)

        module ::Test::Intf2_Mixin
        end
        module Intf2Prx_mixin

            def isa(a, context=nil)
                Intf2Prx_mixin::OP_isa.invoke(self, [a], context)
            end

            def reason(a, context=nil)
                Intf2Prx_mixin::OP_reason.invoke(self, [a], context)
            end

            def autorelease(a, context=nil)
                Intf2Prx_mixin::OP_autorelease.invoke(self, [a], context)
            end

            def classForCoder(a, context=nil)
                Intf2Prx_mixin::OP_classForCoder.invoke(self, [a], context)
            end

            def copy(a, context=nil)
                Intf2Prx_mixin::OP_copy.invoke(self, [a], context)
            end

            def dealloc(a, context=nil)
                Intf2Prx_mixin::OP_dealloc.invoke(self, [a], context)
            end

            def description(a, context=nil)
                Intf2Prx_mixin::OP_description.invoke(self, [a], context)
            end

            def _hash(a, context=nil)
                Intf2Prx_mixin::OP_hash.invoke(self, [a], context)
            end

            def init(a, context=nil)
                Intf2Prx_mixin::OP_init.invoke(self, [a], context)
            end

            def isProxy(a, context=nil)
                Intf2Prx_mixin::OP_isProxy.invoke(self, [a], context)
            end

            def mutableCopy(a, context=nil)
                Intf2Prx_mixin::OP_mutableCopy.invoke(self, [a], context)
            end

            def release(a, context=nil)
                Intf2Prx_mixin::OP_release.invoke(self, [a], context)
            end

            def retain(a, context=nil)
                Intf2Prx_mixin::OP_retain.invoke(self, [a], context)
            end

            def retainCount(a, context=nil)
                Intf2Prx_mixin::OP_retainCount.invoke(self, [a], context)
            end

            def _self(a, context=nil)
                Intf2Prx_mixin::OP_self.invoke(self, [a], context)
            end

            def superclass(a, context=nil)
                Intf2Prx_mixin::OP_superclass.invoke(self, [a], context)
            end

            def zone(a, context=nil)
                Intf2Prx_mixin::OP_zone.invoke(self, [a], context)
            end
        end

        class Intf2Prx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include Intf2Prx_mixin
        end

        if not defined?(::Test::T_Intf2Prx)
            T_Intf2 = ::Ice::__declareClass('::Test::Intf2')
            T_Intf2Prx = ::Ice::__declareProxy('::Test::Intf2')
        end

        T_Intf2.defineClass(::Ice::Value, -1, false, true, nil, [])

        T_Intf2Prx.defineProxy(Intf2Prx, nil, [])

        Intf2Prx_mixin::OP_isa = ::Ice::__defineOperation('isa', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_int, false, 0]], [], nil, [])
        Intf2Prx_mixin::OP_reason = ::Ice::__defineOperation('reason', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_int, false, 0]], [], nil, [])
        Intf2Prx_mixin::OP_autorelease = ::Ice::__defineOperation('autorelease', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_int, false, 0]], [], nil, [])
        Intf2Prx_mixin::OP_classForCoder = ::Ice::__defineOperation('classForCoder', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_int, false, 0]], [], nil, [])
        Intf2Prx_mixin::OP_copy = ::Ice::__defineOperation('copy', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_int, false, 0]], [], nil, [])
        Intf2Prx_mixin::OP_dealloc = ::Ice::__defineOperation('dealloc', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_int, false, 0]], [], nil, [])
        Intf2Prx_mixin::OP_description = ::Ice::__defineOperation('description', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_int, false, 0]], [], nil, [])
        Intf2Prx_mixin::OP_hash = ::Ice::__defineOperation('hash', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_int, false, 0]], [], nil, [])
        Intf2Prx_mixin::OP_init = ::Ice::__defineOperation('init', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_int, false, 0]], [], nil, [])
        Intf2Prx_mixin::OP_isProxy = ::Ice::__defineOperation('isProxy', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_int, false, 0]], [], nil, [])
        Intf2Prx_mixin::OP_mutableCopy = ::Ice::__defineOperation('mutableCopy', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_int, false, 0]], [], nil, [])
        Intf2Prx_mixin::OP_release = ::Ice::__defineOperation('release', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_int, false, 0]], [], nil, [])
        Intf2Prx_mixin::OP_retain = ::Ice::__defineOperation('retain', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_int, false, 0]], [], nil, [])
        Intf2Prx_mixin::OP_retainCount = ::Ice::__defineOperation('retainCount', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_int, false, 0]], [], nil, [])
        Intf2Prx_mixin::OP_self = ::Ice::__defineOperation('self', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_int, false, 0]], [], nil, [])
        Intf2Prx_mixin::OP_superclass = ::Ice::__defineOperation('superclass', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_int, false, 0]], [], nil, [])
        Intf2Prx_mixin::OP_zone = ::Ice::__defineOperation('zone', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_int, false, 0]], [], nil, [])
    end
end
