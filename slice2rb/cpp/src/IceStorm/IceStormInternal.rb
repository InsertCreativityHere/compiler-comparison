# encoding: utf-8
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `IceStormInternal.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

require 'Ice'
require 'IceStorm/IceStorm.rb'
require 'Election.rb'
require 'Ice/Context.rb'
require 'Ice/OperationMode.rb'

module ::IceStorm

    if not defined?(::IceStorm::EventData)
        class EventData
            include ::Ice::Inspect_mixin
            def initialize(op='', mode=::Ice::OperationMode::Normal, data=nil, context=nil)
                @op = op
                @mode = mode
                @data = data
                @context = context
            end

            def hash
                _h = 0
                _h = 5 * _h + @op.hash
                _h = 5 * _h + @mode.hash
                _h = 5 * _h + @data.hash
                _h = 5 * _h + @context.hash
                _h % 0x7fffffff
            end

            def ==(other)
                return false if !other.is_a? ::IceStorm::EventData or
                    @op != other.op or
                    @mode != other.mode or
                    @data != other.data or
                    @context != other.context
                true
            end

            def eql?(other)
                return other.class == self.class && other == self
            end

            attr_accessor :op, :mode, :data, :context
        end

        T_EventData = ::Ice::__defineStruct('::IceStorm::EventData', EventData, [
            ["op", ::Ice::T_string],
            ["mode", ::Ice::T_OperationMode],
            ["data", ::Ice::T_ByteSeq],
            ["context", ::Ice::T_Context]
        ])
    end

    if not defined?(::IceStorm::T_EventDataSeq)
        T_EventDataSeq = ::Ice::__defineSequence('::IceStorm::EventDataSeq', ::IceStorm::T_EventData)
    end

    if not defined?(::IceStorm::TopicLink_Mixin)

        module ::IceStorm::TopicLink_Mixin
        end
        module TopicLinkPrx_mixin

            def forward(events, context=nil)
                TopicLinkPrx_mixin::OP_forward.invoke(self, [events], context)
            end
        end

        class TopicLinkPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include TopicLinkPrx_mixin
        end

        if not defined?(::IceStorm::T_TopicLinkPrx)
            T_TopicLink = ::Ice::__declareClass('::IceStorm::TopicLink')
            T_TopicLinkPrx = ::Ice::__declareProxy('::IceStorm::TopicLink')
        end

        T_TopicLink.defineClass(::Ice::Value, -1, false, true, nil, [])

        T_TopicLinkPrx.defineProxy(TopicLinkPrx, nil, [])

        TopicLinkPrx_mixin::OP_forward = ::Ice::__defineOperation('forward', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::IceStorm::T_EventDataSeq, false, 0]], [], nil, [])
    end

    if not defined?(::IceStorm::ReapWouldBlock)
        class ReapWouldBlock < Ice::UserException
            def initialize
            end

            def to_s
                '::IceStorm::ReapWouldBlock'
            end
        end

        T_ReapWouldBlock = ::Ice::__defineException('::IceStorm::ReapWouldBlock', ReapWouldBlock, false, nil, [])
    end

    if not defined?(::IceStorm::TopicInternal_Mixin)

        module ::IceStorm::TopicInternal_Mixin
        end
        module TopicInternalPrx_mixin
            include ::IceStorm::TopicPrx_mixin

            def getLinkProxy(context=nil)
                TopicInternalPrx_mixin::OP_getLinkProxy.invoke(self, [], context)
            end

            def reap(id, context=nil)
                TopicInternalPrx_mixin::OP_reap.invoke(self, [id], context)
            end
        end

        class TopicInternalPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include TopicInternalPrx_mixin
        end

        if not defined?(::IceStorm::T_TopicInternalPrx)
            T_TopicInternal = ::Ice::__declareClass('::IceStorm::TopicInternal')
            T_TopicInternalPrx = ::Ice::__declareProxy('::IceStorm::TopicInternal')
        end

        T_TopicInternal.defineClass(::Ice::Value, -1, false, true, nil, [])

        T_TopicInternalPrx.defineProxy(TopicInternalPrx, nil, [::IceStorm::T_TopicPrx])

        TopicInternalPrx_mixin::OP_getLinkProxy = ::Ice::__defineOperation('getLinkProxy', ::Ice::OperationMode::Idempotent, ::Ice::OperationMode::Idempotent, false, nil, [], [], [::IceStorm::T_TopicLinkPrx, false, 0], [])
        TopicInternalPrx_mixin::OP_reap = ::Ice::__defineOperation('reap', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_IdentitySeq, false, 0]], [], nil, [::IceStorm::T_ReapWouldBlock])
    end

    if not defined?(::IceStorm::TopicManagerInternal_Mixin)

        module ::IceStorm::TopicManagerInternal_Mixin
        end
        module TopicManagerInternalPrx_mixin
            include ::IceStorm::TopicManagerPrx_mixin

            def getReplicaNode(context=nil)
                TopicManagerInternalPrx_mixin::OP_getReplicaNode.invoke(self, [], context)
            end
        end

        class TopicManagerInternalPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include TopicManagerInternalPrx_mixin
        end

        if not defined?(::IceStorm::T_TopicManagerInternalPrx)
            T_TopicManagerInternal = ::Ice::__declareClass('::IceStorm::TopicManagerInternal')
            T_TopicManagerInternalPrx = ::Ice::__declareProxy('::IceStorm::TopicManagerInternal')
        end

        T_TopicManagerInternal.defineClass(::Ice::Value, -1, false, true, nil, [])

        T_TopicManagerInternalPrx.defineProxy(TopicManagerInternalPrx, nil, [::IceStorm::T_TopicManagerPrx])

        TopicManagerInternalPrx_mixin::OP_getReplicaNode = ::Ice::__defineOperation('getReplicaNode', ::Ice::OperationMode::Idempotent, ::Ice::OperationMode::Idempotent, false, nil, [], [], [::IceStormElection::T_NodePrx, false, 0], [])
    end
end
