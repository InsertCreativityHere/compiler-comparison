# encoding: utf-8
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `Instrumentation.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

require 'Ice'
require 'Ice/Instrumentation.rb'
require 'IceStorm/IceStorm.rb'

module ::IceStorm

    module Instrumentation

        if not defined?(::IceStorm::Instrumentation::::T_TopicObserver)
            T_TopicObserver = ::Ice::__declareLocalClass('::IceStorm::Instrumentation::TopicObserver')
        end

        if not defined?(::IceStorm::Instrumentation::::T_SubscriberObserver)
            T_SubscriberObserver = ::Ice::__declareLocalClass('::IceStorm::Instrumentation::SubscriberObserver')
        end

        if not defined?(::IceStorm::Instrumentation::::T_ObserverUpdater)
            T_ObserverUpdater = ::Ice::__declareLocalClass('::IceStorm::Instrumentation::ObserverUpdater')
        end

        if not defined?(::IceStorm::Instrumentation::::SubscriberState)
            class SubscriberState
                include Comparable

                def initialize(name, value)
                    @name = name
                    @value = value
                end

                def SubscriberState.from_int(val)
                    @@_enumerators[val]
                end

                def to_s
                    @name
                end

                def to_i
                    @value
                end

                def <=>(other)
                    other.is_a?(SubscriberState) or raise ArgumentError, "value must be a SubscriberState"
                    @value <=> other.to_i
                end

                def hash
                    @value.hash
                end

                def SubscriberState.each(&block)
                    @@_enumerators.each_value(&block)
                end

                SubscriberStateOnline = SubscriberState.new("SubscriberStateOnline", 0)
                SubscriberStateOffline = SubscriberState.new("SubscriberStateOffline", 1)
                SubscriberStateError = SubscriberState.new("SubscriberStateError", 2)

                @@_enumerators = {0=>SubscriberStateOnline, 1=>SubscriberStateOffline, 2=>SubscriberStateError}

                def SubscriberState._enumerators
                    @@_enumerators
                end

                private_class_method :new
            end

            T_SubscriberState = ::Ice::__defineEnum('::IceStorm::Instrumentation::SubscriberState', SubscriberState, SubscriberState::_enumerators)
        end

        if not defined?(::IceStorm::Instrumentation::::T_TopicManagerObserver)
            T_TopicManagerObserver = ::Ice::__declareLocalClass('::IceStorm::Instrumentation::TopicManagerObserver')
        end
    end
end
