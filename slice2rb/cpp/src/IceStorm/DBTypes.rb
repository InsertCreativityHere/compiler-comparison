# Copyright (c) ZeroC, Inc.
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file 'DBTypes.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>

require 'Ice'
require_relative 'SubscriberRecord.rb'
require_relative 'LLURecord.rb'

module ::IceStormElection

    if not defined?(::IceStormElection::T_StringLogUpdateDict)
        T_StringLogUpdateDict = ::Ice::__defineDictionary('::IceStormElection::StringLogUpdateDict', ::Ice::T_string, ::IceStormElection::T_LogUpdate)
    end
end

module ::IceStorm

    if not defined?(::IceStorm::T_SubscriberRecordDict)
        T_SubscriberRecordDict = ::Ice::__defineDictionary('::IceStorm::SubscriberRecordDict', ::IceStorm::T_SubscriberRecordKey, ::IceStorm::T_SubscriberRecord)
    end

    if not defined?(::IceStorm::AllData)
        class AllData
            include ::Ice::Inspect_mixin
            def initialize(llus=nil, subscribers=nil)
                @llus = llus
                @subscribers = subscribers
            end

            def hash
                _h = 0
                _h = 5 * _h + @llus.hash
                _h = 5 * _h + @subscribers.hash
                _h % 0x7fffffff
            end

            def ==(other)
                return false if !other.is_a? ::IceStorm::AllData or
                    @llus != other.llus or
                    @subscribers != other.subscribers
                true
            end

            def eql?(other)
                return other.class == self.class && other == self
            end

            attr_accessor :llus, :subscribers
        end

        T_AllData = ::Ice::__defineStruct('::IceStorm::AllData', AllData, [
            ["llus", ::IceStormElection::T_StringLogUpdateDict],
            ["subscribers", ::IceStorm::T_SubscriberRecordDict]
        ])
    end
end
