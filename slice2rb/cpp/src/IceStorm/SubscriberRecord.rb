# encoding: utf-8
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file `SubscriberRecord.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

require 'Ice'
require 'Ice/Identity.rb'
require 'IceStorm/IceStorm.rb'

module ::IceStorm

    if not defined?(::IceStorm::SubscriberRecordKey)
        class SubscriberRecordKey
            include ::Ice::Inspect_mixin
            def initialize(topic=::Ice::Identity.new, id=::Ice::Identity.new)
                @topic = topic
                @id = id
            end

            def hash
                _h = 0
                _h = 5 * _h + @topic.hash
                _h = 5 * _h + @id.hash
                _h % 0x7fffffff
            end

            def ==(other)
                return false if !other.is_a? ::IceStorm::SubscriberRecordKey or
                    @topic != other.topic or
                    @id != other.id
                true
            end

            def eql?(other)
                return other.class == self.class && other == self
            end

            attr_accessor :topic, :id
        end

        T_SubscriberRecordKey = ::Ice::__defineStruct('::IceStorm::SubscriberRecordKey', SubscriberRecordKey, [
            ["topic", ::Ice::T_Identity],
            ["id", ::Ice::T_Identity]
        ])
    end

    if not defined?(::IceStorm::SubscriberRecord)
        class SubscriberRecord
            include ::Ice::Inspect_mixin
            def initialize(topicName='', id=::Ice::Identity.new, link=false, obj=nil, theQoS=nil, cost=0, theTopic=nil)
                @topicName = topicName
                @id = id
                @link = link
                @obj = obj
                @theQoS = theQoS
                @cost = cost
                @theTopic = theTopic
            end

            def hash
                _h = 0
                _h = 5 * _h + @topicName.hash
                _h = 5 * _h + @id.hash
                _h = 5 * _h + @link.hash
                _h = 5 * _h + @obj.hash
                _h = 5 * _h + @theQoS.hash
                _h = 5 * _h + @cost.hash
                _h = 5 * _h + @theTopic.hash
                _h % 0x7fffffff
            end

            def ==(other)
                return false if !other.is_a? ::IceStorm::SubscriberRecord or
                    @topicName != other.topicName or
                    @id != other.id or
                    @link != other.link or
                    @obj != other.obj or
                    @theQoS != other.theQoS or
                    @cost != other.cost or
                    @theTopic != other.theTopic
                true
            end

            def eql?(other)
                return other.class == self.class && other == self
            end

            attr_accessor :topicName, :id, :link, :obj, :theQoS, :cost, :theTopic
        end

        T_SubscriberRecord = ::Ice::__defineStruct('::IceStorm::SubscriberRecord', SubscriberRecord, [
            ["topicName", ::Ice::T_string],
            ["id", ::Ice::T_Identity],
            ["link", ::Ice::T_bool],
            ["obj", ::Ice::T_ObjectPrx],
            ["theQoS", ::IceStorm::T_QoS],
            ["cost", ::Ice::T_int],
            ["theTopic", ::IceStorm::T_TopicPrx]
        ])
    end

    if not defined?(::IceStorm::T_SubscriberRecordSeq)
        T_SubscriberRecordSeq = ::Ice::__defineSequence('::IceStorm::SubscriberRecordSeq', ::IceStorm::T_SubscriberRecord)
    end
end
