# encoding: utf-8
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file 'TestAMD.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

require 'Ice'

module ::Test

    if not defined?(::Test::T_ByteSeq)
        T_ByteSeq = ::Ice::__defineSequence('::Test::ByteSeq', ::Ice::T_byte)
    end

    if not defined?(::Test::T_ShortSeq)
        T_ShortSeq = ::Ice::__defineSequence('::Test::ShortSeq', ::Ice::T_short)
    end

    if not defined?(::Test::T_StringSeq)
        T_StringSeq = ::Ice::__defineSequence('::Test::StringSeq', ::Ice::T_string)
    end

    if not defined?(::Test::T_TestIntfPrx)
        T_TestIntfPrx = ::Ice::__declareProxy('::Test::TestIntf')
    end

    if not defined?(::Test::TestIntfPrx)
        module TestIntfPrx_mixin

            def opByteSpan(dataIn, context=nil)
                TestIntfPrx_mixin::OP_opByteSpan.invoke(self, [dataIn], context)
            end

            def opShortSpan(dataIn, context=nil)
                TestIntfPrx_mixin::OP_opShortSpan.invoke(self, [dataIn], context)
            end

            def opStringSpan(dataIn, context=nil)
                TestIntfPrx_mixin::OP_opStringSpan.invoke(self, [dataIn], context)
            end

            def opOptionalByteSpan(dataIn, context=nil)
                TestIntfPrx_mixin::OP_opOptionalByteSpan.invoke(self, [dataIn], context)
            end

            def opOptionalShortSpan(dataIn, context=nil)
                TestIntfPrx_mixin::OP_opOptionalShortSpan.invoke(self, [dataIn], context)
            end

            def opOptionalStringSpan(dataIn, context=nil)
                TestIntfPrx_mixin::OP_opOptionalStringSpan.invoke(self, [dataIn], context)
            end

            def shutdown(context=nil)
                TestIntfPrx_mixin::OP_shutdown.invoke(self, [], context)
            end
        end

        class TestIntfPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include TestIntfPrx_mixin
        end

        T_TestIntfPrx.defineProxy(TestIntfPrx, nil, [])

        TestIntfPrx_mixin::OP_opByteSpan = ::Ice::__defineOperation('opByteSpan', ::Ice::OperationMode::Normal, nil, [[::Test::T_ByteSeq, false, 0]], [[::Test::T_ByteSeq, false, 0]], [::Test::T_ByteSeq, false, 0], [])
        TestIntfPrx_mixin::OP_opShortSpan = ::Ice::__defineOperation('opShortSpan', ::Ice::OperationMode::Normal, nil, [[::Test::T_ShortSeq, false, 0]], [[::Test::T_ShortSeq, false, 0]], [::Test::T_ShortSeq, false, 0], [])
        TestIntfPrx_mixin::OP_opStringSpan = ::Ice::__defineOperation('opStringSpan', ::Ice::OperationMode::Normal, nil, [[::Test::T_StringSeq, false, 0]], [[::Test::T_StringSeq, false, 0]], [::Test::T_StringSeq, false, 0], [])
        TestIntfPrx_mixin::OP_opOptionalByteSpan = ::Ice::__defineOperation('opOptionalByteSpan', ::Ice::OperationMode::Normal, nil, [[::Test::T_ByteSeq, true, 1]], [[::Test::T_ByteSeq, true, 11]], [::Test::T_ByteSeq, true, 10], [])
        TestIntfPrx_mixin::OP_opOptionalShortSpan = ::Ice::__defineOperation('opOptionalShortSpan', ::Ice::OperationMode::Normal, nil, [[::Test::T_ShortSeq, true, 1]], [[::Test::T_ShortSeq, true, 11]], [::Test::T_ShortSeq, true, 10], [])
        TestIntfPrx_mixin::OP_opOptionalStringSpan = ::Ice::__defineOperation('opOptionalStringSpan', ::Ice::OperationMode::Normal, nil, [[::Test::T_StringSeq, true, 1]], [[::Test::T_StringSeq, true, 11]], [::Test::T_StringSeq, true, 10], [])
        TestIntfPrx_mixin::OP_shutdown = ::Ice::__defineOperation('shutdown', ::Ice::OperationMode::Normal, nil, [], [], nil, [])
    end
end
