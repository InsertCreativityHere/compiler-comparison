# encoding: utf-8
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file 'Test.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

require 'Ice'

module ::Test

    if not defined?(::Test::StructValue)
        class StructValue
            include ::Ice::Inspect_mixin
            def initialize(firstName='', lastName='', age=0)
                @firstName = firstName
                @lastName = lastName
                @age = age
            end

            def hash
                _h = 0
                _h = 5 * _h + @firstName.hash
                _h = 5 * _h + @lastName.hash
                _h = 5 * _h + @age.hash
                _h % 0x7fffffff
            end

            def ==(other)
                return false if !other.is_a? ::Test::StructValue or
                    @firstName != other.firstName or
                    @lastName != other.lastName or
                    @age != other.age
                true
            end

            def eql?(other)
                return other.class == self.class && other == self
            end

            attr_accessor :firstName, :lastName, :age
        end

        T_StructValue = ::Ice::__defineStruct('::Test::StructValue', StructValue, [
            ["firstName", ::Ice::T_string],
            ["lastName", ::Ice::T_string],
            ["age", ::Ice::T_int]
        ])
    end

    if not defined?(::Test::Base)
        class Base < ::Ice::Value

            def initialize(b='')
                @b = b
            end

            attr_accessor :b
        end

        if not defined?(::Test::T_Base)
            T_Base = ::Ice::__declareClass('::Test::Base')
        end

        T_Base.defineClass(Base, -1, false, nil, [['b', ::Ice::T_string, false, 0]])
    end

    if not defined?(::Test::Extended)
        class Extended < ::Test::Base

            def initialize(b='', e=0)
                super(b)
                @e = e
            end

            attr_accessor :e
        end

        if not defined?(::Test::T_Extended)
            T_Extended = ::Ice::__declareClass('::Test::Extended')
        end

        T_Extended.defineClass(Extended, -1, false, ::Test::T_Base, [['e', ::Ice::T_int, false, 0]])
    end
end
