# encoding: utf-8
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `Test.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

require 'Ice'

module ::Test

    if not defined?(::Test::::Callback_Mixin)

        module ::Test::::Callback_Mixin
        end
        module CallbackPrx_mixin

            def ping(context=nil)
                CallbackPrx_mixin::OP_ping.invoke(self, [], context)
            end

            def getCount(context=nil)
                CallbackPrx_mixin::OP_getCount.invoke(self, [], context)
            end

            def datagram(context=nil)
                CallbackPrx_mixin::OP_datagram.invoke(self, [], context)
            end

            def getDatagramCount(context=nil)
                CallbackPrx_mixin::OP_getDatagramCount.invoke(self, [], context)
            end
        end

        class CallbackPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include CallbackPrx_mixin
        end

        if not defined?(::Test::::T_CallbackPrx)
            T_Callback = ::Ice::__declareClass('::Test::Callback')
            T_CallbackPrx = ::Ice::__declareProxy('::Test::Callback')
        end

        T_Callback.defineClass(::Ice::Value, -1, false, true, nil, [])

        T_CallbackPrx.defineProxy(CallbackPrx, nil, [])

        CallbackPrx_mixin::OP_ping = ::Ice::__defineOperation('ping', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        CallbackPrx_mixin::OP_getCount = ::Ice::__defineOperation('getCount', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], [::Ice::T_int, false, 0], [])
        CallbackPrx_mixin::OP_datagram = ::Ice::__defineOperation('datagram', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        CallbackPrx_mixin::OP_getDatagramCount = ::Ice::__defineOperation('getDatagramCount', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], [::Ice::T_int, false, 0], [])
    end

    if not defined?(::Test::::MyClass_Mixin)

        module ::Test::::MyClass_Mixin
        end
        module MyClassPrx_mixin

            def callCallback(context=nil)
                MyClassPrx_mixin::OP_callCallback.invoke(self, [], context)
            end

            def getCallbackCount(context=nil)
                MyClassPrx_mixin::OP_getCallbackCount.invoke(self, [], context)
            end

            def incCounter(expected, context=nil)
                MyClassPrx_mixin::OP_incCounter.invoke(self, [expected], context)
            end

            def waitCounter(value, context=nil)
                MyClassPrx_mixin::OP_waitCounter.invoke(self, [value], context)
            end

            def getConnectionCount(context=nil)
                MyClassPrx_mixin::OP_getConnectionCount.invoke(self, [], context)
            end

            def getConnectionInfo(context=nil)
                MyClassPrx_mixin::OP_getConnectionInfo.invoke(self, [], context)
            end

            def closeConnection(force, context=nil)
                MyClassPrx_mixin::OP_closeConnection.invoke(self, [force], context)
            end

            def datagram(context=nil)
                MyClassPrx_mixin::OP_datagram.invoke(self, [], context)
            end

            def getDatagramCount(context=nil)
                MyClassPrx_mixin::OP_getDatagramCount.invoke(self, [], context)
            end

            def callDatagramCallback(context=nil)
                MyClassPrx_mixin::OP_callDatagramCallback.invoke(self, [], context)
            end

            def getCallbackDatagramCount(context=nil)
                MyClassPrx_mixin::OP_getCallbackDatagramCount.invoke(self, [], context)
            end

            def getHeartbeatCount(context=nil)
                MyClassPrx_mixin::OP_getHeartbeatCount.invoke(self, [], context)
            end

            def enableHeartbeats(context=nil)
                MyClassPrx_mixin::OP_enableHeartbeats.invoke(self, [], context)
            end

            def shutdown(context=nil)
                MyClassPrx_mixin::OP_shutdown.invoke(self, [], context)
            end
        end

        class MyClassPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include MyClassPrx_mixin
        end

        if not defined?(::Test::::T_MyClassPrx)
            T_MyClass = ::Ice::__declareClass('::Test::MyClass')
            T_MyClassPrx = ::Ice::__declareProxy('::Test::MyClass')
        end

        T_MyClass.defineClass(::Ice::Value, -1, false, true, nil, [])

        T_MyClassPrx.defineProxy(MyClassPrx, nil, [])

        MyClassPrx_mixin::OP_callCallback = ::Ice::__defineOperation('callCallback', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, true, nil, [], [], nil, [])
        MyClassPrx_mixin::OP_getCallbackCount = ::Ice::__defineOperation('getCallbackCount', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, true, nil, [], [], [::Ice::T_int, false, 0], [])
        MyClassPrx_mixin::OP_incCounter = ::Ice::__defineOperation('incCounter', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_int, false, 0]], [], nil, [])
        MyClassPrx_mixin::OP_waitCounter = ::Ice::__defineOperation('waitCounter', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_int, false, 0]], [], nil, [])
        MyClassPrx_mixin::OP_getConnectionCount = ::Ice::__defineOperation('getConnectionCount', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], [::Ice::T_int, false, 0], [])
        MyClassPrx_mixin::OP_getConnectionInfo = ::Ice::__defineOperation('getConnectionInfo', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], [::Ice::T_string, false, 0], [])
        MyClassPrx_mixin::OP_closeConnection = ::Ice::__defineOperation('closeConnection', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_bool, false, 0]], [], nil, [])
        MyClassPrx_mixin::OP_datagram = ::Ice::__defineOperation('datagram', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        MyClassPrx_mixin::OP_getDatagramCount = ::Ice::__defineOperation('getDatagramCount', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], [::Ice::T_int, false, 0], [])
        MyClassPrx_mixin::OP_callDatagramCallback = ::Ice::__defineOperation('callDatagramCallback', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        MyClassPrx_mixin::OP_getCallbackDatagramCount = ::Ice::__defineOperation('getCallbackDatagramCount', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, true, nil, [], [], [::Ice::T_int, false, 0], [])
        MyClassPrx_mixin::OP_getHeartbeatCount = ::Ice::__defineOperation('getHeartbeatCount', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], [::Ice::T_int, false, 0], [])
        MyClassPrx_mixin::OP_enableHeartbeats = ::Ice::__defineOperation('enableHeartbeats', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        MyClassPrx_mixin::OP_shutdown = ::Ice::__defineOperation('shutdown', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
    end
end
