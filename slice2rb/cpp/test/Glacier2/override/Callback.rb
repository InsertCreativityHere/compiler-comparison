# encoding: utf-8
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file `Callback.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

require 'Ice'
require 'Ice/BuiltinSequences.rb'

module ::Test

    if not defined?(::Test::CallbackReceiver_Mixin)

        module ::Test::CallbackReceiver_Mixin
        end
        module CallbackReceiverPrx_mixin

            def callback(token, context=nil)
                CallbackReceiverPrx_mixin::OP_callback.invoke(self, [token], context)
            end

            def callbackWithPayload(payload, context=nil)
                CallbackReceiverPrx_mixin::OP_callbackWithPayload.invoke(self, [payload], context)
            end
        end

        class CallbackReceiverPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include CallbackReceiverPrx_mixin
        end

        if not defined?(::Test::T_CallbackReceiverPrx)
            T_CallbackReceiver = ::Ice::__declareClass('::Test::CallbackReceiver')
            T_CallbackReceiverPrx = ::Ice::__declareProxy('::Test::CallbackReceiver')
        end

        T_CallbackReceiverPrx.defineProxy(CallbackReceiverPrx, nil, [])

        CallbackReceiverPrx_mixin::OP_callback = ::Ice::__defineOperation('callback', ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_int, false, 0]], [], nil, [])
        CallbackReceiverPrx_mixin::OP_callbackWithPayload = ::Ice::__defineOperation('callbackWithPayload', ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_ByteSeq, false, 0]], [], nil, [])
    end

    if not defined?(::Test::Callback_Mixin)

        module ::Test::Callback_Mixin
        end
        module CallbackPrx_mixin

            def initiateCallback(proxy, token, context=nil)
                CallbackPrx_mixin::OP_initiateCallback.invoke(self, [proxy, token], context)
            end

            def initiateCallbackWithPayload(proxy, context=nil)
                CallbackPrx_mixin::OP_initiateCallbackWithPayload.invoke(self, [proxy], context)
            end

            def shutdown(context=nil)
                CallbackPrx_mixin::OP_shutdown.invoke(self, [], context)
            end
        end

        class CallbackPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include CallbackPrx_mixin
        end

        if not defined?(::Test::T_CallbackPrx)
            T_Callback = ::Ice::__declareClass('::Test::Callback')
            T_CallbackPrx = ::Ice::__declareProxy('::Test::Callback')
        end

        T_CallbackPrx.defineProxy(CallbackPrx, nil, [])

        CallbackPrx_mixin::OP_initiateCallback = ::Ice::__defineOperation('initiateCallback', ::Ice::OperationMode::Normal, true, nil, [[::Test::T_CallbackReceiverPrx, false, 0], [::Ice::T_int, false, 0]], [], nil, [])
        CallbackPrx_mixin::OP_initiateCallbackWithPayload = ::Ice::__defineOperation('initiateCallbackWithPayload', ::Ice::OperationMode::Normal, true, nil, [[::Test::T_CallbackReceiverPrx, false, 0]], [], nil, [])
        CallbackPrx_mixin::OP_shutdown = ::Ice::__defineOperation('shutdown', ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
    end
end
