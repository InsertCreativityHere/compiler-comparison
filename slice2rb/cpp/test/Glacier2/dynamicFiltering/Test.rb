# encoding: utf-8
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `Test.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

require 'Ice'
require 'Glacier2/Session.rb'

module ::Test

    if not defined?(::Test::::Backend_Mixin)

        module ::Test::::Backend_Mixin
        end
        module BackendPrx_mixin

            def check(context=nil)
                BackendPrx_mixin::OP_check.invoke(self, [], context)
            end

            def shutdown(context=nil)
                BackendPrx_mixin::OP_shutdown.invoke(self, [], context)
            end
        end

        class BackendPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include BackendPrx_mixin
        end

        if not defined?(::Test::::T_BackendPrx)
            T_Backend = ::Ice::__declareClass('::Test::Backend')
            T_BackendPrx = ::Ice::__declareProxy('::Test::Backend')
        end

        T_Backend.defineClass(::Ice::Value, -1, false, true, nil, [])

        T_BackendPrx.defineProxy(BackendPrx, nil, [])

        BackendPrx_mixin::OP_check = ::Ice::__defineOperation('check', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        BackendPrx_mixin::OP_shutdown = ::Ice::__defineOperation('shutdown', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
    end

    if not defined?(::Test::::StateCode)
        class StateCode
            include Comparable

            def initialize(name, value)
                @name = name
                @value = value
            end

            def StateCode.from_int(val)
                @@_enumerators[val]
            end

            def to_s
                @name
            end

            def to_i
                @value
            end

            def <=>(other)
                other.is_a?(StateCode) or raise ArgumentError, "value must be a StateCode"
                @value <=> other.to_i
            end

            def hash
                @value.hash
            end

            def StateCode.each(&block)
                @@_enumerators.each_value(&block)
            end

            Initial = StateCode.new("Initial", 0)
            Running = StateCode.new("Running", 1)
            Finished = StateCode.new("Finished", 2)

            @@_enumerators = {0=>Initial, 1=>Running, 2=>Finished}

            def StateCode._enumerators
                @@_enumerators
            end

            private_class_method :new
        end

        T_StateCode = ::Ice::__defineEnum('::Test::StateCode', StateCode, StateCode::_enumerators)
    end

    if not defined?(::Test::::TestToken)
        class TestToken
            include ::Ice::Inspect_mixin
            def initialize(expectedResult=false, description='', code=::Test::::StateCode::Initial, config=0, caseIndex=0, testReference='')
                @expectedResult = expectedResult
                @description = description
                @code = code
                @config = config
                @caseIndex = caseIndex
                @testReference = testReference
            end

            def hash
                _h = 0
                _h = 5 * _h + @expectedResult.hash
                _h = 5 * _h + @description.hash
                _h = 5 * _h + @code.hash
                _h = 5 * _h + @config.hash
                _h = 5 * _h + @caseIndex.hash
                _h = 5 * _h + @testReference.hash
                _h % 0x7fffffff
            end

            def ==(other)
                return false if !other.is_a? ::Test::::TestToken or
                    @expectedResult != other.expectedResult or
                    @description != other.description or
                    @code != other.code or
                    @config != other.config or
                    @caseIndex != other.caseIndex or
                    @testReference != other.testReference
                true
            end

            def eql?(other)
                return other.class == self.class && other == self
            end

            attr_accessor :expectedResult, :description, :code, :config, :caseIndex, :testReference
        end

        T_TestToken = ::Ice::__defineStruct('::Test::TestToken', TestToken, [
            ["expectedResult", ::Ice::T_bool],
            ["description", ::Ice::T_string],
            ["code", ::Test::::T_StateCode],
            ["config", ::Ice::T_short],
            ["caseIndex", ::Ice::T_short],
            ["testReference", ::Ice::T_string]
        ])
    end

    if not defined?(::Test::::TestController_Mixin)

        module ::Test::::TestController_Mixin
        end
        module TestControllerPrx_mixin

            def step(currentSession, currentState, context=nil)
                TestControllerPrx_mixin::OP_step.invoke(self, [currentSession, currentState], context)
            end

            def shutdown(context=nil)
                TestControllerPrx_mixin::OP_shutdown.invoke(self, [], context)
            end
        end

        class TestControllerPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include TestControllerPrx_mixin
        end

        if not defined?(::Test::::T_TestControllerPrx)
            T_TestController = ::Ice::__declareClass('::Test::TestController')
            T_TestControllerPrx = ::Ice::__declareProxy('::Test::TestController')
        end

        T_TestController.defineClass(::Ice::Value, -1, false, true, nil, [])

        T_TestControllerPrx.defineProxy(TestControllerPrx, nil, [])

        TestControllerPrx_mixin::OP_step = ::Ice::__defineOperation('step', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Glacier2::::T_SessionPrx, false, 0], [::Test::::T_TestToken, false, 0]], [[::Test::::T_TestToken, false, 0]], nil, [])
        TestControllerPrx_mixin::OP_shutdown = ::Ice::__defineOperation('shutdown', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
    end

    if not defined?(::Test::::TestSession_Mixin)

        module ::Test::::TestSession_Mixin
        end
        module TestSessionPrx_mixin
            include ::Glacier2::::SessionPrx_mixin

            def shutdown(context=nil)
                TestSessionPrx_mixin::OP_shutdown.invoke(self, [], context)
            end
        end

        class TestSessionPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include TestSessionPrx_mixin
        end

        if not defined?(::Test::::T_TestSessionPrx)
            T_TestSession = ::Ice::__declareClass('::Test::TestSession')
            T_TestSessionPrx = ::Ice::__declareProxy('::Test::TestSession')
        end

        T_TestSession.defineClass(::Ice::Value, -1, false, true, nil, [])

        T_TestSessionPrx.defineProxy(TestSessionPrx, nil, [::Glacier2::::T_SessionPrx])

        TestSessionPrx_mixin::OP_shutdown = ::Ice::__defineOperation('shutdown', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
    end
end
