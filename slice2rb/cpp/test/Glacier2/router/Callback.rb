# Copyright (c) ZeroC, Inc.
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file 'Callback.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>

require 'Ice'
require 'Ice/BuiltinSequences.rb'

module ::Test
    if not defined?(::Test::CallbackException)
        class CallbackException < Ice::UserException
            def to_s
                '::Test::CallbackException'
            end

            attr_accessor :someValue, :someString
        end

        T_CallbackException = Ice::__defineException('::Test::CallbackException', CallbackException, nil, [
            ["someValue", Ice::T_double, false, 0],
            ["someString", Ice::T_string, false, 0]
        ])
    end

    if not defined?(::Test::T_CallbackReceiverPrx)
        T_CallbackReceiverPrx = Ice::__declareProxy('::Test::CallbackReceiver')
    end

    if not defined?(::Test::CallbackReceiverPrx)
        module CallbackReceiverPrx_mixin
            def callback(context=nil)
                CallbackReceiverPrx_mixin::OP_callback.invoke(self, [], context)
            end

            def callbackEx(context=nil)
                CallbackReceiverPrx_mixin::OP_callbackEx.invoke(self, [], context)
            end

            def concurrentCallback(number, context=nil)
                CallbackReceiverPrx_mixin::OP_concurrentCallback.invoke(self, [number], context)
            end

            def waitCallback(context=nil)
                CallbackReceiverPrx_mixin::OP_waitCallback.invoke(self, [], context)
            end

            def callbackWithPayload(payload, context=nil)
                CallbackReceiverPrx_mixin::OP_callbackWithPayload.invoke(self, [payload], context)
            end
        end

        class CallbackReceiverPrx < Ice::ObjectPrx
            include Ice::Proxy_mixin
            include CallbackReceiverPrx_mixin
        end

        T_CallbackReceiverPrx.defineProxy(CallbackReceiverPrx, nil, [])

        CallbackReceiverPrx_mixin::OP_callback = Ice::__defineOperation('callback', Ice::OperationMode::Normal, nil, [], [], nil, [])
        CallbackReceiverPrx_mixin::OP_callbackEx = Ice::__defineOperation('callbackEx', Ice::OperationMode::Normal, nil, [], [], nil, [::Test::T_CallbackException])
        CallbackReceiverPrx_mixin::OP_concurrentCallback = Ice::__defineOperation('concurrentCallback', Ice::OperationMode::Normal, nil, [[Ice::T_int, false, 0]], [], [Ice::T_int, false, 0], [])
        CallbackReceiverPrx_mixin::OP_waitCallback = Ice::__defineOperation('waitCallback', Ice::OperationMode::Normal, nil, [], [], nil, [])
        CallbackReceiverPrx_mixin::OP_callbackWithPayload = Ice::__defineOperation('callbackWithPayload', Ice::OperationMode::Normal, nil, [[::Ice::T_ByteSeq, false, 0]], [], nil, [])
    end

    if not defined?(::Test::T_CallbackPrx)
        T_CallbackPrx = Ice::__declareProxy('::Test::Callback')
    end

    if not defined?(::Test::CallbackPrx)
        module CallbackPrx_mixin
            def initiateCallback(proxy, context=nil)
                CallbackPrx_mixin::OP_initiateCallback.invoke(self, [proxy], context)
            end

            def initiateCallbackEx(proxy, context=nil)
                CallbackPrx_mixin::OP_initiateCallbackEx.invoke(self, [proxy], context)
            end

            def initiateConcurrentCallback(number, proxy, context=nil)
                CallbackPrx_mixin::OP_initiateConcurrentCallback.invoke(self, [number, proxy], context)
            end

            def initiateWaitCallback(proxy, context=nil)
                CallbackPrx_mixin::OP_initiateWaitCallback.invoke(self, [proxy], context)
            end

            def initiateCallbackWithPayload(proxy, context=nil)
                CallbackPrx_mixin::OP_initiateCallbackWithPayload.invoke(self, [proxy], context)
            end

            def shutdown(context=nil)
                CallbackPrx_mixin::OP_shutdown.invoke(self, [], context)
            end
        end

        class CallbackPrx < Ice::ObjectPrx
            include Ice::Proxy_mixin
            include CallbackPrx_mixin
        end

        T_CallbackPrx.defineProxy(CallbackPrx, nil, [])

        CallbackPrx_mixin::OP_initiateCallback = Ice::__defineOperation('initiateCallback', Ice::OperationMode::Normal, nil, [[::Test::T_CallbackReceiverPrx, false, 0]], [], nil, [])
        CallbackPrx_mixin::OP_initiateCallbackEx = Ice::__defineOperation('initiateCallbackEx', Ice::OperationMode::Normal, nil, [[::Test::T_CallbackReceiverPrx, false, 0]], [], nil, [::Test::T_CallbackException])
        CallbackPrx_mixin::OP_initiateConcurrentCallback = Ice::__defineOperation('initiateConcurrentCallback', Ice::OperationMode::Normal, nil, [[Ice::T_int, false, 0], [::Test::T_CallbackReceiverPrx, false, 0]], [], [Ice::T_int, false, 0], [])
        CallbackPrx_mixin::OP_initiateWaitCallback = Ice::__defineOperation('initiateWaitCallback', Ice::OperationMode::Normal, nil, [[::Test::T_CallbackReceiverPrx, false, 0]], [], nil, [])
        CallbackPrx_mixin::OP_initiateCallbackWithPayload = Ice::__defineOperation('initiateCallbackWithPayload', Ice::OperationMode::Normal, nil, [[::Test::T_CallbackReceiverPrx, false, 0]], [], nil, [])
        CallbackPrx_mixin::OP_shutdown = Ice::__defineOperation('shutdown', Ice::OperationMode::Normal, nil, [], [], nil, [])
    end
end
