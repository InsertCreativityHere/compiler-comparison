# encoding: utf-8
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file `Clash.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

require 'Ice'

module ::Clash

    if not defined?(::Clash::Intf_Mixin)

        module ::Clash::Intf_Mixin
        end
        module IntfPrx_mixin

            def context(context=nil)
                IntfPrx_mixin::OP_context.invoke(self, [], context)
            end

            def current(context=nil)
                IntfPrx_mixin::OP_current.invoke(self, [], context)
            end

            def response(context=nil)
                IntfPrx_mixin::OP_response.invoke(self, [], context)
            end

            def typeId(context=nil)
                IntfPrx_mixin::OP_typeId.invoke(self, [], context)
            end

            def del(context=nil)
                IntfPrx_mixin::OP_del.invoke(self, [], context)
            end

            def cookie(context=nil)
                IntfPrx_mixin::OP_cookie.invoke(self, [], context)
            end

            def sync(context=nil)
                IntfPrx_mixin::OP_sync.invoke(self, [], context)
            end

            def inS(context=nil)
                IntfPrx_mixin::OP_inS.invoke(self, [], context)
            end

            def istr(context=nil)
                IntfPrx_mixin::OP_istr.invoke(self, [], context)
            end

            def obj(context=nil)
                IntfPrx_mixin::OP_obj.invoke(self, [], context)
            end

            def op(context, current, response, ex, sent, cookie, sync, result, istr, ostr, proxy, obj, context_=nil)
                IntfPrx_mixin::OP_op.invoke(self, [context, current, response, ex, sent, cookie, sync, result, istr, ostr, proxy, obj], context_)
            end

            def opOut(context_=nil)
                IntfPrx_mixin::OP_opOut.invoke(self, [], context_)
            end
        end

        class IntfPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include IntfPrx_mixin
        end

        if not defined?(::Clash::T_IntfPrx)
            T_Intf = ::Ice::__declareClass('::Clash::Intf')
            T_IntfPrx = ::Ice::__declareProxy('::Clash::Intf')
        end

        T_IntfPrx.defineProxy(IntfPrx, nil, [])

        IntfPrx_mixin::OP_context = ::Ice::__defineOperation('context', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        IntfPrx_mixin::OP_current = ::Ice::__defineOperation('current', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        IntfPrx_mixin::OP_response = ::Ice::__defineOperation('response', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        IntfPrx_mixin::OP_typeId = ::Ice::__defineOperation('typeId', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        IntfPrx_mixin::OP_del = ::Ice::__defineOperation('del', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        IntfPrx_mixin::OP_cookie = ::Ice::__defineOperation('cookie', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        IntfPrx_mixin::OP_sync = ::Ice::__defineOperation('sync', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        IntfPrx_mixin::OP_inS = ::Ice::__defineOperation('inS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        IntfPrx_mixin::OP_istr = ::Ice::__defineOperation('istr', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        IntfPrx_mixin::OP_obj = ::Ice::__defineOperation('obj', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        IntfPrx_mixin::OP_op = ::Ice::__defineOperation('op', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_string, false, 0], [::Ice::T_string, false, 0], [::Ice::T_string, false, 0], [::Ice::T_string, false, 0], [::Ice::T_string, false, 0], [::Ice::T_string, false, 0], [::Ice::T_string, false, 0], [::Ice::T_string, false, 0], [::Ice::T_string, false, 0], [::Ice::T_string, false, 0], [::Ice::T_string, true, 1], [::Ice::T_int, true, 2]], [], nil, [])
        IntfPrx_mixin::OP_opOut = ::Ice::__defineOperation('opOut', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [[::Ice::T_string, false, 0], [::Ice::T_string, false, 0], [::Ice::T_string, false, 0], [::Ice::T_string, false, 0], [::Ice::T_string, false, 0], [::Ice::T_string, false, 0], [::Ice::T_string, false, 0], [::Ice::T_string, false, 0], [::Ice::T_string, false, 0], [::Ice::T_string, false, 0], [::Ice::T_string, true, 1], [::Ice::T_int, true, 2]], nil, [])
    end

    if not defined?(::Clash::Cls_Mixin)

        module ::Clash::Cls_Mixin
        end
        class Cls < ::Ice::Value

            def initialize(s=nil, context='', current=0, response=0, typeId=0, del=0, cookie=::Ice::Unset, ex='', result=0, istr='', ostr='', inS='', _in='', proxy='', obj=0, getCookie=0, _clone='')
                @s = s
                @context = context
                @current = current
                @response = response
                @typeId = typeId
                @del = del
                @cookie = cookie
                @ex = ex
                @result = result
                @istr = istr
                @ostr = ostr
                @inS = inS
                @_in = _in
                @proxy = proxy
                @obj = obj
                @getCookie = getCookie
                @_clone = _clone
            end

            attr_accessor :s, :context, :current, :response, :typeId, :del, :cookie, :ex, :result, :istr, :ostr, :inS, :_in, :proxy, :obj, :getCookie, :_clone
        end

        if not defined?(::Clash::T_Cls)
            T_Cls = ::Ice::__declareClass('::Clash::Cls')
        end

        T_Cls.defineClass(Cls, -1, false, nil, [
            ['s', ::Clash::T_IntfPrx, false, 0],
            ['context', ::Ice::T_string, false, 0],
            ['current', ::Ice::T_int, false, 0],
            ['response', ::Ice::T_short, false, 0],
            ['typeId', ::Ice::T_int, false, 0],
            ['del', ::Ice::T_short, false, 0],
            ['cookie', ::Ice::T_short, true, 1],
            ['ex', ::Ice::T_string, false, 0],
            ['result', ::Ice::T_int, false, 0],
            ['istr', ::Ice::T_string, false, 0],
            ['ostr', ::Ice::T_string, false, 0],
            ['inS', ::Ice::T_string, false, 0],
            ['_in', ::Ice::T_string, false, 0],
            ['proxy', ::Ice::T_string, false, 0],
            ['obj', ::Ice::T_int, false, 0],
            ['getCookie', ::Ice::T_int, false, 0],
            ['_clone', ::Ice::T_string, false, 0]
        ])
    end

    if not defined?(::Clash::St)
        class St
            include ::Ice::Inspect_mixin
            def initialize(v='', istr=0, ostr=0, rhs=0, hashCode='', _clone=0)
                @v = v
                @istr = istr
                @ostr = ostr
                @rhs = rhs
                @hashCode = hashCode
                @_clone = _clone
            end

            def hash
                _h = 0
                _h = 5 * _h + @v.hash
                _h = 5 * _h + @istr.hash
                _h = 5 * _h + @ostr.hash
                _h = 5 * _h + @rhs.hash
                _h = 5 * _h + @hashCode.hash
                _h = 5 * _h + @_clone.hash
                _h % 0x7fffffff
            end

            def ==(other)
                return false if !other.is_a? ::Clash::St or
                    @v != other.v or
                    @istr != other.istr or
                    @ostr != other.ostr or
                    @rhs != other.rhs or
                    @hashCode != other.hashCode or
                    @_clone != other._clone
                true
            end

            def eql?(other)
                return other.class == self.class && other == self
            end

            attr_accessor :v, :istr, :ostr, :rhs, :hashCode, :_clone
        end

        T_St = ::Ice::__defineStruct('::Clash::St', St, [
            ["v", ::Ice::T_string],
            ["istr", ::Ice::T_short],
            ["ostr", ::Ice::T_int],
            ["rhs", ::Ice::T_int],
            ["hashCode", ::Ice::T_string],
            ["_clone", ::Ice::T_int]
        ])
    end

    if not defined?(::Clash::Ex)
        class Ex < Ice::UserException
            def initialize(istr=0, ostr=0, cause='')
                @istr = istr
                @ostr = ostr
                @cause = cause
            end

            def to_s
                '::Clash::Ex'
            end

            attr_accessor :istr, :ostr, :cause
        end

        T_Ex = ::Ice::__defineException('::Clash::Ex', Ex, nil, [
            ["istr", ::Ice::T_short, false, 0],
            ["ostr", ::Ice::T_int, false, 0],
            ["cause", ::Ice::T_string, false, 0]
        ])
    end
end
