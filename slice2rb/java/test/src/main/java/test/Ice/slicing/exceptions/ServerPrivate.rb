# Copyright (c) ZeroC, Inc.
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file 'ServerPrivate.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>

require 'Ice'

module ::Test

    if not defined?(::Test::Base)
        class Base < Ice::UserException
            def to_s
                '::Test::Base'
            end

            attr_accessor :b
        end

        T_Base = ::Ice::__defineException('::Test::Base', Base, nil, [["b", ::Ice::T_string, false, 0]])
    end

    if not defined?(::Test::KnownDerived)
        class KnownDerived < ::Test::Base
            def to_s
                '::Test::KnownDerived'
            end

            attr_accessor :kd
        end

        T_KnownDerived = ::Ice::__defineException('::Test::KnownDerived', KnownDerived, ::Test::T_Base, [["kd", ::Ice::T_string, false, 0]])
    end

    if not defined?(::Test::KnownIntermediate)
        class KnownIntermediate < ::Test::Base
            def to_s
                '::Test::KnownIntermediate'
            end

            attr_accessor :ki
        end

        T_KnownIntermediate = ::Ice::__defineException('::Test::KnownIntermediate', KnownIntermediate, ::Test::T_Base, [["ki", ::Ice::T_string, false, 0]])
    end

    if not defined?(::Test::KnownMostDerived)
        class KnownMostDerived < ::Test::KnownIntermediate
            def to_s
                '::Test::KnownMostDerived'
            end

            attr_accessor :kmd
        end

        T_KnownMostDerived = ::Ice::__defineException('::Test::KnownMostDerived', KnownMostDerived, ::Test::T_KnownIntermediate, [["kmd", ::Ice::T_string, false, 0]])
    end

    if not defined?(::Test::T_TestIntfPrx)
        T_TestIntfPrx = ::Ice::__declareProxy('::Test::TestIntf')
    end

    if not defined?(::Test::TestIntfPrx)
        module TestIntfPrx_mixin

            def baseAsBase(context=nil)
                TestIntfPrx_mixin::OP_baseAsBase.invoke(self, [], context)
            end

            def unknownDerivedAsBase(context=nil)
                TestIntfPrx_mixin::OP_unknownDerivedAsBase.invoke(self, [], context)
            end

            def knownDerivedAsBase(context=nil)
                TestIntfPrx_mixin::OP_knownDerivedAsBase.invoke(self, [], context)
            end

            def knownDerivedAsKnownDerived(context=nil)
                TestIntfPrx_mixin::OP_knownDerivedAsKnownDerived.invoke(self, [], context)
            end

            def unknownIntermediateAsBase(context=nil)
                TestIntfPrx_mixin::OP_unknownIntermediateAsBase.invoke(self, [], context)
            end

            def knownIntermediateAsBase(context=nil)
                TestIntfPrx_mixin::OP_knownIntermediateAsBase.invoke(self, [], context)
            end

            def knownMostDerivedAsBase(context=nil)
                TestIntfPrx_mixin::OP_knownMostDerivedAsBase.invoke(self, [], context)
            end

            def knownIntermediateAsKnownIntermediate(context=nil)
                TestIntfPrx_mixin::OP_knownIntermediateAsKnownIntermediate.invoke(self, [], context)
            end

            def knownMostDerivedAsKnownIntermediate(context=nil)
                TestIntfPrx_mixin::OP_knownMostDerivedAsKnownIntermediate.invoke(self, [], context)
            end

            def knownMostDerivedAsKnownMostDerived(context=nil)
                TestIntfPrx_mixin::OP_knownMostDerivedAsKnownMostDerived.invoke(self, [], context)
            end

            def unknownMostDerived1AsBase(context=nil)
                TestIntfPrx_mixin::OP_unknownMostDerived1AsBase.invoke(self, [], context)
            end

            def unknownMostDerived1AsKnownIntermediate(context=nil)
                TestIntfPrx_mixin::OP_unknownMostDerived1AsKnownIntermediate.invoke(self, [], context)
            end

            def unknownMostDerived2AsBase(context=nil)
                TestIntfPrx_mixin::OP_unknownMostDerived2AsBase.invoke(self, [], context)
            end

            def shutdown(context=nil)
                TestIntfPrx_mixin::OP_shutdown.invoke(self, [], context)
            end
        end

        class TestIntfPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include TestIntfPrx_mixin
        end

        T_TestIntfPrx.defineProxy(TestIntfPrx, nil, [])

        TestIntfPrx_mixin::OP_baseAsBase = ::Ice::__defineOperation('baseAsBase', ::Ice::OperationMode::Normal, nil, [], [], nil, [::Test::T_Base])
        TestIntfPrx_mixin::OP_unknownDerivedAsBase = ::Ice::__defineOperation('unknownDerivedAsBase', ::Ice::OperationMode::Normal, ::Ice::FormatType::CompactFormat, [], [], nil, [::Test::T_Base])
        TestIntfPrx_mixin::OP_knownDerivedAsBase = ::Ice::__defineOperation('knownDerivedAsBase', ::Ice::OperationMode::Normal, nil, [], [], nil, [::Test::T_Base])
        TestIntfPrx_mixin::OP_knownDerivedAsKnownDerived = ::Ice::__defineOperation('knownDerivedAsKnownDerived', ::Ice::OperationMode::Normal, nil, [], [], nil, [::Test::T_KnownDerived])
        TestIntfPrx_mixin::OP_unknownIntermediateAsBase = ::Ice::__defineOperation('unknownIntermediateAsBase', ::Ice::OperationMode::Normal, nil, [], [], nil, [::Test::T_Base])
        TestIntfPrx_mixin::OP_knownIntermediateAsBase = ::Ice::__defineOperation('knownIntermediateAsBase', ::Ice::OperationMode::Normal, nil, [], [], nil, [::Test::T_Base])
        TestIntfPrx_mixin::OP_knownMostDerivedAsBase = ::Ice::__defineOperation('knownMostDerivedAsBase', ::Ice::OperationMode::Normal, nil, [], [], nil, [::Test::T_Base])
        TestIntfPrx_mixin::OP_knownIntermediateAsKnownIntermediate = ::Ice::__defineOperation('knownIntermediateAsKnownIntermediate', ::Ice::OperationMode::Normal, nil, [], [], nil, [::Test::T_KnownIntermediate])
        TestIntfPrx_mixin::OP_knownMostDerivedAsKnownIntermediate = ::Ice::__defineOperation('knownMostDerivedAsKnownIntermediate', ::Ice::OperationMode::Normal, nil, [], [], nil, [::Test::T_KnownIntermediate])
        TestIntfPrx_mixin::OP_knownMostDerivedAsKnownMostDerived = ::Ice::__defineOperation('knownMostDerivedAsKnownMostDerived', ::Ice::OperationMode::Normal, nil, [], [], nil, [::Test::T_KnownMostDerived])
        TestIntfPrx_mixin::OP_unknownMostDerived1AsBase = ::Ice::__defineOperation('unknownMostDerived1AsBase', ::Ice::OperationMode::Normal, nil, [], [], nil, [::Test::T_Base])
        TestIntfPrx_mixin::OP_unknownMostDerived1AsKnownIntermediate = ::Ice::__defineOperation('unknownMostDerived1AsKnownIntermediate', ::Ice::OperationMode::Normal, nil, [], [], nil, [::Test::T_KnownIntermediate])
        TestIntfPrx_mixin::OP_unknownMostDerived2AsBase = ::Ice::__defineOperation('unknownMostDerived2AsBase', ::Ice::OperationMode::Normal, nil, [], [], nil, [::Test::T_Base])
        TestIntfPrx_mixin::OP_shutdown = ::Ice::__defineOperation('shutdown', ::Ice::OperationMode::Normal, nil, [], [], nil, [])
    end

    if not defined?(::Test::UnknownDerived)
        class UnknownDerived < ::Test::Base
            def to_s
                '::Test::UnknownDerived'
            end

            attr_accessor :ud
        end

        T_UnknownDerived = ::Ice::__defineException('::Test::UnknownDerived', UnknownDerived, ::Test::T_Base, [["ud", ::Ice::T_string, false, 0]])
    end

    if not defined?(::Test::UnknownIntermediate)
        class UnknownIntermediate < ::Test::Base
            def to_s
                '::Test::UnknownIntermediate'
            end

            attr_accessor :ui
        end

        T_UnknownIntermediate = ::Ice::__defineException('::Test::UnknownIntermediate', UnknownIntermediate, ::Test::T_Base, [["ui", ::Ice::T_string, false, 0]])
    end

    if not defined?(::Test::UnknownMostDerived1)
        class UnknownMostDerived1 < ::Test::KnownIntermediate
            def to_s
                '::Test::UnknownMostDerived1'
            end

            attr_accessor :umd1
        end

        T_UnknownMostDerived1 = ::Ice::__defineException('::Test::UnknownMostDerived1', UnknownMostDerived1, ::Test::T_KnownIntermediate, [["umd1", ::Ice::T_string, false, 0]])
    end

    if not defined?(::Test::UnknownMostDerived2)
        class UnknownMostDerived2 < ::Test::UnknownIntermediate
            def to_s
                '::Test::UnknownMostDerived2'
            end

            attr_accessor :umd2
        end

        T_UnknownMostDerived2 = ::Ice::__defineException('::Test::UnknownMostDerived2', UnknownMostDerived2, ::Test::T_UnknownIntermediate, [["umd2", ::Ice::T_string, false, 0]])
    end
end
