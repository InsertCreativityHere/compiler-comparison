# encoding: utf-8
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `Test.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

require 'Ice'
require 'Ice/BuiltinSequences.rb'

module ::Test

    if not defined?(::Test::InterruptedException)
        class InterruptedException < Ice::UserException
            def initialize
            end

            def to_s
                '::Test::InterruptedException'
            end
        end

        T_InterruptedException = ::Ice::__defineException('::Test::InterruptedException', InterruptedException, false, nil, [])
    end

    if not defined?(::Test::TestIntf_Mixin)

        module ::Test::TestIntf_Mixin
        end
        module TestIntfPrx_mixin

            def op(context=nil)
                TestIntfPrx_mixin::OP_op.invoke(self, [], context)
            end

            def opIdempotent(context=nil)
                TestIntfPrx_mixin::OP_opIdempotent.invoke(self, [], context)
            end

            def sleep(to, context=nil)
                TestIntfPrx_mixin::OP_sleep.invoke(self, [to], context)
            end

            def opWithPayload(seq, context=nil)
                TestIntfPrx_mixin::OP_opWithPayload.invoke(self, [seq], context)
            end

            def shutdown(context=nil)
                TestIntfPrx_mixin::OP_shutdown.invoke(self, [], context)
            end
        end

        class TestIntfPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include TestIntfPrx_mixin
        end

        if not defined?(::Test::T_TestIntfPrx)
            T_TestIntf = ::Ice::__declareClass('::Test::TestIntf')
            T_TestIntfPrx = ::Ice::__declareProxy('::Test::TestIntf')
        end

        T_TestIntfPrx.defineProxy(TestIntfPrx, nil, [])

        TestIntfPrx_mixin::OP_op = ::Ice::__defineOperation('op', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        TestIntfPrx_mixin::OP_opIdempotent = ::Ice::__defineOperation('opIdempotent', ::Ice::OperationMode::Idempotent, ::Ice::OperationMode::Idempotent, false, nil, [], [], nil, [])
        TestIntfPrx_mixin::OP_sleep = ::Ice::__defineOperation('sleep', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_int, false, 0]], [], nil, [::Test::T_InterruptedException])
        TestIntfPrx_mixin::OP_opWithPayload = ::Ice::__defineOperation('opWithPayload', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_ByteSeq, false, 0]], [], nil, [])
        TestIntfPrx_mixin::OP_shutdown = ::Ice::__defineOperation('shutdown', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
    end

    if not defined?(::Test::CannotInterruptException)
        class CannotInterruptException < Ice::UserException
            def initialize
            end

            def to_s
                '::Test::CannotInterruptException'
            end
        end

        T_CannotInterruptException = ::Ice::__defineException('::Test::CannotInterruptException', CannotInterruptException, false, nil, [])
    end

    if not defined?(::Test::TestIntfController_Mixin)

        module ::Test::TestIntfController_Mixin
        end
        module TestIntfControllerPrx_mixin

            def holdAdapter(context=nil)
                TestIntfControllerPrx_mixin::OP_holdAdapter.invoke(self, [], context)
            end

            def resumeAdapter(context=nil)
                TestIntfControllerPrx_mixin::OP_resumeAdapter.invoke(self, [], context)
            end

            def interrupt(context=nil)
                TestIntfControllerPrx_mixin::OP_interrupt.invoke(self, [], context)
            end
        end

        class TestIntfControllerPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include TestIntfControllerPrx_mixin
        end

        if not defined?(::Test::T_TestIntfControllerPrx)
            T_TestIntfController = ::Ice::__declareClass('::Test::TestIntfController')
            T_TestIntfControllerPrx = ::Ice::__declareProxy('::Test::TestIntfController')
        end

        T_TestIntfControllerPrx.defineProxy(TestIntfControllerPrx, nil, [])

        TestIntfControllerPrx_mixin::OP_holdAdapter = ::Ice::__defineOperation('holdAdapter', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        TestIntfControllerPrx_mixin::OP_resumeAdapter = ::Ice::__defineOperation('resumeAdapter', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        TestIntfControllerPrx_mixin::OP_interrupt = ::Ice::__defineOperation('interrupt', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [::Test::T_CannotInterruptException])
    end
end
