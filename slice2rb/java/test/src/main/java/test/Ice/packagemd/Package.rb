# encoding: utf-8
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file 'Package.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

require 'Ice'

module ::Test2

    if not defined?(::Test2::C1)
        class C1 < ::Ice::Value

            def initialize(i=0)
                @i = i
            end

            attr_accessor :i
        end

        if not defined?(::Test2::T_C1)
            T_C1 = ::Ice::__declareClass('::Test2::C1')
        end

        T_C1.defineClass(C1, -1, false, nil, [['i', ::Ice::T_int, false, 0]])
    end

    if not defined?(::Test2::C2)
        class C2 < ::Test2::C1

            def initialize(i=0, l=0)
                super(i)
                @l = l
            end

            attr_accessor :l
        end

        if not defined?(::Test2::T_C2)
            T_C2 = ::Ice::__declareClass('::Test2::C2')
        end

        T_C2.defineClass(C2, -1, false, ::Test2::T_C1, [['l', ::Ice::T_long, false, 0]])
    end

    if not defined?(::Test2::E1)
        class E1 < Ice::UserException
            def to_s
                '::Test2::E1'
            end

            attr_accessor :i
        end

        T_E1 = ::Ice::__defineException('::Test2::E1', E1, nil, [["i", ::Ice::T_int, false, 0]])
    end

    if not defined?(::Test2::E2)
        class E2 < ::Test2::E1
            def to_s
                '::Test2::E2'
            end

            attr_accessor :l
        end

        T_E2 = ::Ice::__defineException('::Test2::E2', E2, ::Test2::T_E1, [["l", ::Ice::T_long, false, 0]])
    end
end

module ::Test3

    if not defined?(::Test3::C1)
        class C1 < ::Ice::Value

            def initialize(i=0)
                @i = i
            end

            attr_accessor :i
        end

        if not defined?(::Test3::T_C1)
            T_C1 = ::Ice::__declareClass('::Test3::C1')
        end

        T_C1.defineClass(C1, -1, false, nil, [['i', ::Ice::T_int, false, 0]])
    end

    if not defined?(::Test3::C2)
        class C2 < ::Test3::C1

            def initialize(i=0, l=0)
                super(i)
                @l = l
            end

            attr_accessor :l
        end

        if not defined?(::Test3::T_C2)
            T_C2 = ::Ice::__declareClass('::Test3::C2')
        end

        T_C2.defineClass(C2, -1, false, ::Test3::T_C1, [['l', ::Ice::T_long, false, 0]])
    end

    if not defined?(::Test3::E1)
        class E1 < Ice::UserException
            def to_s
                '::Test3::E1'
            end

            attr_accessor :i
        end

        T_E1 = ::Ice::__defineException('::Test3::E1', E1, nil, [["i", ::Ice::T_int, false, 0]])
    end

    if not defined?(::Test3::E2)
        class E2 < ::Test3::E1
            def to_s
                '::Test3::E2'
            end

            attr_accessor :l
        end

        T_E2 = ::Ice::__defineException('::Test3::E2', E2, ::Test3::T_E1, [["l", ::Ice::T_long, false, 0]])
    end
end
