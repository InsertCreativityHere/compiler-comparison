# Copyright (c) ZeroC, Inc.
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file 'Test.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>

require 'Ice'
require 'Ice/BuiltinSequences.rb'
require 'Ice/Identity.rb'

module ::Test

    if not defined?(::Test::TestIntfException)
        class TestIntfException < Ice::UserException
            def to_s
                '::Test::TestIntfException'
            end
        end

        T_TestIntfException = ::Ice::__defineException('::Test::TestIntfException', TestIntfException, nil, [])
    end

    if not defined?(::Test::T_PingReplyPrx)
        T_PingReplyPrx = ::Ice::__declareProxy('::Test::PingReply')
    end

    if not defined?(::Test::PingReplyPrx)
        module PingReplyPrx_mixin

            def reply(context=nil)
                PingReplyPrx_mixin::OP_reply.invoke(self, [], context)
            end
        end

        class PingReplyPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include PingReplyPrx_mixin
        end

        T_PingReplyPrx.defineProxy(PingReplyPrx, nil, [])

        PingReplyPrx_mixin::OP_reply = ::Ice::__defineOperation('reply', ::Ice::OperationMode::Normal, nil, [], [], nil, [])
    end

    if not defined?(::Test::T_TestIntfPrx)
        T_TestIntfPrx = ::Ice::__declareProxy('::Test::TestIntf')
    end

    if not defined?(::Test::TestIntfPrx)
        module TestIntfPrx_mixin

            def op(context=nil)
                TestIntfPrx_mixin::OP_op.invoke(self, [], context)
            end

            def opWithPayload(seq, context=nil)
                TestIntfPrx_mixin::OP_opWithPayload.invoke(self, [seq], context)
            end

            def opWithResult(context=nil)
                TestIntfPrx_mixin::OP_opWithResult.invoke(self, [], context)
            end

            def opWithUE(context=nil)
                TestIntfPrx_mixin::OP_opWithUE.invoke(self, [], context)
            end

            def opBatch(context=nil)
                TestIntfPrx_mixin::OP_opBatch.invoke(self, [], context)
            end

            def opBatchCount(context=nil)
                TestIntfPrx_mixin::OP_opBatchCount.invoke(self, [], context)
            end

            def waitForBatch(count, context=nil)
                TestIntfPrx_mixin::OP_waitForBatch.invoke(self, [count], context)
            end

            def closeConnection(context=nil)
                TestIntfPrx_mixin::OP_closeConnection.invoke(self, [], context)
            end

            def abortConnection(context=nil)
                TestIntfPrx_mixin::OP_abortConnection.invoke(self, [], context)
            end

            def sleep(ms, context=nil)
                TestIntfPrx_mixin::OP_sleep.invoke(self, [ms], context)
            end

            def startDispatch(context=nil)
                TestIntfPrx_mixin::OP_startDispatch.invoke(self, [], context)
            end

            def finishDispatch(context=nil)
                TestIntfPrx_mixin::OP_finishDispatch.invoke(self, [], context)
            end

            def shutdown(context=nil)
                TestIntfPrx_mixin::OP_shutdown.invoke(self, [], context)
            end

            def supportsFunctionalTests(context=nil)
                TestIntfPrx_mixin::OP_supportsFunctionalTests.invoke(self, [], context)
            end

            def opBool(b, context=nil)
                TestIntfPrx_mixin::OP_opBool.invoke(self, [b], context)
            end

            def opByte(b, context=nil)
                TestIntfPrx_mixin::OP_opByte.invoke(self, [b], context)
            end

            def opShort(s, context=nil)
                TestIntfPrx_mixin::OP_opShort.invoke(self, [s], context)
            end

            def opInt(i, context=nil)
                TestIntfPrx_mixin::OP_opInt.invoke(self, [i], context)
            end

            def opLong(l, context=nil)
                TestIntfPrx_mixin::OP_opLong.invoke(self, [l], context)
            end

            def opFloat(f, context=nil)
                TestIntfPrx_mixin::OP_opFloat.invoke(self, [f], context)
            end

            def opDouble(d, context=nil)
                TestIntfPrx_mixin::OP_opDouble.invoke(self, [d], context)
            end

            def pingBiDir(reply, context=nil)
                TestIntfPrx_mixin::OP_pingBiDir.invoke(self, [reply], context)
            end
        end

        class TestIntfPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include TestIntfPrx_mixin
        end

        T_TestIntfPrx.defineProxy(TestIntfPrx, nil, [])

        TestIntfPrx_mixin::OP_op = ::Ice::__defineOperation('op', ::Ice::OperationMode::Normal, nil, [], [], nil, [])
        TestIntfPrx_mixin::OP_opWithPayload = ::Ice::__defineOperation('opWithPayload', ::Ice::OperationMode::Normal, nil, [[::Ice::T_ByteSeq, false, 0]], [], nil, [])
        TestIntfPrx_mixin::OP_opWithResult = ::Ice::__defineOperation('opWithResult', ::Ice::OperationMode::Normal, nil, [], [], [::Ice::T_int, false, 0], [])
        TestIntfPrx_mixin::OP_opWithUE = ::Ice::__defineOperation('opWithUE', ::Ice::OperationMode::Normal, nil, [], [], nil, [::Test::T_TestIntfException])
        TestIntfPrx_mixin::OP_opBatch = ::Ice::__defineOperation('opBatch', ::Ice::OperationMode::Normal, nil, [], [], nil, [])
        TestIntfPrx_mixin::OP_opBatchCount = ::Ice::__defineOperation('opBatchCount', ::Ice::OperationMode::Normal, nil, [], [], [::Ice::T_int, false, 0], [])
        TestIntfPrx_mixin::OP_waitForBatch = ::Ice::__defineOperation('waitForBatch', ::Ice::OperationMode::Normal, nil, [[::Ice::T_int, false, 0]], [], [::Ice::T_bool, false, 0], [])
        TestIntfPrx_mixin::OP_closeConnection = ::Ice::__defineOperation('closeConnection', ::Ice::OperationMode::Normal, nil, [], [], nil, [])
        TestIntfPrx_mixin::OP_abortConnection = ::Ice::__defineOperation('abortConnection', ::Ice::OperationMode::Normal, nil, [], [], nil, [])
        TestIntfPrx_mixin::OP_sleep = ::Ice::__defineOperation('sleep', ::Ice::OperationMode::Normal, nil, [[::Ice::T_int, false, 0]], [], nil, [])
        TestIntfPrx_mixin::OP_startDispatch = ::Ice::__defineOperation('startDispatch', ::Ice::OperationMode::Normal, nil, [], [], nil, [])
        TestIntfPrx_mixin::OP_finishDispatch = ::Ice::__defineOperation('finishDispatch', ::Ice::OperationMode::Normal, nil, [], [], nil, [])
        TestIntfPrx_mixin::OP_shutdown = ::Ice::__defineOperation('shutdown', ::Ice::OperationMode::Normal, nil, [], [], nil, [])
        TestIntfPrx_mixin::OP_supportsFunctionalTests = ::Ice::__defineOperation('supportsFunctionalTests', ::Ice::OperationMode::Normal, nil, [], [], [::Ice::T_bool, false, 0], [])
        TestIntfPrx_mixin::OP_opBool = ::Ice::__defineOperation('opBool', ::Ice::OperationMode::Normal, nil, [[::Ice::T_bool, false, 0]], [], [::Ice::T_bool, false, 0], [])
        TestIntfPrx_mixin::OP_opByte = ::Ice::__defineOperation('opByte', ::Ice::OperationMode::Normal, nil, [[::Ice::T_byte, false, 0]], [], [::Ice::T_byte, false, 0], [])
        TestIntfPrx_mixin::OP_opShort = ::Ice::__defineOperation('opShort', ::Ice::OperationMode::Normal, nil, [[::Ice::T_short, false, 0]], [], [::Ice::T_short, false, 0], [])
        TestIntfPrx_mixin::OP_opInt = ::Ice::__defineOperation('opInt', ::Ice::OperationMode::Normal, nil, [[::Ice::T_int, false, 0]], [], [::Ice::T_int, false, 0], [])
        TestIntfPrx_mixin::OP_opLong = ::Ice::__defineOperation('opLong', ::Ice::OperationMode::Normal, nil, [[::Ice::T_long, false, 0]], [], [::Ice::T_long, false, 0], [])
        TestIntfPrx_mixin::OP_opFloat = ::Ice::__defineOperation('opFloat', ::Ice::OperationMode::Normal, nil, [[::Ice::T_float, false, 0]], [], [::Ice::T_float, false, 0], [])
        TestIntfPrx_mixin::OP_opDouble = ::Ice::__defineOperation('opDouble', ::Ice::OperationMode::Normal, nil, [[::Ice::T_double, false, 0]], [], [::Ice::T_double, false, 0], [])
        TestIntfPrx_mixin::OP_pingBiDir = ::Ice::__defineOperation('pingBiDir', ::Ice::OperationMode::Normal, nil, [[::Test::T_PingReplyPrx, false, 0]], [], nil, [])
    end

    if not defined?(::Test::T_TestIntfControllerPrx)
        T_TestIntfControllerPrx = ::Ice::__declareProxy('::Test::TestIntfController')
    end

    if not defined?(::Test::TestIntfControllerPrx)
        module TestIntfControllerPrx_mixin

            def holdAdapter(context=nil)
                TestIntfControllerPrx_mixin::OP_holdAdapter.invoke(self, [], context)
            end

            def resumeAdapter(context=nil)
                TestIntfControllerPrx_mixin::OP_resumeAdapter.invoke(self, [], context)
            end
        end

        class TestIntfControllerPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include TestIntfControllerPrx_mixin
        end

        T_TestIntfControllerPrx.defineProxy(TestIntfControllerPrx, nil, [])

        TestIntfControllerPrx_mixin::OP_holdAdapter = ::Ice::__defineOperation('holdAdapter', ::Ice::OperationMode::Normal, nil, [], [], nil, [])
        TestIntfControllerPrx_mixin::OP_resumeAdapter = ::Ice::__defineOperation('resumeAdapter', ::Ice::OperationMode::Normal, nil, [], [], nil, [])
    end

    module Outer

        module Inner

            if not defined?(::Test::Outer::Inner::T_TestIntfPrx)
                T_TestIntfPrx = ::Ice::__declareProxy('::Test::Outer::Inner::TestIntf')
            end

            if not defined?(::Test::Outer::Inner::TestIntfPrx)
                module TestIntfPrx_mixin

                    def op(i, context=nil)
                        TestIntfPrx_mixin::OP_op.invoke(self, [i], context)
                    end
                end

                class TestIntfPrx < ::Ice::ObjectPrx
                    include ::Ice::Proxy_mixin
                    include TestIntfPrx_mixin
                end

                T_TestIntfPrx.defineProxy(TestIntfPrx, nil, [])

                TestIntfPrx_mixin::OP_op = ::Ice::__defineOperation('op', ::Ice::OperationMode::Normal, nil, [[::Ice::T_int, false, 0]], [[::Ice::T_int, false, 0]], [::Ice::T_int, false, 0], [])
            end
        end
    end
end
