# encoding: utf-8
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file 'Test.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

require 'Ice'
require 'Ice/PropertyDict.rb'

module ::Test

    if not defined?(::Test::T_RemoteCommunicatorPrx)
        T_RemoteCommunicatorPrx = ::Ice::__declareProxy('::Test::RemoteCommunicator')
    end

    if not defined?(::Test::RemoteCommunicatorPrx)
        module RemoteCommunicatorPrx_mixin

            def getAdmin(context=nil)
                RemoteCommunicatorPrx_mixin::OP_getAdmin.invoke(self, [], context)
            end

            def getChanges(context=nil)
                RemoteCommunicatorPrx_mixin::OP_getChanges.invoke(self, [], context)
            end

            def shutdown(context=nil)
                RemoteCommunicatorPrx_mixin::OP_shutdown.invoke(self, [], context)
            end

            def waitForShutdown(context=nil)
                RemoteCommunicatorPrx_mixin::OP_waitForShutdown.invoke(self, [], context)
            end

            def destroy(context=nil)
                RemoteCommunicatorPrx_mixin::OP_destroy.invoke(self, [], context)
            end
        end

        class RemoteCommunicatorPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include RemoteCommunicatorPrx_mixin
        end

        T_RemoteCommunicatorPrx.defineProxy(RemoteCommunicatorPrx, nil, [])

        RemoteCommunicatorPrx_mixin::OP_getAdmin = ::Ice::__defineOperation('getAdmin', ::Ice::OperationMode::Normal, nil, [], [], [::Ice::T_ObjectPrx, false, 0], [])
        RemoteCommunicatorPrx_mixin::OP_getChanges = ::Ice::__defineOperation('getChanges', ::Ice::OperationMode::Normal, nil, [], [], [::Ice::T_PropertyDict, false, 0], [])
        RemoteCommunicatorPrx_mixin::OP_shutdown = ::Ice::__defineOperation('shutdown', ::Ice::OperationMode::Normal, nil, [], [], nil, [])
        RemoteCommunicatorPrx_mixin::OP_waitForShutdown = ::Ice::__defineOperation('waitForShutdown', ::Ice::OperationMode::Normal, nil, [], [], nil, [])
        RemoteCommunicatorPrx_mixin::OP_destroy = ::Ice::__defineOperation('destroy', ::Ice::OperationMode::Normal, nil, [], [], nil, [])
    end

    if not defined?(::Test::T_RemoteCommunicatorFactoryPrx)
        T_RemoteCommunicatorFactoryPrx = ::Ice::__declareProxy('::Test::RemoteCommunicatorFactory')
    end

    if not defined?(::Test::RemoteCommunicatorFactoryPrx)
        module RemoteCommunicatorFactoryPrx_mixin

            def createCommunicator(props, context=nil)
                RemoteCommunicatorFactoryPrx_mixin::OP_createCommunicator.invoke(self, [props], context)
            end

            def shutdown(context=nil)
                RemoteCommunicatorFactoryPrx_mixin::OP_shutdown.invoke(self, [], context)
            end
        end

        class RemoteCommunicatorFactoryPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include RemoteCommunicatorFactoryPrx_mixin
        end

        T_RemoteCommunicatorFactoryPrx.defineProxy(RemoteCommunicatorFactoryPrx, nil, [])

        RemoteCommunicatorFactoryPrx_mixin::OP_createCommunicator = ::Ice::__defineOperation('createCommunicator', ::Ice::OperationMode::Normal, nil, [[::Ice::T_PropertyDict, false, 0]], [], [::Test::T_RemoteCommunicatorPrx, false, 0], [])
        RemoteCommunicatorFactoryPrx_mixin::OP_shutdown = ::Ice::__defineOperation('shutdown', ::Ice::OperationMode::Normal, nil, [], [], nil, [])
    end

    if not defined?(::Test::T_TestFacetPrx)
        T_TestFacetPrx = ::Ice::__declareProxy('::Test::TestFacet')
    end

    if not defined?(::Test::TestFacetPrx)
        module TestFacetPrx_mixin

            def op(context=nil)
                TestFacetPrx_mixin::OP_op.invoke(self, [], context)
            end
        end

        class TestFacetPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include TestFacetPrx_mixin
        end

        T_TestFacetPrx.defineProxy(TestFacetPrx, nil, [])

        TestFacetPrx_mixin::OP_op = ::Ice::__defineOperation('op', ::Ice::OperationMode::Normal, nil, [], [], nil, [])
    end
end
