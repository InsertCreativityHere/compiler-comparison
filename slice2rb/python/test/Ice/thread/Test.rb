# encoding: utf-8
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `Test.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

require 'Ice'
require 'Ice/PropertyDict.rb'

module ::Test

    if not defined?(::Test::TestIntf_Mixin)

        module ::Test::TestIntf_Mixin
        end
        module TestIntfPrx_mixin

            def sleep(ms, context=nil)
                TestIntfPrx_mixin::OP_sleep.invoke(self, [ms], context)
            end
        end

        class TestIntfPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include TestIntfPrx_mixin
        end

        if not defined?(::Test::T_TestIntfPrx)
            T_TestIntf = ::Ice::__declareClass('::Test::TestIntf')
            T_TestIntfPrx = ::Ice::__declareProxy('::Test::TestIntf')
        end

        T_TestIntfPrx.defineProxy(TestIntfPrx, nil, [])

        TestIntfPrx_mixin::OP_sleep = ::Ice::__defineOperation('sleep', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_int, false, 0]], [], nil, [])
    end

    if not defined?(::Test::RemoteCommunicator_Mixin)

        module ::Test::RemoteCommunicator_Mixin
        end
        module RemoteCommunicatorPrx_mixin

            def getObject(context=nil)
                RemoteCommunicatorPrx_mixin::OP_getObject.invoke(self, [], context)
            end

            def getThreadHookStartCount(context=nil)
                RemoteCommunicatorPrx_mixin::OP_getThreadHookStartCount.invoke(self, [], context)
            end

            def getThreadHookStopCount(context=nil)
                RemoteCommunicatorPrx_mixin::OP_getThreadHookStopCount.invoke(self, [], context)
            end

            def getThreadStartCount(context=nil)
                RemoteCommunicatorPrx_mixin::OP_getThreadStartCount.invoke(self, [], context)
            end

            def getThreadStopCount(context=nil)
                RemoteCommunicatorPrx_mixin::OP_getThreadStopCount.invoke(self, [], context)
            end

            def destroy(context=nil)
                RemoteCommunicatorPrx_mixin::OP_destroy.invoke(self, [], context)
            end
        end

        class RemoteCommunicatorPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include RemoteCommunicatorPrx_mixin
        end

        if not defined?(::Test::T_RemoteCommunicatorPrx)
            T_RemoteCommunicator = ::Ice::__declareClass('::Test::RemoteCommunicator')
            T_RemoteCommunicatorPrx = ::Ice::__declareProxy('::Test::RemoteCommunicator')
        end

        T_RemoteCommunicatorPrx.defineProxy(RemoteCommunicatorPrx, nil, [])

        RemoteCommunicatorPrx_mixin::OP_getObject = ::Ice::__defineOperation('getObject', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], [::Test::T_TestIntfPrx, false, 0], [])
        RemoteCommunicatorPrx_mixin::OP_getThreadHookStartCount = ::Ice::__defineOperation('getThreadHookStartCount', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], [::Ice::T_int, false, 0], [])
        RemoteCommunicatorPrx_mixin::OP_getThreadHookStopCount = ::Ice::__defineOperation('getThreadHookStopCount', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], [::Ice::T_int, false, 0], [])
        RemoteCommunicatorPrx_mixin::OP_getThreadStartCount = ::Ice::__defineOperation('getThreadStartCount', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], [::Ice::T_int, false, 0], [])
        RemoteCommunicatorPrx_mixin::OP_getThreadStopCount = ::Ice::__defineOperation('getThreadStopCount', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], [::Ice::T_int, false, 0], [])
        RemoteCommunicatorPrx_mixin::OP_destroy = ::Ice::__defineOperation('destroy', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
    end

    if not defined?(::Test::RemoteCommunicatorFactory_Mixin)

        module ::Test::RemoteCommunicatorFactory_Mixin
        end
        module RemoteCommunicatorFactoryPrx_mixin

            def createCommunicator(props, context=nil)
                RemoteCommunicatorFactoryPrx_mixin::OP_createCommunicator.invoke(self, [props], context)
            end

            def shutdown(context=nil)
                RemoteCommunicatorFactoryPrx_mixin::OP_shutdown.invoke(self, [], context)
            end
        end

        class RemoteCommunicatorFactoryPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include RemoteCommunicatorFactoryPrx_mixin
        end

        if not defined?(::Test::T_RemoteCommunicatorFactoryPrx)
            T_RemoteCommunicatorFactory = ::Ice::__declareClass('::Test::RemoteCommunicatorFactory')
            T_RemoteCommunicatorFactoryPrx = ::Ice::__declareProxy('::Test::RemoteCommunicatorFactory')
        end

        T_RemoteCommunicatorFactoryPrx.defineProxy(RemoteCommunicatorFactoryPrx, nil, [])

        RemoteCommunicatorFactoryPrx_mixin::OP_createCommunicator = ::Ice::__defineOperation('createCommunicator', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_PropertyDict, false, 0]], [], [::Test::T_RemoteCommunicatorPrx, false, 0], [])
        RemoteCommunicatorFactoryPrx_mixin::OP_shutdown = ::Ice::__defineOperation('shutdown', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
    end
end
