# encoding: utf-8
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `ServerPrivate.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

require 'Ice'

module ::Test

    if not defined?(::Test::Empty_Mixin)

        module ::Test::Empty_Mixin
        end
        class Empty < ::Ice::Value
        end

        if not defined?(::Test::T_Empty)
            T_Empty = ::Ice::__declareClass('::Test::Empty')
        end

        T_Empty.defineClass(Empty, -1, false, false, nil, [])
    end

    if not defined?(::Test::AlsoEmpty_Mixin)

        module ::Test::AlsoEmpty_Mixin
        end
        class AlsoEmpty < ::Ice::Value
        end

        if not defined?(::Test::T_AlsoEmpty)
            T_AlsoEmpty = ::Ice::__declareClass('::Test::AlsoEmpty')
        end

        T_AlsoEmpty.defineClass(AlsoEmpty, -1, false, false, nil, [])
    end

    if not defined?(::Test::UnexpectedObjectExceptionTest_Mixin)

        module ::Test::UnexpectedObjectExceptionTest_Mixin
        end
        module UnexpectedObjectExceptionTestPrx_mixin

            def op(context=nil)
                UnexpectedObjectExceptionTestPrx_mixin::OP_op.invoke(self, [], context)
            end
        end

        class UnexpectedObjectExceptionTestPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include UnexpectedObjectExceptionTestPrx_mixin
        end

        if not defined?(::Test::T_UnexpectedObjectExceptionTestPrx)
            T_UnexpectedObjectExceptionTest = ::Ice::__declareClass('::Test::UnexpectedObjectExceptionTest')
            T_UnexpectedObjectExceptionTestPrx = ::Ice::__declareProxy('::Test::UnexpectedObjectExceptionTest')
        end

        T_UnexpectedObjectExceptionTest.defineClass(::Ice::Value, -1, false, true, nil, [])

        T_UnexpectedObjectExceptionTestPrx.defineProxy(UnexpectedObjectExceptionTestPrx, nil, [])

        UnexpectedObjectExceptionTestPrx_mixin::OP_op = ::Ice::__defineOperation('op', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], [::Test::T_AlsoEmpty, false, 0], [])
    end

    if not defined?(::Test::COneMember_Mixin)

        module ::Test::COneMember_Mixin
        end
        class COneMember < ::Ice::Value

            def initialize(e=nil)
                @e = e
            end

            attr_accessor :e
        end

        if not defined?(::Test::T_COneMember)
            T_COneMember = ::Ice::__declareClass('::Test::COneMember')
        end

        T_COneMember.defineClass(COneMember, -1, false, false, nil, [['e', ::Test::T_Empty, false, 0]])
    end

    if not defined?(::Test::CTwoMembers_Mixin)

        module ::Test::CTwoMembers_Mixin
        end
        class CTwoMembers < ::Ice::Value

            def initialize(e1=nil, e2=nil)
                @e1 = e1
                @e2 = e2
            end

            attr_accessor :e1, :e2
        end

        if not defined?(::Test::T_CTwoMembers)
            T_CTwoMembers = ::Ice::__declareClass('::Test::CTwoMembers')
        end

        T_CTwoMembers.defineClass(CTwoMembers, -1, false, false, nil, [
            ['e1', ::Test::T_Empty, false, 0],
            ['e2', ::Test::T_Empty, false, 0]
        ])
    end

    if not defined?(::Test::EOneMember)
        class EOneMember < Ice::UserException
            def initialize(e=nil)
                @e = e
            end

            def to_s
                '::Test::EOneMember'
            end

            attr_accessor :e
        end

        T_EOneMember = ::Ice::__defineException('::Test::EOneMember', EOneMember, false, nil, [["e", ::Test::T_Empty, false, 0]])
    end

    if not defined?(::Test::ETwoMembers)
        class ETwoMembers < Ice::UserException
            def initialize(e1=nil, e2=nil)
                @e1 = e1
                @e2 = e2
            end

            def to_s
                '::Test::ETwoMembers'
            end

            attr_accessor :e1, :e2
        end

        T_ETwoMembers = ::Ice::__defineException('::Test::ETwoMembers', ETwoMembers, false, nil, [
            ["e1", ::Test::T_Empty, false, 0],
            ["e2", ::Test::T_Empty, false, 0]
        ])
    end

    if not defined?(::Test::SOneMember)
        class SOneMember
            include ::Ice::Inspect_mixin
            def initialize(e=nil)
                @e = e
            end

            def hash
                _h = 0
                _h = 5 * _h + @e.hash
                _h % 0x7fffffff
            end

            def ==(other)
                return false if !other.is_a? ::Test::SOneMember or
                    @e != other.e
                true
            end

            def eql?(other)
                return other.class == self.class && other == self
            end

            attr_accessor :e
        end

        T_SOneMember = ::Ice::__defineStruct('::Test::SOneMember', SOneMember, [["e", ::Test::T_Empty]])
    end

    if not defined?(::Test::STwoMembers)
        class STwoMembers
            include ::Ice::Inspect_mixin
            def initialize(e1=nil, e2=nil)
                @e1 = e1
                @e2 = e2
            end

            def hash
                _h = 0
                _h = 5 * _h + @e1.hash
                _h = 5 * _h + @e2.hash
                _h % 0x7fffffff
            end

            def ==(other)
                return false if !other.is_a? ::Test::STwoMembers or
                    @e1 != other.e1 or
                    @e2 != other.e2
                true
            end

            def eql?(other)
                return other.class == self.class && other == self
            end

            attr_accessor :e1, :e2
        end

        T_STwoMembers = ::Ice::__defineStruct('::Test::STwoMembers', STwoMembers, [
            ["e1", ::Test::T_Empty],
            ["e2", ::Test::T_Empty]
        ])
    end

    if not defined?(::Test::T_DOneMember)
        T_DOneMember = ::Ice::__defineDictionary('::Test::DOneMember', ::Ice::T_int, ::Test::T_COneMember)
    end

    if not defined?(::Test::T_DTwoMembers)
        T_DTwoMembers = ::Ice::__defineDictionary('::Test::DTwoMembers', ::Ice::T_int, ::Test::T_CTwoMembers)
    end
end
