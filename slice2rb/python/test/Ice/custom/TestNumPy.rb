# encoding: utf-8
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file 'TestNumPy.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

require 'Ice'

module ::Test

    module NumPy

        if not defined?(::Test::NumPy::T_BoolSeq1)
            T_BoolSeq1 = ::Ice::__defineSequence('::Test::NumPy::BoolSeq1', ::Ice::T_bool)
        end

        if not defined?(::Test::NumPy::T_BoolSeq2)
            T_BoolSeq2 = ::Ice::__defineSequence('::Test::NumPy::BoolSeq2', ::Ice::T_bool)
        end

        if not defined?(::Test::NumPy::T_ByteSeq1)
            T_ByteSeq1 = ::Ice::__defineSequence('::Test::NumPy::ByteSeq1', ::Ice::T_byte)
        end

        if not defined?(::Test::NumPy::T_ByteSeq2)
            T_ByteSeq2 = ::Ice::__defineSequence('::Test::NumPy::ByteSeq2', ::Ice::T_byte)
        end

        if not defined?(::Test::NumPy::T_ShortSeq1)
            T_ShortSeq1 = ::Ice::__defineSequence('::Test::NumPy::ShortSeq1', ::Ice::T_short)
        end

        if not defined?(::Test::NumPy::T_ShortSeq2)
            T_ShortSeq2 = ::Ice::__defineSequence('::Test::NumPy::ShortSeq2', ::Ice::T_short)
        end

        if not defined?(::Test::NumPy::T_IntSeq1)
            T_IntSeq1 = ::Ice::__defineSequence('::Test::NumPy::IntSeq1', ::Ice::T_int)
        end

        if not defined?(::Test::NumPy::T_IntSeq2)
            T_IntSeq2 = ::Ice::__defineSequence('::Test::NumPy::IntSeq2', ::Ice::T_int)
        end

        if not defined?(::Test::NumPy::T_LongSeq1)
            T_LongSeq1 = ::Ice::__defineSequence('::Test::NumPy::LongSeq1', ::Ice::T_long)
        end

        if not defined?(::Test::NumPy::T_LongSeq2)
            T_LongSeq2 = ::Ice::__defineSequence('::Test::NumPy::LongSeq2', ::Ice::T_long)
        end

        if not defined?(::Test::NumPy::T_FloatSeq1)
            T_FloatSeq1 = ::Ice::__defineSequence('::Test::NumPy::FloatSeq1', ::Ice::T_float)
        end

        if not defined?(::Test::NumPy::T_FloatSeq2)
            T_FloatSeq2 = ::Ice::__defineSequence('::Test::NumPy::FloatSeq2', ::Ice::T_float)
        end

        if not defined?(::Test::NumPy::T_DoubleSeq1)
            T_DoubleSeq1 = ::Ice::__defineSequence('::Test::NumPy::DoubleSeq1', ::Ice::T_double)
        end

        if not defined?(::Test::NumPy::T_DoubleSeq2)
            T_DoubleSeq2 = ::Ice::__defineSequence('::Test::NumPy::DoubleSeq2', ::Ice::T_double)
        end

        if not defined?(::Test::NumPy::T_Complex128Seq)
            T_Complex128Seq = ::Ice::__defineSequence('::Test::NumPy::Complex128Seq', ::Ice::T_byte)
        end

        if not defined?(::Test::NumPy::D)
            class D < ::Ice::Value

                def initialize(boolSeq=::Ice::Unset, byteSeq=::Ice::Unset, shortSeq=::Ice::Unset, intSeq=::Ice::Unset, longSeq=::Ice::Unset, floatSeq=::Ice::Unset, doubleSeq=::Ice::Unset)
                    @boolSeq = boolSeq
                    @byteSeq = byteSeq
                    @shortSeq = shortSeq
                    @intSeq = intSeq
                    @longSeq = longSeq
                    @floatSeq = floatSeq
                    @doubleSeq = doubleSeq
                end

                attr_accessor :boolSeq, :byteSeq, :shortSeq, :intSeq, :longSeq, :floatSeq, :doubleSeq
            end

            if not defined?(::Test::NumPy::T_D)
                T_D = ::Ice::__declareClass('::Test::NumPy::D')
            end

            T_D.defineClass(D, -1, false, nil, [
                ['boolSeq', ::Test::NumPy::T_BoolSeq1, true, 1],
                ['byteSeq', ::Test::NumPy::T_ByteSeq1, true, 2],
                ['shortSeq', ::Test::NumPy::T_ShortSeq1, true, 3],
                ['intSeq', ::Test::NumPy::T_IntSeq1, true, 4],
                ['longSeq', ::Test::NumPy::T_LongSeq1, true, 5],
                ['floatSeq', ::Test::NumPy::T_FloatSeq1, true, 6],
                ['doubleSeq', ::Test::NumPy::T_DoubleSeq1, true, 7]
            ])
        end

        if not defined?(::Test::NumPy::CustomPrx)
            module CustomPrx_mixin

                def opBoolSeq(v1, context=nil)
                    CustomPrx_mixin::OP_opBoolSeq.invoke(self, [v1], context)
                end

                def opByteSeq(v1, context=nil)
                    CustomPrx_mixin::OP_opByteSeq.invoke(self, [v1], context)
                end

                def opShortSeq(v1, context=nil)
                    CustomPrx_mixin::OP_opShortSeq.invoke(self, [v1], context)
                end

                def opIntSeq(v1, context=nil)
                    CustomPrx_mixin::OP_opIntSeq.invoke(self, [v1], context)
                end

                def opLongSeq(v1, context=nil)
                    CustomPrx_mixin::OP_opLongSeq.invoke(self, [v1], context)
                end

                def opFloatSeq(v1, context=nil)
                    CustomPrx_mixin::OP_opFloatSeq.invoke(self, [v1], context)
                end

                def opDoubleSeq(v1, context=nil)
                    CustomPrx_mixin::OP_opDoubleSeq.invoke(self, [v1], context)
                end

                def opComplex128Seq(v1, context=nil)
                    CustomPrx_mixin::OP_opComplex128Seq.invoke(self, [v1], context)
                end

                def opBoolMatrix(context=nil)
                    CustomPrx_mixin::OP_opBoolMatrix.invoke(self, [], context)
                end

                def opByteMatrix(context=nil)
                    CustomPrx_mixin::OP_opByteMatrix.invoke(self, [], context)
                end

                def opShortMatrix(context=nil)
                    CustomPrx_mixin::OP_opShortMatrix.invoke(self, [], context)
                end

                def opIntMatrix(context=nil)
                    CustomPrx_mixin::OP_opIntMatrix.invoke(self, [], context)
                end

                def opLongMatrix(context=nil)
                    CustomPrx_mixin::OP_opLongMatrix.invoke(self, [], context)
                end

                def opFloatMatrix(context=nil)
                    CustomPrx_mixin::OP_opFloatMatrix.invoke(self, [], context)
                end

                def opDoubleMatrix(context=nil)
                    CustomPrx_mixin::OP_opDoubleMatrix.invoke(self, [], context)
                end

                def opBogusNumpyArrayType(context=nil)
                    CustomPrx_mixin::OP_opBogusNumpyArrayType.invoke(self, [], context)
                end

                def opD(d, context=nil)
                    CustomPrx_mixin::OP_opD.invoke(self, [d], context)
                end

                def shutdown(context=nil)
                    CustomPrx_mixin::OP_shutdown.invoke(self, [], context)
                end
            end

            class CustomPrx < ::Ice::ObjectPrx
                include ::Ice::Proxy_mixin
                include CustomPrx_mixin
            end

            if not defined?(::Test::NumPy::T_CustomPrx)
                T_CustomPrx = ::Ice::__declareProxy('::Test::NumPy::Custom')
            end

            T_CustomPrx.defineProxy(CustomPrx, nil, [])

            CustomPrx_mixin::OP_opBoolSeq = ::Ice::__defineOperation('opBoolSeq', ::Ice::OperationMode::Normal, nil, [[::Test::NumPy::T_BoolSeq1, false, 0]], [[::Test::NumPy::T_BoolSeq2, false, 0]], [::Test::NumPy::T_BoolSeq1, false, 0], [])
            CustomPrx_mixin::OP_opByteSeq = ::Ice::__defineOperation('opByteSeq', ::Ice::OperationMode::Normal, nil, [[::Test::NumPy::T_ByteSeq1, false, 0]], [[::Test::NumPy::T_ByteSeq2, false, 0]], [::Test::NumPy::T_ByteSeq1, false, 0], [])
            CustomPrx_mixin::OP_opShortSeq = ::Ice::__defineOperation('opShortSeq', ::Ice::OperationMode::Normal, nil, [[::Test::NumPy::T_ShortSeq1, false, 0]], [[::Test::NumPy::T_ShortSeq2, false, 0]], [::Test::NumPy::T_ShortSeq1, false, 0], [])
            CustomPrx_mixin::OP_opIntSeq = ::Ice::__defineOperation('opIntSeq', ::Ice::OperationMode::Normal, nil, [[::Test::NumPy::T_IntSeq1, false, 0]], [[::Test::NumPy::T_IntSeq2, false, 0]], [::Test::NumPy::T_IntSeq1, false, 0], [])
            CustomPrx_mixin::OP_opLongSeq = ::Ice::__defineOperation('opLongSeq', ::Ice::OperationMode::Normal, nil, [[::Test::NumPy::T_LongSeq1, false, 0]], [[::Test::NumPy::T_LongSeq2, false, 0]], [::Test::NumPy::T_LongSeq1, false, 0], [])
            CustomPrx_mixin::OP_opFloatSeq = ::Ice::__defineOperation('opFloatSeq', ::Ice::OperationMode::Normal, nil, [[::Test::NumPy::T_FloatSeq1, false, 0]], [[::Test::NumPy::T_FloatSeq2, false, 0]], [::Test::NumPy::T_FloatSeq1, false, 0], [])
            CustomPrx_mixin::OP_opDoubleSeq = ::Ice::__defineOperation('opDoubleSeq', ::Ice::OperationMode::Normal, nil, [[::Test::NumPy::T_DoubleSeq1, false, 0]], [[::Test::NumPy::T_DoubleSeq2, false, 0]], [::Test::NumPy::T_DoubleSeq1, false, 0], [])
            CustomPrx_mixin::OP_opComplex128Seq = ::Ice::__defineOperation('opComplex128Seq', ::Ice::OperationMode::Normal, nil, [[::Test::NumPy::T_Complex128Seq, false, 0]], [], [::Test::NumPy::T_Complex128Seq, false, 0], [])
            CustomPrx_mixin::OP_opBoolMatrix = ::Ice::__defineOperation('opBoolMatrix', ::Ice::OperationMode::Normal, nil, [], [], [::Test::NumPy::T_BoolSeq1, false, 0], [])
            CustomPrx_mixin::OP_opByteMatrix = ::Ice::__defineOperation('opByteMatrix', ::Ice::OperationMode::Normal, nil, [], [], [::Test::NumPy::T_ByteSeq1, false, 0], [])
            CustomPrx_mixin::OP_opShortMatrix = ::Ice::__defineOperation('opShortMatrix', ::Ice::OperationMode::Normal, nil, [], [], [::Test::NumPy::T_ShortSeq1, false, 0], [])
            CustomPrx_mixin::OP_opIntMatrix = ::Ice::__defineOperation('opIntMatrix', ::Ice::OperationMode::Normal, nil, [], [], [::Test::NumPy::T_IntSeq1, false, 0], [])
            CustomPrx_mixin::OP_opLongMatrix = ::Ice::__defineOperation('opLongMatrix', ::Ice::OperationMode::Normal, nil, [], [], [::Test::NumPy::T_LongSeq1, false, 0], [])
            CustomPrx_mixin::OP_opFloatMatrix = ::Ice::__defineOperation('opFloatMatrix', ::Ice::OperationMode::Normal, nil, [], [], [::Test::NumPy::T_FloatSeq1, false, 0], [])
            CustomPrx_mixin::OP_opDoubleMatrix = ::Ice::__defineOperation('opDoubleMatrix', ::Ice::OperationMode::Normal, nil, [], [], [::Test::NumPy::T_DoubleSeq1, false, 0], [])
            CustomPrx_mixin::OP_opBogusNumpyArrayType = ::Ice::__defineOperation('opBogusNumpyArrayType', ::Ice::OperationMode::Normal, nil, [], [], [::Test::NumPy::T_BoolSeq1, false, 0], [])
            CustomPrx_mixin::OP_opD = ::Ice::__defineOperation('opD', ::Ice::OperationMode::Normal, nil, [[::Test::NumPy::T_D, false, 0]], [], [::Test::NumPy::T_D, false, 0], [])
            CustomPrx_mixin::OP_shutdown = ::Ice::__defineOperation('shutdown', ::Ice::OperationMode::Normal, nil, [], [], nil, [])
        end
    end
end
