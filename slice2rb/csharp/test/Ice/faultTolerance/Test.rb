# Copyright (c) ZeroC, Inc.
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file 'Test.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>

require 'Ice'

module ::Test
    if not defined?(::Test::T_TestIntfPrx)
        T_TestIntfPrx = Ice::__declareProxy('::Test::TestIntf')
    end

    if not defined?(::Test::TestIntfPrx)
        module TestIntfPrx_mixin
            def shutdown(context=nil)
                TestIntfPrx_mixin::OP_shutdown.invoke(self, [], context)
            end

            def abort(context=nil)
                TestIntfPrx_mixin::OP_abort.invoke(self, [], context)
            end

            def idempotentAbort(context=nil)
                TestIntfPrx_mixin::OP_idempotentAbort.invoke(self, [], context)
            end

            def pid(context=nil)
                TestIntfPrx_mixin::OP_pid.invoke(self, [], context)
            end
        end

        class TestIntfPrx < Ice::ObjectPrx
            include Ice::Proxy_mixin
            include TestIntfPrx_mixin
        end

        T_TestIntfPrx.defineProxy(TestIntfPrx, nil, [])

        TestIntfPrx_mixin::OP_shutdown = Ice::__defineOperation('shutdown', Ice::OperationMode::Normal, nil, [], [], nil, [])
        TestIntfPrx_mixin::OP_abort = Ice::__defineOperation('abort', Ice::OperationMode::Normal, nil, [], [], nil, [])
        TestIntfPrx_mixin::OP_idempotentAbort = Ice::__defineOperation('idempotentAbort', Ice::OperationMode::Idempotent, nil, [], [], nil, [])
        TestIntfPrx_mixin::OP_pid = Ice::__defineOperation('pid', Ice::OperationMode::Idempotent, nil, [], [], [Ice::T_int, false, 0], [])
    end

    if not defined?(::Test::T_CleanerPrx)
        T_CleanerPrx = Ice::__declareProxy('::Test::Cleaner')
    end

    if not defined?(::Test::CleanerPrx)
        module CleanerPrx_mixin
            def cleanup(context=nil)
                CleanerPrx_mixin::OP_cleanup.invoke(self, [], context)
            end
        end

        class CleanerPrx < Ice::ObjectPrx
            include Ice::Proxy_mixin
            include CleanerPrx_mixin
        end

        T_CleanerPrx.defineProxy(CleanerPrx, nil, [])

        CleanerPrx_mixin::OP_cleanup = Ice::__defineOperation('cleanup', Ice::OperationMode::Normal, nil, [], [], nil, [])
    end
end
