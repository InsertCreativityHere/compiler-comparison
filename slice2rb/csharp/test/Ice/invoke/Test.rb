# Copyright (c) ZeroC, Inc.
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file 'Test.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>

require 'Ice'

module ::Test
    if not defined?(::Test::MyException)
        class MyException < Ice::UserException
            def to_s
                '::Test::MyException'
            end
        end

        T_MyException = Ice::__defineException('::Test::MyException', MyException, nil, [])
    end

    if not defined?(::Test::T_MyClassPrx)
        T_MyClassPrx = Ice::__declareProxy('::Test::MyClass')
    end

    if not defined?(::Test::MyClassPrx)
        module MyClassPrx_mixin
            def opOneway(context=nil)
                MyClassPrx_mixin::OP_opOneway.invoke(self, [], context)
            end

            def opString(s1, context=nil)
                MyClassPrx_mixin::OP_opString.invoke(self, [s1], context)
            end

            def opException(context=nil)
                MyClassPrx_mixin::OP_opException.invoke(self, [], context)
            end

            def shutdown(context=nil)
                MyClassPrx_mixin::OP_shutdown.invoke(self, [], context)
            end
        end

        class MyClassPrx < Ice::ObjectPrx
            include Ice::Proxy_mixin
            include MyClassPrx_mixin
        end

        T_MyClassPrx.defineProxy(MyClassPrx, nil, [])

        MyClassPrx_mixin::OP_opOneway = Ice::__defineOperation('opOneway', Ice::OperationMode::Normal, nil, [], [], nil, [])
        MyClassPrx_mixin::OP_opString = Ice::__defineOperation('opString', Ice::OperationMode::Normal, nil, [[Ice::T_string, false, 0]], [[Ice::T_string, false, 0]], [Ice::T_string, false, 0], [])
        MyClassPrx_mixin::OP_opException = Ice::__defineOperation('opException', Ice::OperationMode::Normal, nil, [], [], nil, [::Test::T_MyException])
        MyClassPrx_mixin::OP_shutdown = Ice::__defineOperation('shutdown', Ice::OperationMode::Normal, nil, [], [], nil, [])
    end
end
