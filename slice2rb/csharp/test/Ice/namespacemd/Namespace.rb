# Copyright (c) ZeroC, Inc.
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file 'Namespace.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>

require 'Ice'

module ::WithNamespace
    if not defined?(::WithNamespace::T_C1)
        T_C1 = Ice::__declareClass('::WithNamespace::C1')
    end

    if not defined?(::WithNamespace::C1)
        class C1 < Ice::Value

            def initialize(i=0)
                @i = i
            end

            attr_accessor :i
        end

        T_C1.defineClass(C1, -1, false, nil, [['i', Ice::T_int, false, 0]])
    end

    if not defined?(::WithNamespace::T_C2)
        T_C2 = Ice::__declareClass('::WithNamespace::C2')
    end

    if not defined?(::WithNamespace::C2)
        class C2 < ::WithNamespace::C1

            def initialize(i=0, l=0)
                super(i)
                @l = l
            end

            attr_accessor :l
        end

        T_C2.defineClass(C2, -1, false, ::WithNamespace::T_C1, [['l', Ice::T_long, false, 0]])
    end

    if not defined?(::WithNamespace::E1)
        class E1 < Ice::UserException
            def to_s
                '::WithNamespace::E1'
            end

            attr_accessor :i
        end

        T_E1 = Ice::__defineException('::WithNamespace::E1', E1, nil, [["i", Ice::T_int, false, 0]])
    end

    if not defined?(::WithNamespace::E2)
        class E2 < ::WithNamespace::E1
            def to_s
                '::WithNamespace::E2'
            end

            attr_accessor :l
        end

        T_E2 = Ice::__defineException('::WithNamespace::E2', E2, ::WithNamespace::T_E1, [["l", Ice::T_long, false, 0]])
    end
end
