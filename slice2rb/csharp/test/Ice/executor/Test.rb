# encoding: utf-8
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file 'Test.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

require 'Ice'
require 'Ice/BuiltinSequences.rb'

module ::Test

    if not defined?(::Test::T_TestIntfPrx)
        T_TestIntfPrx = ::Ice::__declareProxy('::Test::TestIntf')
    end

    if not defined?(::Test::TestIntfPrx)
        module TestIntfPrx_mixin

            def op(context=nil)
                TestIntfPrx_mixin::OP_op.invoke(self, [], context)
            end

            def sleep(to, context=nil)
                TestIntfPrx_mixin::OP_sleep.invoke(self, [to], context)
            end

            def opWithPayload(seq, context=nil)
                TestIntfPrx_mixin::OP_opWithPayload.invoke(self, [seq], context)
            end

            def shutdown(context=nil)
                TestIntfPrx_mixin::OP_shutdown.invoke(self, [], context)
            end
        end

        class TestIntfPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include TestIntfPrx_mixin
        end

        T_TestIntfPrx.defineProxy(TestIntfPrx, nil, [])

        TestIntfPrx_mixin::OP_op = ::Ice::__defineOperation('op', ::Ice::OperationMode::Normal, nil, [], [], nil, [])
        TestIntfPrx_mixin::OP_sleep = ::Ice::__defineOperation('sleep', ::Ice::OperationMode::Normal, nil, [[::Ice::T_int, false, 0]], [], nil, [])
        TestIntfPrx_mixin::OP_opWithPayload = ::Ice::__defineOperation('opWithPayload', ::Ice::OperationMode::Normal, nil, [[::Ice::T_ByteSeq, false, 0]], [], nil, [])
        TestIntfPrx_mixin::OP_shutdown = ::Ice::__defineOperation('shutdown', ::Ice::OperationMode::Normal, nil, [], [], nil, [])
    end

    if not defined?(::Test::T_TestIntfControllerPrx)
        T_TestIntfControllerPrx = ::Ice::__declareProxy('::Test::TestIntfController')
    end

    if not defined?(::Test::TestIntfControllerPrx)
        module TestIntfControllerPrx_mixin

            def holdAdapter(context=nil)
                TestIntfControllerPrx_mixin::OP_holdAdapter.invoke(self, [], context)
            end

            def resumeAdapter(context=nil)
                TestIntfControllerPrx_mixin::OP_resumeAdapter.invoke(self, [], context)
            end
        end

        class TestIntfControllerPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include TestIntfControllerPrx_mixin
        end

        T_TestIntfControllerPrx.defineProxy(TestIntfControllerPrx, nil, [])

        TestIntfControllerPrx_mixin::OP_holdAdapter = ::Ice::__defineOperation('holdAdapter', ::Ice::OperationMode::Normal, nil, [], [], nil, [])
        TestIntfControllerPrx_mixin::OP_resumeAdapter = ::Ice::__defineOperation('resumeAdapter', ::Ice::OperationMode::Normal, nil, [], [], nil, [])
    end
end
