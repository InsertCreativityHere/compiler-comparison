# Copyright (c) ZeroC, Inc.
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file 'ServerPrivateAMD.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>

require 'Ice'
require_relative 'TestAMD.rb'

module ::Test
    if not defined?(::Test::T_SBSUnknownDerived)
        T_SBSUnknownDerived = Ice::__declareClass('::Test::SBSUnknownDerived')
    end

    if not defined?(::Test::SBSUnknownDerived)
        class SBSUnknownDerived < ::Test::SBase

            def initialize(sb='', sbsud='')
                super(sb)
                @sbsud = sbsud
            end

            attr_accessor :sbsud
        end

        T_SBSUnknownDerived.defineClass(SBSUnknownDerived, -1, false, ::Test::T_SBase, [['sbsud', Ice::T_string, false, 0]])
    end

    if not defined?(::Test::T_SUnknown)
        T_SUnknown = Ice::__declareClass('::Test::SUnknown')
    end

    if not defined?(::Test::SUnknown)
        class SUnknown < Ice::Value

            def initialize(su='', cycle=nil)
                @su = su
                @cycle = cycle
            end

            attr_accessor :su, :cycle
        end

        T_SUnknown.defineClass(SUnknown, -1, false, nil, [
            ['su', Ice::T_string, false, 0],
            ['cycle', ::Test::T_SUnknown, false, 0]
        ])
    end

    if not defined?(::Test::T_D2)
        T_D2 = Ice::__declareClass('::Test::D2')
    end

    if not defined?(::Test::D2)
        class D2 < ::Test::B

            def initialize(sb='', pb=nil, sd2='', pd2=nil)
                super(sb, pb)
                @sd2 = sd2
                @pd2 = pd2
            end

            attr_accessor :sd2, :pd2
        end

        T_D2.defineClass(D2, -1, false, ::Test::T_B, [
            ['sd2', Ice::T_string, false, 0],
            ['pd2', ::Test::T_B, false, 0]
        ])
    end

    if not defined?(::Test::T_D4)
        T_D4 = Ice::__declareClass('::Test::D4')
    end

    if not defined?(::Test::D4)
        class D4 < ::Test::B

            def initialize(sb='', pb=nil, p1=nil, p2=nil)
                super(sb, pb)
                @p1 = p1
                @p2 = p2
            end

            attr_accessor :p1, :p2
        end

        T_D4.defineClass(D4, -1, false, ::Test::T_B, [
            ['p1', ::Test::T_B, false, 0],
            ['p2', ::Test::T_B, false, 0]
        ])
    end

    if not defined?(::Test::UnknownDerivedException)
        class UnknownDerivedException < ::Test::BaseException
            def to_s
                '::Test::UnknownDerivedException'
            end

            attr_accessor :sude, :pd2
        end

        T_UnknownDerivedException = Ice::__defineException('::Test::UnknownDerivedException', UnknownDerivedException, ::Test::T_BaseException, [
            ["sude", Ice::T_string, false, 0],
            ["pd2", ::Test::T_D2, false, 0]
        ])
    end

    if not defined?(::Test::T_MyClass)
        T_MyClass = Ice::__declareClass('::Test::MyClass')
    end

    if not defined?(::Test::MyClass)
        class MyClass < Ice::Value

            def initialize(i=0)
                @i = i
            end

            attr_accessor :i
        end

        T_MyClass.defineClass(MyClass, -1, false, nil, [['i', Ice::T_int, false, 0]])
    end

    if not defined?(::Test::T_PSUnknown)
        T_PSUnknown = Ice::__declareClass('::Test::PSUnknown')
    end

    if not defined?(::Test::PSUnknown)
        class PSUnknown < ::Test::Preserved

            def initialize(pi=0, ps='', psu='', graph=nil, cl=nil)
                super(pi, ps)
                @psu = psu
                @graph = graph
                @cl = cl
            end

            attr_accessor :psu, :graph, :cl
        end

        T_PSUnknown.defineClass(PSUnknown, -1, false, ::Test::T_Preserved, [
            ['psu', Ice::T_string, false, 0],
            ['graph', ::Test::T_PNode, false, 0],
            ['cl', ::Test::T_MyClass, false, 0]
        ])
    end

    if not defined?(::Test::T_PSUnknown2)
        T_PSUnknown2 = Ice::__declareClass('::Test::PSUnknown2')
    end

    if not defined?(::Test::PSUnknown2)
        class PSUnknown2 < ::Test::Preserved

            def initialize(pi=0, ps='', pb=nil)
                super(pi, ps)
                @pb = pb
            end

            attr_accessor :pb
        end

        T_PSUnknown2.defineClass(PSUnknown2, -1, false, ::Test::T_Preserved, [['pb', ::Test::T_PBase, false, 0]])
    end

    if not defined?(::Test::PSUnknownException)
        class PSUnknownException < ::Test::PreservedException
            def to_s
                '::Test::PSUnknownException'
            end

            attr_accessor :p
        end

        T_PSUnknownException = Ice::__defineException('::Test::PSUnknownException', PSUnknownException, ::Test::T_PreservedException, [["p", ::Test::T_PSUnknown2, false, 0]])
    end
end
