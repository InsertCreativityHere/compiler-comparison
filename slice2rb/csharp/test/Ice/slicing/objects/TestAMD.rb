# encoding: utf-8
# Copyright (c) ZeroC, Inc.
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file 'TestAMD.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>

require 'Ice'

module ::Test

    if not defined?(::Test::T_SBase)
        T_SBase = ::Ice::__declareClass('::Test::SBase')
    end

    if not defined?(::Test::SBase)
        class SBase < ::Ice::Value

            def initialize(sb='')
                @sb = sb
            end

            attr_accessor :sb
        end

        T_SBase.defineClass(SBase, -1, false, nil, [['sb', ::Ice::T_string, false, 0]])
    end

    if not defined?(::Test::T_SBSKnownDerived)
        T_SBSKnownDerived = ::Ice::__declareClass('::Test::SBSKnownDerived')
    end

    if not defined?(::Test::SBSKnownDerived)
        class SBSKnownDerived < ::Test::SBase

            def initialize(sb='', sbskd='')
                super(sb)
                @sbskd = sbskd
            end

            attr_accessor :sbskd
        end

        T_SBSKnownDerived.defineClass(SBSKnownDerived, -1, false, ::Test::T_SBase, [['sbskd', ::Ice::T_string, false, 0]])
    end

    if not defined?(::Test::T_B)
        T_B = ::Ice::__declareClass('::Test::B')
    end

    if not defined?(::Test::B)
        class B < ::Ice::Value

            def initialize(sb='', pb=nil)
                @sb = sb
                @pb = pb
            end

            attr_accessor :sb, :pb
        end

        T_B.defineClass(B, -1, false, nil, [
            ['sb', ::Ice::T_string, false, 0],
            ['pb', ::Test::T_B, false, 0]
        ])
    end

    if not defined?(::Test::T_D1)
        T_D1 = ::Ice::__declareClass('::Test::D1')
    end

    if not defined?(::Test::D1)
        class D1 < ::Test::B

            def initialize(sb='', pb=nil, sd1='', pd1=nil)
                super(sb, pb)
                @sd1 = sd1
                @pd1 = pd1
            end

            attr_accessor :sd1, :pd1
        end

        T_D1.defineClass(D1, -1, false, ::Test::T_B, [
            ['sd1', ::Ice::T_string, false, 0],
            ['pd1', ::Test::T_B, false, 0]
        ])
    end

    if not defined?(::Test::T_BSeq)
        T_BSeq = ::Ice::__defineSequence('::Test::BSeq', ::Test::T_B)
    end

    if not defined?(::Test::T_SS1)
        T_SS1 = ::Ice::__declareClass('::Test::SS1')
    end

    if not defined?(::Test::SS1)
        class SS1 < ::Ice::Value

            def initialize(s=nil)
                @s = s
            end

            attr_accessor :s
        end

        T_SS1.defineClass(SS1, -1, false, nil, [['s', ::Test::T_BSeq, false, 0]])
    end

    if not defined?(::Test::T_SS2)
        T_SS2 = ::Ice::__declareClass('::Test::SS2')
    end

    if not defined?(::Test::SS2)
        class SS2 < ::Ice::Value

            def initialize(s=nil)
                @s = s
            end

            attr_accessor :s
        end

        T_SS2.defineClass(SS2, -1, false, nil, [['s', ::Test::T_BSeq, false, 0]])
    end

    if not defined?(::Test::SS3)
        class SS3
            include ::Ice::Inspect_mixin
            def initialize(c1=nil, c2=nil)
                @c1 = c1
                @c2 = c2
            end

            def hash
                _h = 0
                _h = 5 * _h + @c1.hash
                _h = 5 * _h + @c2.hash
                _h % 0x7fffffff
            end

            def ==(other)
                return false if !other.is_a? ::Test::SS3 or
                    @c1 != other.c1 or
                    @c2 != other.c2
                true
            end

            def eql?(other)
                return other.class == self.class && other == self
            end

            attr_accessor :c1, :c2
        end

        T_SS3 = ::Ice::__defineStruct('::Test::SS3', SS3, [
            ["c1", ::Test::T_SS1],
            ["c2", ::Test::T_SS2]
        ])
    end

    if not defined?(::Test::T_BDict)
        T_BDict = ::Ice::__defineDictionary('::Test::BDict', ::Ice::T_int, ::Test::T_B)
    end

    if not defined?(::Test::BaseException)
        class BaseException < Ice::UserException
            def to_s
                '::Test::BaseException'
            end

            attr_accessor :sbe, :pb
        end

        T_BaseException = ::Ice::__defineException('::Test::BaseException', BaseException, nil, [
            ["sbe", ::Ice::T_string, false, 0],
            ["pb", ::Test::T_B, false, 0]
        ])
    end

    if not defined?(::Test::DerivedException)
        class DerivedException < ::Test::BaseException
            def to_s
                '::Test::DerivedException'
            end

            attr_accessor :sde, :pd1
        end

        T_DerivedException = ::Ice::__defineException('::Test::DerivedException', DerivedException, ::Test::T_BaseException, [
            ["sde", ::Ice::T_string, false, 0],
            ["pd1", ::Test::T_D1, false, 0]
        ])
    end

    if not defined?(::Test::T_Forward)
        T_Forward = ::Ice::__declareClass('::Test::Forward')
    end

    if not defined?(::Test::T_PBase)
        T_PBase = ::Ice::__declareClass('::Test::PBase')
    end

    if not defined?(::Test::PBase)
        class PBase < ::Ice::Value

            def initialize(pi=0)
                @pi = pi
            end

            attr_accessor :pi
        end

        T_PBase.defineClass(PBase, -1, false, nil, [['pi', ::Ice::T_int, false, 0]])
    end

    if not defined?(::Test::T_PBaseSeq)
        T_PBaseSeq = ::Ice::__defineSequence('::Test::PBaseSeq', ::Test::T_PBase)
    end

    if not defined?(::Test::T_Preserved)
        T_Preserved = ::Ice::__declareClass('::Test::Preserved')
    end

    if not defined?(::Test::Preserved)
        class Preserved < ::Test::PBase

            def initialize(pi=0, ps='')
                super(pi)
                @ps = ps
            end

            attr_accessor :ps
        end

        T_Preserved.defineClass(Preserved, -1, false, ::Test::T_PBase, [['ps', ::Ice::T_string, false, 0]])
    end

    if not defined?(::Test::T_PDerived)
        T_PDerived = ::Ice::__declareClass('::Test::PDerived')
    end

    if not defined?(::Test::PDerived)
        class PDerived < ::Test::Preserved

            def initialize(pi=0, ps='', pb=nil)
                super(pi, ps)
                @pb = pb
            end

            attr_accessor :pb
        end

        T_PDerived.defineClass(PDerived, -1, false, ::Test::T_Preserved, [['pb', ::Test::T_PBase, false, 0]])
    end

    if not defined?(::Test::T_PNode)
        T_PNode = ::Ice::__declareClass('::Test::PNode')
    end

    if not defined?(::Test::PNode)
        class PNode < ::Ice::Value

            def initialize(_next=nil)
                @_next = _next
            end

            attr_accessor :_next
        end

        T_PNode.defineClass(PNode, -1, false, nil, [['_next', ::Test::T_PNode, false, 0]])
    end

    if not defined?(::Test::PreservedException)
        class PreservedException < Ice::UserException
            def to_s
                '::Test::PreservedException'
            end
        end

        T_PreservedException = ::Ice::__defineException('::Test::PreservedException', PreservedException, nil, [])
    end

    if not defined?(::Test::T_TestIntfPrx)
        T_TestIntfPrx = ::Ice::__declareProxy('::Test::TestIntf')
    end

    if not defined?(::Test::TestIntfPrx)
        module TestIntfPrx_mixin

            def SBaseAsObject(context=nil)
                TestIntfPrx_mixin::OP_SBaseAsObject.invoke(self, [], context)
            end

            def SBaseAsSBase(context=nil)
                TestIntfPrx_mixin::OP_SBaseAsSBase.invoke(self, [], context)
            end

            def SBSKnownDerivedAsSBase(context=nil)
                TestIntfPrx_mixin::OP_SBSKnownDerivedAsSBase.invoke(self, [], context)
            end

            def SBSKnownDerivedAsSBSKnownDerived(context=nil)
                TestIntfPrx_mixin::OP_SBSKnownDerivedAsSBSKnownDerived.invoke(self, [], context)
            end

            def SBSUnknownDerivedAsSBase(context=nil)
                TestIntfPrx_mixin::OP_SBSUnknownDerivedAsSBase.invoke(self, [], context)
            end

            def SBSUnknownDerivedAsSBaseCompact(context=nil)
                TestIntfPrx_mixin::OP_SBSUnknownDerivedAsSBaseCompact.invoke(self, [], context)
            end

            def SUnknownAsObject(context=nil)
                TestIntfPrx_mixin::OP_SUnknownAsObject.invoke(self, [], context)
            end

            def checkSUnknown(o, context=nil)
                TestIntfPrx_mixin::OP_checkSUnknown.invoke(self, [o], context)
            end

            def oneElementCycle(context=nil)
                TestIntfPrx_mixin::OP_oneElementCycle.invoke(self, [], context)
            end

            def twoElementCycle(context=nil)
                TestIntfPrx_mixin::OP_twoElementCycle.invoke(self, [], context)
            end

            def D1AsB(context=nil)
                TestIntfPrx_mixin::OP_D1AsB.invoke(self, [], context)
            end

            def D1AsD1(context=nil)
                TestIntfPrx_mixin::OP_D1AsD1.invoke(self, [], context)
            end

            def D2AsB(context=nil)
                TestIntfPrx_mixin::OP_D2AsB.invoke(self, [], context)
            end

            def paramTest1(context=nil)
                TestIntfPrx_mixin::OP_paramTest1.invoke(self, [], context)
            end

            def paramTest2(context=nil)
                TestIntfPrx_mixin::OP_paramTest2.invoke(self, [], context)
            end

            def paramTest3(context=nil)
                TestIntfPrx_mixin::OP_paramTest3.invoke(self, [], context)
            end

            def paramTest4(context=nil)
                TestIntfPrx_mixin::OP_paramTest4.invoke(self, [], context)
            end

            def returnTest1(context=nil)
                TestIntfPrx_mixin::OP_returnTest1.invoke(self, [], context)
            end

            def returnTest2(context=nil)
                TestIntfPrx_mixin::OP_returnTest2.invoke(self, [], context)
            end

            def returnTest3(p1, p2, context=nil)
                TestIntfPrx_mixin::OP_returnTest3.invoke(self, [p1, p2], context)
            end

            def sequenceTest(p1, p2, context=nil)
                TestIntfPrx_mixin::OP_sequenceTest.invoke(self, [p1, p2], context)
            end

            def dictionaryTest(bin, context=nil)
                TestIntfPrx_mixin::OP_dictionaryTest.invoke(self, [bin], context)
            end

            def exchangePBase(pb, context=nil)
                TestIntfPrx_mixin::OP_exchangePBase.invoke(self, [pb], context)
            end

            def PBSUnknownAsPreserved(context=nil)
                TestIntfPrx_mixin::OP_PBSUnknownAsPreserved.invoke(self, [], context)
            end

            def checkPBSUnknown(p, context=nil)
                TestIntfPrx_mixin::OP_checkPBSUnknown.invoke(self, [p], context)
            end

            def PBSUnknownAsPreservedWithGraph(context=nil)
                TestIntfPrx_mixin::OP_PBSUnknownAsPreservedWithGraph.invoke(self, [], context)
            end

            def checkPBSUnknownWithGraph(p, context=nil)
                TestIntfPrx_mixin::OP_checkPBSUnknownWithGraph.invoke(self, [p], context)
            end

            def PBSUnknown2AsPreservedWithGraph(context=nil)
                TestIntfPrx_mixin::OP_PBSUnknown2AsPreservedWithGraph.invoke(self, [], context)
            end

            def checkPBSUnknown2WithGraph(p, context=nil)
                TestIntfPrx_mixin::OP_checkPBSUnknown2WithGraph.invoke(self, [p], context)
            end

            def exchangePNode(pn, context=nil)
                TestIntfPrx_mixin::OP_exchangePNode.invoke(self, [pn], context)
            end

            def throwBaseAsBase(context=nil)
                TestIntfPrx_mixin::OP_throwBaseAsBase.invoke(self, [], context)
            end

            def throwDerivedAsBase(context=nil)
                TestIntfPrx_mixin::OP_throwDerivedAsBase.invoke(self, [], context)
            end

            def throwDerivedAsDerived(context=nil)
                TestIntfPrx_mixin::OP_throwDerivedAsDerived.invoke(self, [], context)
            end

            def throwUnknownDerivedAsBase(context=nil)
                TestIntfPrx_mixin::OP_throwUnknownDerivedAsBase.invoke(self, [], context)
            end

            def throwPreservedException(context=nil)
                TestIntfPrx_mixin::OP_throwPreservedException.invoke(self, [], context)
            end

            def useForward(context=nil)
                TestIntfPrx_mixin::OP_useForward.invoke(self, [], context)
            end

            def shutdown(context=nil)
                TestIntfPrx_mixin::OP_shutdown.invoke(self, [], context)
            end
        end

        class TestIntfPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include TestIntfPrx_mixin
        end

        T_TestIntfPrx.defineProxy(TestIntfPrx, nil, [])

        TestIntfPrx_mixin::OP_SBaseAsObject = ::Ice::__defineOperation('SBaseAsObject', ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, [], [], [::Ice::T_Value, false, 0], [])
        TestIntfPrx_mixin::OP_SBaseAsSBase = ::Ice::__defineOperation('SBaseAsSBase', ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, [], [], [::Test::T_SBase, false, 0], [])
        TestIntfPrx_mixin::OP_SBSKnownDerivedAsSBase = ::Ice::__defineOperation('SBSKnownDerivedAsSBase', ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, [], [], [::Test::T_SBase, false, 0], [])
        TestIntfPrx_mixin::OP_SBSKnownDerivedAsSBSKnownDerived = ::Ice::__defineOperation('SBSKnownDerivedAsSBSKnownDerived', ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, [], [], [::Test::T_SBSKnownDerived, false, 0], [])
        TestIntfPrx_mixin::OP_SBSUnknownDerivedAsSBase = ::Ice::__defineOperation('SBSUnknownDerivedAsSBase', ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, [], [], [::Test::T_SBase, false, 0], [])
        TestIntfPrx_mixin::OP_SBSUnknownDerivedAsSBaseCompact = ::Ice::__defineOperation('SBSUnknownDerivedAsSBaseCompact', ::Ice::OperationMode::Normal, ::Ice::FormatType::CompactFormat, [], [], [::Test::T_SBase, false, 0], [])
        TestIntfPrx_mixin::OP_SUnknownAsObject = ::Ice::__defineOperation('SUnknownAsObject', ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, [], [], [::Ice::T_Value, false, 0], [])
        TestIntfPrx_mixin::OP_checkSUnknown = ::Ice::__defineOperation('checkSUnknown', ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, [[::Ice::T_Value, false, 0]], [], nil, [])
        TestIntfPrx_mixin::OP_oneElementCycle = ::Ice::__defineOperation('oneElementCycle', ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, [], [], [::Test::T_B, false, 0], [])
        TestIntfPrx_mixin::OP_twoElementCycle = ::Ice::__defineOperation('twoElementCycle', ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, [], [], [::Test::T_B, false, 0], [])
        TestIntfPrx_mixin::OP_D1AsB = ::Ice::__defineOperation('D1AsB', ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, [], [], [::Test::T_B, false, 0], [])
        TestIntfPrx_mixin::OP_D1AsD1 = ::Ice::__defineOperation('D1AsD1', ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, [], [], [::Test::T_D1, false, 0], [])
        TestIntfPrx_mixin::OP_D2AsB = ::Ice::__defineOperation('D2AsB', ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, [], [], [::Test::T_B, false, 0], [])
        TestIntfPrx_mixin::OP_paramTest1 = ::Ice::__defineOperation('paramTest1', ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, [], [[::Test::T_B, false, 0], [::Test::T_B, false, 0]], nil, [])
        TestIntfPrx_mixin::OP_paramTest2 = ::Ice::__defineOperation('paramTest2', ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, [], [[::Test::T_B, false, 0], [::Test::T_B, false, 0]], nil, [])
        TestIntfPrx_mixin::OP_paramTest3 = ::Ice::__defineOperation('paramTest3', ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, [], [[::Test::T_B, false, 0], [::Test::T_B, false, 0]], [::Test::T_B, false, 0], [])
        TestIntfPrx_mixin::OP_paramTest4 = ::Ice::__defineOperation('paramTest4', ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, [], [[::Test::T_B, false, 0]], [::Test::T_B, false, 0], [])
        TestIntfPrx_mixin::OP_returnTest1 = ::Ice::__defineOperation('returnTest1', ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, [], [[::Test::T_B, false, 0], [::Test::T_B, false, 0]], [::Test::T_B, false, 0], [])
        TestIntfPrx_mixin::OP_returnTest2 = ::Ice::__defineOperation('returnTest2', ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, [], [[::Test::T_B, false, 0], [::Test::T_B, false, 0]], [::Test::T_B, false, 0], [])
        TestIntfPrx_mixin::OP_returnTest3 = ::Ice::__defineOperation('returnTest3', ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, [[::Test::T_B, false, 0], [::Test::T_B, false, 0]], [], [::Test::T_B, false, 0], [])
        TestIntfPrx_mixin::OP_sequenceTest = ::Ice::__defineOperation('sequenceTest', ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, [[::Test::T_SS1, false, 0], [::Test::T_SS2, false, 0]], [], [::Test::T_SS3, false, 0], [])
        TestIntfPrx_mixin::OP_dictionaryTest = ::Ice::__defineOperation('dictionaryTest', ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, [[::Test::T_BDict, false, 0]], [[::Test::T_BDict, false, 0]], [::Test::T_BDict, false, 0], [])
        TestIntfPrx_mixin::OP_exchangePBase = ::Ice::__defineOperation('exchangePBase', ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, [[::Test::T_PBase, false, 0]], [], [::Test::T_PBase, false, 0], [])
        TestIntfPrx_mixin::OP_PBSUnknownAsPreserved = ::Ice::__defineOperation('PBSUnknownAsPreserved', ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, [], [], [::Test::T_Preserved, false, 0], [])
        TestIntfPrx_mixin::OP_checkPBSUnknown = ::Ice::__defineOperation('checkPBSUnknown', ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, [[::Test::T_Preserved, false, 0]], [], nil, [])
        TestIntfPrx_mixin::OP_PBSUnknownAsPreservedWithGraph = ::Ice::__defineOperation('PBSUnknownAsPreservedWithGraph', ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, [], [], [::Test::T_Preserved, false, 0], [])
        TestIntfPrx_mixin::OP_checkPBSUnknownWithGraph = ::Ice::__defineOperation('checkPBSUnknownWithGraph', ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, [[::Test::T_Preserved, false, 0]], [], nil, [])
        TestIntfPrx_mixin::OP_PBSUnknown2AsPreservedWithGraph = ::Ice::__defineOperation('PBSUnknown2AsPreservedWithGraph', ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, [], [], [::Test::T_Preserved, false, 0], [])
        TestIntfPrx_mixin::OP_checkPBSUnknown2WithGraph = ::Ice::__defineOperation('checkPBSUnknown2WithGraph', ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, [[::Test::T_Preserved, false, 0]], [], nil, [])
        TestIntfPrx_mixin::OP_exchangePNode = ::Ice::__defineOperation('exchangePNode', ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, [[::Test::T_PNode, false, 0]], [], [::Test::T_PNode, false, 0], [])
        TestIntfPrx_mixin::OP_throwBaseAsBase = ::Ice::__defineOperation('throwBaseAsBase', ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, [], [], nil, [::Test::T_BaseException])
        TestIntfPrx_mixin::OP_throwDerivedAsBase = ::Ice::__defineOperation('throwDerivedAsBase', ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, [], [], nil, [::Test::T_BaseException])
        TestIntfPrx_mixin::OP_throwDerivedAsDerived = ::Ice::__defineOperation('throwDerivedAsDerived', ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, [], [], nil, [::Test::T_DerivedException])
        TestIntfPrx_mixin::OP_throwUnknownDerivedAsBase = ::Ice::__defineOperation('throwUnknownDerivedAsBase', ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, [], [], nil, [::Test::T_BaseException])
        TestIntfPrx_mixin::OP_throwPreservedException = ::Ice::__defineOperation('throwPreservedException', ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, [], [], nil, [::Test::T_PreservedException])
        TestIntfPrx_mixin::OP_useForward = ::Ice::__defineOperation('useForward', ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, [], [[::Test::T_Forward, false, 0]], nil, [])
        TestIntfPrx_mixin::OP_shutdown = ::Ice::__defineOperation('shutdown', ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, [], [], nil, [])
    end

    if not defined?(::Test::T_Hidden)
        T_Hidden = ::Ice::__declareClass('::Test::Hidden')
    end

    if not defined?(::Test::Hidden)
        class Hidden < ::Ice::Value

            def initialize(f=nil)
                @f = f
            end

            attr_accessor :f
        end

        T_Hidden.defineClass(Hidden, -1, false, nil, [['f', ::Test::T_Forward, false, 0]])
    end

    if not defined?(::Test::Forward)
        class Forward < ::Ice::Value

            def initialize(h=nil)
                @h = h
            end

            attr_accessor :h
        end

        T_Forward.defineClass(Forward, -1, false, nil, [['h', ::Test::T_Hidden, false, 0]])
    end
end
