# encoding: utf-8
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.9
#
# <auto-generated>
#
# Generated from file `Test.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

require 'Ice'

module ::Test

    if not defined?(::Test::T_AByteS)
        T_AByteS = ::Ice::__defineSequence('::Test::AByteS', ::Ice::T_byte)
    end

    if not defined?(::Test::T_LByteS)
        T_LByteS = ::Ice::__defineSequence('::Test::LByteS', ::Ice::T_byte)
    end

    if not defined?(::Test::T_KByteS)
        T_KByteS = ::Ice::__defineSequence('::Test::KByteS', ::Ice::T_byte)
    end

    if not defined?(::Test::T_QByteS)
        T_QByteS = ::Ice::__defineSequence('::Test::QByteS', ::Ice::T_byte)
    end

    if not defined?(::Test::T_SByteS)
        T_SByteS = ::Ice::__defineSequence('::Test::SByteS', ::Ice::T_byte)
    end

    if not defined?(::Test::T_CByteS)
        T_CByteS = ::Ice::__defineSequence('::Test::CByteS', ::Ice::T_byte)
    end

    if not defined?(::Test::T_ABoolS)
        T_ABoolS = ::Ice::__defineSequence('::Test::ABoolS', ::Ice::T_bool)
    end

    if not defined?(::Test::T_LBoolS)
        T_LBoolS = ::Ice::__defineSequence('::Test::LBoolS', ::Ice::T_bool)
    end

    if not defined?(::Test::T_KBoolS)
        T_KBoolS = ::Ice::__defineSequence('::Test::KBoolS', ::Ice::T_bool)
    end

    if not defined?(::Test::T_QBoolS)
        T_QBoolS = ::Ice::__defineSequence('::Test::QBoolS', ::Ice::T_bool)
    end

    if not defined?(::Test::T_SBoolS)
        T_SBoolS = ::Ice::__defineSequence('::Test::SBoolS', ::Ice::T_bool)
    end

    if not defined?(::Test::T_CBoolS)
        T_CBoolS = ::Ice::__defineSequence('::Test::CBoolS', ::Ice::T_bool)
    end

    if not defined?(::Test::T_AShortS)
        T_AShortS = ::Ice::__defineSequence('::Test::AShortS', ::Ice::T_short)
    end

    if not defined?(::Test::T_LShortS)
        T_LShortS = ::Ice::__defineSequence('::Test::LShortS', ::Ice::T_short)
    end

    if not defined?(::Test::T_KShortS)
        T_KShortS = ::Ice::__defineSequence('::Test::KShortS', ::Ice::T_short)
    end

    if not defined?(::Test::T_QShortS)
        T_QShortS = ::Ice::__defineSequence('::Test::QShortS', ::Ice::T_short)
    end

    if not defined?(::Test::T_SShortS)
        T_SShortS = ::Ice::__defineSequence('::Test::SShortS', ::Ice::T_short)
    end

    if not defined?(::Test::T_CShortS)
        T_CShortS = ::Ice::__defineSequence('::Test::CShortS', ::Ice::T_short)
    end

    if not defined?(::Test::T_AIntS)
        T_AIntS = ::Ice::__defineSequence('::Test::AIntS', ::Ice::T_int)
    end

    if not defined?(::Test::T_LIntS)
        T_LIntS = ::Ice::__defineSequence('::Test::LIntS', ::Ice::T_int)
    end

    if not defined?(::Test::T_KIntS)
        T_KIntS = ::Ice::__defineSequence('::Test::KIntS', ::Ice::T_int)
    end

    if not defined?(::Test::T_QIntS)
        T_QIntS = ::Ice::__defineSequence('::Test::QIntS', ::Ice::T_int)
    end

    if not defined?(::Test::T_SIntS)
        T_SIntS = ::Ice::__defineSequence('::Test::SIntS', ::Ice::T_int)
    end

    if not defined?(::Test::T_CIntS)
        T_CIntS = ::Ice::__defineSequence('::Test::CIntS', ::Ice::T_int)
    end

    if not defined?(::Test::T_ALongS)
        T_ALongS = ::Ice::__defineSequence('::Test::ALongS', ::Ice::T_long)
    end

    if not defined?(::Test::T_LLongS)
        T_LLongS = ::Ice::__defineSequence('::Test::LLongS', ::Ice::T_long)
    end

    if not defined?(::Test::T_KLongS)
        T_KLongS = ::Ice::__defineSequence('::Test::KLongS', ::Ice::T_long)
    end

    if not defined?(::Test::T_QLongS)
        T_QLongS = ::Ice::__defineSequence('::Test::QLongS', ::Ice::T_long)
    end

    if not defined?(::Test::T_SLongS)
        T_SLongS = ::Ice::__defineSequence('::Test::SLongS', ::Ice::T_long)
    end

    if not defined?(::Test::T_CLongS)
        T_CLongS = ::Ice::__defineSequence('::Test::CLongS', ::Ice::T_long)
    end

    if not defined?(::Test::T_AFloatS)
        T_AFloatS = ::Ice::__defineSequence('::Test::AFloatS', ::Ice::T_float)
    end

    if not defined?(::Test::T_LFloatS)
        T_LFloatS = ::Ice::__defineSequence('::Test::LFloatS', ::Ice::T_float)
    end

    if not defined?(::Test::T_KFloatS)
        T_KFloatS = ::Ice::__defineSequence('::Test::KFloatS', ::Ice::T_float)
    end

    if not defined?(::Test::T_QFloatS)
        T_QFloatS = ::Ice::__defineSequence('::Test::QFloatS', ::Ice::T_float)
    end

    if not defined?(::Test::T_SFloatS)
        T_SFloatS = ::Ice::__defineSequence('::Test::SFloatS', ::Ice::T_float)
    end

    if not defined?(::Test::T_CFloatS)
        T_CFloatS = ::Ice::__defineSequence('::Test::CFloatS', ::Ice::T_float)
    end

    if not defined?(::Test::T_ADoubleS)
        T_ADoubleS = ::Ice::__defineSequence('::Test::ADoubleS', ::Ice::T_double)
    end

    if not defined?(::Test::T_LDoubleS)
        T_LDoubleS = ::Ice::__defineSequence('::Test::LDoubleS', ::Ice::T_double)
    end

    if not defined?(::Test::T_KDoubleS)
        T_KDoubleS = ::Ice::__defineSequence('::Test::KDoubleS', ::Ice::T_double)
    end

    if not defined?(::Test::T_QDoubleS)
        T_QDoubleS = ::Ice::__defineSequence('::Test::QDoubleS', ::Ice::T_double)
    end

    if not defined?(::Test::T_SDoubleS)
        T_SDoubleS = ::Ice::__defineSequence('::Test::SDoubleS', ::Ice::T_double)
    end

    if not defined?(::Test::T_CDoubleS)
        T_CDoubleS = ::Ice::__defineSequence('::Test::CDoubleS', ::Ice::T_double)
    end

    if not defined?(::Test::T_AStringS)
        T_AStringS = ::Ice::__defineSequence('::Test::AStringS', ::Ice::T_string)
    end

    if not defined?(::Test::T_LStringS)
        T_LStringS = ::Ice::__defineSequence('::Test::LStringS', ::Ice::T_string)
    end

    if not defined?(::Test::T_KStringS)
        T_KStringS = ::Ice::__defineSequence('::Test::KStringS', ::Ice::T_string)
    end

    if not defined?(::Test::T_QStringS)
        T_QStringS = ::Ice::__defineSequence('::Test::QStringS', ::Ice::T_string)
    end

    if not defined?(::Test::T_SStringS)
        T_SStringS = ::Ice::__defineSequence('::Test::SStringS', ::Ice::T_string)
    end

    if not defined?(::Test::T_CStringS)
        T_CStringS = ::Ice::__defineSequence('::Test::CStringS', ::Ice::T_string)
    end

    if not defined?(::Test::T_AObjectS)
        T_AObjectS = ::Ice::__defineSequence('::Test::AObjectS', ::Ice::T_Value)
    end

    if not defined?(::Test::T_LObjectS)
        T_LObjectS = ::Ice::__defineSequence('::Test::LObjectS', ::Ice::T_Value)
    end

    if not defined?(::Test::T_CObjectS)
        T_CObjectS = ::Ice::__defineSequence('::Test::CObjectS', ::Ice::T_Value)
    end

    if not defined?(::Test::T_AObjectPrxS)
        T_AObjectPrxS = ::Ice::__defineSequence('::Test::AObjectPrxS', ::Ice::T_ObjectPrx)
    end

    if not defined?(::Test::T_LObjectPrxS)
        T_LObjectPrxS = ::Ice::__defineSequence('::Test::LObjectPrxS', ::Ice::T_ObjectPrx)
    end

    if not defined?(::Test::T_KObjectPrxS)
        T_KObjectPrxS = ::Ice::__defineSequence('::Test::KObjectPrxS', ::Ice::T_ObjectPrx)
    end

    if not defined?(::Test::T_QObjectPrxS)
        T_QObjectPrxS = ::Ice::__defineSequence('::Test::QObjectPrxS', ::Ice::T_ObjectPrx)
    end

    if not defined?(::Test::T_SObjectPrxS)
        T_SObjectPrxS = ::Ice::__defineSequence('::Test::SObjectPrxS', ::Ice::T_ObjectPrx)
    end

    if not defined?(::Test::T_CObjectPrxS)
        T_CObjectPrxS = ::Ice::__defineSequence('::Test::CObjectPrxS', ::Ice::T_ObjectPrx)
    end

    if not defined?(::Test::S)
        class S
            include ::Ice::Inspect_mixin
            def initialize(i=0)
                @i = i
            end

            def hash
                _h = 0
                _h = 5 * _h + @i.hash
                _h % 0x7fffffff
            end

            def ==(other)
                return false if !other.is_a? ::Test::S or
                    @i != other.i
                true
            end

            def eql?(other)
                return other.class == self.class && other == self
            end

            attr_accessor :i
        end

        T_S = ::Ice::__defineStruct('::Test::S', S, [["i", ::Ice::T_int]])
    end

    if not defined?(::Test::T_AStructS)
        T_AStructS = ::Ice::__defineSequence('::Test::AStructS', ::Test::T_S)
    end

    if not defined?(::Test::T_LStructS)
        T_LStructS = ::Ice::__defineSequence('::Test::LStructS', ::Test::T_S)
    end

    if not defined?(::Test::T_KStructS)
        T_KStructS = ::Ice::__defineSequence('::Test::KStructS', ::Test::T_S)
    end

    if not defined?(::Test::T_QStructS)
        T_QStructS = ::Ice::__defineSequence('::Test::QStructS', ::Test::T_S)
    end

    if not defined?(::Test::T_SStructS)
        T_SStructS = ::Ice::__defineSequence('::Test::SStructS', ::Test::T_S)
    end

    if not defined?(::Test::T_CStructS)
        T_CStructS = ::Ice::__defineSequence('::Test::CStructS', ::Test::T_S)
    end

    if not defined?(::Test::SD)
        class SD
            include ::Ice::Inspect_mixin
            def initialize(i=1)
                @i = i
            end

            def hash
                _h = 0
                _h = 5 * _h + @i.hash
                _h % 0x7fffffff
            end

            def ==(other)
                return false if !other.is_a? ::Test::SD or
                    @i != other.i
                true
            end

            def eql?(other)
                return other.class == self.class && other == self
            end

            attr_accessor :i
        end

        T_SD = ::Ice::__defineStruct('::Test::SD', SD, [["i", ::Ice::T_int]])
    end

    if not defined?(::Test::T_AStructSD)
        T_AStructSD = ::Ice::__defineSequence('::Test::AStructSD', ::Test::T_SD)
    end

    if not defined?(::Test::T_LStructSD)
        T_LStructSD = ::Ice::__defineSequence('::Test::LStructSD', ::Test::T_SD)
    end

    if not defined?(::Test::T_KStructSD)
        T_KStructSD = ::Ice::__defineSequence('::Test::KStructSD', ::Test::T_SD)
    end

    if not defined?(::Test::T_QStructSD)
        T_QStructSD = ::Ice::__defineSequence('::Test::QStructSD', ::Test::T_SD)
    end

    if not defined?(::Test::T_SStructSD)
        T_SStructSD = ::Ice::__defineSequence('::Test::SStructSD', ::Test::T_SD)
    end

    if not defined?(::Test::T_CStructSD)
        T_CStructSD = ::Ice::__defineSequence('::Test::CStructSD', ::Test::T_SD)
    end

    if not defined?(::Test::CV_Mixin)

        module ::Test::CV_Mixin
        end
        class CV < ::Ice::Value

            def initialize(i=0)
                @i = i
            end

            attr_accessor :i
        end

        if not defined?(::Test::T_CV)
            T_CV = ::Ice::__declareClass('::Test::CV')
        end

        T_CV.defineClass(CV, -1, false, false, nil, [['i', ::Ice::T_int, false, 0]])
    end

    if not defined?(::Test::T_ACVS)
        T_ACVS = ::Ice::__defineSequence('::Test::ACVS', ::Test::T_CV)
    end

    if not defined?(::Test::T_LCVS)
        T_LCVS = ::Ice::__defineSequence('::Test::LCVS', ::Test::T_CV)
    end

    if not defined?(::Test::I_Mixin)

        module ::Test::I_Mixin
        end
        module IPrx_mixin
        end

        class IPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include IPrx_mixin
        end

        if not defined?(::Test::T_IPrx)
            T_I = ::Ice::__declareClass('::Test::I')
            T_IPrx = ::Ice::__declareProxy('::Test::I')
        end

        T_I.defineClass(::Ice::Value, -1, false, true, nil, [])

        T_IPrx.defineProxy(IPrx, nil, [])
    end

    if not defined?(::Test::T_AIPrxS)
        T_AIPrxS = ::Ice::__defineSequence('::Test::AIPrxS', ::Test::T_IPrx)
    end

    if not defined?(::Test::T_LIPrxS)
        T_LIPrxS = ::Ice::__defineSequence('::Test::LIPrxS', ::Test::T_IPrx)
    end

    if not defined?(::Test::T_KIPrxS)
        T_KIPrxS = ::Ice::__defineSequence('::Test::KIPrxS', ::Test::T_IPrx)
    end

    if not defined?(::Test::T_QIPrxS)
        T_QIPrxS = ::Ice::__defineSequence('::Test::QIPrxS', ::Test::T_IPrx)
    end

    if not defined?(::Test::T_SIPrxS)
        T_SIPrxS = ::Ice::__defineSequence('::Test::SIPrxS', ::Test::T_IPrx)
    end

    if not defined?(::Test::T_CIPrxS)
        T_CIPrxS = ::Ice::__defineSequence('::Test::CIPrxS', ::Test::T_IPrx)
    end

    if not defined?(::Test::CR_Mixin)

        module ::Test::CR_Mixin
        end
        class CR < ::Ice::Value

            def initialize(v=nil)
                @v = v
            end

            attr_accessor :v
        end

        if not defined?(::Test::T_CR)
            T_CR = ::Ice::__declareClass('::Test::CR')
        end

        T_CR.defineClass(CR, -1, false, false, nil, [['v', ::Test::T_CV, false, 0]])
    end

    if not defined?(::Test::T_ACRS)
        T_ACRS = ::Ice::__defineSequence('::Test::ACRS', ::Test::T_CR)
    end

    if not defined?(::Test::T_LCRS)
        T_LCRS = ::Ice::__defineSequence('::Test::LCRS', ::Test::T_CR)
    end

    if not defined?(::Test::T_CCRS)
        T_CCRS = ::Ice::__defineSequence('::Test::CCRS', ::Test::T_CR)
    end

    if not defined?(::Test::En)
        class En
            include Comparable

            def initialize(name, value)
                @name = name
                @value = value
            end

            def En.from_int(val)
                @@_enumerators[val]
            end

            def to_s
                @name
            end

            def to_i
                @value
            end

            def <=>(other)
                other.is_a?(En) or raise ArgumentError, "value must be a En"
                @value <=> other.to_i
            end

            def hash
                @value.hash
            end

            def En.each(&block)
                @@_enumerators.each_value(&block)
            end

            A = En.new("A", 0)
            B = En.new("B", 1)
            C = En.new("C", 2)

            @@_enumerators = {0=>A, 1=>B, 2=>C}

            def En._enumerators
                @@_enumerators
            end

            private_class_method :new
        end

        T_En = ::Ice::__defineEnum('::Test::En', En, En::_enumerators)
    end

    if not defined?(::Test::T_AEnS)
        T_AEnS = ::Ice::__defineSequence('::Test::AEnS', ::Test::T_En)
    end

    if not defined?(::Test::T_LEnS)
        T_LEnS = ::Ice::__defineSequence('::Test::LEnS', ::Test::T_En)
    end

    if not defined?(::Test::T_KEnS)
        T_KEnS = ::Ice::__defineSequence('::Test::KEnS', ::Test::T_En)
    end

    if not defined?(::Test::T_QEnS)
        T_QEnS = ::Ice::__defineSequence('::Test::QEnS', ::Test::T_En)
    end

    if not defined?(::Test::T_SEnS)
        T_SEnS = ::Ice::__defineSequence('::Test::SEnS', ::Test::T_En)
    end

    if not defined?(::Test::T_CEnS)
        T_CEnS = ::Ice::__defineSequence('::Test::CEnS', ::Test::T_En)
    end

    if not defined?(::Test::T_CustomIntS)
        T_CustomIntS = ::Ice::__defineSequence('::Test::CustomIntS', ::Ice::T_int)
    end

    if not defined?(::Test::T_CustomCVS)
        T_CustomCVS = ::Ice::__defineSequence('::Test::CustomCVS', ::Test::T_CV)
    end

    if not defined?(::Test::T_CustomIntSS)
        T_CustomIntSS = ::Ice::__defineSequence('::Test::CustomIntSS', ::Test::T_CustomIntS)
    end

    if not defined?(::Test::T_CustomCVSS)
        T_CustomCVSS = ::Ice::__defineSequence('::Test::CustomCVSS', ::Test::T_CustomCVS)
    end

    if not defined?(::Test::T_SerialSmall)
        T_SerialSmall = ::Ice::__defineSequence('::Test::SerialSmall', ::Ice::T_byte)
    end

    if not defined?(::Test::T_SerialLarge)
        T_SerialLarge = ::Ice::__defineSequence('::Test::SerialLarge', ::Ice::T_byte)
    end

    if not defined?(::Test::T_SerialStruct)
        T_SerialStruct = ::Ice::__defineSequence('::Test::SerialStruct', ::Ice::T_byte)
    end

    if not defined?(::Test::MyClass_Mixin)

        module ::Test::MyClass_Mixin
        end
        module MyClassPrx_mixin

            def shutdown(context=nil)
                MyClassPrx_mixin::OP_shutdown.invoke(self, [], context)
            end

            def opAByteS(i, context=nil)
                MyClassPrx_mixin::OP_opAByteS.invoke(self, [i], context)
            end

            def opLByteS(i, context=nil)
                MyClassPrx_mixin::OP_opLByteS.invoke(self, [i], context)
            end

            def opKByteS(i, context=nil)
                MyClassPrx_mixin::OP_opKByteS.invoke(self, [i], context)
            end

            def opQByteS(i, context=nil)
                MyClassPrx_mixin::OP_opQByteS.invoke(self, [i], context)
            end

            def opSByteS(i, context=nil)
                MyClassPrx_mixin::OP_opSByteS.invoke(self, [i], context)
            end

            def opABoolS(i, context=nil)
                MyClassPrx_mixin::OP_opABoolS.invoke(self, [i], context)
            end

            def opLBoolS(i, context=nil)
                MyClassPrx_mixin::OP_opLBoolS.invoke(self, [i], context)
            end

            def opKBoolS(i, context=nil)
                MyClassPrx_mixin::OP_opKBoolS.invoke(self, [i], context)
            end

            def opQBoolS(i, context=nil)
                MyClassPrx_mixin::OP_opQBoolS.invoke(self, [i], context)
            end

            def opSBoolS(i, context=nil)
                MyClassPrx_mixin::OP_opSBoolS.invoke(self, [i], context)
            end

            def opAShortS(i, context=nil)
                MyClassPrx_mixin::OP_opAShortS.invoke(self, [i], context)
            end

            def opLShortS(i, context=nil)
                MyClassPrx_mixin::OP_opLShortS.invoke(self, [i], context)
            end

            def opKShortS(i, context=nil)
                MyClassPrx_mixin::OP_opKShortS.invoke(self, [i], context)
            end

            def opQShortS(i, context=nil)
                MyClassPrx_mixin::OP_opQShortS.invoke(self, [i], context)
            end

            def opSShortS(i, context=nil)
                MyClassPrx_mixin::OP_opSShortS.invoke(self, [i], context)
            end

            def opAIntS(i, context=nil)
                MyClassPrx_mixin::OP_opAIntS.invoke(self, [i], context)
            end

            def opLIntS(i, context=nil)
                MyClassPrx_mixin::OP_opLIntS.invoke(self, [i], context)
            end

            def opKIntS(i, context=nil)
                MyClassPrx_mixin::OP_opKIntS.invoke(self, [i], context)
            end

            def opQIntS(i, context=nil)
                MyClassPrx_mixin::OP_opQIntS.invoke(self, [i], context)
            end

            def opSIntS(i, context=nil)
                MyClassPrx_mixin::OP_opSIntS.invoke(self, [i], context)
            end

            def opALongS(i, context=nil)
                MyClassPrx_mixin::OP_opALongS.invoke(self, [i], context)
            end

            def opLLongS(i, context=nil)
                MyClassPrx_mixin::OP_opLLongS.invoke(self, [i], context)
            end

            def opKLongS(i, context=nil)
                MyClassPrx_mixin::OP_opKLongS.invoke(self, [i], context)
            end

            def opQLongS(i, context=nil)
                MyClassPrx_mixin::OP_opQLongS.invoke(self, [i], context)
            end

            def opSLongS(i, context=nil)
                MyClassPrx_mixin::OP_opSLongS.invoke(self, [i], context)
            end

            def opAFloatS(i, context=nil)
                MyClassPrx_mixin::OP_opAFloatS.invoke(self, [i], context)
            end

            def opLFloatS(i, context=nil)
                MyClassPrx_mixin::OP_opLFloatS.invoke(self, [i], context)
            end

            def opKFloatS(i, context=nil)
                MyClassPrx_mixin::OP_opKFloatS.invoke(self, [i], context)
            end

            def opQFloatS(i, context=nil)
                MyClassPrx_mixin::OP_opQFloatS.invoke(self, [i], context)
            end

            def opSFloatS(i, context=nil)
                MyClassPrx_mixin::OP_opSFloatS.invoke(self, [i], context)
            end

            def opADoubleS(i, context=nil)
                MyClassPrx_mixin::OP_opADoubleS.invoke(self, [i], context)
            end

            def opLDoubleS(i, context=nil)
                MyClassPrx_mixin::OP_opLDoubleS.invoke(self, [i], context)
            end

            def opKDoubleS(i, context=nil)
                MyClassPrx_mixin::OP_opKDoubleS.invoke(self, [i], context)
            end

            def opQDoubleS(i, context=nil)
                MyClassPrx_mixin::OP_opQDoubleS.invoke(self, [i], context)
            end

            def opSDoubleS(i, context=nil)
                MyClassPrx_mixin::OP_opSDoubleS.invoke(self, [i], context)
            end

            def opAStringS(i, context=nil)
                MyClassPrx_mixin::OP_opAStringS.invoke(self, [i], context)
            end

            def opLStringS(i, context=nil)
                MyClassPrx_mixin::OP_opLStringS.invoke(self, [i], context)
            end

            def opKStringS(i, context=nil)
                MyClassPrx_mixin::OP_opKStringS.invoke(self, [i], context)
            end

            def opQStringS(i, context=nil)
                MyClassPrx_mixin::OP_opQStringS.invoke(self, [i], context)
            end

            def opSStringS(i, context=nil)
                MyClassPrx_mixin::OP_opSStringS.invoke(self, [i], context)
            end

            def opAObjectS(i, context=nil)
                MyClassPrx_mixin::OP_opAObjectS.invoke(self, [i], context)
            end

            def opLObjectS(i, context=nil)
                MyClassPrx_mixin::OP_opLObjectS.invoke(self, [i], context)
            end

            def opAObjectPrxS(i, context=nil)
                MyClassPrx_mixin::OP_opAObjectPrxS.invoke(self, [i], context)
            end

            def opLObjectPrxS(i, context=nil)
                MyClassPrx_mixin::OP_opLObjectPrxS.invoke(self, [i], context)
            end

            def opKObjectPrxS(i, context=nil)
                MyClassPrx_mixin::OP_opKObjectPrxS.invoke(self, [i], context)
            end

            def opQObjectPrxS(i, context=nil)
                MyClassPrx_mixin::OP_opQObjectPrxS.invoke(self, [i], context)
            end

            def opSObjectPrxS(i, context=nil)
                MyClassPrx_mixin::OP_opSObjectPrxS.invoke(self, [i], context)
            end

            def opAStructS(i, context=nil)
                MyClassPrx_mixin::OP_opAStructS.invoke(self, [i], context)
            end

            def opLStructS(i, context=nil)
                MyClassPrx_mixin::OP_opLStructS.invoke(self, [i], context)
            end

            def opKStructS(i, context=nil)
                MyClassPrx_mixin::OP_opKStructS.invoke(self, [i], context)
            end

            def opQStructS(i, context=nil)
                MyClassPrx_mixin::OP_opQStructS.invoke(self, [i], context)
            end

            def opSStructS(i, context=nil)
                MyClassPrx_mixin::OP_opSStructS.invoke(self, [i], context)
            end

            def opAStructSD(i, context=nil)
                MyClassPrx_mixin::OP_opAStructSD.invoke(self, [i], context)
            end

            def opLStructSD(i, context=nil)
                MyClassPrx_mixin::OP_opLStructSD.invoke(self, [i], context)
            end

            def opKStructSD(i, context=nil)
                MyClassPrx_mixin::OP_opKStructSD.invoke(self, [i], context)
            end

            def opQStructSD(i, context=nil)
                MyClassPrx_mixin::OP_opQStructSD.invoke(self, [i], context)
            end

            def opSStructSD(i, context=nil)
                MyClassPrx_mixin::OP_opSStructSD.invoke(self, [i], context)
            end

            def opACVS(i, context=nil)
                MyClassPrx_mixin::OP_opACVS.invoke(self, [i], context)
            end

            def opLCVS(i, context=nil)
                MyClassPrx_mixin::OP_opLCVS.invoke(self, [i], context)
            end

            def opACRS(i, context=nil)
                MyClassPrx_mixin::OP_opACRS.invoke(self, [i], context)
            end

            def opLCRS(i, context=nil)
                MyClassPrx_mixin::OP_opLCRS.invoke(self, [i], context)
            end

            def opAEnS(i, context=nil)
                MyClassPrx_mixin::OP_opAEnS.invoke(self, [i], context)
            end

            def opLEnS(i, context=nil)
                MyClassPrx_mixin::OP_opLEnS.invoke(self, [i], context)
            end

            def opKEnS(i, context=nil)
                MyClassPrx_mixin::OP_opKEnS.invoke(self, [i], context)
            end

            def opQEnS(i, context=nil)
                MyClassPrx_mixin::OP_opQEnS.invoke(self, [i], context)
            end

            def opSEnS(i, context=nil)
                MyClassPrx_mixin::OP_opSEnS.invoke(self, [i], context)
            end

            def opAIPrxS(i, context=nil)
                MyClassPrx_mixin::OP_opAIPrxS.invoke(self, [i], context)
            end

            def opLIPrxS(i, context=nil)
                MyClassPrx_mixin::OP_opLIPrxS.invoke(self, [i], context)
            end

            def opKIPrxS(i, context=nil)
                MyClassPrx_mixin::OP_opKIPrxS.invoke(self, [i], context)
            end

            def opQIPrxS(i, context=nil)
                MyClassPrx_mixin::OP_opQIPrxS.invoke(self, [i], context)
            end

            def opSIPrxS(i, context=nil)
                MyClassPrx_mixin::OP_opSIPrxS.invoke(self, [i], context)
            end

            def opCustomIntS(i, context=nil)
                MyClassPrx_mixin::OP_opCustomIntS.invoke(self, [i], context)
            end

            def opCustomCVS(i, context=nil)
                MyClassPrx_mixin::OP_opCustomCVS.invoke(self, [i], context)
            end

            def opCustomIntSS(i, context=nil)
                MyClassPrx_mixin::OP_opCustomIntSS.invoke(self, [i], context)
            end

            def opCustomCVSS(i, context=nil)
                MyClassPrx_mixin::OP_opCustomCVSS.invoke(self, [i], context)
            end

            def opSerialSmallCSharp(i, context=nil)
                MyClassPrx_mixin::OP_opSerialSmallCSharp.invoke(self, [i], context)
            end

            def opSerialLargeCSharp(i, context=nil)
                MyClassPrx_mixin::OP_opSerialLargeCSharp.invoke(self, [i], context)
            end

            def opSerialStructCSharp(i, context=nil)
                MyClassPrx_mixin::OP_opSerialStructCSharp.invoke(self, [i], context)
            end
        end

        class MyClassPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include MyClassPrx_mixin
        end

        if not defined?(::Test::T_MyClassPrx)
            T_MyClass = ::Ice::__declareClass('::Test::MyClass')
            T_MyClassPrx = ::Ice::__declareProxy('::Test::MyClass')
        end

        T_MyClass.defineClass(::Ice::Value, -1, false, true, nil, [])

        T_MyClassPrx.defineProxy(MyClassPrx, nil, [])

        MyClassPrx_mixin::OP_shutdown = ::Ice::__defineOperation('shutdown', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        MyClassPrx_mixin::OP_opAByteS = ::Ice::__defineOperation('opAByteS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_AByteS, false, 0]], [[::Test::T_AByteS, false, 0]], [::Test::T_AByteS, false, 0], [])
        MyClassPrx_mixin::OP_opLByteS = ::Ice::__defineOperation('opLByteS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_LByteS, false, 0]], [[::Test::T_LByteS, false, 0]], [::Test::T_LByteS, false, 0], [])
        MyClassPrx_mixin::OP_opKByteS = ::Ice::__defineOperation('opKByteS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_KByteS, false, 0]], [[::Test::T_KByteS, false, 0]], [::Test::T_KByteS, false, 0], [])
        MyClassPrx_mixin::OP_opQByteS = ::Ice::__defineOperation('opQByteS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_QByteS, false, 0]], [[::Test::T_QByteS, false, 0]], [::Test::T_QByteS, false, 0], [])
        MyClassPrx_mixin::OP_opSByteS = ::Ice::__defineOperation('opSByteS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_SByteS, false, 0]], [[::Test::T_SByteS, false, 0]], [::Test::T_SByteS, false, 0], [])
        MyClassPrx_mixin::OP_opABoolS = ::Ice::__defineOperation('opABoolS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_ABoolS, false, 0]], [[::Test::T_ABoolS, false, 0]], [::Test::T_ABoolS, false, 0], [])
        MyClassPrx_mixin::OP_opLBoolS = ::Ice::__defineOperation('opLBoolS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_LBoolS, false, 0]], [[::Test::T_LBoolS, false, 0]], [::Test::T_LBoolS, false, 0], [])
        MyClassPrx_mixin::OP_opKBoolS = ::Ice::__defineOperation('opKBoolS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_KBoolS, false, 0]], [[::Test::T_KBoolS, false, 0]], [::Test::T_KBoolS, false, 0], [])
        MyClassPrx_mixin::OP_opQBoolS = ::Ice::__defineOperation('opQBoolS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_QBoolS, false, 0]], [[::Test::T_QBoolS, false, 0]], [::Test::T_QBoolS, false, 0], [])
        MyClassPrx_mixin::OP_opSBoolS = ::Ice::__defineOperation('opSBoolS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_SBoolS, false, 0]], [[::Test::T_SBoolS, false, 0]], [::Test::T_SBoolS, false, 0], [])
        MyClassPrx_mixin::OP_opAShortS = ::Ice::__defineOperation('opAShortS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_AShortS, false, 0]], [[::Test::T_AShortS, false, 0]], [::Test::T_AShortS, false, 0], [])
        MyClassPrx_mixin::OP_opLShortS = ::Ice::__defineOperation('opLShortS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_LShortS, false, 0]], [[::Test::T_LShortS, false, 0]], [::Test::T_LShortS, false, 0], [])
        MyClassPrx_mixin::OP_opKShortS = ::Ice::__defineOperation('opKShortS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_KShortS, false, 0]], [[::Test::T_KShortS, false, 0]], [::Test::T_KShortS, false, 0], [])
        MyClassPrx_mixin::OP_opQShortS = ::Ice::__defineOperation('opQShortS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_QShortS, false, 0]], [[::Test::T_QShortS, false, 0]], [::Test::T_QShortS, false, 0], [])
        MyClassPrx_mixin::OP_opSShortS = ::Ice::__defineOperation('opSShortS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_SShortS, false, 0]], [[::Test::T_SShortS, false, 0]], [::Test::T_SShortS, false, 0], [])
        MyClassPrx_mixin::OP_opAIntS = ::Ice::__defineOperation('opAIntS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_AIntS, false, 0]], [[::Test::T_AIntS, false, 0]], [::Test::T_AIntS, false, 0], [])
        MyClassPrx_mixin::OP_opLIntS = ::Ice::__defineOperation('opLIntS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_LIntS, false, 0]], [[::Test::T_LIntS, false, 0]], [::Test::T_LIntS, false, 0], [])
        MyClassPrx_mixin::OP_opKIntS = ::Ice::__defineOperation('opKIntS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_KIntS, false, 0]], [[::Test::T_KIntS, false, 0]], [::Test::T_KIntS, false, 0], [])
        MyClassPrx_mixin::OP_opQIntS = ::Ice::__defineOperation('opQIntS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_QIntS, false, 0]], [[::Test::T_QIntS, false, 0]], [::Test::T_QIntS, false, 0], [])
        MyClassPrx_mixin::OP_opSIntS = ::Ice::__defineOperation('opSIntS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_SIntS, false, 0]], [[::Test::T_SIntS, false, 0]], [::Test::T_SIntS, false, 0], [])
        MyClassPrx_mixin::OP_opALongS = ::Ice::__defineOperation('opALongS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_ALongS, false, 0]], [[::Test::T_ALongS, false, 0]], [::Test::T_ALongS, false, 0], [])
        MyClassPrx_mixin::OP_opLLongS = ::Ice::__defineOperation('opLLongS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_LLongS, false, 0]], [[::Test::T_LLongS, false, 0]], [::Test::T_LLongS, false, 0], [])
        MyClassPrx_mixin::OP_opKLongS = ::Ice::__defineOperation('opKLongS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_KLongS, false, 0]], [[::Test::T_KLongS, false, 0]], [::Test::T_KLongS, false, 0], [])
        MyClassPrx_mixin::OP_opQLongS = ::Ice::__defineOperation('opQLongS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_QLongS, false, 0]], [[::Test::T_QLongS, false, 0]], [::Test::T_QLongS, false, 0], [])
        MyClassPrx_mixin::OP_opSLongS = ::Ice::__defineOperation('opSLongS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_SLongS, false, 0]], [[::Test::T_SLongS, false, 0]], [::Test::T_SLongS, false, 0], [])
        MyClassPrx_mixin::OP_opAFloatS = ::Ice::__defineOperation('opAFloatS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_AFloatS, false, 0]], [[::Test::T_AFloatS, false, 0]], [::Test::T_AFloatS, false, 0], [])
        MyClassPrx_mixin::OP_opLFloatS = ::Ice::__defineOperation('opLFloatS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_LFloatS, false, 0]], [[::Test::T_LFloatS, false, 0]], [::Test::T_LFloatS, false, 0], [])
        MyClassPrx_mixin::OP_opKFloatS = ::Ice::__defineOperation('opKFloatS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_KFloatS, false, 0]], [[::Test::T_KFloatS, false, 0]], [::Test::T_KFloatS, false, 0], [])
        MyClassPrx_mixin::OP_opQFloatS = ::Ice::__defineOperation('opQFloatS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_QFloatS, false, 0]], [[::Test::T_QFloatS, false, 0]], [::Test::T_QFloatS, false, 0], [])
        MyClassPrx_mixin::OP_opSFloatS = ::Ice::__defineOperation('opSFloatS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_SFloatS, false, 0]], [[::Test::T_SFloatS, false, 0]], [::Test::T_SFloatS, false, 0], [])
        MyClassPrx_mixin::OP_opADoubleS = ::Ice::__defineOperation('opADoubleS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_ADoubleS, false, 0]], [[::Test::T_ADoubleS, false, 0]], [::Test::T_ADoubleS, false, 0], [])
        MyClassPrx_mixin::OP_opLDoubleS = ::Ice::__defineOperation('opLDoubleS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_LDoubleS, false, 0]], [[::Test::T_LDoubleS, false, 0]], [::Test::T_LDoubleS, false, 0], [])
        MyClassPrx_mixin::OP_opKDoubleS = ::Ice::__defineOperation('opKDoubleS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_KDoubleS, false, 0]], [[::Test::T_KDoubleS, false, 0]], [::Test::T_KDoubleS, false, 0], [])
        MyClassPrx_mixin::OP_opQDoubleS = ::Ice::__defineOperation('opQDoubleS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_QDoubleS, false, 0]], [[::Test::T_QDoubleS, false, 0]], [::Test::T_QDoubleS, false, 0], [])
        MyClassPrx_mixin::OP_opSDoubleS = ::Ice::__defineOperation('opSDoubleS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_SDoubleS, false, 0]], [[::Test::T_SDoubleS, false, 0]], [::Test::T_SDoubleS, false, 0], [])
        MyClassPrx_mixin::OP_opAStringS = ::Ice::__defineOperation('opAStringS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_AStringS, false, 0]], [[::Test::T_AStringS, false, 0]], [::Test::T_AStringS, false, 0], [])
        MyClassPrx_mixin::OP_opLStringS = ::Ice::__defineOperation('opLStringS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_LStringS, false, 0]], [[::Test::T_LStringS, false, 0]], [::Test::T_LStringS, false, 0], [])
        MyClassPrx_mixin::OP_opKStringS = ::Ice::__defineOperation('opKStringS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_KStringS, false, 0]], [[::Test::T_KStringS, false, 0]], [::Test::T_KStringS, false, 0], [])
        MyClassPrx_mixin::OP_opQStringS = ::Ice::__defineOperation('opQStringS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_QStringS, false, 0]], [[::Test::T_QStringS, false, 0]], [::Test::T_QStringS, false, 0], [])
        MyClassPrx_mixin::OP_opSStringS = ::Ice::__defineOperation('opSStringS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_SStringS, false, 0]], [[::Test::T_SStringS, false, 0]], [::Test::T_SStringS, false, 0], [])
        MyClassPrx_mixin::OP_opAObjectS = ::Ice::__defineOperation('opAObjectS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_AObjectS, false, 0]], [[::Test::T_AObjectS, false, 0]], [::Test::T_AObjectS, false, 0], [])
        MyClassPrx_mixin::OP_opLObjectS = ::Ice::__defineOperation('opLObjectS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_LObjectS, false, 0]], [[::Test::T_LObjectS, false, 0]], [::Test::T_LObjectS, false, 0], [])
        MyClassPrx_mixin::OP_opAObjectPrxS = ::Ice::__defineOperation('opAObjectPrxS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_AObjectPrxS, false, 0]], [[::Test::T_AObjectPrxS, false, 0]], [::Test::T_AObjectPrxS, false, 0], [])
        MyClassPrx_mixin::OP_opLObjectPrxS = ::Ice::__defineOperation('opLObjectPrxS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_LObjectPrxS, false, 0]], [[::Test::T_LObjectPrxS, false, 0]], [::Test::T_LObjectPrxS, false, 0], [])
        MyClassPrx_mixin::OP_opKObjectPrxS = ::Ice::__defineOperation('opKObjectPrxS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_KObjectPrxS, false, 0]], [[::Test::T_KObjectPrxS, false, 0]], [::Test::T_KObjectPrxS, false, 0], [])
        MyClassPrx_mixin::OP_opQObjectPrxS = ::Ice::__defineOperation('opQObjectPrxS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_QObjectPrxS, false, 0]], [[::Test::T_QObjectPrxS, false, 0]], [::Test::T_QObjectPrxS, false, 0], [])
        MyClassPrx_mixin::OP_opSObjectPrxS = ::Ice::__defineOperation('opSObjectPrxS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_SObjectPrxS, false, 0]], [[::Test::T_SObjectPrxS, false, 0]], [::Test::T_SObjectPrxS, false, 0], [])
        MyClassPrx_mixin::OP_opAStructS = ::Ice::__defineOperation('opAStructS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_AStructS, false, 0]], [[::Test::T_AStructS, false, 0]], [::Test::T_AStructS, false, 0], [])
        MyClassPrx_mixin::OP_opLStructS = ::Ice::__defineOperation('opLStructS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_LStructS, false, 0]], [[::Test::T_LStructS, false, 0]], [::Test::T_LStructS, false, 0], [])
        MyClassPrx_mixin::OP_opKStructS = ::Ice::__defineOperation('opKStructS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_KStructS, false, 0]], [[::Test::T_KStructS, false, 0]], [::Test::T_KStructS, false, 0], [])
        MyClassPrx_mixin::OP_opQStructS = ::Ice::__defineOperation('opQStructS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_QStructS, false, 0]], [[::Test::T_QStructS, false, 0]], [::Test::T_QStructS, false, 0], [])
        MyClassPrx_mixin::OP_opSStructS = ::Ice::__defineOperation('opSStructS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_SStructS, false, 0]], [[::Test::T_SStructS, false, 0]], [::Test::T_SStructS, false, 0], [])
        MyClassPrx_mixin::OP_opAStructSD = ::Ice::__defineOperation('opAStructSD', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_AStructSD, false, 0]], [[::Test::T_AStructSD, false, 0]], [::Test::T_AStructSD, false, 0], [])
        MyClassPrx_mixin::OP_opLStructSD = ::Ice::__defineOperation('opLStructSD', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_LStructSD, false, 0]], [[::Test::T_LStructSD, false, 0]], [::Test::T_LStructSD, false, 0], [])
        MyClassPrx_mixin::OP_opKStructSD = ::Ice::__defineOperation('opKStructSD', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_KStructSD, false, 0]], [[::Test::T_KStructSD, false, 0]], [::Test::T_KStructSD, false, 0], [])
        MyClassPrx_mixin::OP_opQStructSD = ::Ice::__defineOperation('opQStructSD', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_QStructSD, false, 0]], [[::Test::T_QStructSD, false, 0]], [::Test::T_QStructSD, false, 0], [])
        MyClassPrx_mixin::OP_opSStructSD = ::Ice::__defineOperation('opSStructSD', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_SStructSD, false, 0]], [[::Test::T_SStructSD, false, 0]], [::Test::T_SStructSD, false, 0], [])
        MyClassPrx_mixin::OP_opACVS = ::Ice::__defineOperation('opACVS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_ACVS, false, 0]], [[::Test::T_ACVS, false, 0]], [::Test::T_ACVS, false, 0], [])
        MyClassPrx_mixin::OP_opLCVS = ::Ice::__defineOperation('opLCVS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_LCVS, false, 0]], [[::Test::T_LCVS, false, 0]], [::Test::T_LCVS, false, 0], [])
        MyClassPrx_mixin::OP_opACRS = ::Ice::__defineOperation('opACRS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_ACRS, false, 0]], [[::Test::T_ACRS, false, 0]], [::Test::T_ACRS, false, 0], [])
        MyClassPrx_mixin::OP_opLCRS = ::Ice::__defineOperation('opLCRS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_LCRS, false, 0]], [[::Test::T_LCRS, false, 0]], [::Test::T_LCRS, false, 0], [])
        MyClassPrx_mixin::OP_opAEnS = ::Ice::__defineOperation('opAEnS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_AEnS, false, 0]], [[::Test::T_AEnS, false, 0]], [::Test::T_AEnS, false, 0], [])
        MyClassPrx_mixin::OP_opLEnS = ::Ice::__defineOperation('opLEnS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_LEnS, false, 0]], [[::Test::T_LEnS, false, 0]], [::Test::T_LEnS, false, 0], [])
        MyClassPrx_mixin::OP_opKEnS = ::Ice::__defineOperation('opKEnS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_KEnS, false, 0]], [[::Test::T_KEnS, false, 0]], [::Test::T_KEnS, false, 0], [])
        MyClassPrx_mixin::OP_opQEnS = ::Ice::__defineOperation('opQEnS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_QEnS, false, 0]], [[::Test::T_QEnS, false, 0]], [::Test::T_QEnS, false, 0], [])
        MyClassPrx_mixin::OP_opSEnS = ::Ice::__defineOperation('opSEnS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_SEnS, false, 0]], [[::Test::T_SEnS, false, 0]], [::Test::T_SEnS, false, 0], [])
        MyClassPrx_mixin::OP_opAIPrxS = ::Ice::__defineOperation('opAIPrxS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_AIPrxS, false, 0]], [[::Test::T_AIPrxS, false, 0]], [::Test::T_AIPrxS, false, 0], [])
        MyClassPrx_mixin::OP_opLIPrxS = ::Ice::__defineOperation('opLIPrxS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_LIPrxS, false, 0]], [[::Test::T_LIPrxS, false, 0]], [::Test::T_LIPrxS, false, 0], [])
        MyClassPrx_mixin::OP_opKIPrxS = ::Ice::__defineOperation('opKIPrxS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_KIPrxS, false, 0]], [[::Test::T_KIPrxS, false, 0]], [::Test::T_KIPrxS, false, 0], [])
        MyClassPrx_mixin::OP_opQIPrxS = ::Ice::__defineOperation('opQIPrxS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_QIPrxS, false, 0]], [[::Test::T_QIPrxS, false, 0]], [::Test::T_QIPrxS, false, 0], [])
        MyClassPrx_mixin::OP_opSIPrxS = ::Ice::__defineOperation('opSIPrxS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_SIPrxS, false, 0]], [[::Test::T_SIPrxS, false, 0]], [::Test::T_SIPrxS, false, 0], [])
        MyClassPrx_mixin::OP_opCustomIntS = ::Ice::__defineOperation('opCustomIntS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_CustomIntS, false, 0]], [[::Test::T_CustomIntS, false, 0]], [::Test::T_CustomIntS, false, 0], [])
        MyClassPrx_mixin::OP_opCustomCVS = ::Ice::__defineOperation('opCustomCVS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_CustomCVS, false, 0]], [[::Test::T_CustomCVS, false, 0]], [::Test::T_CustomCVS, false, 0], [])
        MyClassPrx_mixin::OP_opCustomIntSS = ::Ice::__defineOperation('opCustomIntSS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_CustomIntSS, false, 0]], [[::Test::T_CustomIntSS, false, 0]], [::Test::T_CustomIntSS, false, 0], [])
        MyClassPrx_mixin::OP_opCustomCVSS = ::Ice::__defineOperation('opCustomCVSS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_CustomCVSS, false, 0]], [[::Test::T_CustomCVSS, false, 0]], [::Test::T_CustomCVSS, false, 0], [])
        MyClassPrx_mixin::OP_opSerialSmallCSharp = ::Ice::__defineOperation('opSerialSmallCSharp', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_SerialSmall, false, 0]], [[::Test::T_SerialSmall, false, 0]], [::Test::T_SerialSmall, false, 0], [])
        MyClassPrx_mixin::OP_opSerialLargeCSharp = ::Ice::__defineOperation('opSerialLargeCSharp', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_SerialLarge, false, 0]], [[::Test::T_SerialLarge, false, 0]], [::Test::T_SerialLarge, false, 0], [])
        MyClassPrx_mixin::OP_opSerialStructCSharp = ::Ice::__defineOperation('opSerialStructCSharp', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Test::T_SerialStruct, false, 0]], [[::Test::T_SerialStruct, false, 0]], [::Test::T_SerialStruct, false, 0], [])
    end

    if not defined?(::Test::T_SLS)
        T_SLS = ::Ice::__defineSequence('::Test::SLS', ::Test::T_SerialLarge)
    end

    if not defined?(::Test::T_SLSS)
        T_SLSS = ::Ice::__defineSequence('::Test::SLSS', ::Test::T_SLS)
    end

    if not defined?(::Test::T_SLD)
        T_SLD = ::Ice::__defineDictionary('::Test::SLD', ::Ice::T_int, ::Test::T_SerialLarge)
    end

    if not defined?(::Test::T_SLSD)
        T_SLSD = ::Ice::__defineDictionary('::Test::SLSD', ::Ice::T_int, ::Test::T_SLS)
    end

    if not defined?(::Test::Foo)
        class Foo
            include ::Ice::Inspect_mixin
            def initialize(sLmem=nil, sLSmem=nil)
                @SLmem = sLmem
                @SLSmem = sLSmem
            end

            def hash
                _h = 0
                _h = 5 * _h + @SLmem.hash
                _h = 5 * _h + @SLSmem.hash
                _h % 0x7fffffff
            end

            def ==(other)
                return false if !other.is_a? ::Test::Foo or
                    @SLmem != other.SLmem or
                    @SLSmem != other.SLSmem
                true
            end

            def eql?(other)
                return other.class == self.class && other == self
            end

            attr_accessor :SLmem, :SLSmem
        end

        T_Foo = ::Ice::__defineStruct('::Test::Foo', Foo, [
            ["SLmem", ::Test::T_SerialLarge],
            ["SLSmem", ::Test::T_SLS]
        ])
    end

    if not defined?(::Test::Bar)
        class Bar < Ice::UserException
            def initialize(sLmem=nil, sLSmem=nil)
                @SLmem = sLmem
                @SLSmem = sLSmem
            end

            def to_s
                '::Test::Bar'
            end

            attr_accessor :SLmem, :SLSmem
        end

        T_Bar = ::Ice::__defineException('::Test::Bar', Bar, false, nil, [
            ["SLmem", ::Test::T_SerialLarge, false, 0],
            ["SLSmem", ::Test::T_SLS, false, 0]
        ])
    end

    if not defined?(::Test::Baz_Mixin)

        module ::Test::Baz_Mixin
        end
        class Baz < ::Ice::Value

            def initialize(sLmem=nil, sLSmem=nil)
                @SLmem = sLmem
                @SLSmem = sLSmem
            end

            attr_accessor :SLmem, :SLSmem
        end

        if not defined?(::Test::T_Baz)
            T_Baz = ::Ice::__declareClass('::Test::Baz')
        end

        T_Baz.defineClass(Baz, -1, false, false, nil, [
            ['SLmem', ::Test::T_SerialLarge, false, 0],
            ['SLSmem', ::Test::T_SLS, false, 0]
        ])
    end
end
