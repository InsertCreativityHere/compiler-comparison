# encoding: utf-8
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file `TestAMD.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

require 'Ice'

module ::Test

    if not defined?(::Test::UserEx)
        class UserEx < Ice::UserException
            def initialize
            end

            def to_s
                '::Test::UserEx'
            end
        end

        T_UserEx = ::Ice::__defineException('::Test::UserEx', UserEx, false, nil, [])
    end

    if not defined?(::Test::T_ByteSeq)
        T_ByteSeq = ::Ice::__defineSequence('::Test::ByteSeq', ::Ice::T_byte)
    end

    if not defined?(::Test::Metrics_Mixin)

        module ::Test::Metrics_Mixin
        end
        module MetricsPrx_mixin

            def op(context=nil)
                MetricsPrx_mixin::OP_op.invoke(self, [], context)
            end

            def fail(context=nil)
                MetricsPrx_mixin::OP_fail.invoke(self, [], context)
            end

            def opWithUserException(context=nil)
                MetricsPrx_mixin::OP_opWithUserException.invoke(self, [], context)
            end

            def opWithRequestFailedException(context=nil)
                MetricsPrx_mixin::OP_opWithRequestFailedException.invoke(self, [], context)
            end

            def opWithLocalException(context=nil)
                MetricsPrx_mixin::OP_opWithLocalException.invoke(self, [], context)
            end

            def opWithUnknownException(context=nil)
                MetricsPrx_mixin::OP_opWithUnknownException.invoke(self, [], context)
            end

            def opByteS(bs, context=nil)
                MetricsPrx_mixin::OP_opByteS.invoke(self, [bs], context)
            end

            def getAdmin(context=nil)
                MetricsPrx_mixin::OP_getAdmin.invoke(self, [], context)
            end

            def shutdown(context=nil)
                MetricsPrx_mixin::OP_shutdown.invoke(self, [], context)
            end
        end

        class MetricsPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include MetricsPrx_mixin
        end

        if not defined?(::Test::T_MetricsPrx)
            T_Metrics = ::Ice::__declareClass('::Test::Metrics')
            T_MetricsPrx = ::Ice::__declareProxy('::Test::Metrics')
        end

        T_MetricsPrx.defineProxy(MetricsPrx, nil, [])

        MetricsPrx_mixin::OP_op = ::Ice::__defineOperation('op', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, true, nil, [], [], nil, [])
        MetricsPrx_mixin::OP_fail = ::Ice::__defineOperation('fail', ::Ice::OperationMode::Idempotent, ::Ice::OperationMode::Idempotent, true, nil, [], [], nil, [])
        MetricsPrx_mixin::OP_opWithUserException = ::Ice::__defineOperation('opWithUserException', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, true, nil, [], [], nil, [::Test::T_UserEx])
        MetricsPrx_mixin::OP_opWithRequestFailedException = ::Ice::__defineOperation('opWithRequestFailedException', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, true, nil, [], [], nil, [])
        MetricsPrx_mixin::OP_opWithLocalException = ::Ice::__defineOperation('opWithLocalException', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, true, nil, [], [], nil, [])
        MetricsPrx_mixin::OP_opWithUnknownException = ::Ice::__defineOperation('opWithUnknownException', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, true, nil, [], [], nil, [])
        MetricsPrx_mixin::OP_opByteS = ::Ice::__defineOperation('opByteS', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, true, nil, [[::Test::T_ByteSeq, false, 0]], [], nil, [])
        MetricsPrx_mixin::OP_getAdmin = ::Ice::__defineOperation('getAdmin', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], [::Ice::T_ObjectPrx, false, 0], [])
        MetricsPrx_mixin::OP_shutdown = ::Ice::__defineOperation('shutdown', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
    end

    if not defined?(::Test::Controller_Mixin)

        module ::Test::Controller_Mixin
        end
        module ControllerPrx_mixin

            def hold(context=nil)
                ControllerPrx_mixin::OP_hold.invoke(self, [], context)
            end

            def resume(context=nil)
                ControllerPrx_mixin::OP_resume.invoke(self, [], context)
            end
        end

        class ControllerPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include ControllerPrx_mixin
        end

        if not defined?(::Test::T_ControllerPrx)
            T_Controller = ::Ice::__declareClass('::Test::Controller')
            T_ControllerPrx = ::Ice::__declareProxy('::Test::Controller')
        end

        T_ControllerPrx.defineProxy(ControllerPrx, nil, [])

        ControllerPrx_mixin::OP_hold = ::Ice::__defineOperation('hold', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        ControllerPrx_mixin::OP_resume = ::Ice::__defineOperation('resume', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
    end
end
