# encoding: utf-8
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `SSLInfo.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

require 'Ice'
require 'Ice/BuiltinSequences.rb'

module ::Glacier2

    if not defined?(::Glacier2::SSLInfo)
        class SSLInfo
            include ::Ice::Inspect_mixin
            def initialize(remoteHost='', remotePort=0, localHost='', localPort=0, cipher='', certs=nil)
                @remoteHost = remoteHost
                @remotePort = remotePort
                @localHost = localHost
                @localPort = localPort
                @cipher = cipher
                @certs = certs
            end

            def hash
                _h = 0
                _h = 5 * _h + @remoteHost.hash
                _h = 5 * _h + @remotePort.hash
                _h = 5 * _h + @localHost.hash
                _h = 5 * _h + @localPort.hash
                _h = 5 * _h + @cipher.hash
                _h = 5 * _h + @certs.hash
                _h % 0x7fffffff
            end

            def ==(other)
                return false if !other.is_a? ::Glacier2::SSLInfo or
                    @remoteHost != other.remoteHost or
                    @remotePort != other.remotePort or
                    @localHost != other.localHost or
                    @localPort != other.localPort or
                    @cipher != other.cipher or
                    @certs != other.certs
                true
            end

            def eql?(other)
                return other.class == self.class && other == self
            end

            attr_accessor :remoteHost, :remotePort, :localHost, :localPort, :cipher, :certs
        end

        T_SSLInfo = ::Ice::__defineStruct('::Glacier2::SSLInfo', SSLInfo, [
            ["remoteHost", ::Ice::T_string],
            ["remotePort", ::Ice::T_int],
            ["localHost", ::Ice::T_string],
            ["localPort", ::Ice::T_int],
            ["cipher", ::Ice::T_string],
            ["certs", ::Ice::T_StringSeq]
        ])
    end
end
