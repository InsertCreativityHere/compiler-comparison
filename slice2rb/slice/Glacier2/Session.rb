# encoding: utf-8
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file `Session.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

require 'Ice'
require 'Ice/BuiltinSequences.rb'
require 'Ice/Identity.rb'
require 'SSLInfo.rb'

module ::Glacier2

    if not defined?(::Glacier2::CannotCreateSessionException)
        class CannotCreateSessionException < Ice::UserException
            def initialize(reason='')
                @reason = reason
            end

            def to_s
                '::Glacier2::CannotCreateSessionException'
            end

            attr_accessor :reason
        end

        T_CannotCreateSessionException = ::Ice::__defineException('::Glacier2::CannotCreateSessionException', CannotCreateSessionException, true, nil, [["reason", ::Ice::T_string, false, 0]])
    end

    if not defined?(::Glacier2::Session_Mixin)

        module ::Glacier2::Session_Mixin
        end
        module SessionPrx_mixin

            def destroy(context=nil)
                SessionPrx_mixin::OP_destroy.invoke(self, [], context)
            end
        end

        class SessionPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include SessionPrx_mixin
        end

        if not defined?(::Glacier2::T_SessionPrx)
            T_Session = ::Ice::__declareClass('::Glacier2::Session')
            T_SessionPrx = ::Ice::__declareProxy('::Glacier2::Session')
        end

        T_SessionPrx.defineProxy(SessionPrx, nil, [])

        SessionPrx_mixin::OP_destroy = ::Ice::__defineOperation('destroy', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
    end

    if not defined?(::Glacier2::StringSet_Mixin)

        module ::Glacier2::StringSet_Mixin
        end
        module StringSetPrx_mixin

            def add(additions, context=nil)
                StringSetPrx_mixin::OP_add.invoke(self, [additions], context)
            end

            def remove(deletions, context=nil)
                StringSetPrx_mixin::OP_remove.invoke(self, [deletions], context)
            end

            def get(context=nil)
                StringSetPrx_mixin::OP_get.invoke(self, [], context)
            end
        end

        class StringSetPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include StringSetPrx_mixin
        end

        if not defined?(::Glacier2::T_StringSetPrx)
            T_StringSet = ::Ice::__declareClass('::Glacier2::StringSet')
            T_StringSetPrx = ::Ice::__declareProxy('::Glacier2::StringSet')
        end

        T_StringSetPrx.defineProxy(StringSetPrx, nil, [])

        StringSetPrx_mixin::OP_add = ::Ice::__defineOperation('add', ::Ice::OperationMode::Idempotent, ::Ice::OperationMode::Idempotent, false, nil, [[::Ice::T_StringSeq, false, 0]], [], nil, [])
        StringSetPrx_mixin::OP_remove = ::Ice::__defineOperation('remove', ::Ice::OperationMode::Idempotent, ::Ice::OperationMode::Idempotent, false, nil, [[::Ice::T_StringSeq, false, 0]], [], nil, [])
        StringSetPrx_mixin::OP_get = ::Ice::__defineOperation('get', ::Ice::OperationMode::Idempotent, ::Ice::OperationMode::Idempotent, false, nil, [], [], [::Ice::T_StringSeq, false, 0], [])
    end

    if not defined?(::Glacier2::IdentitySet_Mixin)

        module ::Glacier2::IdentitySet_Mixin
        end
        module IdentitySetPrx_mixin

            def add(additions, context=nil)
                IdentitySetPrx_mixin::OP_add.invoke(self, [additions], context)
            end

            def remove(deletions, context=nil)
                IdentitySetPrx_mixin::OP_remove.invoke(self, [deletions], context)
            end

            def get(context=nil)
                IdentitySetPrx_mixin::OP_get.invoke(self, [], context)
            end
        end

        class IdentitySetPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include IdentitySetPrx_mixin
        end

        if not defined?(::Glacier2::T_IdentitySetPrx)
            T_IdentitySet = ::Ice::__declareClass('::Glacier2::IdentitySet')
            T_IdentitySetPrx = ::Ice::__declareProxy('::Glacier2::IdentitySet')
        end

        T_IdentitySetPrx.defineProxy(IdentitySetPrx, nil, [])

        IdentitySetPrx_mixin::OP_add = ::Ice::__defineOperation('add', ::Ice::OperationMode::Idempotent, ::Ice::OperationMode::Idempotent, false, nil, [[::Ice::T_IdentitySeq, false, 0]], [], nil, [])
        IdentitySetPrx_mixin::OP_remove = ::Ice::__defineOperation('remove', ::Ice::OperationMode::Idempotent, ::Ice::OperationMode::Idempotent, false, nil, [[::Ice::T_IdentitySeq, false, 0]], [], nil, [])
        IdentitySetPrx_mixin::OP_get = ::Ice::__defineOperation('get', ::Ice::OperationMode::Idempotent, ::Ice::OperationMode::Idempotent, false, nil, [], [], [::Ice::T_IdentitySeq, false, 0], [])
    end

    if not defined?(::Glacier2::SessionControl_Mixin)

        module ::Glacier2::SessionControl_Mixin
        end
        module SessionControlPrx_mixin

            def categories(context=nil)
                SessionControlPrx_mixin::OP_categories.invoke(self, [], context)
            end

            def adapterIds(context=nil)
                SessionControlPrx_mixin::OP_adapterIds.invoke(self, [], context)
            end

            def identities(context=nil)
                SessionControlPrx_mixin::OP_identities.invoke(self, [], context)
            end

            def getSessionTimeout(context=nil)
                SessionControlPrx_mixin::OP_getSessionTimeout.invoke(self, [], context)
            end

            def destroy(context=nil)
                SessionControlPrx_mixin::OP_destroy.invoke(self, [], context)
            end
        end

        class SessionControlPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include SessionControlPrx_mixin
        end

        if not defined?(::Glacier2::T_SessionControlPrx)
            T_SessionControl = ::Ice::__declareClass('::Glacier2::SessionControl')
            T_SessionControlPrx = ::Ice::__declareProxy('::Glacier2::SessionControl')
        end

        T_SessionControlPrx.defineProxy(SessionControlPrx, nil, [])

        SessionControlPrx_mixin::OP_categories = ::Ice::__defineOperation('categories', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], [::Glacier2::T_StringSetPrx, false, 0], [])
        SessionControlPrx_mixin::OP_adapterIds = ::Ice::__defineOperation('adapterIds', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], [::Glacier2::T_StringSetPrx, false, 0], [])
        SessionControlPrx_mixin::OP_identities = ::Ice::__defineOperation('identities', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], [::Glacier2::T_IdentitySetPrx, false, 0], [])
        SessionControlPrx_mixin::OP_getSessionTimeout = ::Ice::__defineOperation('getSessionTimeout', ::Ice::OperationMode::Idempotent, ::Ice::OperationMode::Idempotent, false, nil, [], [], [::Ice::T_int, false, 0], [])
        SessionControlPrx_mixin::OP_destroy = ::Ice::__defineOperation('destroy', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
    end

    if not defined?(::Glacier2::SessionManager_Mixin)

        module ::Glacier2::SessionManager_Mixin
        end
        module SessionManagerPrx_mixin

            def create(userId, control, context=nil)
                SessionManagerPrx_mixin::OP_create.invoke(self, [userId, control], context)
            end
        end

        class SessionManagerPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include SessionManagerPrx_mixin
        end

        if not defined?(::Glacier2::T_SessionManagerPrx)
            T_SessionManager = ::Ice::__declareClass('::Glacier2::SessionManager')
            T_SessionManagerPrx = ::Ice::__declareProxy('::Glacier2::SessionManager')
        end

        T_SessionManagerPrx.defineProxy(SessionManagerPrx, nil, [])

        SessionManagerPrx_mixin::OP_create = ::Ice::__defineOperation('create', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, ::Ice::FormatType::SlicedFormat, [[::Ice::T_string, false, 0], [::Glacier2::T_SessionControlPrx, false, 0]], [], [::Glacier2::T_SessionPrx, false, 0], [::Glacier2::T_CannotCreateSessionException])
    end

    if not defined?(::Glacier2::SSLSessionManager_Mixin)

        module ::Glacier2::SSLSessionManager_Mixin
        end
        module SSLSessionManagerPrx_mixin

            def create(info, control, context=nil)
                SSLSessionManagerPrx_mixin::OP_create.invoke(self, [info, control], context)
            end
        end

        class SSLSessionManagerPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include SSLSessionManagerPrx_mixin
        end

        if not defined?(::Glacier2::T_SSLSessionManagerPrx)
            T_SSLSessionManager = ::Ice::__declareClass('::Glacier2::SSLSessionManager')
            T_SSLSessionManagerPrx = ::Ice::__declareProxy('::Glacier2::SSLSessionManager')
        end

        T_SSLSessionManagerPrx.defineProxy(SSLSessionManagerPrx, nil, [])

        SSLSessionManagerPrx_mixin::OP_create = ::Ice::__defineOperation('create', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, ::Ice::FormatType::SlicedFormat, [[::Glacier2::T_SSLInfo, false, 0], [::Glacier2::T_SessionControlPrx, false, 0]], [], [::Glacier2::T_SessionPrx, false, 0], [::Glacier2::T_CannotCreateSessionException])
    end
end
