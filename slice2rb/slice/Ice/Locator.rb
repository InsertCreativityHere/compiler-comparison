# encoding: utf-8
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file `Locator.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

require 'Ice'
require_relative 'Identity.rb'

module ::Ice

    if not defined?(::Ice::T_Process)
        T_ProcessPrx = ::Ice::__declareProxy('::Ice::Process')
    end

    if not defined?(::Ice::AdapterNotFoundException)
        class AdapterNotFoundException < Ice::UserException
            def to_s
                '::Ice::AdapterNotFoundException'
            end
        end

        T_AdapterNotFoundException = ::Ice::__defineException('::Ice::AdapterNotFoundException', AdapterNotFoundException, nil, [])
    end

    if not defined?(::Ice::InvalidReplicaGroupIdException)
        class InvalidReplicaGroupIdException < Ice::UserException
            def to_s
                '::Ice::InvalidReplicaGroupIdException'
            end
        end

        T_InvalidReplicaGroupIdException = ::Ice::__defineException('::Ice::InvalidReplicaGroupIdException', InvalidReplicaGroupIdException, nil, [])
    end

    if not defined?(::Ice::AdapterAlreadyActiveException)
        class AdapterAlreadyActiveException < Ice::UserException
            def to_s
                '::Ice::AdapterAlreadyActiveException'
            end
        end

        T_AdapterAlreadyActiveException = ::Ice::__defineException('::Ice::AdapterAlreadyActiveException', AdapterAlreadyActiveException, nil, [])
    end

    if not defined?(::Ice::ObjectNotFoundException)
        class ObjectNotFoundException < Ice::UserException
            def to_s
                '::Ice::ObjectNotFoundException'
            end
        end

        T_ObjectNotFoundException = ::Ice::__defineException('::Ice::ObjectNotFoundException', ObjectNotFoundException, nil, [])
    end

    if not defined?(::Ice::ServerNotFoundException)
        class ServerNotFoundException < Ice::UserException
            def to_s
                '::Ice::ServerNotFoundException'
            end
        end

        T_ServerNotFoundException = ::Ice::__defineException('::Ice::ServerNotFoundException', ServerNotFoundException, nil, [])
    end

    if not defined?(::Ice::T_LocatorRegistry)
        T_LocatorRegistryPrx = ::Ice::__declareProxy('::Ice::LocatorRegistry')
    end

    if not defined?(::Ice::Locator_Mixin)

        module ::Ice::Locator_Mixin
        end
        module LocatorPrx_mixin

            def findObjectById(id, context=nil)
                LocatorPrx_mixin::OP_findObjectById.invoke(self, [id], context)
            end

            def findAdapterById(id, context=nil)
                LocatorPrx_mixin::OP_findAdapterById.invoke(self, [id], context)
            end

            def getRegistry(context=nil)
                LocatorPrx_mixin::OP_getRegistry.invoke(self, [], context)
            end
        end

        class LocatorPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include LocatorPrx_mixin
        end

        if not defined?(::Ice::T_LocatorPrx)
            T_Locator = ::Ice::__declareClass('::Ice::Locator')
            T_LocatorPrx = ::Ice::__declareProxy('::Ice::Locator')
        end

        T_LocatorPrx.defineProxy(LocatorPrx, nil, [])

        LocatorPrx_mixin::OP_findObjectById = ::Ice::__defineOperation('findObjectById', ::Ice::OperationMode::Idempotent, true, nil, [[::Ice::T_Identity, false, 0]], [], [::Ice::T_ObjectPrx, false, 0], [::Ice::T_ObjectNotFoundException])
        LocatorPrx_mixin::OP_findAdapterById = ::Ice::__defineOperation('findAdapterById', ::Ice::OperationMode::Idempotent, true, nil, [[::Ice::T_string, false, 0]], [], [::Ice::T_ObjectPrx, false, 0], [::Ice::T_AdapterNotFoundException])
        LocatorPrx_mixin::OP_getRegistry = ::Ice::__defineOperation('getRegistry', ::Ice::OperationMode::Idempotent, false, nil, [], [], [::Ice::T_LocatorRegistryPrx, false, 0], [])
    end

    if not defined?(::Ice::LocatorRegistry_Mixin)

        module ::Ice::LocatorRegistry_Mixin
        end
        module LocatorRegistryPrx_mixin

            def setAdapterDirectProxy(id, proxy, context=nil)
                LocatorRegistryPrx_mixin::OP_setAdapterDirectProxy.invoke(self, [id, proxy], context)
            end

            def setReplicatedAdapterDirectProxy(adapterId, replicaGroupId, proxy, context=nil)
                LocatorRegistryPrx_mixin::OP_setReplicatedAdapterDirectProxy.invoke(self, [adapterId, replicaGroupId, proxy], context)
            end

            def setServerProcessProxy(id, proxy, context=nil)
                LocatorRegistryPrx_mixin::OP_setServerProcessProxy.invoke(self, [id, proxy], context)
            end
        end

        class LocatorRegistryPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include LocatorRegistryPrx_mixin
        end

        if not defined?(::Ice::T_LocatorRegistryPrx)
            T_LocatorRegistry = ::Ice::__declareClass('::Ice::LocatorRegistry')
            T_LocatorRegistryPrx = ::Ice::__declareProxy('::Ice::LocatorRegistry')
        end

        T_LocatorRegistryPrx.defineProxy(LocatorRegistryPrx, nil, [])

        LocatorRegistryPrx_mixin::OP_setAdapterDirectProxy = ::Ice::__defineOperation('setAdapterDirectProxy', ::Ice::OperationMode::Idempotent, true, nil, [[::Ice::T_string, false, 0], [::Ice::T_ObjectPrx, false, 0]], [], nil, [::Ice::T_AdapterNotFoundException, ::Ice::T_AdapterAlreadyActiveException])
        LocatorRegistryPrx_mixin::OP_setReplicatedAdapterDirectProxy = ::Ice::__defineOperation('setReplicatedAdapterDirectProxy', ::Ice::OperationMode::Idempotent, true, nil, [[::Ice::T_string, false, 0], [::Ice::T_string, false, 0], [::Ice::T_ObjectPrx, false, 0]], [], nil, [::Ice::T_AdapterNotFoundException, ::Ice::T_AdapterAlreadyActiveException, ::Ice::T_InvalidReplicaGroupIdException])
        LocatorRegistryPrx_mixin::OP_setServerProcessProxy = ::Ice::__defineOperation('setServerProcessProxy', ::Ice::OperationMode::Idempotent, true, nil, [[::Ice::T_string, false, 0], [::Ice::T_ProcessPrx, false, 0]], [], nil, [::Ice::T_ServerNotFoundException])
    end

    if not defined?(::Ice::LocatorFinder_Mixin)

        module ::Ice::LocatorFinder_Mixin
        end
        module LocatorFinderPrx_mixin

            def getLocator(context=nil)
                LocatorFinderPrx_mixin::OP_getLocator.invoke(self, [], context)
            end
        end

        class LocatorFinderPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include LocatorFinderPrx_mixin
        end

        if not defined?(::Ice::T_LocatorFinderPrx)
            T_LocatorFinder = ::Ice::__declareClass('::Ice::LocatorFinder')
            T_LocatorFinderPrx = ::Ice::__declareProxy('::Ice::LocatorFinder')
        end

        T_LocatorFinderPrx.defineProxy(LocatorFinderPrx, nil, [])

        LocatorFinderPrx_mixin::OP_getLocator = ::Ice::__defineOperation('getLocator', ::Ice::OperationMode::Normal, false, nil, [], [], [::Ice::T_LocatorPrx, false, 0], [])
    end
end
