# encoding: utf-8
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `Communicator.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

require 'Ice'
require 'LoggerF.rb'
require 'InstrumentationF.rb'
require 'ObjectAdapterF.rb'
require 'ObjectFactory.rb'
require 'ValueFactory.rb'
require 'Router.rb'
require 'Locator.rb'
require 'PluginF.rb'
require 'ImplicitContextF.rb'
require 'Current.rb'
require 'Properties.rb'
require 'FacetMap.rb'
require 'Connection.rb'

module ::Ice

    if not defined?(::Ice::::T_Communicator)
        T_Communicator = ::Ice::__declareLocalClass('::Ice::Communicator')
    end

    if not defined?(::Ice::::ToStringMode)
        class ToStringMode
            include Comparable

            def initialize(name, value)
                @name = name
                @value = value
            end

            def ToStringMode.from_int(val)
                @@_enumerators[val]
            end

            def to_s
                @name
            end

            def to_i
                @value
            end

            def <=>(other)
                other.is_a?(ToStringMode) or raise ArgumentError, "value must be a ToStringMode"
                @value <=> other.to_i
            end

            def hash
                @value.hash
            end

            def ToStringMode.each(&block)
                @@_enumerators.each_value(&block)
            end

            Unicode = ToStringMode.new("Unicode", 0)
            ASCII = ToStringMode.new("ASCII", 1)
            Compat = ToStringMode.new("Compat", 2)

            @@_enumerators = {0=>Unicode, 1=>ASCII, 2=>Compat}

            def ToStringMode._enumerators
                @@_enumerators
            end

            private_class_method :new
        end

        T_ToStringMode = ::Ice::__defineEnum('::Ice::ToStringMode', ToStringMode, ToStringMode::_enumerators)
    end
end
