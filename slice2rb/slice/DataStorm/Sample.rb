# Copyright (c) ZeroC, Inc.
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file 'Sample.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>

require 'Ice'

module ::DataStorm
    if not defined?(::DataStorm::SampleEvent)
        class SampleEvent
            include Comparable

            def initialize(name, value)
                @name = name
                @value = value
            end

            def SampleEvent.from_int(val)
                @@_enumerators[val]
            end

            def to_s
                @name
            end

            def to_i
                @value
            end

            def <=>(other)
                other.is_a?(SampleEvent) or raise ArgumentError, "value must be a SampleEvent"
                @value <=> other.to_i
            end

            def hash
                @value.hash
            end

            def SampleEvent.each(&block)
                @@_enumerators.each_value(&block)
            end

            Add = SampleEvent.new("Add", 0)
            Update = SampleEvent.new("Update", 1)
            PartialUpdate = SampleEvent.new("PartialUpdate", 2)
            Remove = SampleEvent.new("Remove", 3)

            @@_enumerators = {0=>Add, 1=>Update, 2=>PartialUpdate, 3=>Remove}

            def SampleEvent._enumerators
                @@_enumerators
            end

            private_class_method :new
        end

        T_SampleEvent = Ice::__defineEnum('::DataStorm::SampleEvent', SampleEvent, SampleEvent::_enumerators)
    end

    if not defined?(::DataStorm::T_SampleEventSeq)
        T_SampleEventSeq = Ice::__defineSequence('::DataStorm::SampleEventSeq', ::DataStorm::T_SampleEvent)
    end
end
