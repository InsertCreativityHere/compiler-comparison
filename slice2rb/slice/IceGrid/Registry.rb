# encoding: utf-8
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `Registry.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

require 'Ice'
require 'Exception.rb'
require 'Session.rb'
require 'Admin.rb'
require 'Ice/Locator.rb'

module ::IceGrid

    if not defined?(::IceGrid::LoadSample)
        class LoadSample
            include Comparable

            def initialize(name, value)
                @name = name
                @value = value
            end

            def LoadSample.from_int(val)
                @@_enumerators[val]
            end

            def to_s
                @name
            end

            def to_i
                @value
            end

            def <=>(other)
                other.is_a?(LoadSample) or raise ArgumentError, "value must be a LoadSample"
                @value <=> other.to_i
            end

            def hash
                @value.hash
            end

            def LoadSample.each(&block)
                @@_enumerators.each_value(&block)
            end

            LoadSample1 = LoadSample.new("LoadSample1", 0)
            LoadSample5 = LoadSample.new("LoadSample5", 1)
            LoadSample15 = LoadSample.new("LoadSample15", 2)

            @@_enumerators = {0=>LoadSample1, 1=>LoadSample5, 2=>LoadSample15}

            def LoadSample._enumerators
                @@_enumerators
            end

            private_class_method :new
        end

        T_LoadSample = ::Ice::__defineEnum('::IceGrid::LoadSample', LoadSample, LoadSample::_enumerators)
    end

    if not defined?(::IceGrid::Query_Mixin)

        module ::IceGrid::Query_Mixin
        end
        module QueryPrx_mixin

            def findObjectById(id, context=nil)
                QueryPrx_mixin::OP_findObjectById.invoke(self, [id], context)
            end

            def findObjectByType(type, context=nil)
                QueryPrx_mixin::OP_findObjectByType.invoke(self, [type], context)
            end

            def findObjectByTypeOnLeastLoadedNode(type, sample, context=nil)
                QueryPrx_mixin::OP_findObjectByTypeOnLeastLoadedNode.invoke(self, [type, sample], context)
            end

            def findAllObjectsByType(type, context=nil)
                QueryPrx_mixin::OP_findAllObjectsByType.invoke(self, [type], context)
            end

            def findAllReplicas(proxy, context=nil)
                QueryPrx_mixin::OP_findAllReplicas.invoke(self, [proxy], context)
            end
        end

        class QueryPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include QueryPrx_mixin
        end

        if not defined?(::IceGrid::T_QueryPrx)
            T_Query = ::Ice::__declareClass('::IceGrid::Query')
            T_QueryPrx = ::Ice::__declareProxy('::IceGrid::Query')
        end

        T_Query.defineClass(::Ice::Value, -1, false, true, nil, [])

        T_QueryPrx.defineProxy(QueryPrx, nil, [])

        QueryPrx_mixin::OP_findObjectById = ::Ice::__defineOperation('findObjectById', ::Ice::OperationMode::Idempotent, ::Ice::OperationMode::Nonmutating, false, nil, [[::Ice::T_Identity, false, 0]], [], [::Ice::T_ObjectPrx, false, 0], [])
        QueryPrx_mixin::OP_findObjectByType = ::Ice::__defineOperation('findObjectByType', ::Ice::OperationMode::Idempotent, ::Ice::OperationMode::Nonmutating, false, nil, [[::Ice::T_string, false, 0]], [], [::Ice::T_ObjectPrx, false, 0], [])
        QueryPrx_mixin::OP_findObjectByTypeOnLeastLoadedNode = ::Ice::__defineOperation('findObjectByTypeOnLeastLoadedNode', ::Ice::OperationMode::Idempotent, ::Ice::OperationMode::Nonmutating, false, nil, [[::Ice::T_string, false, 0], [::IceGrid::T_LoadSample, false, 0]], [], [::Ice::T_ObjectPrx, false, 0], [])
        QueryPrx_mixin::OP_findAllObjectsByType = ::Ice::__defineOperation('findAllObjectsByType', ::Ice::OperationMode::Idempotent, ::Ice::OperationMode::Nonmutating, false, nil, [[::Ice::T_string, false, 0]], [], [::Ice::T_ObjectProxySeq, false, 0], [])
        QueryPrx_mixin::OP_findAllReplicas = ::Ice::__defineOperation('findAllReplicas', ::Ice::OperationMode::Idempotent, ::Ice::OperationMode::Idempotent, false, nil, [[::Ice::T_ObjectPrx, false, 0]], [], [::Ice::T_ObjectProxySeq, false, 0], [])
    end

    if not defined?(::IceGrid::Registry_Mixin)

        module ::IceGrid::Registry_Mixin
        end
        module RegistryPrx_mixin

            def createSession(userId, password, context=nil)
                RegistryPrx_mixin::OP_createSession.invoke(self, [userId, password], context)
            end

            def createAdminSession(userId, password, context=nil)
                RegistryPrx_mixin::OP_createAdminSession.invoke(self, [userId, password], context)
            end

            def createSessionFromSecureConnection(context=nil)
                RegistryPrx_mixin::OP_createSessionFromSecureConnection.invoke(self, [], context)
            end

            def createAdminSessionFromSecureConnection(context=nil)
                RegistryPrx_mixin::OP_createAdminSessionFromSecureConnection.invoke(self, [], context)
            end

            def getSessionTimeout(context=nil)
                RegistryPrx_mixin::OP_getSessionTimeout.invoke(self, [], context)
            end

            def getACMTimeout(context=nil)
                RegistryPrx_mixin::OP_getACMTimeout.invoke(self, [], context)
            end
        end

        class RegistryPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include RegistryPrx_mixin
        end

        if not defined?(::IceGrid::T_RegistryPrx)
            T_Registry = ::Ice::__declareClass('::IceGrid::Registry')
            T_RegistryPrx = ::Ice::__declareProxy('::IceGrid::Registry')
        end

        T_Registry.defineClass(::Ice::Value, -1, false, true, nil, [])

        T_RegistryPrx.defineProxy(RegistryPrx, nil, [])

        RegistryPrx_mixin::OP_createSession = ::Ice::__defineOperation('createSession', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_string, false, 0], [::Ice::T_string, false, 0]], [], [::IceGrid::T_SessionPrx, false, 0], [::IceGrid::T_PermissionDeniedException])
        RegistryPrx_mixin::OP_createAdminSession = ::Ice::__defineOperation('createAdminSession', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_string, false, 0], [::Ice::T_string, false, 0]], [], [::IceGrid::T_AdminSessionPrx, false, 0], [::IceGrid::T_PermissionDeniedException])
        RegistryPrx_mixin::OP_createSessionFromSecureConnection = ::Ice::__defineOperation('createSessionFromSecureConnection', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], [::IceGrid::T_SessionPrx, false, 0], [::IceGrid::T_PermissionDeniedException])
        RegistryPrx_mixin::OP_createAdminSessionFromSecureConnection = ::Ice::__defineOperation('createAdminSessionFromSecureConnection', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], [::IceGrid::T_AdminSessionPrx, false, 0], [::IceGrid::T_PermissionDeniedException])
        RegistryPrx_mixin::OP_getSessionTimeout = ::Ice::__defineOperation('getSessionTimeout', ::Ice::OperationMode::Idempotent, ::Ice::OperationMode::Nonmutating, false, nil, [], [], [::Ice::T_int, false, 0], [])
        RegistryPrx_mixin::OP_getACMTimeout = ::Ice::__defineOperation('getACMTimeout', ::Ice::OperationMode::Idempotent, ::Ice::OperationMode::Nonmutating, false, nil, [], [], [::Ice::T_int, false, 0], [])
    end

    if not defined?(::IceGrid::Locator_Mixin)

        module ::IceGrid::Locator_Mixin
        end
        module LocatorPrx_mixin
            include ::Ice::LocatorPrx_mixin

            def getLocalRegistry(context=nil)
                LocatorPrx_mixin::OP_getLocalRegistry.invoke(self, [], context)
            end

            def getLocalQuery(context=nil)
                LocatorPrx_mixin::OP_getLocalQuery.invoke(self, [], context)
            end
        end

        class LocatorPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include LocatorPrx_mixin
        end

        if not defined?(::IceGrid::T_LocatorPrx)
            T_Locator = ::Ice::__declareClass('::IceGrid::Locator')
            T_LocatorPrx = ::Ice::__declareProxy('::IceGrid::Locator')
        end

        T_Locator.defineClass(::Ice::Value, -1, false, true, nil, [])

        T_LocatorPrx.defineProxy(LocatorPrx, nil, [::Ice::T_LocatorPrx])

        LocatorPrx_mixin::OP_getLocalRegistry = ::Ice::__defineOperation('getLocalRegistry', ::Ice::OperationMode::Idempotent, ::Ice::OperationMode::Idempotent, false, nil, [], [], [::IceGrid::T_RegistryPrx, false, 0], [])
        LocatorPrx_mixin::OP_getLocalQuery = ::Ice::__defineOperation('getLocalQuery', ::Ice::OperationMode::Idempotent, ::Ice::OperationMode::Idempotent, false, nil, [], [], [::IceGrid::T_QueryPrx, false, 0], [])
    end
end
