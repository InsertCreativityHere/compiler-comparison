# encoding: utf-8
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file `Admin.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

require 'Ice'
require 'Ice/Identity.rb'
require 'Ice/BuiltinSequences.rb'
require 'Glacier2/Session.rb'
require_relative 'Exception.rb'
require_relative 'Descriptor.rb'

module ::IceGrid

    if not defined?(::IceGrid::ServerState)
        class ServerState
            include Comparable

            def initialize(name, value)
                @name = name
                @value = value
            end

            def ServerState.from_int(val)
                @@_enumerators[val]
            end

            def to_s
                @name
            end

            def to_i
                @value
            end

            def <=>(other)
                other.is_a?(ServerState) or raise ArgumentError, "value must be a ServerState"
                @value <=> other.to_i
            end

            def hash
                @value.hash
            end

            def ServerState.each(&block)
                @@_enumerators.each_value(&block)
            end

            Inactive = ServerState.new("Inactive", 0)
            Activating = ServerState.new("Activating", 1)
            ActivationTimedOut = ServerState.new("ActivationTimedOut", 2)
            Active = ServerState.new("Active", 3)
            Deactivating = ServerState.new("Deactivating", 4)
            Destroying = ServerState.new("Destroying", 5)
            Destroyed = ServerState.new("Destroyed", 6)

            @@_enumerators = {0=>Inactive, 1=>Activating, 2=>ActivationTimedOut, 3=>Active, 4=>Deactivating, 5=>Destroying, 6=>Destroyed}

            def ServerState._enumerators
                @@_enumerators
            end

            private_class_method :new
        end

        T_ServerState = ::Ice::__defineEnum('::IceGrid::ServerState', ServerState, ServerState::_enumerators)
    end

    if not defined?(::IceGrid::T_StringObjectProxyDict)
        T_StringObjectProxyDict = ::Ice::__defineDictionary('::IceGrid::StringObjectProxyDict', ::Ice::T_string, ::Ice::T_ObjectPrx)
    end

    if not defined?(::IceGrid::ObjectInfo)
        class ObjectInfo
            include ::Ice::Inspect_mixin
            def initialize(proxy=nil, type='')
                @proxy = proxy
                @type = type
            end

            def hash
                _h = 0
                _h = 5 * _h + @proxy.hash
                _h = 5 * _h + @type.hash
                _h % 0x7fffffff
            end

            def ==(other)
                return false if !other.is_a? ::IceGrid::ObjectInfo or
                    @proxy != other.proxy or
                    @type != other.type
                true
            end

            def eql?(other)
                return other.class == self.class && other == self
            end

            attr_accessor :proxy, :type
        end

        T_ObjectInfo = ::Ice::__defineStruct('::IceGrid::ObjectInfo', ObjectInfo, [
            ["proxy", ::Ice::T_ObjectPrx],
            ["type", ::Ice::T_string]
        ])
    end

    if not defined?(::IceGrid::T_ObjectInfoSeq)
        T_ObjectInfoSeq = ::Ice::__defineSequence('::IceGrid::ObjectInfoSeq', ::IceGrid::T_ObjectInfo)
    end

    if not defined?(::IceGrid::AdapterInfo)
        class AdapterInfo
            include ::Ice::Inspect_mixin
            def initialize(id='', proxy=nil, replicaGroupId='')
                @id = id
                @proxy = proxy
                @replicaGroupId = replicaGroupId
            end

            def hash
                _h = 0
                _h = 5 * _h + @id.hash
                _h = 5 * _h + @proxy.hash
                _h = 5 * _h + @replicaGroupId.hash
                _h % 0x7fffffff
            end

            def ==(other)
                return false if !other.is_a? ::IceGrid::AdapterInfo or
                    @id != other.id or
                    @proxy != other.proxy or
                    @replicaGroupId != other.replicaGroupId
                true
            end

            def eql?(other)
                return other.class == self.class && other == self
            end

            attr_accessor :id, :proxy, :replicaGroupId
        end

        T_AdapterInfo = ::Ice::__defineStruct('::IceGrid::AdapterInfo', AdapterInfo, [
            ["id", ::Ice::T_string],
            ["proxy", ::Ice::T_ObjectPrx],
            ["replicaGroupId", ::Ice::T_string]
        ])
    end

    if not defined?(::IceGrid::T_AdapterInfoSeq)
        T_AdapterInfoSeq = ::Ice::__defineSequence('::IceGrid::AdapterInfoSeq', ::IceGrid::T_AdapterInfo)
    end

    if not defined?(::IceGrid::ServerInfo)
        class ServerInfo
            include ::Ice::Inspect_mixin
            def initialize(application='', uuid='', revision=0, node='', descriptor=nil, sessionId='')
                @application = application
                @uuid = uuid
                @revision = revision
                @node = node
                @descriptor = descriptor
                @sessionId = sessionId
            end

            def hash
                _h = 0
                _h = 5 * _h + @application.hash
                _h = 5 * _h + @uuid.hash
                _h = 5 * _h + @revision.hash
                _h = 5 * _h + @node.hash
                _h = 5 * _h + @descriptor.hash
                _h = 5 * _h + @sessionId.hash
                _h % 0x7fffffff
            end

            def ==(other)
                return false if !other.is_a? ::IceGrid::ServerInfo or
                    @application != other.application or
                    @uuid != other.uuid or
                    @revision != other.revision or
                    @node != other.node or
                    @descriptor != other.descriptor or
                    @sessionId != other.sessionId
                true
            end

            def eql?(other)
                return other.class == self.class && other == self
            end

            attr_accessor :application, :uuid, :revision, :node, :descriptor, :sessionId
        end

        T_ServerInfo = ::Ice::__defineStruct('::IceGrid::ServerInfo', ServerInfo, [
            ["application", ::Ice::T_string],
            ["uuid", ::Ice::T_string],
            ["revision", ::Ice::T_int],
            ["node", ::Ice::T_string],
            ["descriptor", ::IceGrid::T_ServerDescriptor],
            ["sessionId", ::Ice::T_string]
        ])
    end

    if not defined?(::IceGrid::NodeInfo)
        class NodeInfo
            include ::Ice::Inspect_mixin
            def initialize(name='', os='', hostname='', release='', version='', machine='', nProcessors=0, dataDir='')
                @name = name
                @os = os
                @hostname = hostname
                @release = release
                @version = version
                @machine = machine
                @nProcessors = nProcessors
                @dataDir = dataDir
            end

            def hash
                _h = 0
                _h = 5 * _h + @name.hash
                _h = 5 * _h + @os.hash
                _h = 5 * _h + @hostname.hash
                _h = 5 * _h + @release.hash
                _h = 5 * _h + @version.hash
                _h = 5 * _h + @machine.hash
                _h = 5 * _h + @nProcessors.hash
                _h = 5 * _h + @dataDir.hash
                _h % 0x7fffffff
            end

            def ==(other)
                return false if !other.is_a? ::IceGrid::NodeInfo or
                    @name != other.name or
                    @os != other.os or
                    @hostname != other.hostname or
                    @release != other.release or
                    @version != other.version or
                    @machine != other.machine or
                    @nProcessors != other.nProcessors or
                    @dataDir != other.dataDir
                true
            end

            def eql?(other)
                return other.class == self.class && other == self
            end

            attr_accessor :name, :os, :hostname, :release, :version, :machine, :nProcessors, :dataDir
        end

        T_NodeInfo = ::Ice::__defineStruct('::IceGrid::NodeInfo', NodeInfo, [
            ["name", ::Ice::T_string],
            ["os", ::Ice::T_string],
            ["hostname", ::Ice::T_string],
            ["release", ::Ice::T_string],
            ["version", ::Ice::T_string],
            ["machine", ::Ice::T_string],
            ["nProcessors", ::Ice::T_int],
            ["dataDir", ::Ice::T_string]
        ])
    end

    if not defined?(::IceGrid::RegistryInfo)
        class RegistryInfo
            include ::Ice::Inspect_mixin
            def initialize(name='', hostname='')
                @name = name
                @hostname = hostname
            end

            def hash
                _h = 0
                _h = 5 * _h + @name.hash
                _h = 5 * _h + @hostname.hash
                _h % 0x7fffffff
            end

            def ==(other)
                return false if !other.is_a? ::IceGrid::RegistryInfo or
                    @name != other.name or
                    @hostname != other.hostname
                true
            end

            def eql?(other)
                return other.class == self.class && other == self
            end

            attr_accessor :name, :hostname
        end

        T_RegistryInfo = ::Ice::__defineStruct('::IceGrid::RegistryInfo', RegistryInfo, [
            ["name", ::Ice::T_string],
            ["hostname", ::Ice::T_string]
        ])
    end

    if not defined?(::IceGrid::T_RegistryInfoSeq)
        T_RegistryInfoSeq = ::Ice::__defineSequence('::IceGrid::RegistryInfoSeq', ::IceGrid::T_RegistryInfo)
    end

    if not defined?(::IceGrid::LoadInfo)
        class LoadInfo
            include ::Ice::Inspect_mixin
            def initialize(avg1=0.0, avg5=0.0, avg15=0.0)
                @avg1 = avg1
                @avg5 = avg5
                @avg15 = avg15
            end

            def hash
                _h = 0
                _h = 5 * _h + @avg1.hash
                _h = 5 * _h + @avg5.hash
                _h = 5 * _h + @avg15.hash
                _h % 0x7fffffff
            end

            def ==(other)
                return false if !other.is_a? ::IceGrid::LoadInfo or
                    @avg1 != other.avg1 or
                    @avg5 != other.avg5 or
                    @avg15 != other.avg15
                true
            end

            def eql?(other)
                return other.class == self.class && other == self
            end

            attr_accessor :avg1, :avg5, :avg15
        end

        T_LoadInfo = ::Ice::__defineStruct('::IceGrid::LoadInfo', LoadInfo, [
            ["avg1", ::Ice::T_float],
            ["avg5", ::Ice::T_float],
            ["avg15", ::Ice::T_float]
        ])
    end

    if not defined?(::IceGrid::ApplicationInfo)
        class ApplicationInfo
            include ::Ice::Inspect_mixin
            def initialize(uuid='', createTime=0, createUser='', updateTime=0, updateUser='', revision=0, descriptor=::IceGrid::ApplicationDescriptor.new)
                @uuid = uuid
                @createTime = createTime
                @createUser = createUser
                @updateTime = updateTime
                @updateUser = updateUser
                @revision = revision
                @descriptor = descriptor
            end

            def hash
                _h = 0
                _h = 5 * _h + @uuid.hash
                _h = 5 * _h + @createTime.hash
                _h = 5 * _h + @createUser.hash
                _h = 5 * _h + @updateTime.hash
                _h = 5 * _h + @updateUser.hash
                _h = 5 * _h + @revision.hash
                _h = 5 * _h + @descriptor.hash
                _h % 0x7fffffff
            end

            def ==(other)
                return false if !other.is_a? ::IceGrid::ApplicationInfo or
                    @uuid != other.uuid or
                    @createTime != other.createTime or
                    @createUser != other.createUser or
                    @updateTime != other.updateTime or
                    @updateUser != other.updateUser or
                    @revision != other.revision or
                    @descriptor != other.descriptor
                true
            end

            def eql?(other)
                return other.class == self.class && other == self
            end

            attr_accessor :uuid, :createTime, :createUser, :updateTime, :updateUser, :revision, :descriptor
        end

        T_ApplicationInfo = ::Ice::__defineStruct('::IceGrid::ApplicationInfo', ApplicationInfo, [
            ["uuid", ::Ice::T_string],
            ["createTime", ::Ice::T_long],
            ["createUser", ::Ice::T_string],
            ["updateTime", ::Ice::T_long],
            ["updateUser", ::Ice::T_string],
            ["revision", ::Ice::T_int],
            ["descriptor", ::IceGrid::T_ApplicationDescriptor]
        ])
    end

    if not defined?(::IceGrid::T_ApplicationInfoSeq)
        T_ApplicationInfoSeq = ::Ice::__defineSequence('::IceGrid::ApplicationInfoSeq', ::IceGrid::T_ApplicationInfo)
    end

    if not defined?(::IceGrid::ApplicationUpdateInfo)
        class ApplicationUpdateInfo
            include ::Ice::Inspect_mixin
            def initialize(updateTime=0, updateUser='', revision=0, descriptor=::IceGrid::ApplicationUpdateDescriptor.new)
                @updateTime = updateTime
                @updateUser = updateUser
                @revision = revision
                @descriptor = descriptor
            end

            def hash
                _h = 0
                _h = 5 * _h + @updateTime.hash
                _h = 5 * _h + @updateUser.hash
                _h = 5 * _h + @revision.hash
                _h = 5 * _h + @descriptor.hash
                _h % 0x7fffffff
            end

            def ==(other)
                return false if !other.is_a? ::IceGrid::ApplicationUpdateInfo or
                    @updateTime != other.updateTime or
                    @updateUser != other.updateUser or
                    @revision != other.revision or
                    @descriptor != other.descriptor
                true
            end

            def eql?(other)
                return other.class == self.class && other == self
            end

            attr_accessor :updateTime, :updateUser, :revision, :descriptor
        end

        T_ApplicationUpdateInfo = ::Ice::__defineStruct('::IceGrid::ApplicationUpdateInfo', ApplicationUpdateInfo, [
            ["updateTime", ::Ice::T_long],
            ["updateUser", ::Ice::T_string],
            ["revision", ::Ice::T_int],
            ["descriptor", ::IceGrid::T_ApplicationUpdateDescriptor]
        ])
    end

    if not defined?(::IceGrid::Admin_Mixin)

        module ::IceGrid::Admin_Mixin
        end
        module AdminPrx_mixin

            def addApplication(descriptor, context=nil)
                AdminPrx_mixin::OP_addApplication.invoke(self, [descriptor], context)
            end

            def syncApplication(descriptor, context=nil)
                AdminPrx_mixin::OP_syncApplication.invoke(self, [descriptor], context)
            end

            def updateApplication(descriptor, context=nil)
                AdminPrx_mixin::OP_updateApplication.invoke(self, [descriptor], context)
            end

            def syncApplicationWithoutRestart(descriptor, context=nil)
                AdminPrx_mixin::OP_syncApplicationWithoutRestart.invoke(self, [descriptor], context)
            end

            def updateApplicationWithoutRestart(descriptor, context=nil)
                AdminPrx_mixin::OP_updateApplicationWithoutRestart.invoke(self, [descriptor], context)
            end

            def removeApplication(name, context=nil)
                AdminPrx_mixin::OP_removeApplication.invoke(self, [name], context)
            end

            def instantiateServer(application, node, desc, context=nil)
                AdminPrx_mixin::OP_instantiateServer.invoke(self, [application, node, desc], context)
            end

            def getApplicationInfo(name, context=nil)
                AdminPrx_mixin::OP_getApplicationInfo.invoke(self, [name], context)
            end

            def getDefaultApplicationDescriptor(context=nil)
                AdminPrx_mixin::OP_getDefaultApplicationDescriptor.invoke(self, [], context)
            end

            def getAllApplicationNames(context=nil)
                AdminPrx_mixin::OP_getAllApplicationNames.invoke(self, [], context)
            end

            def getServerInfo(id, context=nil)
                AdminPrx_mixin::OP_getServerInfo.invoke(self, [id], context)
            end

            def getServerState(id, context=nil)
                AdminPrx_mixin::OP_getServerState.invoke(self, [id], context)
            end

            def getServerPid(id, context=nil)
                AdminPrx_mixin::OP_getServerPid.invoke(self, [id], context)
            end

            def getServerAdminCategory(context=nil)
                AdminPrx_mixin::OP_getServerAdminCategory.invoke(self, [], context)
            end

            def getServerAdmin(id, context=nil)
                AdminPrx_mixin::OP_getServerAdmin.invoke(self, [id], context)
            end

            def enableServer(id, enabled, context=nil)
                AdminPrx_mixin::OP_enableServer.invoke(self, [id, enabled], context)
            end

            def isServerEnabled(id, context=nil)
                AdminPrx_mixin::OP_isServerEnabled.invoke(self, [id], context)
            end

            def startServer(id, context=nil)
                AdminPrx_mixin::OP_startServer.invoke(self, [id], context)
            end

            def stopServer(id, context=nil)
                AdminPrx_mixin::OP_stopServer.invoke(self, [id], context)
            end

            def sendSignal(id, signal, context=nil)
                AdminPrx_mixin::OP_sendSignal.invoke(self, [id, signal], context)
            end

            def getAllServerIds(context=nil)
                AdminPrx_mixin::OP_getAllServerIds.invoke(self, [], context)
            end

            def getAdapterInfo(id, context=nil)
                AdminPrx_mixin::OP_getAdapterInfo.invoke(self, [id], context)
            end

            def removeAdapter(id, context=nil)
                AdminPrx_mixin::OP_removeAdapter.invoke(self, [id], context)
            end

            def getAllAdapterIds(context=nil)
                AdminPrx_mixin::OP_getAllAdapterIds.invoke(self, [], context)
            end

            def addObject(obj, context=nil)
                AdminPrx_mixin::OP_addObject.invoke(self, [obj], context)
            end

            def updateObject(obj, context=nil)
                AdminPrx_mixin::OP_updateObject.invoke(self, [obj], context)
            end

            def addObjectWithType(obj, type, context=nil)
                AdminPrx_mixin::OP_addObjectWithType.invoke(self, [obj, type], context)
            end

            def removeObject(id, context=nil)
                AdminPrx_mixin::OP_removeObject.invoke(self, [id], context)
            end

            def getObjectInfo(id, context=nil)
                AdminPrx_mixin::OP_getObjectInfo.invoke(self, [id], context)
            end

            def getObjectInfosByType(type, context=nil)
                AdminPrx_mixin::OP_getObjectInfosByType.invoke(self, [type], context)
            end

            def getAllObjectInfos(expr, context=nil)
                AdminPrx_mixin::OP_getAllObjectInfos.invoke(self, [expr], context)
            end

            def pingNode(name, context=nil)
                AdminPrx_mixin::OP_pingNode.invoke(self, [name], context)
            end

            def getNodeLoad(name, context=nil)
                AdminPrx_mixin::OP_getNodeLoad.invoke(self, [name], context)
            end

            def getNodeInfo(name, context=nil)
                AdminPrx_mixin::OP_getNodeInfo.invoke(self, [name], context)
            end

            def getNodeAdmin(name, context=nil)
                AdminPrx_mixin::OP_getNodeAdmin.invoke(self, [name], context)
            end

            def getNodeProcessorSocketCount(name, context=nil)
                AdminPrx_mixin::OP_getNodeProcessorSocketCount.invoke(self, [name], context)
            end

            def shutdownNode(name, context=nil)
                AdminPrx_mixin::OP_shutdownNode.invoke(self, [name], context)
            end

            def getNodeHostname(name, context=nil)
                AdminPrx_mixin::OP_getNodeHostname.invoke(self, [name], context)
            end

            def getAllNodeNames(context=nil)
                AdminPrx_mixin::OP_getAllNodeNames.invoke(self, [], context)
            end

            def pingRegistry(name, context=nil)
                AdminPrx_mixin::OP_pingRegistry.invoke(self, [name], context)
            end

            def getRegistryInfo(name, context=nil)
                AdminPrx_mixin::OP_getRegistryInfo.invoke(self, [name], context)
            end

            def getRegistryAdmin(name, context=nil)
                AdminPrx_mixin::OP_getRegistryAdmin.invoke(self, [name], context)
            end

            def shutdownRegistry(name, context=nil)
                AdminPrx_mixin::OP_shutdownRegistry.invoke(self, [name], context)
            end

            def getAllRegistryNames(context=nil)
                AdminPrx_mixin::OP_getAllRegistryNames.invoke(self, [], context)
            end

            def shutdown(context=nil)
                AdminPrx_mixin::OP_shutdown.invoke(self, [], context)
            end
        end

        class AdminPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include AdminPrx_mixin
        end

        if not defined?(::IceGrid::T_AdminPrx)
            T_Admin = ::Ice::__declareClass('::IceGrid::Admin')
            T_AdminPrx = ::Ice::__declareProxy('::IceGrid::Admin')
        end

        T_AdminPrx.defineProxy(AdminPrx, nil, [])

        AdminPrx_mixin::OP_addApplication = ::Ice::__defineOperation('addApplication', ::Ice::OperationMode::Normal, false, nil, [[::IceGrid::T_ApplicationDescriptor, false, 0]], [], nil, [::IceGrid::T_AccessDeniedException, ::IceGrid::T_DeploymentException])
        AdminPrx_mixin::OP_syncApplication = ::Ice::__defineOperation('syncApplication', ::Ice::OperationMode::Normal, false, nil, [[::IceGrid::T_ApplicationDescriptor, false, 0]], [], nil, [::IceGrid::T_AccessDeniedException, ::IceGrid::T_DeploymentException, ::IceGrid::T_ApplicationNotExistException])
        AdminPrx_mixin::OP_updateApplication = ::Ice::__defineOperation('updateApplication', ::Ice::OperationMode::Normal, false, nil, [[::IceGrid::T_ApplicationUpdateDescriptor, false, 0]], [], nil, [::IceGrid::T_AccessDeniedException, ::IceGrid::T_DeploymentException, ::IceGrid::T_ApplicationNotExistException])
        AdminPrx_mixin::OP_syncApplicationWithoutRestart = ::Ice::__defineOperation('syncApplicationWithoutRestart', ::Ice::OperationMode::Normal, false, nil, [[::IceGrid::T_ApplicationDescriptor, false, 0]], [], nil, [::IceGrid::T_AccessDeniedException, ::IceGrid::T_DeploymentException, ::IceGrid::T_ApplicationNotExistException])
        AdminPrx_mixin::OP_updateApplicationWithoutRestart = ::Ice::__defineOperation('updateApplicationWithoutRestart', ::Ice::OperationMode::Normal, false, nil, [[::IceGrid::T_ApplicationUpdateDescriptor, false, 0]], [], nil, [::IceGrid::T_AccessDeniedException, ::IceGrid::T_DeploymentException, ::IceGrid::T_ApplicationNotExistException])
        AdminPrx_mixin::OP_removeApplication = ::Ice::__defineOperation('removeApplication', ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_string, false, 0]], [], nil, [::IceGrid::T_AccessDeniedException, ::IceGrid::T_DeploymentException, ::IceGrid::T_ApplicationNotExistException])
        AdminPrx_mixin::OP_instantiateServer = ::Ice::__defineOperation('instantiateServer', ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_string, false, 0], [::Ice::T_string, false, 0], [::IceGrid::T_ServerInstanceDescriptor, false, 0]], [], nil, [::IceGrid::T_AccessDeniedException, ::IceGrid::T_ApplicationNotExistException, ::IceGrid::T_DeploymentException])
        AdminPrx_mixin::OP_getApplicationInfo = ::Ice::__defineOperation('getApplicationInfo', ::Ice::OperationMode::Idempotent, false, nil, [[::Ice::T_string, false, 0]], [], [::IceGrid::T_ApplicationInfo, false, 0], [::IceGrid::T_ApplicationNotExistException])
        AdminPrx_mixin::OP_getDefaultApplicationDescriptor = ::Ice::__defineOperation('getDefaultApplicationDescriptor', ::Ice::OperationMode::Idempotent, false, nil, [], [], [::IceGrid::T_ApplicationDescriptor, false, 0], [::IceGrid::T_DeploymentException])
        AdminPrx_mixin::OP_getAllApplicationNames = ::Ice::__defineOperation('getAllApplicationNames', ::Ice::OperationMode::Idempotent, false, nil, [], [], [::Ice::T_StringSeq, false, 0], [])
        AdminPrx_mixin::OP_getServerInfo = ::Ice::__defineOperation('getServerInfo', ::Ice::OperationMode::Idempotent, false, nil, [[::Ice::T_string, false, 0]], [], [::IceGrid::T_ServerInfo, false, 0], [::IceGrid::T_ServerNotExistException])
        AdminPrx_mixin::OP_getServerState = ::Ice::__defineOperation('getServerState', ::Ice::OperationMode::Idempotent, false, nil, [[::Ice::T_string, false, 0]], [], [::IceGrid::T_ServerState, false, 0], [::IceGrid::T_ServerNotExistException, ::IceGrid::T_NodeUnreachableException, ::IceGrid::T_DeploymentException])
        AdminPrx_mixin::OP_getServerPid = ::Ice::__defineOperation('getServerPid', ::Ice::OperationMode::Idempotent, false, nil, [[::Ice::T_string, false, 0]], [], [::Ice::T_int, false, 0], [::IceGrid::T_ServerNotExistException, ::IceGrid::T_NodeUnreachableException, ::IceGrid::T_DeploymentException])
        AdminPrx_mixin::OP_getServerAdminCategory = ::Ice::__defineOperation('getServerAdminCategory', ::Ice::OperationMode::Idempotent, false, nil, [], [], [::Ice::T_string, false, 0], [])
        AdminPrx_mixin::OP_getServerAdmin = ::Ice::__defineOperation('getServerAdmin', ::Ice::OperationMode::Idempotent, false, nil, [[::Ice::T_string, false, 0]], [], [::Ice::T_ObjectPrx, false, 0], [::IceGrid::T_ServerNotExistException, ::IceGrid::T_NodeUnreachableException, ::IceGrid::T_DeploymentException])
        AdminPrx_mixin::OP_enableServer = ::Ice::__defineOperation('enableServer', ::Ice::OperationMode::Idempotent, false, nil, [[::Ice::T_string, false, 0], [::Ice::T_bool, false, 0]], [], nil, [::IceGrid::T_ServerNotExistException, ::IceGrid::T_NodeUnreachableException, ::IceGrid::T_DeploymentException])
        AdminPrx_mixin::OP_isServerEnabled = ::Ice::__defineOperation('isServerEnabled', ::Ice::OperationMode::Idempotent, false, nil, [[::Ice::T_string, false, 0]], [], [::Ice::T_bool, false, 0], [::IceGrid::T_ServerNotExistException, ::IceGrid::T_NodeUnreachableException, ::IceGrid::T_DeploymentException])
        AdminPrx_mixin::OP_startServer = ::Ice::__defineOperation('startServer', ::Ice::OperationMode::Normal, true, nil, [[::Ice::T_string, false, 0]], [], nil, [::IceGrid::T_ServerNotExistException, ::IceGrid::T_ServerStartException, ::IceGrid::T_NodeUnreachableException, ::IceGrid::T_DeploymentException])
        AdminPrx_mixin::OP_stopServer = ::Ice::__defineOperation('stopServer', ::Ice::OperationMode::Normal, true, nil, [[::Ice::T_string, false, 0]], [], nil, [::IceGrid::T_ServerNotExistException, ::IceGrid::T_ServerStopException, ::IceGrid::T_NodeUnreachableException, ::IceGrid::T_DeploymentException])
        AdminPrx_mixin::OP_sendSignal = ::Ice::__defineOperation('sendSignal', ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_string, false, 0], [::Ice::T_string, false, 0]], [], nil, [::IceGrid::T_ServerNotExistException, ::IceGrid::T_NodeUnreachableException, ::IceGrid::T_DeploymentException, ::IceGrid::T_BadSignalException])
        AdminPrx_mixin::OP_getAllServerIds = ::Ice::__defineOperation('getAllServerIds', ::Ice::OperationMode::Idempotent, false, nil, [], [], [::Ice::T_StringSeq, false, 0], [])
        AdminPrx_mixin::OP_getAdapterInfo = ::Ice::__defineOperation('getAdapterInfo', ::Ice::OperationMode::Idempotent, false, nil, [[::Ice::T_string, false, 0]], [], [::IceGrid::T_AdapterInfoSeq, false, 0], [::IceGrid::T_AdapterNotExistException])
        AdminPrx_mixin::OP_removeAdapter = ::Ice::__defineOperation('removeAdapter', ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_string, false, 0]], [], nil, [::IceGrid::T_AdapterNotExistException, ::IceGrid::T_DeploymentException])
        AdminPrx_mixin::OP_getAllAdapterIds = ::Ice::__defineOperation('getAllAdapterIds', ::Ice::OperationMode::Idempotent, false, nil, [], [], [::Ice::T_StringSeq, false, 0], [])
        AdminPrx_mixin::OP_addObject = ::Ice::__defineOperation('addObject', ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_ObjectPrx, false, 0]], [], nil, [::IceGrid::T_ObjectExistsException, ::IceGrid::T_DeploymentException])
        AdminPrx_mixin::OP_updateObject = ::Ice::__defineOperation('updateObject', ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_ObjectPrx, false, 0]], [], nil, [::IceGrid::T_ObjectNotRegisteredException, ::IceGrid::T_DeploymentException])
        AdminPrx_mixin::OP_addObjectWithType = ::Ice::__defineOperation('addObjectWithType', ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_ObjectPrx, false, 0], [::Ice::T_string, false, 0]], [], nil, [::IceGrid::T_ObjectExistsException, ::IceGrid::T_DeploymentException])
        AdminPrx_mixin::OP_removeObject = ::Ice::__defineOperation('removeObject', ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_Identity, false, 0]], [], nil, [::IceGrid::T_ObjectNotRegisteredException, ::IceGrid::T_DeploymentException])
        AdminPrx_mixin::OP_getObjectInfo = ::Ice::__defineOperation('getObjectInfo', ::Ice::OperationMode::Idempotent, false, nil, [[::Ice::T_Identity, false, 0]], [], [::IceGrid::T_ObjectInfo, false, 0], [::IceGrid::T_ObjectNotRegisteredException])
        AdminPrx_mixin::OP_getObjectInfosByType = ::Ice::__defineOperation('getObjectInfosByType', ::Ice::OperationMode::Idempotent, false, nil, [[::Ice::T_string, false, 0]], [], [::IceGrid::T_ObjectInfoSeq, false, 0], [])
        AdminPrx_mixin::OP_getAllObjectInfos = ::Ice::__defineOperation('getAllObjectInfos', ::Ice::OperationMode::Idempotent, false, nil, [[::Ice::T_string, false, 0]], [], [::IceGrid::T_ObjectInfoSeq, false, 0], [])
        AdminPrx_mixin::OP_pingNode = ::Ice::__defineOperation('pingNode', ::Ice::OperationMode::Idempotent, false, nil, [[::Ice::T_string, false, 0]], [], [::Ice::T_bool, false, 0], [::IceGrid::T_NodeNotExistException])
        AdminPrx_mixin::OP_getNodeLoad = ::Ice::__defineOperation('getNodeLoad', ::Ice::OperationMode::Idempotent, false, nil, [[::Ice::T_string, false, 0]], [], [::IceGrid::T_LoadInfo, false, 0], [::IceGrid::T_NodeNotExistException, ::IceGrid::T_NodeUnreachableException])
        AdminPrx_mixin::OP_getNodeInfo = ::Ice::__defineOperation('getNodeInfo', ::Ice::OperationMode::Idempotent, false, nil, [[::Ice::T_string, false, 0]], [], [::IceGrid::T_NodeInfo, false, 0], [::IceGrid::T_NodeNotExistException, ::IceGrid::T_NodeUnreachableException])
        AdminPrx_mixin::OP_getNodeAdmin = ::Ice::__defineOperation('getNodeAdmin', ::Ice::OperationMode::Idempotent, false, nil, [[::Ice::T_string, false, 0]], [], [::Ice::T_ObjectPrx, false, 0], [::IceGrid::T_NodeNotExistException, ::IceGrid::T_NodeUnreachableException])
        AdminPrx_mixin::OP_getNodeProcessorSocketCount = ::Ice::__defineOperation('getNodeProcessorSocketCount', ::Ice::OperationMode::Idempotent, false, nil, [[::Ice::T_string, false, 0]], [], [::Ice::T_int, false, 0], [::IceGrid::T_NodeNotExistException, ::IceGrid::T_NodeUnreachableException])
        AdminPrx_mixin::OP_shutdownNode = ::Ice::__defineOperation('shutdownNode', ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_string, false, 0]], [], nil, [::IceGrid::T_NodeNotExistException, ::IceGrid::T_NodeUnreachableException])
        AdminPrx_mixin::OP_getNodeHostname = ::Ice::__defineOperation('getNodeHostname', ::Ice::OperationMode::Idempotent, false, nil, [[::Ice::T_string, false, 0]], [], [::Ice::T_string, false, 0], [::IceGrid::T_NodeNotExistException, ::IceGrid::T_NodeUnreachableException])
        AdminPrx_mixin::OP_getAllNodeNames = ::Ice::__defineOperation('getAllNodeNames', ::Ice::OperationMode::Idempotent, false, nil, [], [], [::Ice::T_StringSeq, false, 0], [])
        AdminPrx_mixin::OP_pingRegistry = ::Ice::__defineOperation('pingRegistry', ::Ice::OperationMode::Idempotent, false, nil, [[::Ice::T_string, false, 0]], [], [::Ice::T_bool, false, 0], [::IceGrid::T_RegistryNotExistException])
        AdminPrx_mixin::OP_getRegistryInfo = ::Ice::__defineOperation('getRegistryInfo', ::Ice::OperationMode::Idempotent, false, nil, [[::Ice::T_string, false, 0]], [], [::IceGrid::T_RegistryInfo, false, 0], [::IceGrid::T_RegistryNotExistException, ::IceGrid::T_RegistryUnreachableException])
        AdminPrx_mixin::OP_getRegistryAdmin = ::Ice::__defineOperation('getRegistryAdmin', ::Ice::OperationMode::Idempotent, false, nil, [[::Ice::T_string, false, 0]], [], [::Ice::T_ObjectPrx, false, 0], [::IceGrid::T_RegistryNotExistException])
        AdminPrx_mixin::OP_shutdownRegistry = ::Ice::__defineOperation('shutdownRegistry', ::Ice::OperationMode::Idempotent, false, nil, [[::Ice::T_string, false, 0]], [], nil, [::IceGrid::T_RegistryNotExistException, ::IceGrid::T_RegistryUnreachableException])
        AdminPrx_mixin::OP_getAllRegistryNames = ::Ice::__defineOperation('getAllRegistryNames', ::Ice::OperationMode::Idempotent, false, nil, [], [], [::Ice::T_StringSeq, false, 0], [])
        AdminPrx_mixin::OP_shutdown = ::Ice::__defineOperation('shutdown', ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
    end

    if not defined?(::IceGrid::FileIterator_Mixin)

        module ::IceGrid::FileIterator_Mixin
        end
        module FileIteratorPrx_mixin

            def read(size, context=nil)
                FileIteratorPrx_mixin::OP_read.invoke(self, [size], context)
            end

            def destroy(context=nil)
                FileIteratorPrx_mixin::OP_destroy.invoke(self, [], context)
            end
        end

        class FileIteratorPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include FileIteratorPrx_mixin
        end

        if not defined?(::IceGrid::T_FileIteratorPrx)
            T_FileIterator = ::Ice::__declareClass('::IceGrid::FileIterator')
            T_FileIteratorPrx = ::Ice::__declareProxy('::IceGrid::FileIterator')
        end

        T_FileIteratorPrx.defineProxy(FileIteratorPrx, nil, [])

        FileIteratorPrx_mixin::OP_read = ::Ice::__defineOperation('read', ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_int, false, 0]], [[::Ice::T_StringSeq, false, 0]], [::Ice::T_bool, false, 0], [::IceGrid::T_FileNotAvailableException])
        FileIteratorPrx_mixin::OP_destroy = ::Ice::__defineOperation('destroy', ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
    end

    if not defined?(::IceGrid::ServerDynamicInfo)
        class ServerDynamicInfo
            include ::Ice::Inspect_mixin
            def initialize(id='', state=::IceGrid::ServerState::Inactive, pid=0, enabled=false)
                @id = id
                @state = state
                @pid = pid
                @enabled = enabled
            end

            def hash
                _h = 0
                _h = 5 * _h + @id.hash
                _h = 5 * _h + @state.hash
                _h = 5 * _h + @pid.hash
                _h = 5 * _h + @enabled.hash
                _h % 0x7fffffff
            end

            def ==(other)
                return false if !other.is_a? ::IceGrid::ServerDynamicInfo or
                    @id != other.id or
                    @state != other.state or
                    @pid != other.pid or
                    @enabled != other.enabled
                true
            end

            def eql?(other)
                return other.class == self.class && other == self
            end

            attr_accessor :id, :state, :pid, :enabled
        end

        T_ServerDynamicInfo = ::Ice::__defineStruct('::IceGrid::ServerDynamicInfo', ServerDynamicInfo, [
            ["id", ::Ice::T_string],
            ["state", ::IceGrid::T_ServerState],
            ["pid", ::Ice::T_int],
            ["enabled", ::Ice::T_bool]
        ])
    end

    if not defined?(::IceGrid::T_ServerDynamicInfoSeq)
        T_ServerDynamicInfoSeq = ::Ice::__defineSequence('::IceGrid::ServerDynamicInfoSeq', ::IceGrid::T_ServerDynamicInfo)
    end

    if not defined?(::IceGrid::AdapterDynamicInfo)
        class AdapterDynamicInfo
            include ::Ice::Inspect_mixin
            def initialize(id='', proxy=nil)
                @id = id
                @proxy = proxy
            end

            def hash
                _h = 0
                _h = 5 * _h + @id.hash
                _h = 5 * _h + @proxy.hash
                _h % 0x7fffffff
            end

            def ==(other)
                return false if !other.is_a? ::IceGrid::AdapterDynamicInfo or
                    @id != other.id or
                    @proxy != other.proxy
                true
            end

            def eql?(other)
                return other.class == self.class && other == self
            end

            attr_accessor :id, :proxy
        end

        T_AdapterDynamicInfo = ::Ice::__defineStruct('::IceGrid::AdapterDynamicInfo', AdapterDynamicInfo, [
            ["id", ::Ice::T_string],
            ["proxy", ::Ice::T_ObjectPrx]
        ])
    end

    if not defined?(::IceGrid::T_AdapterDynamicInfoSeq)
        T_AdapterDynamicInfoSeq = ::Ice::__defineSequence('::IceGrid::AdapterDynamicInfoSeq', ::IceGrid::T_AdapterDynamicInfo)
    end

    if not defined?(::IceGrid::NodeDynamicInfo)
        class NodeDynamicInfo
            include ::Ice::Inspect_mixin
            def initialize(info=::IceGrid::NodeInfo.new, servers=nil, adapters=nil)
                @info = info
                @servers = servers
                @adapters = adapters
            end

            def hash
                _h = 0
                _h = 5 * _h + @info.hash
                _h = 5 * _h + @servers.hash
                _h = 5 * _h + @adapters.hash
                _h % 0x7fffffff
            end

            def ==(other)
                return false if !other.is_a? ::IceGrid::NodeDynamicInfo or
                    @info != other.info or
                    @servers != other.servers or
                    @adapters != other.adapters
                true
            end

            def eql?(other)
                return other.class == self.class && other == self
            end

            attr_accessor :info, :servers, :adapters
        end

        T_NodeDynamicInfo = ::Ice::__defineStruct('::IceGrid::NodeDynamicInfo', NodeDynamicInfo, [
            ["info", ::IceGrid::T_NodeInfo],
            ["servers", ::IceGrid::T_ServerDynamicInfoSeq],
            ["adapters", ::IceGrid::T_AdapterDynamicInfoSeq]
        ])
    end

    if not defined?(::IceGrid::RegistryObserver_Mixin)

        module ::IceGrid::RegistryObserver_Mixin
        end
        module RegistryObserverPrx_mixin

            def registryInit(registries, context=nil)
                RegistryObserverPrx_mixin::OP_registryInit.invoke(self, [registries], context)
            end

            def registryUp(registryReplica, context=nil)
                RegistryObserverPrx_mixin::OP_registryUp.invoke(self, [registryReplica], context)
            end

            def registryDown(name, context=nil)
                RegistryObserverPrx_mixin::OP_registryDown.invoke(self, [name], context)
            end
        end

        class RegistryObserverPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include RegistryObserverPrx_mixin
        end

        if not defined?(::IceGrid::T_RegistryObserverPrx)
            T_RegistryObserver = ::Ice::__declareClass('::IceGrid::RegistryObserver')
            T_RegistryObserverPrx = ::Ice::__declareProxy('::IceGrid::RegistryObserver')
        end

        T_RegistryObserverPrx.defineProxy(RegistryObserverPrx, nil, [])

        RegistryObserverPrx_mixin::OP_registryInit = ::Ice::__defineOperation('registryInit', ::Ice::OperationMode::Normal, false, nil, [[::IceGrid::T_RegistryInfoSeq, false, 0]], [], nil, [])
        RegistryObserverPrx_mixin::OP_registryUp = ::Ice::__defineOperation('registryUp', ::Ice::OperationMode::Normal, false, nil, [[::IceGrid::T_RegistryInfo, false, 0]], [], nil, [])
        RegistryObserverPrx_mixin::OP_registryDown = ::Ice::__defineOperation('registryDown', ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_string, false, 0]], [], nil, [])
    end

    if not defined?(::IceGrid::T_NodeDynamicInfoSeq)
        T_NodeDynamicInfoSeq = ::Ice::__defineSequence('::IceGrid::NodeDynamicInfoSeq', ::IceGrid::T_NodeDynamicInfo)
    end

    if not defined?(::IceGrid::NodeObserver_Mixin)

        module ::IceGrid::NodeObserver_Mixin
        end
        module NodeObserverPrx_mixin

            def nodeInit(nodes, context=nil)
                NodeObserverPrx_mixin::OP_nodeInit.invoke(self, [nodes], context)
            end

            def nodeUp(node, context=nil)
                NodeObserverPrx_mixin::OP_nodeUp.invoke(self, [node], context)
            end

            def nodeDown(name, context=nil)
                NodeObserverPrx_mixin::OP_nodeDown.invoke(self, [name], context)
            end

            def updateServer(node, updatedInfo, context=nil)
                NodeObserverPrx_mixin::OP_updateServer.invoke(self, [node, updatedInfo], context)
            end

            def updateAdapter(node, updatedInfo, context=nil)
                NodeObserverPrx_mixin::OP_updateAdapter.invoke(self, [node, updatedInfo], context)
            end
        end

        class NodeObserverPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include NodeObserverPrx_mixin
        end

        if not defined?(::IceGrid::T_NodeObserverPrx)
            T_NodeObserver = ::Ice::__declareClass('::IceGrid::NodeObserver')
            T_NodeObserverPrx = ::Ice::__declareProxy('::IceGrid::NodeObserver')
        end

        T_NodeObserverPrx.defineProxy(NodeObserverPrx, nil, [])

        NodeObserverPrx_mixin::OP_nodeInit = ::Ice::__defineOperation('nodeInit', ::Ice::OperationMode::Normal, false, nil, [[::IceGrid::T_NodeDynamicInfoSeq, false, 0]], [], nil, [])
        NodeObserverPrx_mixin::OP_nodeUp = ::Ice::__defineOperation('nodeUp', ::Ice::OperationMode::Normal, false, nil, [[::IceGrid::T_NodeDynamicInfo, false, 0]], [], nil, [])
        NodeObserverPrx_mixin::OP_nodeDown = ::Ice::__defineOperation('nodeDown', ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_string, false, 0]], [], nil, [])
        NodeObserverPrx_mixin::OP_updateServer = ::Ice::__defineOperation('updateServer', ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_string, false, 0], [::IceGrid::T_ServerDynamicInfo, false, 0]], [], nil, [])
        NodeObserverPrx_mixin::OP_updateAdapter = ::Ice::__defineOperation('updateAdapter', ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_string, false, 0], [::IceGrid::T_AdapterDynamicInfo, false, 0]], [], nil, [])
    end

    if not defined?(::IceGrid::ApplicationObserver_Mixin)

        module ::IceGrid::ApplicationObserver_Mixin
        end
        module ApplicationObserverPrx_mixin

            def applicationInit(serial, applications, context=nil)
                ApplicationObserverPrx_mixin::OP_applicationInit.invoke(self, [serial, applications], context)
            end

            def applicationAdded(serial, desc, context=nil)
                ApplicationObserverPrx_mixin::OP_applicationAdded.invoke(self, [serial, desc], context)
            end

            def applicationRemoved(serial, name, context=nil)
                ApplicationObserverPrx_mixin::OP_applicationRemoved.invoke(self, [serial, name], context)
            end

            def applicationUpdated(serial, desc, context=nil)
                ApplicationObserverPrx_mixin::OP_applicationUpdated.invoke(self, [serial, desc], context)
            end
        end

        class ApplicationObserverPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include ApplicationObserverPrx_mixin
        end

        if not defined?(::IceGrid::T_ApplicationObserverPrx)
            T_ApplicationObserver = ::Ice::__declareClass('::IceGrid::ApplicationObserver')
            T_ApplicationObserverPrx = ::Ice::__declareProxy('::IceGrid::ApplicationObserver')
        end

        T_ApplicationObserverPrx.defineProxy(ApplicationObserverPrx, nil, [])

        ApplicationObserverPrx_mixin::OP_applicationInit = ::Ice::__defineOperation('applicationInit', ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_int, false, 0], [::IceGrid::T_ApplicationInfoSeq, false, 0]], [], nil, [])
        ApplicationObserverPrx_mixin::OP_applicationAdded = ::Ice::__defineOperation('applicationAdded', ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_int, false, 0], [::IceGrid::T_ApplicationInfo, false, 0]], [], nil, [])
        ApplicationObserverPrx_mixin::OP_applicationRemoved = ::Ice::__defineOperation('applicationRemoved', ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_int, false, 0], [::Ice::T_string, false, 0]], [], nil, [])
        ApplicationObserverPrx_mixin::OP_applicationUpdated = ::Ice::__defineOperation('applicationUpdated', ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_int, false, 0], [::IceGrid::T_ApplicationUpdateInfo, false, 0]], [], nil, [])
    end

    if not defined?(::IceGrid::AdapterObserver_Mixin)

        module ::IceGrid::AdapterObserver_Mixin
        end
        module AdapterObserverPrx_mixin

            def adapterInit(adpts, context=nil)
                AdapterObserverPrx_mixin::OP_adapterInit.invoke(self, [adpts], context)
            end

            def adapterAdded(info, context=nil)
                AdapterObserverPrx_mixin::OP_adapterAdded.invoke(self, [info], context)
            end

            def adapterUpdated(info, context=nil)
                AdapterObserverPrx_mixin::OP_adapterUpdated.invoke(self, [info], context)
            end

            def adapterRemoved(id, context=nil)
                AdapterObserverPrx_mixin::OP_adapterRemoved.invoke(self, [id], context)
            end
        end

        class AdapterObserverPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include AdapterObserverPrx_mixin
        end

        if not defined?(::IceGrid::T_AdapterObserverPrx)
            T_AdapterObserver = ::Ice::__declareClass('::IceGrid::AdapterObserver')
            T_AdapterObserverPrx = ::Ice::__declareProxy('::IceGrid::AdapterObserver')
        end

        T_AdapterObserverPrx.defineProxy(AdapterObserverPrx, nil, [])

        AdapterObserverPrx_mixin::OP_adapterInit = ::Ice::__defineOperation('adapterInit', ::Ice::OperationMode::Normal, false, nil, [[::IceGrid::T_AdapterInfoSeq, false, 0]], [], nil, [])
        AdapterObserverPrx_mixin::OP_adapterAdded = ::Ice::__defineOperation('adapterAdded', ::Ice::OperationMode::Normal, false, nil, [[::IceGrid::T_AdapterInfo, false, 0]], [], nil, [])
        AdapterObserverPrx_mixin::OP_adapterUpdated = ::Ice::__defineOperation('adapterUpdated', ::Ice::OperationMode::Normal, false, nil, [[::IceGrid::T_AdapterInfo, false, 0]], [], nil, [])
        AdapterObserverPrx_mixin::OP_adapterRemoved = ::Ice::__defineOperation('adapterRemoved', ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_string, false, 0]], [], nil, [])
    end

    if not defined?(::IceGrid::ObjectObserver_Mixin)

        module ::IceGrid::ObjectObserver_Mixin
        end
        module ObjectObserverPrx_mixin

            def objectInit(objects, context=nil)
                ObjectObserverPrx_mixin::OP_objectInit.invoke(self, [objects], context)
            end

            def objectAdded(info, context=nil)
                ObjectObserverPrx_mixin::OP_objectAdded.invoke(self, [info], context)
            end

            def objectUpdated(info, context=nil)
                ObjectObserverPrx_mixin::OP_objectUpdated.invoke(self, [info], context)
            end

            def objectRemoved(id, context=nil)
                ObjectObserverPrx_mixin::OP_objectRemoved.invoke(self, [id], context)
            end
        end

        class ObjectObserverPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include ObjectObserverPrx_mixin
        end

        if not defined?(::IceGrid::T_ObjectObserverPrx)
            T_ObjectObserver = ::Ice::__declareClass('::IceGrid::ObjectObserver')
            T_ObjectObserverPrx = ::Ice::__declareProxy('::IceGrid::ObjectObserver')
        end

        T_ObjectObserverPrx.defineProxy(ObjectObserverPrx, nil, [])

        ObjectObserverPrx_mixin::OP_objectInit = ::Ice::__defineOperation('objectInit', ::Ice::OperationMode::Normal, false, nil, [[::IceGrid::T_ObjectInfoSeq, false, 0]], [], nil, [])
        ObjectObserverPrx_mixin::OP_objectAdded = ::Ice::__defineOperation('objectAdded', ::Ice::OperationMode::Normal, false, nil, [[::IceGrid::T_ObjectInfo, false, 0]], [], nil, [])
        ObjectObserverPrx_mixin::OP_objectUpdated = ::Ice::__defineOperation('objectUpdated', ::Ice::OperationMode::Normal, false, nil, [[::IceGrid::T_ObjectInfo, false, 0]], [], nil, [])
        ObjectObserverPrx_mixin::OP_objectRemoved = ::Ice::__defineOperation('objectRemoved', ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_Identity, false, 0]], [], nil, [])
    end

    if not defined?(::IceGrid::AdminSession_Mixin)

        module ::IceGrid::AdminSession_Mixin
        end
        module AdminSessionPrx_mixin
            include ::Glacier2::SessionPrx_mixin

            def keepAlive(context=nil)
                AdminSessionPrx_mixin::OP_keepAlive.invoke(self, [], context)
            end

            def getAdmin(context=nil)
                AdminSessionPrx_mixin::OP_getAdmin.invoke(self, [], context)
            end

            def getAdminCallbackTemplate(context=nil)
                AdminSessionPrx_mixin::OP_getAdminCallbackTemplate.invoke(self, [], context)
            end

            def setObservers(registryObs, nodeObs, appObs, adptObs, objObs, context=nil)
                AdminSessionPrx_mixin::OP_setObservers.invoke(self, [registryObs, nodeObs, appObs, adptObs, objObs], context)
            end

            def setObserversByIdentity(registryObs, nodeObs, appObs, adptObs, objObs, context=nil)
                AdminSessionPrx_mixin::OP_setObserversByIdentity.invoke(self, [registryObs, nodeObs, appObs, adptObs, objObs], context)
            end

            def startUpdate(context=nil)
                AdminSessionPrx_mixin::OP_startUpdate.invoke(self, [], context)
            end

            def finishUpdate(context=nil)
                AdminSessionPrx_mixin::OP_finishUpdate.invoke(self, [], context)
            end

            def getReplicaName(context=nil)
                AdminSessionPrx_mixin::OP_getReplicaName.invoke(self, [], context)
            end

            def openServerLog(id, path, count, context=nil)
                AdminSessionPrx_mixin::OP_openServerLog.invoke(self, [id, path, count], context)
            end

            def openServerStdErr(id, count, context=nil)
                AdminSessionPrx_mixin::OP_openServerStdErr.invoke(self, [id, count], context)
            end

            def openServerStdOut(id, count, context=nil)
                AdminSessionPrx_mixin::OP_openServerStdOut.invoke(self, [id, count], context)
            end

            def openNodeStdErr(name, count, context=nil)
                AdminSessionPrx_mixin::OP_openNodeStdErr.invoke(self, [name, count], context)
            end

            def openNodeStdOut(name, count, context=nil)
                AdminSessionPrx_mixin::OP_openNodeStdOut.invoke(self, [name, count], context)
            end

            def openRegistryStdErr(name, count, context=nil)
                AdminSessionPrx_mixin::OP_openRegistryStdErr.invoke(self, [name, count], context)
            end

            def openRegistryStdOut(name, count, context=nil)
                AdminSessionPrx_mixin::OP_openRegistryStdOut.invoke(self, [name, count], context)
            end
        end

        class AdminSessionPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include AdminSessionPrx_mixin
        end

        if not defined?(::IceGrid::T_AdminSessionPrx)
            T_AdminSession = ::Ice::__declareClass('::IceGrid::AdminSession')
            T_AdminSessionPrx = ::Ice::__declareProxy('::IceGrid::AdminSession')
        end

        T_AdminSessionPrx.defineProxy(AdminSessionPrx, nil, [::Glacier2::T_SessionPrx])

        AdminSessionPrx_mixin::OP_keepAlive = ::Ice::__defineOperation('keepAlive', ::Ice::OperationMode::Idempotent, false, nil, [], [], nil, [])
        AdminSessionPrx_mixin::OP_getAdmin = ::Ice::__defineOperation('getAdmin', ::Ice::OperationMode::Idempotent, false, nil, [], [], [::IceGrid::T_AdminPrx, false, 0], [])
        AdminSessionPrx_mixin::OP_getAdminCallbackTemplate = ::Ice::__defineOperation('getAdminCallbackTemplate', ::Ice::OperationMode::Idempotent, false, nil, [], [], [::Ice::T_ObjectPrx, false, 0], [])
        AdminSessionPrx_mixin::OP_setObservers = ::Ice::__defineOperation('setObservers', ::Ice::OperationMode::Idempotent, false, nil, [[::IceGrid::T_RegistryObserverPrx, false, 0], [::IceGrid::T_NodeObserverPrx, false, 0], [::IceGrid::T_ApplicationObserverPrx, false, 0], [::IceGrid::T_AdapterObserverPrx, false, 0], [::IceGrid::T_ObjectObserverPrx, false, 0]], [], nil, [::IceGrid::T_ObserverAlreadyRegisteredException])
        AdminSessionPrx_mixin::OP_setObserversByIdentity = ::Ice::__defineOperation('setObserversByIdentity', ::Ice::OperationMode::Idempotent, false, nil, [[::Ice::T_Identity, false, 0], [::Ice::T_Identity, false, 0], [::Ice::T_Identity, false, 0], [::Ice::T_Identity, false, 0], [::Ice::T_Identity, false, 0]], [], nil, [::IceGrid::T_ObserverAlreadyRegisteredException])
        AdminSessionPrx_mixin::OP_startUpdate = ::Ice::__defineOperation('startUpdate', ::Ice::OperationMode::Normal, false, nil, [], [], [::Ice::T_int, false, 0], [::IceGrid::T_AccessDeniedException])
        AdminSessionPrx_mixin::OP_finishUpdate = ::Ice::__defineOperation('finishUpdate', ::Ice::OperationMode::Normal, false, nil, [], [], nil, [::IceGrid::T_AccessDeniedException])
        AdminSessionPrx_mixin::OP_getReplicaName = ::Ice::__defineOperation('getReplicaName', ::Ice::OperationMode::Idempotent, false, nil, [], [], [::Ice::T_string, false, 0], [])
        AdminSessionPrx_mixin::OP_openServerLog = ::Ice::__defineOperation('openServerLog', ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_string, false, 0], [::Ice::T_string, false, 0], [::Ice::T_int, false, 0]], [], [::IceGrid::T_FileIteratorPrx, false, 0], [::IceGrid::T_FileNotAvailableException, ::IceGrid::T_ServerNotExistException, ::IceGrid::T_NodeUnreachableException, ::IceGrid::T_DeploymentException])
        AdminSessionPrx_mixin::OP_openServerStdErr = ::Ice::__defineOperation('openServerStdErr', ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_string, false, 0], [::Ice::T_int, false, 0]], [], [::IceGrid::T_FileIteratorPrx, false, 0], [::IceGrid::T_FileNotAvailableException, ::IceGrid::T_ServerNotExistException, ::IceGrid::T_NodeUnreachableException, ::IceGrid::T_DeploymentException])
        AdminSessionPrx_mixin::OP_openServerStdOut = ::Ice::__defineOperation('openServerStdOut', ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_string, false, 0], [::Ice::T_int, false, 0]], [], [::IceGrid::T_FileIteratorPrx, false, 0], [::IceGrid::T_FileNotAvailableException, ::IceGrid::T_ServerNotExistException, ::IceGrid::T_NodeUnreachableException, ::IceGrid::T_DeploymentException])
        AdminSessionPrx_mixin::OP_openNodeStdErr = ::Ice::__defineOperation('openNodeStdErr', ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_string, false, 0], [::Ice::T_int, false, 0]], [], [::IceGrid::T_FileIteratorPrx, false, 0], [::IceGrid::T_FileNotAvailableException, ::IceGrid::T_NodeNotExistException, ::IceGrid::T_NodeUnreachableException])
        AdminSessionPrx_mixin::OP_openNodeStdOut = ::Ice::__defineOperation('openNodeStdOut', ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_string, false, 0], [::Ice::T_int, false, 0]], [], [::IceGrid::T_FileIteratorPrx, false, 0], [::IceGrid::T_FileNotAvailableException, ::IceGrid::T_NodeNotExistException, ::IceGrid::T_NodeUnreachableException])
        AdminSessionPrx_mixin::OP_openRegistryStdErr = ::Ice::__defineOperation('openRegistryStdErr', ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_string, false, 0], [::Ice::T_int, false, 0]], [], [::IceGrid::T_FileIteratorPrx, false, 0], [::IceGrid::T_FileNotAvailableException, ::IceGrid::T_RegistryNotExistException, ::IceGrid::T_RegistryUnreachableException])
        AdminSessionPrx_mixin::OP_openRegistryStdOut = ::Ice::__defineOperation('openRegistryStdOut', ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_string, false, 0], [::Ice::T_int, false, 0]], [], [::IceGrid::T_FileIteratorPrx, false, 0], [::IceGrid::T_FileNotAvailableException, ::IceGrid::T_RegistryNotExistException, ::IceGrid::T_RegistryUnreachableException])
    end
end
