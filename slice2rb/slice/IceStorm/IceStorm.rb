# encoding: utf-8
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.9
#
# <auto-generated>
#
# Generated from file `IceStorm.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

require 'Ice'
require 'Ice/Identity.rb'
require 'Ice/SliceChecksumDict.rb'
require 'Metrics.rb'

module ::IceStorm

    if not defined?(::IceStorm::T_Topic)
        T_Topic = ::Ice::__declareClass('::IceStorm::Topic')
        T_TopicPrx = ::Ice::__declareProxy('::IceStorm::Topic')
    end

    if not defined?(::IceStorm::LinkInfo)
        class LinkInfo
            include ::Ice::Inspect_mixin
            def initialize(theTopic=nil, name='', cost=0)
                @theTopic = theTopic
                @name = name
                @cost = cost
            end

            def hash
                _h = 0
                _h = 5 * _h + @theTopic.hash
                _h = 5 * _h + @name.hash
                _h = 5 * _h + @cost.hash
                _h % 0x7fffffff
            end

            def ==(other)
                return false if !other.is_a? ::IceStorm::LinkInfo or
                    @theTopic != other.theTopic or
                    @name != other.name or
                    @cost != other.cost
                true
            end

            def eql?(other)
                return other.class == self.class && other == self
            end

            attr_accessor :theTopic, :name, :cost
        end

        T_LinkInfo = ::Ice::__defineStruct('::IceStorm::LinkInfo', LinkInfo, [
            ["theTopic", ::IceStorm::T_TopicPrx],
            ["name", ::Ice::T_string],
            ["cost", ::Ice::T_int]
        ])
    end

    if not defined?(::IceStorm::T_LinkInfoSeq)
        T_LinkInfoSeq = ::Ice::__defineSequence('::IceStorm::LinkInfoSeq', ::IceStorm::T_LinkInfo)
    end

    if not defined?(::IceStorm::T_QoS)
        T_QoS = ::Ice::__defineDictionary('::IceStorm::QoS', ::Ice::T_string, ::Ice::T_string)
    end

    if not defined?(::IceStorm::LinkExists)
        class LinkExists < Ice::UserException
            def initialize(name='')
                @name = name
            end

            def to_s
                '::IceStorm::LinkExists'
            end

            attr_accessor :name
        end

        T_LinkExists = ::Ice::__defineException('::IceStorm::LinkExists', LinkExists, false, nil, [["name", ::Ice::T_string, false, 0]])
    end

    if not defined?(::IceStorm::NoSuchLink)
        class NoSuchLink < Ice::UserException
            def initialize(name='')
                @name = name
            end

            def to_s
                '::IceStorm::NoSuchLink'
            end

            attr_accessor :name
        end

        T_NoSuchLink = ::Ice::__defineException('::IceStorm::NoSuchLink', NoSuchLink, false, nil, [["name", ::Ice::T_string, false, 0]])
    end

    if not defined?(::IceStorm::AlreadySubscribed)
        class AlreadySubscribed < Ice::UserException
            def initialize
            end

            def to_s
                '::IceStorm::AlreadySubscribed'
            end
        end

        T_AlreadySubscribed = ::Ice::__defineException('::IceStorm::AlreadySubscribed', AlreadySubscribed, false, nil, [])
    end

    if not defined?(::IceStorm::InvalidSubscriber)
        class InvalidSubscriber < Ice::UserException
            def initialize(reason='')
                @reason = reason
            end

            def to_s
                '::IceStorm::InvalidSubscriber'
            end

            attr_accessor :reason
        end

        T_InvalidSubscriber = ::Ice::__defineException('::IceStorm::InvalidSubscriber', InvalidSubscriber, false, nil, [["reason", ::Ice::T_string, false, 0]])
    end

    if not defined?(::IceStorm::BadQoS)
        class BadQoS < Ice::UserException
            def initialize(reason='')
                @reason = reason
            end

            def to_s
                '::IceStorm::BadQoS'
            end

            attr_accessor :reason
        end

        T_BadQoS = ::Ice::__defineException('::IceStorm::BadQoS', BadQoS, false, nil, [["reason", ::Ice::T_string, false, 0]])
    end

    if not defined?(::IceStorm::Topic_Mixin)

        module ::IceStorm::Topic_Mixin
        end
        module TopicPrx_mixin

            def getName(context=nil)
                TopicPrx_mixin::OP_getName.invoke(self, [], context)
            end

            def getPublisher(context=nil)
                TopicPrx_mixin::OP_getPublisher.invoke(self, [], context)
            end

            def getNonReplicatedPublisher(context=nil)
                TopicPrx_mixin::OP_getNonReplicatedPublisher.invoke(self, [], context)
            end

            def subscribeAndGetPublisher(theQoS, subscriber, context=nil)
                TopicPrx_mixin::OP_subscribeAndGetPublisher.invoke(self, [theQoS, subscriber], context)
            end

            def unsubscribe(subscriber, context=nil)
                TopicPrx_mixin::OP_unsubscribe.invoke(self, [subscriber], context)
            end

            def link(linkTo, cost, context=nil)
                TopicPrx_mixin::OP_link.invoke(self, [linkTo, cost], context)
            end

            def unlink(linkTo, context=nil)
                TopicPrx_mixin::OP_unlink.invoke(self, [linkTo], context)
            end

            def getLinkInfoSeq(context=nil)
                TopicPrx_mixin::OP_getLinkInfoSeq.invoke(self, [], context)
            end

            def getSubscribers(context=nil)
                TopicPrx_mixin::OP_getSubscribers.invoke(self, [], context)
            end

            def destroy(context=nil)
                TopicPrx_mixin::OP_destroy.invoke(self, [], context)
            end
        end

        class TopicPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include TopicPrx_mixin
        end

        if not defined?(::IceStorm::T_TopicPrx)
            T_Topic = ::Ice::__declareClass('::IceStorm::Topic')
            T_TopicPrx = ::Ice::__declareProxy('::IceStorm::Topic')
        end

        T_Topic.defineClass(::Ice::Value, -1, false, true, nil, [])

        T_TopicPrx.defineProxy(TopicPrx, nil, [])

        TopicPrx_mixin::OP_getName = ::Ice::__defineOperation('getName', ::Ice::OperationMode::Idempotent, ::Ice::OperationMode::Nonmutating, false, nil, [], [], [::Ice::T_string, false, 0], [])
        TopicPrx_mixin::OP_getPublisher = ::Ice::__defineOperation('getPublisher', ::Ice::OperationMode::Idempotent, ::Ice::OperationMode::Nonmutating, false, nil, [], [], [::Ice::T_ObjectPrx, false, 0], [])
        TopicPrx_mixin::OP_getNonReplicatedPublisher = ::Ice::__defineOperation('getNonReplicatedPublisher', ::Ice::OperationMode::Idempotent, ::Ice::OperationMode::Nonmutating, false, nil, [], [], [::Ice::T_ObjectPrx, false, 0], [])
        TopicPrx_mixin::OP_subscribeAndGetPublisher = ::Ice::__defineOperation('subscribeAndGetPublisher', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::IceStorm::T_QoS, false, 0], [::Ice::T_ObjectPrx, false, 0]], [], [::Ice::T_ObjectPrx, false, 0], [::IceStorm::T_AlreadySubscribed, ::IceStorm::T_InvalidSubscriber, ::IceStorm::T_BadQoS])
        TopicPrx_mixin::OP_unsubscribe = ::Ice::__defineOperation('unsubscribe', ::Ice::OperationMode::Idempotent, ::Ice::OperationMode::Idempotent, false, nil, [[::Ice::T_ObjectPrx, false, 0]], [], nil, [])
        TopicPrx_mixin::OP_link = ::Ice::__defineOperation('link', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::IceStorm::T_TopicPrx, false, 0], [::Ice::T_int, false, 0]], [], nil, [::IceStorm::T_LinkExists])
        TopicPrx_mixin::OP_unlink = ::Ice::__defineOperation('unlink', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::IceStorm::T_TopicPrx, false, 0]], [], nil, [::IceStorm::T_NoSuchLink])
        TopicPrx_mixin::OP_getLinkInfoSeq = ::Ice::__defineOperation('getLinkInfoSeq', ::Ice::OperationMode::Idempotent, ::Ice::OperationMode::Nonmutating, false, nil, [], [], [::IceStorm::T_LinkInfoSeq, false, 0], [])
        TopicPrx_mixin::OP_getSubscribers = ::Ice::__defineOperation('getSubscribers', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], [::Ice::T_IdentitySeq, false, 0], [])
        TopicPrx_mixin::OP_destroy = ::Ice::__defineOperation('destroy', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
    end

    if not defined?(::IceStorm::T_TopicDict)
        T_TopicDict = ::Ice::__defineDictionary('::IceStorm::TopicDict', ::Ice::T_string, ::IceStorm::T_TopicPrx)
    end

    if not defined?(::IceStorm::TopicExists)
        class TopicExists < Ice::UserException
            def initialize(name='')
                @name = name
            end

            def to_s
                '::IceStorm::TopicExists'
            end

            attr_accessor :name
        end

        T_TopicExists = ::Ice::__defineException('::IceStorm::TopicExists', TopicExists, false, nil, [["name", ::Ice::T_string, false, 0]])
    end

    if not defined?(::IceStorm::NoSuchTopic)
        class NoSuchTopic < Ice::UserException
            def initialize(name='')
                @name = name
            end

            def to_s
                '::IceStorm::NoSuchTopic'
            end

            attr_accessor :name
        end

        T_NoSuchTopic = ::Ice::__defineException('::IceStorm::NoSuchTopic', NoSuchTopic, false, nil, [["name", ::Ice::T_string, false, 0]])
    end

    if not defined?(::IceStorm::TopicManager_Mixin)

        module ::IceStorm::TopicManager_Mixin
        end
        module TopicManagerPrx_mixin

            def create(name, context=nil)
                TopicManagerPrx_mixin::OP_create.invoke(self, [name], context)
            end

            def retrieve(name, context=nil)
                TopicManagerPrx_mixin::OP_retrieve.invoke(self, [name], context)
            end

            def retrieveAll(context=nil)
                TopicManagerPrx_mixin::OP_retrieveAll.invoke(self, [], context)
            end

            def getSliceChecksums(context=nil)
                TopicManagerPrx_mixin::OP_getSliceChecksums.invoke(self, [], context)
            end
        end

        class TopicManagerPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include TopicManagerPrx_mixin
        end

        if not defined?(::IceStorm::T_TopicManagerPrx)
            T_TopicManager = ::Ice::__declareClass('::IceStorm::TopicManager')
            T_TopicManagerPrx = ::Ice::__declareProxy('::IceStorm::TopicManager')
        end

        T_TopicManager.defineClass(::Ice::Value, -1, false, true, nil, [])

        T_TopicManagerPrx.defineProxy(TopicManagerPrx, nil, [])

        TopicManagerPrx_mixin::OP_create = ::Ice::__defineOperation('create', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_string, false, 0]], [], [::IceStorm::T_TopicPrx, false, 0], [::IceStorm::T_TopicExists])
        TopicManagerPrx_mixin::OP_retrieve = ::Ice::__defineOperation('retrieve', ::Ice::OperationMode::Idempotent, ::Ice::OperationMode::Nonmutating, false, nil, [[::Ice::T_string, false, 0]], [], [::IceStorm::T_TopicPrx, false, 0], [::IceStorm::T_NoSuchTopic])
        TopicManagerPrx_mixin::OP_retrieveAll = ::Ice::__defineOperation('retrieveAll', ::Ice::OperationMode::Idempotent, ::Ice::OperationMode::Nonmutating, false, nil, [], [], [::IceStorm::T_TopicDict, false, 0], [])
        TopicManagerPrx_mixin::OP_getSliceChecksums = ::Ice::__defineOperation('getSliceChecksums', ::Ice::OperationMode::Idempotent, ::Ice::OperationMode::Nonmutating, false, nil, [], [], [::Ice::T_SliceChecksumDict, false, 0], [])
    end

    if not defined?(::IceStorm::Finder_Mixin)

        module ::IceStorm::Finder_Mixin
        end
        module FinderPrx_mixin

            def getTopicManager(context=nil)
                FinderPrx_mixin::OP_getTopicManager.invoke(self, [], context)
            end
        end

        class FinderPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include FinderPrx_mixin
        end

        if not defined?(::IceStorm::T_FinderPrx)
            T_Finder = ::Ice::__declareClass('::IceStorm::Finder')
            T_FinderPrx = ::Ice::__declareProxy('::IceStorm::Finder')
        end

        T_Finder.defineClass(::Ice::Value, -1, false, true, nil, [])

        T_FinderPrx.defineProxy(FinderPrx, nil, [])

        FinderPrx_mixin::OP_getTopicManager = ::Ice::__defineOperation('getTopicManager', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [], [], [::IceStorm::T_TopicManagerPrx, false, 0], [])
    end
end
