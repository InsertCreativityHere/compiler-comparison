# encoding: utf-8
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file `IceDiscovery.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

require 'Ice'
require 'Ice/Identity.rb'

module ::IceDiscovery

    if not defined?(::IceDiscovery::LookupReply_Mixin)

        module ::IceDiscovery::LookupReply_Mixin
        end
        module LookupReplyPrx_mixin

            def foundObjectById(id, prx, context=nil)
                LookupReplyPrx_mixin::OP_foundObjectById.invoke(self, [id, prx], context)
            end

            def foundAdapterById(id, prx, isReplicaGroup, context=nil)
                LookupReplyPrx_mixin::OP_foundAdapterById.invoke(self, [id, prx, isReplicaGroup], context)
            end
        end

        class LookupReplyPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include LookupReplyPrx_mixin
        end

        if not defined?(::IceDiscovery::T_LookupReplyPrx)
            T_LookupReply = ::Ice::__declareClass('::IceDiscovery::LookupReply')
            T_LookupReplyPrx = ::Ice::__declareProxy('::IceDiscovery::LookupReply')
        end

        T_LookupReplyPrx.defineProxy(LookupReplyPrx, nil, [])

        LookupReplyPrx_mixin::OP_foundObjectById = ::Ice::__defineOperation('foundObjectById', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_Identity, false, 0], [::Ice::T_ObjectPrx, false, 0]], [], nil, [])
        LookupReplyPrx_mixin::OP_foundAdapterById = ::Ice::__defineOperation('foundAdapterById', ::Ice::OperationMode::Normal, ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_string, false, 0], [::Ice::T_ObjectPrx, false, 0], [::Ice::T_bool, false, 0]], [], nil, [])
    end

    if not defined?(::IceDiscovery::Lookup_Mixin)

        module ::IceDiscovery::Lookup_Mixin
        end
        module LookupPrx_mixin

            def findObjectById(domainId, id, reply, context=nil)
                LookupPrx_mixin::OP_findObjectById.invoke(self, [domainId, id, reply], context)
            end

            def findAdapterById(domainId, id, reply, context=nil)
                LookupPrx_mixin::OP_findAdapterById.invoke(self, [domainId, id, reply], context)
            end
        end

        class LookupPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include LookupPrx_mixin
        end

        if not defined?(::IceDiscovery::T_LookupPrx)
            T_Lookup = ::Ice::__declareClass('::IceDiscovery::Lookup')
            T_LookupPrx = ::Ice::__declareProxy('::IceDiscovery::Lookup')
        end

        T_LookupPrx.defineProxy(LookupPrx, nil, [])

        LookupPrx_mixin::OP_findObjectById = ::Ice::__defineOperation('findObjectById', ::Ice::OperationMode::Idempotent, ::Ice::OperationMode::Nonmutating, false, nil, [[::Ice::T_string, false, 0], [::Ice::T_Identity, false, 0], [::IceDiscovery::T_LookupReplyPrx, false, 0]], [], nil, [])
        LookupPrx_mixin::OP_findAdapterById = ::Ice::__defineOperation('findAdapterById', ::Ice::OperationMode::Idempotent, ::Ice::OperationMode::Nonmutating, false, nil, [[::Ice::T_string, false, 0], [::Ice::T_string, false, 0], [::IceDiscovery::T_LookupReplyPrx, false, 0]], [], nil, [])
    end
end
