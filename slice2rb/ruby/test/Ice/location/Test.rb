# encoding: utf-8
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file `Test.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

require 'Ice'
require 'Ice/Locator.rb'

module ::Test

    if not defined?(::Test::TestLocatorRegistry_Mixin)

        module ::Test::TestLocatorRegistry_Mixin
        end
        module TestLocatorRegistryPrx_mixin
            include ::Ice::LocatorRegistryPrx_mixin

            def addObject(obj, context=nil)
                TestLocatorRegistryPrx_mixin::OP_addObject.invoke(self, [obj], context)
            end
        end

        class TestLocatorRegistryPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include TestLocatorRegistryPrx_mixin
        end

        if not defined?(::Test::T_TestLocatorRegistryPrx)
            T_TestLocatorRegistry = ::Ice::__declareClass('::Test::TestLocatorRegistry')
            T_TestLocatorRegistryPrx = ::Ice::__declareProxy('::Test::TestLocatorRegistry')
        end

        T_TestLocatorRegistryPrx.defineProxy(TestLocatorRegistryPrx, nil, [::Ice::T_LocatorRegistryPrx])

        TestLocatorRegistryPrx_mixin::OP_addObject = ::Ice::__defineOperation('addObject', ::Ice::OperationMode::Normal, false, nil, [[::Ice::T_ObjectPrx, false, 0]], [], nil, [])
    end

    if not defined?(::Test::ServerManager_Mixin)

        module ::Test::ServerManager_Mixin
        end
        module ServerManagerPrx_mixin

            def startServer(context=nil)
                ServerManagerPrx_mixin::OP_startServer.invoke(self, [], context)
            end

            def shutdown(context=nil)
                ServerManagerPrx_mixin::OP_shutdown.invoke(self, [], context)
            end
        end

        class ServerManagerPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include ServerManagerPrx_mixin
        end

        if not defined?(::Test::T_ServerManagerPrx)
            T_ServerManager = ::Ice::__declareClass('::Test::ServerManager')
            T_ServerManagerPrx = ::Ice::__declareProxy('::Test::ServerManager')
        end

        T_ServerManagerPrx.defineProxy(ServerManagerPrx, nil, [])

        ServerManagerPrx_mixin::OP_startServer = ::Ice::__defineOperation('startServer', ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        ServerManagerPrx_mixin::OP_shutdown = ::Ice::__defineOperation('shutdown', ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
    end

    if not defined?(::Test::Hello_Mixin)

        module ::Test::Hello_Mixin
        end
        module HelloPrx_mixin

            def sayHello(context=nil)
                HelloPrx_mixin::OP_sayHello.invoke(self, [], context)
            end
        end

        class HelloPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include HelloPrx_mixin
        end

        if not defined?(::Test::T_HelloPrx)
            T_Hello = ::Ice::__declareClass('::Test::Hello')
            T_HelloPrx = ::Ice::__declareProxy('::Test::Hello')
        end

        T_HelloPrx.defineProxy(HelloPrx, nil, [])

        HelloPrx_mixin::OP_sayHello = ::Ice::__defineOperation('sayHello', ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
    end

    if not defined?(::Test::TestIntf_Mixin)

        module ::Test::TestIntf_Mixin
        end
        module TestIntfPrx_mixin

            def shutdown(context=nil)
                TestIntfPrx_mixin::OP_shutdown.invoke(self, [], context)
            end

            def getHello(context=nil)
                TestIntfPrx_mixin::OP_getHello.invoke(self, [], context)
            end

            def migrateHello(context=nil)
                TestIntfPrx_mixin::OP_migrateHello.invoke(self, [], context)
            end
        end

        class TestIntfPrx < ::Ice::ObjectPrx
            include ::Ice::Proxy_mixin
            include TestIntfPrx_mixin
        end

        if not defined?(::Test::T_TestIntfPrx)
            T_TestIntf = ::Ice::__declareClass('::Test::TestIntf')
            T_TestIntfPrx = ::Ice::__declareProxy('::Test::TestIntf')
        end

        T_TestIntfPrx.defineProxy(TestIntfPrx, nil, [])

        TestIntfPrx_mixin::OP_shutdown = ::Ice::__defineOperation('shutdown', ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
        TestIntfPrx_mixin::OP_getHello = ::Ice::__defineOperation('getHello', ::Ice::OperationMode::Normal, false, nil, [], [], [::Test::T_HelloPrx, false, 0], [])
        TestIntfPrx_mixin::OP_migrateHello = ::Ice::__defineOperation('migrateHello', ::Ice::OperationMode::Normal, false, nil, [], [], nil, [])
    end
end
